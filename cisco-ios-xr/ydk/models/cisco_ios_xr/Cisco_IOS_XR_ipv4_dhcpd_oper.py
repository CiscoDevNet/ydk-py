""" Cisco_IOS_XR_ipv4_dhcpd_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv4\-dhcpd package operational data.

This module contains definitions
for the following management objects\:
  dhcp\-client\: DHCP client operational data
  ipv4\-dhcpd\: ipv4 dhcpd

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class BagDhcpdIntfSrgRole(Enum):
    """
    BagDhcpdIntfSrgRole

    Bag dhcpd intf srg role

    .. data:: none = 0

    	DHCPv4 Interface SRG role NONE

    .. data:: master = 1

    	DHCPv4 Interface SRG role Master

    .. data:: slave = 2

    	DHCPv4 Interface SRG role Slave

    """

    none = Enum.YLeaf(0, "none")

    master = Enum.YLeaf(1, "master")

    slave = Enum.YLeaf(2, "slave")


class BagDhcpdProxyState(Enum):
    """
    BagDhcpdProxyState

    Bag dhcpd proxy state

    .. data:: initializing = 0

    	Initializing

    .. data:: selecting = 1

    	Selecting

    .. data:: requesting = 2

    	Requesting

    .. data:: bound = 3

    	Bound

    .. data:: renewing = 4

    	Renewing

    .. data:: informing = 5

    	Informing

    .. data:: deleting = 6

    	Deleting

    .. data:: create_dpm = 7

    	Create dpm

    .. data:: offer_sent = 8

    	Offer sent

    .. data:: update_dpm = 9

    	Update dpm

    .. data:: route_install = 10

    	Route install

    .. data:: disc_dpm = 11

    	Disc dpm

    .. data:: renew_new_intf = 12

    	Renew new intf

    .. data:: other_intf_dpm = 13

    	Other intf dpm

    .. data:: request_dpm = 14

    	Request dpm

    .. data:: change_addr_dpm = 15

    	Change addr dpm

    .. data:: max = 16

    	Max

    """

    initializing = Enum.YLeaf(0, "initializing")

    selecting = Enum.YLeaf(1, "selecting")

    requesting = Enum.YLeaf(2, "requesting")

    bound = Enum.YLeaf(3, "bound")

    renewing = Enum.YLeaf(4, "renewing")

    informing = Enum.YLeaf(5, "informing")

    deleting = Enum.YLeaf(6, "deleting")

    create_dpm = Enum.YLeaf(7, "create-dpm")

    offer_sent = Enum.YLeaf(8, "offer-sent")

    update_dpm = Enum.YLeaf(9, "update-dpm")

    route_install = Enum.YLeaf(10, "route-install")

    disc_dpm = Enum.YLeaf(11, "disc-dpm")

    renew_new_intf = Enum.YLeaf(12, "renew-new-intf")

    other_intf_dpm = Enum.YLeaf(13, "other-intf-dpm")

    request_dpm = Enum.YLeaf(14, "request-dpm")

    change_addr_dpm = Enum.YLeaf(15, "change-addr-dpm")

    max = Enum.YLeaf(16, "max")


class BroadcastFlag(Enum):
    """
    BroadcastFlag

    Proxy profile broadcast flag

    .. data:: ignore = 0

    	Broadcast policy ignore

    .. data:: check = 1

    	Broadcast policy check

    .. data:: unicast_always = 2

    	Broadcast policy unicast always

    """

    ignore = Enum.YLeaf(0, "ignore")

    check = Enum.YLeaf(1, "check")

    unicast_always = Enum.YLeaf(2, "unicast-always")


class DhcpIssuPhase(Enum):
    """
    DhcpIssuPhase

    Dhcp issu phase

    .. data:: phase_not_started = 0

    	An ISSU event has not started

    .. data:: phase_load = 1

    	ISSU Load Phase

    .. data:: phase_run = 2

    	ISSU Run Phase

    .. data:: phase_completed = 3

    	An ISSU event has completed successfully

    .. data:: phase_aborted = 4

    	An ISSU event has aborted

    """

    phase_not_started = Enum.YLeaf(0, "phase-not-started")

    phase_load = Enum.YLeaf(1, "phase-load")

    phase_run = Enum.YLeaf(2, "phase-run")

    phase_completed = Enum.YLeaf(3, "phase-completed")

    phase_aborted = Enum.YLeaf(4, "phase-aborted")


class DhcpIssuRole(Enum):
    """
    DhcpIssuRole

    Dhcp issu role

    .. data:: role_primary = 0

    	Primary role

    .. data:: role_secondary = 1

    	Secondary role

    """

    role_primary = Enum.YLeaf(0, "role-primary")

    role_secondary = Enum.YLeaf(1, "role-secondary")


class DhcpIssuVersion(Enum):
    """
    DhcpIssuVersion

    Dhcp issu version

    .. data:: version1 = 0

    	Version 1

    .. data:: version2 = 1

    	Version 2

    """

    version1 = Enum.YLeaf(0, "version1")

    version2 = Enum.YLeaf(1, "version2")


class DhcpcIpv4State(Enum):
    """
    DhcpcIpv4State

    Dhcp Client IPv4 State

    .. data:: init = 0

    	Init state

    .. data:: init_reboot = 1

    	Init Reboot state

    .. data:: rebooting = 2

    	Rebooting state

    .. data:: selecting = 3

    	Selecting state

    .. data:: requesting = 4

    	Requesting state

    .. data:: bound = 5

    	Bound state

    .. data:: renewing = 6

    	Renewing state

    .. data:: rebinding = 7

    	Rebinding state

    .. data:: invalid = 8

    	Invalid state

    """

    init = Enum.YLeaf(0, "init")

    init_reboot = Enum.YLeaf(1, "init-reboot")

    rebooting = Enum.YLeaf(2, "rebooting")

    selecting = Enum.YLeaf(3, "selecting")

    requesting = Enum.YLeaf(4, "requesting")

    bound = Enum.YLeaf(5, "bound")

    renewing = Enum.YLeaf(6, "renewing")

    rebinding = Enum.YLeaf(7, "rebinding")

    invalid = Enum.YLeaf(8, "invalid")


class ProxyLeaseLimit(Enum):
    """
    ProxyLeaseLimit

    Proxy profile lease limit type

    .. data:: none = 0

    	Proxy lease limit type none

    .. data:: interface = 1

    	Proxy lease limit type interface

    .. data:: circuit_id = 2

    	Proxy lease limit type circuit ID

    .. data:: remote_id = 3

    	Proxy lease limit type remote ID

    .. data:: remote_id_circuit_id = 4

    	Proxy lease limit type remote ID + circuit ID

    """

    none = Enum.YLeaf(0, "none")

    interface = Enum.YLeaf(1, "interface")

    circuit_id = Enum.YLeaf(2, "circuit-id")

    remote_id = Enum.YLeaf(3, "remote-id")

    remote_id_circuit_id = Enum.YLeaf(4, "remote-id-circuit-id")


class RelayInfoAuthenticate(Enum):
    """
    RelayInfoAuthenticate

    Profile relay authenticate

    .. data:: received = 0

    	Relay authenticate received

    .. data:: inserted = 1

    	Relay authenticate inserted

    """

    received = Enum.YLeaf(0, "received")

    inserted = Enum.YLeaf(1, "inserted")


class RelayInfoPolicy(Enum):
    """
    RelayInfoPolicy

    Proxy profile relay policy

    .. data:: replace = 0

    	Relay policy replace

    .. data:: keep = 1

    	Relay policy keep

    .. data:: drop = 2

    	Relay policy drop

    .. data:: encapsulate = 3

    	Relay policy encapsulate

    """

    replace = Enum.YLeaf(0, "replace")

    keep = Enum.YLeaf(1, "keep")

    drop = Enum.YLeaf(2, "drop")

    encapsulate = Enum.YLeaf(3, "encapsulate")


class RelayInfoVpnMode(Enum):
    """
    RelayInfoVpnMode

    Relay Info Vpn Mode

    .. data:: rfc = 0

    	RFC Mode

    .. data:: cisco = 1

    	Cisco Mode

    """

    rfc = Enum.YLeaf(0, "rfc")

    cisco = Enum.YLeaf(1, "cisco")



class DhcpClient(Entity):
    """
    DHCP client operational data
    
    .. attribute:: nodes
    
    	DHCP client list of nodes
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpClient.Nodes>`
    
    

    """

    _prefix = 'ipv4-dhcpd-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(DhcpClient, self).__init__()
        self._top_entity = None

        self.yang_name = "dhcp-client"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-dhcpd-oper"

        self.nodes = DhcpClient.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")


    class Nodes(Entity):
        """
        DHCP client list of nodes
        
        .. attribute:: node
        
        	DHCP client particular node name
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpClient.Nodes.Node>`
        
        

        """

        _prefix = 'ipv4-dhcpd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(DhcpClient.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "dhcp-client"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(DhcpClient.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(DhcpClient.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            DHCP client particular node name
            
            .. attribute:: node_name  <key>
            
            	Node name
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: client_stats
            
            	IPv4 DHCP client statistics table
            	**type**\:   :py:class:`ClientStats <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpClient.Nodes.Node.ClientStats>`
            
            .. attribute:: clients
            
            	IPv4 DHCP client table
            	**type**\:   :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpClient.Nodes.Node.Clients>`
            
            

            """

            _prefix = 'ipv4-dhcpd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(DhcpClient.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.node_name = YLeaf(YType.str, "node-name")

                self.client_stats = DhcpClient.Nodes.Node.ClientStats()
                self.client_stats.parent = self
                self._children_name_map["client_stats"] = "client-stats"
                self._children_yang_names.add("client-stats")

                self.clients = DhcpClient.Nodes.Node.Clients()
                self.clients.parent = self
                self._children_name_map["clients"] = "clients"
                self._children_yang_names.add("clients")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(DhcpClient.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(DhcpClient.Nodes.Node, self).__setattr__(name, value)


            class ClientStats(Entity):
                """
                IPv4 DHCP client statistics table
                
                .. attribute:: client_stat
                
                	DHCP client binding statistics
                	**type**\: list of    :py:class:`ClientStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpClient.Nodes.Node.ClientStats.ClientStat>`
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(DhcpClient.Nodes.Node.ClientStats, self).__init__()

                    self.yang_name = "client-stats"
                    self.yang_parent_name = "node"

                    self.client_stat = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(DhcpClient.Nodes.Node.ClientStats, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(DhcpClient.Nodes.Node.ClientStats, self).__setattr__(name, value)


                class ClientStat(Entity):
                    """
                    DHCP client binding statistics
                    
                    .. attribute:: client_ifhandle  <key>
                    
                    	Client Ifhandle
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: interface_name
                    
                    	Dhcp Client interface name
                    	**type**\:  str
                    
                    	**length:** 0..65
                    
                    .. attribute:: num_broadcast_failed
                    
                    	Number of broadcast packet send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_broadcast_packet_sent_success
                    
                    	Number of broadcast packet sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_create_event_received
                    
                    	Number of create client event received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_declines_failed
                    
                    	Number of decline send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_declines_sent_successfully
                    
                    	Number of declines sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_delete_event_received
                    
                    	Number of delete client event received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_discovers_failed
                    
                    	Number of discover send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_discovers_sent_successfully
                    
                    	Number of discovers sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_events_received
                    
                    	Number of events received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_init_timer_eventi
                    
                    	Number of init timer event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_init_timer_start
                    
                    	Number of init timer starts
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_init_timer_stop
                    
                    	Number of init timer stops
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_invalid_acks
                    
                    	Number of invalid acks received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_invalid_events
                    
                    	Number of invalid events received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_invalid_nacks
                    
                    	Number of invalid nacks received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_invalid_offers
                    
                    	Number of invalid offers received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_invalid_packets
                    
                    	Number of invalid packets dropped
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_lease_timer_event
                    
                    	Number of Lease timer event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_lease_timer_start
                    
                    	Number of Lease timer starts
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_lease_timer_stop
                    
                    	Number of Lease timer stops
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_packet_event_received
                    
                    	Number of packet event received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_rebinds_failed
                    
                    	Number of rebind send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_rebinds_sent_successfully
                    
                    	Number of rebinds sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_reboot_event_received
                    
                    	Number of client rebooted event received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_reinit_event_received
                    
                    	Number of reinit client event received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_releases_failed
                    
                    	Number of release send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_releases_sent_successfully
                    
                    	Number of releases sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_renews_failed
                    
                    	Number of renew send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_renews_sent_successfully
                    
                    	Number of renews sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_request_after_reboot_failed
                    
                    	Number of requests sent after reboot failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_request_after_reboot_sent
                    
                    	Number of requests sent after reboot
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_requests_failed
                    
                    	Number of request send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_requests_sent_successfully
                    
                    	Number of requests sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_t1_timer_event
                    
                    	Number of T1 timer event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_t1_timer_start
                    
                    	Number of T1 timer starts
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_t1_timer_stop
                    
                    	Number of T1 timer stops
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_t2_timer_event
                    
                    	Number of T2 timer event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_t2_timer_start
                    
                    	Number of T2 timer starts
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_t2_timer_stop
                    
                    	Number of T2 timer stops
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_unicast_failed
                    
                    	Number of unicast packet send failed
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_unicast_packet_sent_successfully
                    
                    	Number of unicast packet sent successfully
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_valid_acks_received
                    
                    	Number of valid acks received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_valid_nacks_received
                    
                    	Number of valid nacks received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_valid_offers_received
                    
                    	Number of valid offers received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: num_xid_mismatch
                    
                    	Number of XID mismatch packets received
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(DhcpClient.Nodes.Node.ClientStats.ClientStat, self).__init__()

                        self.yang_name = "client-stat"
                        self.yang_parent_name = "client-stats"

                        self.client_ifhandle = YLeaf(YType.str, "client-ifhandle")

                        self.interface_name = YLeaf(YType.str, "interface-name")

                        self.num_broadcast_failed = YLeaf(YType.uint32, "num-broadcast-failed")

                        self.num_broadcast_packet_sent_success = YLeaf(YType.uint32, "num-broadcast-packet-sent-success")

                        self.num_create_event_received = YLeaf(YType.uint32, "num-create-event-received")

                        self.num_declines_failed = YLeaf(YType.uint32, "num-declines-failed")

                        self.num_declines_sent_successfully = YLeaf(YType.uint32, "num-declines-sent-successfully")

                        self.num_delete_event_received = YLeaf(YType.uint32, "num-delete-event-received")

                        self.num_discovers_failed = YLeaf(YType.uint32, "num-discovers-failed")

                        self.num_discovers_sent_successfully = YLeaf(YType.uint32, "num-discovers-sent-successfully")

                        self.num_events_received = YLeaf(YType.uint32, "num-events-received")

                        self.num_init_timer_eventi = YLeaf(YType.uint32, "num-init-timer-eventi")

                        self.num_init_timer_start = YLeaf(YType.uint32, "num-init-timer-start")

                        self.num_init_timer_stop = YLeaf(YType.uint32, "num-init-timer-stop")

                        self.num_invalid_acks = YLeaf(YType.uint32, "num-invalid-acks")

                        self.num_invalid_events = YLeaf(YType.uint32, "num-invalid-events")

                        self.num_invalid_nacks = YLeaf(YType.uint32, "num-invalid-nacks")

                        self.num_invalid_offers = YLeaf(YType.uint32, "num-invalid-offers")

                        self.num_invalid_packets = YLeaf(YType.uint32, "num-invalid-packets")

                        self.num_lease_timer_event = YLeaf(YType.uint32, "num-lease-timer-event")

                        self.num_lease_timer_start = YLeaf(YType.uint32, "num-lease-timer-start")

                        self.num_lease_timer_stop = YLeaf(YType.uint32, "num-lease-timer-stop")

                        self.num_packet_event_received = YLeaf(YType.uint32, "num-packet-event-received")

                        self.num_rebinds_failed = YLeaf(YType.uint32, "num-rebinds-failed")

                        self.num_rebinds_sent_successfully = YLeaf(YType.uint32, "num-rebinds-sent-successfully")

                        self.num_reboot_event_received = YLeaf(YType.uint32, "num-reboot-event-received")

                        self.num_reinit_event_received = YLeaf(YType.uint32, "num-reinit-event-received")

                        self.num_releases_failed = YLeaf(YType.uint32, "num-releases-failed")

                        self.num_releases_sent_successfully = YLeaf(YType.uint32, "num-releases-sent-successfully")

                        self.num_renews_failed = YLeaf(YType.uint32, "num-renews-failed")

                        self.num_renews_sent_successfully = YLeaf(YType.uint32, "num-renews-sent-successfully")

                        self.num_request_after_reboot_failed = YLeaf(YType.uint32, "num-request-after-reboot-failed")

                        self.num_request_after_reboot_sent = YLeaf(YType.uint32, "num-request-after-reboot-sent")

                        self.num_requests_failed = YLeaf(YType.uint32, "num-requests-failed")

                        self.num_requests_sent_successfully = YLeaf(YType.uint32, "num-requests-sent-successfully")

                        self.num_t1_timer_event = YLeaf(YType.uint32, "num-t1-timer-event")

                        self.num_t1_timer_start = YLeaf(YType.uint32, "num-t1-timer-start")

                        self.num_t1_timer_stop = YLeaf(YType.uint32, "num-t1-timer-stop")

                        self.num_t2_timer_event = YLeaf(YType.uint32, "num-t2-timer-event")

                        self.num_t2_timer_start = YLeaf(YType.uint32, "num-t2-timer-start")

                        self.num_t2_timer_stop = YLeaf(YType.uint32, "num-t2-timer-stop")

                        self.num_unicast_failed = YLeaf(YType.uint32, "num-unicast-failed")

                        self.num_unicast_packet_sent_successfully = YLeaf(YType.uint32, "num-unicast-packet-sent-successfully")

                        self.num_valid_acks_received = YLeaf(YType.uint32, "num-valid-acks-received")

                        self.num_valid_nacks_received = YLeaf(YType.uint32, "num-valid-nacks-received")

                        self.num_valid_offers_received = YLeaf(YType.uint32, "num-valid-offers-received")

                        self.num_xid_mismatch = YLeaf(YType.uint32, "num-xid-mismatch")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("client_ifhandle",
                                        "interface_name",
                                        "num_broadcast_failed",
                                        "num_broadcast_packet_sent_success",
                                        "num_create_event_received",
                                        "num_declines_failed",
                                        "num_declines_sent_successfully",
                                        "num_delete_event_received",
                                        "num_discovers_failed",
                                        "num_discovers_sent_successfully",
                                        "num_events_received",
                                        "num_init_timer_eventi",
                                        "num_init_timer_start",
                                        "num_init_timer_stop",
                                        "num_invalid_acks",
                                        "num_invalid_events",
                                        "num_invalid_nacks",
                                        "num_invalid_offers",
                                        "num_invalid_packets",
                                        "num_lease_timer_event",
                                        "num_lease_timer_start",
                                        "num_lease_timer_stop",
                                        "num_packet_event_received",
                                        "num_rebinds_failed",
                                        "num_rebinds_sent_successfully",
                                        "num_reboot_event_received",
                                        "num_reinit_event_received",
                                        "num_releases_failed",
                                        "num_releases_sent_successfully",
                                        "num_renews_failed",
                                        "num_renews_sent_successfully",
                                        "num_request_after_reboot_failed",
                                        "num_request_after_reboot_sent",
                                        "num_requests_failed",
                                        "num_requests_sent_successfully",
                                        "num_t1_timer_event",
                                        "num_t1_timer_start",
                                        "num_t1_timer_stop",
                                        "num_t2_timer_event",
                                        "num_t2_timer_start",
                                        "num_t2_timer_stop",
                                        "num_unicast_failed",
                                        "num_unicast_packet_sent_successfully",
                                        "num_valid_acks_received",
                                        "num_valid_nacks_received",
                                        "num_valid_offers_received",
                                        "num_xid_mismatch") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(DhcpClient.Nodes.Node.ClientStats.ClientStat, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(DhcpClient.Nodes.Node.ClientStats.ClientStat, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.client_ifhandle.is_set or
                            self.interface_name.is_set or
                            self.num_broadcast_failed.is_set or
                            self.num_broadcast_packet_sent_success.is_set or
                            self.num_create_event_received.is_set or
                            self.num_declines_failed.is_set or
                            self.num_declines_sent_successfully.is_set or
                            self.num_delete_event_received.is_set or
                            self.num_discovers_failed.is_set or
                            self.num_discovers_sent_successfully.is_set or
                            self.num_events_received.is_set or
                            self.num_init_timer_eventi.is_set or
                            self.num_init_timer_start.is_set or
                            self.num_init_timer_stop.is_set or
                            self.num_invalid_acks.is_set or
                            self.num_invalid_events.is_set or
                            self.num_invalid_nacks.is_set or
                            self.num_invalid_offers.is_set or
                            self.num_invalid_packets.is_set or
                            self.num_lease_timer_event.is_set or
                            self.num_lease_timer_start.is_set or
                            self.num_lease_timer_stop.is_set or
                            self.num_packet_event_received.is_set or
                            self.num_rebinds_failed.is_set or
                            self.num_rebinds_sent_successfully.is_set or
                            self.num_reboot_event_received.is_set or
                            self.num_reinit_event_received.is_set or
                            self.num_releases_failed.is_set or
                            self.num_releases_sent_successfully.is_set or
                            self.num_renews_failed.is_set or
                            self.num_renews_sent_successfully.is_set or
                            self.num_request_after_reboot_failed.is_set or
                            self.num_request_after_reboot_sent.is_set or
                            self.num_requests_failed.is_set or
                            self.num_requests_sent_successfully.is_set or
                            self.num_t1_timer_event.is_set or
                            self.num_t1_timer_start.is_set or
                            self.num_t1_timer_stop.is_set or
                            self.num_t2_timer_event.is_set or
                            self.num_t2_timer_start.is_set or
                            self.num_t2_timer_stop.is_set or
                            self.num_unicast_failed.is_set or
                            self.num_unicast_packet_sent_successfully.is_set or
                            self.num_valid_acks_received.is_set or
                            self.num_valid_nacks_received.is_set or
                            self.num_valid_offers_received.is_set or
                            self.num_xid_mismatch.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.client_ifhandle.yfilter != YFilter.not_set or
                            self.interface_name.yfilter != YFilter.not_set or
                            self.num_broadcast_failed.yfilter != YFilter.not_set or
                            self.num_broadcast_packet_sent_success.yfilter != YFilter.not_set or
                            self.num_create_event_received.yfilter != YFilter.not_set or
                            self.num_declines_failed.yfilter != YFilter.not_set or
                            self.num_declines_sent_successfully.yfilter != YFilter.not_set or
                            self.num_delete_event_received.yfilter != YFilter.not_set or
                            self.num_discovers_failed.yfilter != YFilter.not_set or
                            self.num_discovers_sent_successfully.yfilter != YFilter.not_set or
                            self.num_events_received.yfilter != YFilter.not_set or
                            self.num_init_timer_eventi.yfilter != YFilter.not_set or
                            self.num_init_timer_start.yfilter != YFilter.not_set or
                            self.num_init_timer_stop.yfilter != YFilter.not_set or
                            self.num_invalid_acks.yfilter != YFilter.not_set or
                            self.num_invalid_events.yfilter != YFilter.not_set or
                            self.num_invalid_nacks.yfilter != YFilter.not_set or
                            self.num_invalid_offers.yfilter != YFilter.not_set or
                            self.num_invalid_packets.yfilter != YFilter.not_set or
                            self.num_lease_timer_event.yfilter != YFilter.not_set or
                            self.num_lease_timer_start.yfilter != YFilter.not_set or
                            self.num_lease_timer_stop.yfilter != YFilter.not_set or
                            self.num_packet_event_received.yfilter != YFilter.not_set or
                            self.num_rebinds_failed.yfilter != YFilter.not_set or
                            self.num_rebinds_sent_successfully.yfilter != YFilter.not_set or
                            self.num_reboot_event_received.yfilter != YFilter.not_set or
                            self.num_reinit_event_received.yfilter != YFilter.not_set or
                            self.num_releases_failed.yfilter != YFilter.not_set or
                            self.num_releases_sent_successfully.yfilter != YFilter.not_set or
                            self.num_renews_failed.yfilter != YFilter.not_set or
                            self.num_renews_sent_successfully.yfilter != YFilter.not_set or
                            self.num_request_after_reboot_failed.yfilter != YFilter.not_set or
                            self.num_request_after_reboot_sent.yfilter != YFilter.not_set or
                            self.num_requests_failed.yfilter != YFilter.not_set or
                            self.num_requests_sent_successfully.yfilter != YFilter.not_set or
                            self.num_t1_timer_event.yfilter != YFilter.not_set or
                            self.num_t1_timer_start.yfilter != YFilter.not_set or
                            self.num_t1_timer_stop.yfilter != YFilter.not_set or
                            self.num_t2_timer_event.yfilter != YFilter.not_set or
                            self.num_t2_timer_start.yfilter != YFilter.not_set or
                            self.num_t2_timer_stop.yfilter != YFilter.not_set or
                            self.num_unicast_failed.yfilter != YFilter.not_set or
                            self.num_unicast_packet_sent_successfully.yfilter != YFilter.not_set or
                            self.num_valid_acks_received.yfilter != YFilter.not_set or
                            self.num_valid_nacks_received.yfilter != YFilter.not_set or
                            self.num_valid_offers_received.yfilter != YFilter.not_set or
                            self.num_xid_mismatch.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "client-stat" + "[client-ifhandle='" + self.client_ifhandle.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.client_ifhandle.is_set or self.client_ifhandle.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.client_ifhandle.get_name_leafdata())
                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.interface_name.get_name_leafdata())
                        if (self.num_broadcast_failed.is_set or self.num_broadcast_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_broadcast_failed.get_name_leafdata())
                        if (self.num_broadcast_packet_sent_success.is_set or self.num_broadcast_packet_sent_success.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_broadcast_packet_sent_success.get_name_leafdata())
                        if (self.num_create_event_received.is_set or self.num_create_event_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_create_event_received.get_name_leafdata())
                        if (self.num_declines_failed.is_set or self.num_declines_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_declines_failed.get_name_leafdata())
                        if (self.num_declines_sent_successfully.is_set or self.num_declines_sent_successfully.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_declines_sent_successfully.get_name_leafdata())
                        if (self.num_delete_event_received.is_set or self.num_delete_event_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_delete_event_received.get_name_leafdata())
                        if (self.num_discovers_failed.is_set or self.num_discovers_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_discovers_failed.get_name_leafdata())
                        if (self.num_discovers_sent_successfully.is_set or self.num_discovers_sent_successfully.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_discovers_sent_successfully.get_name_leafdata())
                        if (self.num_events_received.is_set or self.num_events_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_events_received.get_name_leafdata())
                        if (self.num_init_timer_eventi.is_set or self.num_init_timer_eventi.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_init_timer_eventi.get_name_leafdata())
                        if (self.num_init_timer_start.is_set or self.num_init_timer_start.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_init_timer_start.get_name_leafdata())
                        if (self.num_init_timer_stop.is_set or self.num_init_timer_stop.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_init_timer_stop.get_name_leafdata())
                        if (self.num_invalid_acks.is_set or self.num_invalid_acks.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_invalid_acks.get_name_leafdata())
                        if (self.num_invalid_events.is_set or self.num_invalid_events.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_invalid_events.get_name_leafdata())
                        if (self.num_invalid_nacks.is_set or self.num_invalid_nacks.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_invalid_nacks.get_name_leafdata())
                        if (self.num_invalid_offers.is_set or self.num_invalid_offers.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_invalid_offers.get_name_leafdata())
                        if (self.num_invalid_packets.is_set or self.num_invalid_packets.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_invalid_packets.get_name_leafdata())
                        if (self.num_lease_timer_event.is_set or self.num_lease_timer_event.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_lease_timer_event.get_name_leafdata())
                        if (self.num_lease_timer_start.is_set or self.num_lease_timer_start.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_lease_timer_start.get_name_leafdata())
                        if (self.num_lease_timer_stop.is_set or self.num_lease_timer_stop.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_lease_timer_stop.get_name_leafdata())
                        if (self.num_packet_event_received.is_set or self.num_packet_event_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_packet_event_received.get_name_leafdata())
                        if (self.num_rebinds_failed.is_set or self.num_rebinds_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_rebinds_failed.get_name_leafdata())
                        if (self.num_rebinds_sent_successfully.is_set or self.num_rebinds_sent_successfully.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_rebinds_sent_successfully.get_name_leafdata())
                        if (self.num_reboot_event_received.is_set or self.num_reboot_event_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_reboot_event_received.get_name_leafdata())
                        if (self.num_reinit_event_received.is_set or self.num_reinit_event_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_reinit_event_received.get_name_leafdata())
                        if (self.num_releases_failed.is_set or self.num_releases_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_releases_failed.get_name_leafdata())
                        if (self.num_releases_sent_successfully.is_set or self.num_releases_sent_successfully.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_releases_sent_successfully.get_name_leafdata())
                        if (self.num_renews_failed.is_set or self.num_renews_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_renews_failed.get_name_leafdata())
                        if (self.num_renews_sent_successfully.is_set or self.num_renews_sent_successfully.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_renews_sent_successfully.get_name_leafdata())
                        if (self.num_request_after_reboot_failed.is_set or self.num_request_after_reboot_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_request_after_reboot_failed.get_name_leafdata())
                        if (self.num_request_after_reboot_sent.is_set or self.num_request_after_reboot_sent.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_request_after_reboot_sent.get_name_leafdata())
                        if (self.num_requests_failed.is_set or self.num_requests_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_requests_failed.get_name_leafdata())
                        if (self.num_requests_sent_successfully.is_set or self.num_requests_sent_successfully.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_requests_sent_successfully.get_name_leafdata())
                        if (self.num_t1_timer_event.is_set or self.num_t1_timer_event.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_t1_timer_event.get_name_leafdata())
                        if (self.num_t1_timer_start.is_set or self.num_t1_timer_start.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_t1_timer_start.get_name_leafdata())
                        if (self.num_t1_timer_stop.is_set or self.num_t1_timer_stop.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_t1_timer_stop.get_name_leafdata())
                        if (self.num_t2_timer_event.is_set or self.num_t2_timer_event.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_t2_timer_event.get_name_leafdata())
                        if (self.num_t2_timer_start.is_set or self.num_t2_timer_start.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_t2_timer_start.get_name_leafdata())
                        if (self.num_t2_timer_stop.is_set or self.num_t2_timer_stop.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_t2_timer_stop.get_name_leafdata())
                        if (self.num_unicast_failed.is_set or self.num_unicast_failed.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_unicast_failed.get_name_leafdata())
                        if (self.num_unicast_packet_sent_successfully.is_set or self.num_unicast_packet_sent_successfully.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_unicast_packet_sent_successfully.get_name_leafdata())
                        if (self.num_valid_acks_received.is_set or self.num_valid_acks_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_valid_acks_received.get_name_leafdata())
                        if (self.num_valid_nacks_received.is_set or self.num_valid_nacks_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_valid_nacks_received.get_name_leafdata())
                        if (self.num_valid_offers_received.is_set or self.num_valid_offers_received.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_valid_offers_received.get_name_leafdata())
                        if (self.num_xid_mismatch.is_set or self.num_xid_mismatch.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.num_xid_mismatch.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "client-ifhandle" or name == "interface-name" or name == "num-broadcast-failed" or name == "num-broadcast-packet-sent-success" or name == "num-create-event-received" or name == "num-declines-failed" or name == "num-declines-sent-successfully" or name == "num-delete-event-received" or name == "num-discovers-failed" or name == "num-discovers-sent-successfully" or name == "num-events-received" or name == "num-init-timer-eventi" or name == "num-init-timer-start" or name == "num-init-timer-stop" or name == "num-invalid-acks" or name == "num-invalid-events" or name == "num-invalid-nacks" or name == "num-invalid-offers" or name == "num-invalid-packets" or name == "num-lease-timer-event" or name == "num-lease-timer-start" or name == "num-lease-timer-stop" or name == "num-packet-event-received" or name == "num-rebinds-failed" or name == "num-rebinds-sent-successfully" or name == "num-reboot-event-received" or name == "num-reinit-event-received" or name == "num-releases-failed" or name == "num-releases-sent-successfully" or name == "num-renews-failed" or name == "num-renews-sent-successfully" or name == "num-request-after-reboot-failed" or name == "num-request-after-reboot-sent" or name == "num-requests-failed" or name == "num-requests-sent-successfully" or name == "num-t1-timer-event" or name == "num-t1-timer-start" or name == "num-t1-timer-stop" or name == "num-t2-timer-event" or name == "num-t2-timer-start" or name == "num-t2-timer-stop" or name == "num-unicast-failed" or name == "num-unicast-packet-sent-successfully" or name == "num-valid-acks-received" or name == "num-valid-nacks-received" or name == "num-valid-offers-received" or name == "num-xid-mismatch"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "client-ifhandle"):
                            self.client_ifhandle = value
                            self.client_ifhandle.value_namespace = name_space
                            self.client_ifhandle.value_namespace_prefix = name_space_prefix
                        if(value_path == "interface-name"):
                            self.interface_name = value
                            self.interface_name.value_namespace = name_space
                            self.interface_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-broadcast-failed"):
                            self.num_broadcast_failed = value
                            self.num_broadcast_failed.value_namespace = name_space
                            self.num_broadcast_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-broadcast-packet-sent-success"):
                            self.num_broadcast_packet_sent_success = value
                            self.num_broadcast_packet_sent_success.value_namespace = name_space
                            self.num_broadcast_packet_sent_success.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-create-event-received"):
                            self.num_create_event_received = value
                            self.num_create_event_received.value_namespace = name_space
                            self.num_create_event_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-declines-failed"):
                            self.num_declines_failed = value
                            self.num_declines_failed.value_namespace = name_space
                            self.num_declines_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-declines-sent-successfully"):
                            self.num_declines_sent_successfully = value
                            self.num_declines_sent_successfully.value_namespace = name_space
                            self.num_declines_sent_successfully.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-delete-event-received"):
                            self.num_delete_event_received = value
                            self.num_delete_event_received.value_namespace = name_space
                            self.num_delete_event_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-discovers-failed"):
                            self.num_discovers_failed = value
                            self.num_discovers_failed.value_namespace = name_space
                            self.num_discovers_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-discovers-sent-successfully"):
                            self.num_discovers_sent_successfully = value
                            self.num_discovers_sent_successfully.value_namespace = name_space
                            self.num_discovers_sent_successfully.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-events-received"):
                            self.num_events_received = value
                            self.num_events_received.value_namespace = name_space
                            self.num_events_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-init-timer-eventi"):
                            self.num_init_timer_eventi = value
                            self.num_init_timer_eventi.value_namespace = name_space
                            self.num_init_timer_eventi.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-init-timer-start"):
                            self.num_init_timer_start = value
                            self.num_init_timer_start.value_namespace = name_space
                            self.num_init_timer_start.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-init-timer-stop"):
                            self.num_init_timer_stop = value
                            self.num_init_timer_stop.value_namespace = name_space
                            self.num_init_timer_stop.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-invalid-acks"):
                            self.num_invalid_acks = value
                            self.num_invalid_acks.value_namespace = name_space
                            self.num_invalid_acks.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-invalid-events"):
                            self.num_invalid_events = value
                            self.num_invalid_events.value_namespace = name_space
                            self.num_invalid_events.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-invalid-nacks"):
                            self.num_invalid_nacks = value
                            self.num_invalid_nacks.value_namespace = name_space
                            self.num_invalid_nacks.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-invalid-offers"):
                            self.num_invalid_offers = value
                            self.num_invalid_offers.value_namespace = name_space
                            self.num_invalid_offers.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-invalid-packets"):
                            self.num_invalid_packets = value
                            self.num_invalid_packets.value_namespace = name_space
                            self.num_invalid_packets.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-lease-timer-event"):
                            self.num_lease_timer_event = value
                            self.num_lease_timer_event.value_namespace = name_space
                            self.num_lease_timer_event.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-lease-timer-start"):
                            self.num_lease_timer_start = value
                            self.num_lease_timer_start.value_namespace = name_space
                            self.num_lease_timer_start.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-lease-timer-stop"):
                            self.num_lease_timer_stop = value
                            self.num_lease_timer_stop.value_namespace = name_space
                            self.num_lease_timer_stop.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-packet-event-received"):
                            self.num_packet_event_received = value
                            self.num_packet_event_received.value_namespace = name_space
                            self.num_packet_event_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-rebinds-failed"):
                            self.num_rebinds_failed = value
                            self.num_rebinds_failed.value_namespace = name_space
                            self.num_rebinds_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-rebinds-sent-successfully"):
                            self.num_rebinds_sent_successfully = value
                            self.num_rebinds_sent_successfully.value_namespace = name_space
                            self.num_rebinds_sent_successfully.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-reboot-event-received"):
                            self.num_reboot_event_received = value
                            self.num_reboot_event_received.value_namespace = name_space
                            self.num_reboot_event_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-reinit-event-received"):
                            self.num_reinit_event_received = value
                            self.num_reinit_event_received.value_namespace = name_space
                            self.num_reinit_event_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-releases-failed"):
                            self.num_releases_failed = value
                            self.num_releases_failed.value_namespace = name_space
                            self.num_releases_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-releases-sent-successfully"):
                            self.num_releases_sent_successfully = value
                            self.num_releases_sent_successfully.value_namespace = name_space
                            self.num_releases_sent_successfully.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-renews-failed"):
                            self.num_renews_failed = value
                            self.num_renews_failed.value_namespace = name_space
                            self.num_renews_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-renews-sent-successfully"):
                            self.num_renews_sent_successfully = value
                            self.num_renews_sent_successfully.value_namespace = name_space
                            self.num_renews_sent_successfully.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-request-after-reboot-failed"):
                            self.num_request_after_reboot_failed = value
                            self.num_request_after_reboot_failed.value_namespace = name_space
                            self.num_request_after_reboot_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-request-after-reboot-sent"):
                            self.num_request_after_reboot_sent = value
                            self.num_request_after_reboot_sent.value_namespace = name_space
                            self.num_request_after_reboot_sent.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-requests-failed"):
                            self.num_requests_failed = value
                            self.num_requests_failed.value_namespace = name_space
                            self.num_requests_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-requests-sent-successfully"):
                            self.num_requests_sent_successfully = value
                            self.num_requests_sent_successfully.value_namespace = name_space
                            self.num_requests_sent_successfully.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-t1-timer-event"):
                            self.num_t1_timer_event = value
                            self.num_t1_timer_event.value_namespace = name_space
                            self.num_t1_timer_event.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-t1-timer-start"):
                            self.num_t1_timer_start = value
                            self.num_t1_timer_start.value_namespace = name_space
                            self.num_t1_timer_start.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-t1-timer-stop"):
                            self.num_t1_timer_stop = value
                            self.num_t1_timer_stop.value_namespace = name_space
                            self.num_t1_timer_stop.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-t2-timer-event"):
                            self.num_t2_timer_event = value
                            self.num_t2_timer_event.value_namespace = name_space
                            self.num_t2_timer_event.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-t2-timer-start"):
                            self.num_t2_timer_start = value
                            self.num_t2_timer_start.value_namespace = name_space
                            self.num_t2_timer_start.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-t2-timer-stop"):
                            self.num_t2_timer_stop = value
                            self.num_t2_timer_stop.value_namespace = name_space
                            self.num_t2_timer_stop.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-unicast-failed"):
                            self.num_unicast_failed = value
                            self.num_unicast_failed.value_namespace = name_space
                            self.num_unicast_failed.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-unicast-packet-sent-successfully"):
                            self.num_unicast_packet_sent_successfully = value
                            self.num_unicast_packet_sent_successfully.value_namespace = name_space
                            self.num_unicast_packet_sent_successfully.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-valid-acks-received"):
                            self.num_valid_acks_received = value
                            self.num_valid_acks_received.value_namespace = name_space
                            self.num_valid_acks_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-valid-nacks-received"):
                            self.num_valid_nacks_received = value
                            self.num_valid_nacks_received.value_namespace = name_space
                            self.num_valid_nacks_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-valid-offers-received"):
                            self.num_valid_offers_received = value
                            self.num_valid_offers_received.value_namespace = name_space
                            self.num_valid_offers_received.value_namespace_prefix = name_space_prefix
                        if(value_path == "num-xid-mismatch"):
                            self.num_xid_mismatch = value
                            self.num_xid_mismatch.value_namespace = name_space
                            self.num_xid_mismatch.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.client_stat:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.client_stat:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "client-stats" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "client-stat"):
                        for c in self.client_stat:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = DhcpClient.Nodes.Node.ClientStats.ClientStat()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.client_stat.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "client-stat"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Clients(Entity):
                """
                IPv4 DHCP client table
                
                .. attribute:: client
                
                	Single DHCP client binding
                	**type**\: list of    :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpClient.Nodes.Node.Clients.Client>`
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(DhcpClient.Nodes.Node.Clients, self).__init__()

                    self.yang_name = "clients"
                    self.yang_parent_name = "node"

                    self.client = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(DhcpClient.Nodes.Node.Clients, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(DhcpClient.Nodes.Node.Clients, self).__setattr__(name, value)


                class Client(Entity):
                    """
                    Single DHCP client binding
                    
                    .. attribute:: client_ifhandle  <key>
                    
                    	Client Ifhandle
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: client_id
                    
                    	Dhcp Client ID
                    	**type**\:  str
                    
                    	**length:** 0..256
                    
                    .. attribute:: client_mac_address
                    
                    	Dhcp Client Interface MAC address
                    	**type**\:  str
                    
                    	**length:** 0..17
                    
                    .. attribute:: interface_name
                    
                    	Dhcp Client interface name
                    	**type**\:  str
                    
                    	**length:** 0..65
                    
                    .. attribute:: ipv4_address
                    
                    	Dhcp Client IP Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv4_address_configured
                    
                    	Dhcp Client IPV4 address configured in interface
                    	**type**\:  bool
                    
                    .. attribute:: ipv4_client_state
                    
                    	Dhcp Client State
                    	**type**\:   :py:class:`DhcpcIpv4State <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpcIpv4State>`
                    
                    .. attribute:: ipv4_lease_time
                    
                    	Dhcp Client Lease time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ipv4_rebind_time
                    
                    	Dhcp Client Rebind time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ipv4_renew_time
                    
                    	Dhcp Client Renew time
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ipv4_server_address
                    
                    	Dhcp Client selected server IP Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv4_subnet_mask
                    
                    	Dhcp Client IP Address mask
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: next_hop_ipv4_address
                    
                    	Dhcp Client next hop IP Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(DhcpClient.Nodes.Node.Clients.Client, self).__init__()

                        self.yang_name = "client"
                        self.yang_parent_name = "clients"

                        self.client_ifhandle = YLeaf(YType.str, "client-ifhandle")

                        self.client_id = YLeaf(YType.str, "client-id")

                        self.client_mac_address = YLeaf(YType.str, "client-mac-address")

                        self.interface_name = YLeaf(YType.str, "interface-name")

                        self.ipv4_address = YLeaf(YType.str, "ipv4-address")

                        self.ipv4_address_configured = YLeaf(YType.boolean, "ipv4-address-configured")

                        self.ipv4_client_state = YLeaf(YType.enumeration, "ipv4-client-state")

                        self.ipv4_lease_time = YLeaf(YType.uint32, "ipv4-lease-time")

                        self.ipv4_rebind_time = YLeaf(YType.uint32, "ipv4-rebind-time")

                        self.ipv4_renew_time = YLeaf(YType.uint32, "ipv4-renew-time")

                        self.ipv4_server_address = YLeaf(YType.str, "ipv4-server-address")

                        self.ipv4_subnet_mask = YLeaf(YType.str, "ipv4-subnet-mask")

                        self.next_hop_ipv4_address = YLeaf(YType.str, "next-hop-ipv4-address")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("client_ifhandle",
                                        "client_id",
                                        "client_mac_address",
                                        "interface_name",
                                        "ipv4_address",
                                        "ipv4_address_configured",
                                        "ipv4_client_state",
                                        "ipv4_lease_time",
                                        "ipv4_rebind_time",
                                        "ipv4_renew_time",
                                        "ipv4_server_address",
                                        "ipv4_subnet_mask",
                                        "next_hop_ipv4_address") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(DhcpClient.Nodes.Node.Clients.Client, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(DhcpClient.Nodes.Node.Clients.Client, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.client_ifhandle.is_set or
                            self.client_id.is_set or
                            self.client_mac_address.is_set or
                            self.interface_name.is_set or
                            self.ipv4_address.is_set or
                            self.ipv4_address_configured.is_set or
                            self.ipv4_client_state.is_set or
                            self.ipv4_lease_time.is_set or
                            self.ipv4_rebind_time.is_set or
                            self.ipv4_renew_time.is_set or
                            self.ipv4_server_address.is_set or
                            self.ipv4_subnet_mask.is_set or
                            self.next_hop_ipv4_address.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.client_ifhandle.yfilter != YFilter.not_set or
                            self.client_id.yfilter != YFilter.not_set or
                            self.client_mac_address.yfilter != YFilter.not_set or
                            self.interface_name.yfilter != YFilter.not_set or
                            self.ipv4_address.yfilter != YFilter.not_set or
                            self.ipv4_address_configured.yfilter != YFilter.not_set or
                            self.ipv4_client_state.yfilter != YFilter.not_set or
                            self.ipv4_lease_time.yfilter != YFilter.not_set or
                            self.ipv4_rebind_time.yfilter != YFilter.not_set or
                            self.ipv4_renew_time.yfilter != YFilter.not_set or
                            self.ipv4_server_address.yfilter != YFilter.not_set or
                            self.ipv4_subnet_mask.yfilter != YFilter.not_set or
                            self.next_hop_ipv4_address.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "client" + "[client-ifhandle='" + self.client_ifhandle.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.client_ifhandle.is_set or self.client_ifhandle.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.client_ifhandle.get_name_leafdata())
                        if (self.client_id.is_set or self.client_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.client_id.get_name_leafdata())
                        if (self.client_mac_address.is_set or self.client_mac_address.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.client_mac_address.get_name_leafdata())
                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.interface_name.get_name_leafdata())
                        if (self.ipv4_address.is_set or self.ipv4_address.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_address.get_name_leafdata())
                        if (self.ipv4_address_configured.is_set or self.ipv4_address_configured.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_address_configured.get_name_leafdata())
                        if (self.ipv4_client_state.is_set or self.ipv4_client_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_client_state.get_name_leafdata())
                        if (self.ipv4_lease_time.is_set or self.ipv4_lease_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_lease_time.get_name_leafdata())
                        if (self.ipv4_rebind_time.is_set or self.ipv4_rebind_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_rebind_time.get_name_leafdata())
                        if (self.ipv4_renew_time.is_set or self.ipv4_renew_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_renew_time.get_name_leafdata())
                        if (self.ipv4_server_address.is_set or self.ipv4_server_address.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_server_address.get_name_leafdata())
                        if (self.ipv4_subnet_mask.is_set or self.ipv4_subnet_mask.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.ipv4_subnet_mask.get_name_leafdata())
                        if (self.next_hop_ipv4_address.is_set or self.next_hop_ipv4_address.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.next_hop_ipv4_address.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "client-ifhandle" or name == "client-id" or name == "client-mac-address" or name == "interface-name" or name == "ipv4-address" or name == "ipv4-address-configured" or name == "ipv4-client-state" or name == "ipv4-lease-time" or name == "ipv4-rebind-time" or name == "ipv4-renew-time" or name == "ipv4-server-address" or name == "ipv4-subnet-mask" or name == "next-hop-ipv4-address"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "client-ifhandle"):
                            self.client_ifhandle = value
                            self.client_ifhandle.value_namespace = name_space
                            self.client_ifhandle.value_namespace_prefix = name_space_prefix
                        if(value_path == "client-id"):
                            self.client_id = value
                            self.client_id.value_namespace = name_space
                            self.client_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "client-mac-address"):
                            self.client_mac_address = value
                            self.client_mac_address.value_namespace = name_space
                            self.client_mac_address.value_namespace_prefix = name_space_prefix
                        if(value_path == "interface-name"):
                            self.interface_name = value
                            self.interface_name.value_namespace = name_space
                            self.interface_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-address"):
                            self.ipv4_address = value
                            self.ipv4_address.value_namespace = name_space
                            self.ipv4_address.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-address-configured"):
                            self.ipv4_address_configured = value
                            self.ipv4_address_configured.value_namespace = name_space
                            self.ipv4_address_configured.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-client-state"):
                            self.ipv4_client_state = value
                            self.ipv4_client_state.value_namespace = name_space
                            self.ipv4_client_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-lease-time"):
                            self.ipv4_lease_time = value
                            self.ipv4_lease_time.value_namespace = name_space
                            self.ipv4_lease_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-rebind-time"):
                            self.ipv4_rebind_time = value
                            self.ipv4_rebind_time.value_namespace = name_space
                            self.ipv4_rebind_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-renew-time"):
                            self.ipv4_renew_time = value
                            self.ipv4_renew_time.value_namespace = name_space
                            self.ipv4_renew_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-server-address"):
                            self.ipv4_server_address = value
                            self.ipv4_server_address.value_namespace = name_space
                            self.ipv4_server_address.value_namespace_prefix = name_space_prefix
                        if(value_path == "ipv4-subnet-mask"):
                            self.ipv4_subnet_mask = value
                            self.ipv4_subnet_mask.value_namespace = name_space
                            self.ipv4_subnet_mask.value_namespace_prefix = name_space_prefix
                        if(value_path == "next-hop-ipv4-address"):
                            self.next_hop_ipv4_address = value
                            self.next_hop_ipv4_address.value_namespace = name_space
                            self.next_hop_ipv4_address.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.client:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.client:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "clients" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "client"):
                        for c in self.client:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = DhcpClient.Nodes.Node.Clients.Client()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.client.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "client"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.node_name.is_set or
                    (self.client_stats is not None and self.client_stats.has_data()) or
                    (self.clients is not None and self.clients.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set or
                    (self.client_stats is not None and self.client_stats.has_operation()) or
                    (self.clients is not None and self.clients.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:dhcp-client/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "client-stats"):
                    if (self.client_stats is None):
                        self.client_stats = DhcpClient.Nodes.Node.ClientStats()
                        self.client_stats.parent = self
                        self._children_name_map["client_stats"] = "client-stats"
                    return self.client_stats

                if (child_yang_name == "clients"):
                    if (self.clients is None):
                        self.clients = DhcpClient.Nodes.Node.Clients()
                        self.clients.parent = self
                        self._children_name_map["clients"] = "clients"
                    return self.clients

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "client-stats" or name == "clients" or name == "node-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:dhcp-client/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = DhcpClient.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.nodes is not None and self.nodes.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.nodes is not None and self.nodes.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:dhcp-client" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = DhcpClient.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "nodes"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = DhcpClient()
        return self._top_entity

class Ipv4Dhcpd(Entity):
    """
    ipv4 dhcpd
    
    .. attribute:: nodes
    
    	IPv4 DHCPD operational data for a particular location
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes>`
    
    .. attribute:: snoop
    
    	DHCP Snoop operational data
    	**type**\:   :py:class:`Snoop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop>`
    
    

    """

    _prefix = 'ipv4-dhcpd-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(Ipv4Dhcpd, self).__init__()
        self._top_entity = None

        self.yang_name = "ipv4-dhcpd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-dhcpd-oper"

        self.nodes = Ipv4Dhcpd.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")

        self.snoop = Ipv4Dhcpd.Snoop()
        self.snoop.parent = self
        self._children_name_map["snoop"] = "snoop"
        self._children_yang_names.add("snoop")


    class Snoop(Entity):
        """
        DHCP Snoop operational data
        
        .. attribute:: binding_statistics
        
        	DHCP snoop binding statistics
        	**type**\:   :py:class:`BindingStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.BindingStatistics>`
        
        .. attribute:: bindings
        
        	DHCP Snoop Bindings
        	**type**\:   :py:class:`Bindings <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.Bindings>`
        
        .. attribute:: profiles
        
        	DHCP Snoop Profile
        	**type**\:   :py:class:`Profiles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.Profiles>`
        
        .. attribute:: statistics
        
        	DHCP Snoop Statistics
        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.Statistics>`
        
        .. attribute:: statistics_info
        
        	DHCP snoop statistics info
        	**type**\:   :py:class:`StatisticsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.StatisticsInfo>`
        
        

        """

        _prefix = 'ipv4-dhcpd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Ipv4Dhcpd.Snoop, self).__init__()

            self.yang_name = "snoop"
            self.yang_parent_name = "ipv4-dhcpd"

            self.binding_statistics = Ipv4Dhcpd.Snoop.BindingStatistics()
            self.binding_statistics.parent = self
            self._children_name_map["binding_statistics"] = "binding-statistics"
            self._children_yang_names.add("binding-statistics")

            self.bindings = Ipv4Dhcpd.Snoop.Bindings()
            self.bindings.parent = self
            self._children_name_map["bindings"] = "bindings"
            self._children_yang_names.add("bindings")

            self.profiles = Ipv4Dhcpd.Snoop.Profiles()
            self.profiles.parent = self
            self._children_name_map["profiles"] = "profiles"
            self._children_yang_names.add("profiles")

            self.statistics = Ipv4Dhcpd.Snoop.Statistics()
            self.statistics.parent = self
            self._children_name_map["statistics"] = "statistics"
            self._children_yang_names.add("statistics")

            self.statistics_info = Ipv4Dhcpd.Snoop.StatisticsInfo()
            self.statistics_info.parent = self
            self._children_name_map["statistics_info"] = "statistics-info"
            self._children_yang_names.add("statistics-info")


        class Bindings(Entity):
            """
            DHCP Snoop Bindings
            
            .. attribute:: binding
            
            	DHCP Snoop binding
            	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.Bindings.Binding>`
            
            

            """

            _prefix = 'ipv4-dhcpd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Ipv4Dhcpd.Snoop.Bindings, self).__init__()

                self.yang_name = "bindings"
                self.yang_parent_name = "snoop"

                self.binding = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Ipv4Dhcpd.Snoop.Bindings, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Ipv4Dhcpd.Snoop.Bindings, self).__setattr__(name, value)


            class Binding(Entity):
                """
                DHCP Snoop binding
                
                .. attribute:: client_uid  <key>
                
                	Client opaque handle
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: snoop_binding_bridge_name
                
                	DHCP L2 bridge name
                	**type**\:  str
                
                	**length:** 0..74
                
                .. attribute:: snoop_binding_ch_addr
                
                	DHCP client MAC address
                	**type**\:  str
                
                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                
                .. attribute:: snoop_binding_ch_addr_len
                
                	DHCP client MAC address length
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: snoop_binding_client_id
                
                	DHCP client id
                	**type**\:  str
                
                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                
                .. attribute:: snoop_binding_client_id_len
                
                	DHCP client id len
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: snoop_binding_i_addr
                
                	DHCP iaddr
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: snoop_binding_lease
                
                	DHCP lease time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: snoop_binding_lease_start_time
                
                	DHCP lease start time
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: snoop_binding_profile_name
                
                	DHCP profile name
                	**type**\:  str
                
                	**length:** 0..65
                
                .. attribute:: snoop_binding_state
                
                	DHCP sm state
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: snoop_bindng_interface_name
                
                	DHCP interface to client
                	**type**\:  str
                
                	**length:** 0..321
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Snoop.Bindings.Binding, self).__init__()

                    self.yang_name = "binding"
                    self.yang_parent_name = "bindings"

                    self.client_uid = YLeaf(YType.str, "client-uid")

                    self.snoop_binding_bridge_name = YLeaf(YType.str, "snoop-binding-bridge-name")

                    self.snoop_binding_ch_addr = YLeaf(YType.str, "snoop-binding-ch-addr")

                    self.snoop_binding_ch_addr_len = YLeaf(YType.uint8, "snoop-binding-ch-addr-len")

                    self.snoop_binding_client_id = YLeaf(YType.str, "snoop-binding-client-id")

                    self.snoop_binding_client_id_len = YLeaf(YType.uint8, "snoop-binding-client-id-len")

                    self.snoop_binding_i_addr = YLeaf(YType.str, "snoop-binding-i-addr")

                    self.snoop_binding_lease = YLeaf(YType.uint32, "snoop-binding-lease")

                    self.snoop_binding_lease_start_time = YLeaf(YType.uint32, "snoop-binding-lease-start-time")

                    self.snoop_binding_profile_name = YLeaf(YType.str, "snoop-binding-profile-name")

                    self.snoop_binding_state = YLeaf(YType.uint8, "snoop-binding-state")

                    self.snoop_bindng_interface_name = YLeaf(YType.str, "snoop-bindng-interface-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("client_uid",
                                    "snoop_binding_bridge_name",
                                    "snoop_binding_ch_addr",
                                    "snoop_binding_ch_addr_len",
                                    "snoop_binding_client_id",
                                    "snoop_binding_client_id_len",
                                    "snoop_binding_i_addr",
                                    "snoop_binding_lease",
                                    "snoop_binding_lease_start_time",
                                    "snoop_binding_profile_name",
                                    "snoop_binding_state",
                                    "snoop_bindng_interface_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Ipv4Dhcpd.Snoop.Bindings.Binding, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Ipv4Dhcpd.Snoop.Bindings.Binding, self).__setattr__(name, value)

                def has_data(self):
                    return (
                        self.client_uid.is_set or
                        self.snoop_binding_bridge_name.is_set or
                        self.snoop_binding_ch_addr.is_set or
                        self.snoop_binding_ch_addr_len.is_set or
                        self.snoop_binding_client_id.is_set or
                        self.snoop_binding_client_id_len.is_set or
                        self.snoop_binding_i_addr.is_set or
                        self.snoop_binding_lease.is_set or
                        self.snoop_binding_lease_start_time.is_set or
                        self.snoop_binding_profile_name.is_set or
                        self.snoop_binding_state.is_set or
                        self.snoop_bindng_interface_name.is_set)

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.client_uid.yfilter != YFilter.not_set or
                        self.snoop_binding_bridge_name.yfilter != YFilter.not_set or
                        self.snoop_binding_ch_addr.yfilter != YFilter.not_set or
                        self.snoop_binding_ch_addr_len.yfilter != YFilter.not_set or
                        self.snoop_binding_client_id.yfilter != YFilter.not_set or
                        self.snoop_binding_client_id_len.yfilter != YFilter.not_set or
                        self.snoop_binding_i_addr.yfilter != YFilter.not_set or
                        self.snoop_binding_lease.yfilter != YFilter.not_set or
                        self.snoop_binding_lease_start_time.yfilter != YFilter.not_set or
                        self.snoop_binding_profile_name.yfilter != YFilter.not_set or
                        self.snoop_binding_state.yfilter != YFilter.not_set or
                        self.snoop_bindng_interface_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "binding" + "[client-uid='" + self.client_uid.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/bindings/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.client_uid.is_set or self.client_uid.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.client_uid.get_name_leafdata())
                    if (self.snoop_binding_bridge_name.is_set or self.snoop_binding_bridge_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_bridge_name.get_name_leafdata())
                    if (self.snoop_binding_ch_addr.is_set or self.snoop_binding_ch_addr.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_ch_addr.get_name_leafdata())
                    if (self.snoop_binding_ch_addr_len.is_set or self.snoop_binding_ch_addr_len.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_ch_addr_len.get_name_leafdata())
                    if (self.snoop_binding_client_id.is_set or self.snoop_binding_client_id.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_client_id.get_name_leafdata())
                    if (self.snoop_binding_client_id_len.is_set or self.snoop_binding_client_id_len.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_client_id_len.get_name_leafdata())
                    if (self.snoop_binding_i_addr.is_set or self.snoop_binding_i_addr.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_i_addr.get_name_leafdata())
                    if (self.snoop_binding_lease.is_set or self.snoop_binding_lease.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_lease.get_name_leafdata())
                    if (self.snoop_binding_lease_start_time.is_set or self.snoop_binding_lease_start_time.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_lease_start_time.get_name_leafdata())
                    if (self.snoop_binding_profile_name.is_set or self.snoop_binding_profile_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_profile_name.get_name_leafdata())
                    if (self.snoop_binding_state.is_set or self.snoop_binding_state.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_binding_state.get_name_leafdata())
                    if (self.snoop_bindng_interface_name.is_set or self.snoop_bindng_interface_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_bindng_interface_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "client-uid" or name == "snoop-binding-bridge-name" or name == "snoop-binding-ch-addr" or name == "snoop-binding-ch-addr-len" or name == "snoop-binding-client-id" or name == "snoop-binding-client-id-len" or name == "snoop-binding-i-addr" or name == "snoop-binding-lease" or name == "snoop-binding-lease-start-time" or name == "snoop-binding-profile-name" or name == "snoop-binding-state" or name == "snoop-bindng-interface-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "client-uid"):
                        self.client_uid = value
                        self.client_uid.value_namespace = name_space
                        self.client_uid.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-bridge-name"):
                        self.snoop_binding_bridge_name = value
                        self.snoop_binding_bridge_name.value_namespace = name_space
                        self.snoop_binding_bridge_name.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-ch-addr"):
                        self.snoop_binding_ch_addr = value
                        self.snoop_binding_ch_addr.value_namespace = name_space
                        self.snoop_binding_ch_addr.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-ch-addr-len"):
                        self.snoop_binding_ch_addr_len = value
                        self.snoop_binding_ch_addr_len.value_namespace = name_space
                        self.snoop_binding_ch_addr_len.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-client-id"):
                        self.snoop_binding_client_id = value
                        self.snoop_binding_client_id.value_namespace = name_space
                        self.snoop_binding_client_id.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-client-id-len"):
                        self.snoop_binding_client_id_len = value
                        self.snoop_binding_client_id_len.value_namespace = name_space
                        self.snoop_binding_client_id_len.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-i-addr"):
                        self.snoop_binding_i_addr = value
                        self.snoop_binding_i_addr.value_namespace = name_space
                        self.snoop_binding_i_addr.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-lease"):
                        self.snoop_binding_lease = value
                        self.snoop_binding_lease.value_namespace = name_space
                        self.snoop_binding_lease.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-lease-start-time"):
                        self.snoop_binding_lease_start_time = value
                        self.snoop_binding_lease_start_time.value_namespace = name_space
                        self.snoop_binding_lease_start_time.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-profile-name"):
                        self.snoop_binding_profile_name = value
                        self.snoop_binding_profile_name.value_namespace = name_space
                        self.snoop_binding_profile_name.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-binding-state"):
                        self.snoop_binding_state = value
                        self.snoop_binding_state.value_namespace = name_space
                        self.snoop_binding_state.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-bindng-interface-name"):
                        self.snoop_bindng_interface_name = value
                        self.snoop_bindng_interface_name.value_namespace = name_space
                        self.snoop_bindng_interface_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.binding:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.binding:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "bindings" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "binding"):
                    for c in self.binding:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Ipv4Dhcpd.Snoop.Bindings.Binding()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.binding.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "binding"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class BindingStatistics(Entity):
            """
            DHCP snoop binding statistics
            
            .. attribute:: snoop_binding_timestamp
            
            	Snoop binding timestamp
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: snoop_binding_total
            
            	Total number of snoop bindings
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ipv4-dhcpd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Ipv4Dhcpd.Snoop.BindingStatistics, self).__init__()

                self.yang_name = "binding-statistics"
                self.yang_parent_name = "snoop"

                self.snoop_binding_timestamp = YLeaf(YType.uint32, "snoop-binding-timestamp")

                self.snoop_binding_total = YLeaf(YType.uint32, "snoop-binding-total")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("snoop_binding_timestamp",
                                "snoop_binding_total") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Ipv4Dhcpd.Snoop.BindingStatistics, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Ipv4Dhcpd.Snoop.BindingStatistics, self).__setattr__(name, value)

            def has_data(self):
                return (
                    self.snoop_binding_timestamp.is_set or
                    self.snoop_binding_total.is_set)

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.snoop_binding_timestamp.yfilter != YFilter.not_set or
                    self.snoop_binding_total.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "binding-statistics" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.snoop_binding_timestamp.is_set or self.snoop_binding_timestamp.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.snoop_binding_timestamp.get_name_leafdata())
                if (self.snoop_binding_total.is_set or self.snoop_binding_total.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.snoop_binding_total.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "snoop-binding-timestamp" or name == "snoop-binding-total"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "snoop-binding-timestamp"):
                    self.snoop_binding_timestamp = value
                    self.snoop_binding_timestamp.value_namespace = name_space
                    self.snoop_binding_timestamp.value_namespace_prefix = name_space_prefix
                if(value_path == "snoop-binding-total"):
                    self.snoop_binding_total = value
                    self.snoop_binding_total.value_namespace = name_space
                    self.snoop_binding_total.value_namespace_prefix = name_space_prefix


        class StatisticsInfo(Entity):
            """
            DHCP snoop statistics info
            
            .. attribute:: snoop_stats_timestamp
            
            	Snoop Stats timestamp
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ipv4-dhcpd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Ipv4Dhcpd.Snoop.StatisticsInfo, self).__init__()

                self.yang_name = "statistics-info"
                self.yang_parent_name = "snoop"

                self.snoop_stats_timestamp = YLeaf(YType.uint32, "snoop-stats-timestamp")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("snoop_stats_timestamp") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Ipv4Dhcpd.Snoop.StatisticsInfo, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Ipv4Dhcpd.Snoop.StatisticsInfo, self).__setattr__(name, value)

            def has_data(self):
                return self.snoop_stats_timestamp.is_set

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.snoop_stats_timestamp.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "statistics-info" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.snoop_stats_timestamp.is_set or self.snoop_stats_timestamp.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.snoop_stats_timestamp.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "snoop-stats-timestamp"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "snoop-stats-timestamp"):
                    self.snoop_stats_timestamp = value
                    self.snoop_stats_timestamp.value_namespace = name_space
                    self.snoop_stats_timestamp.value_namespace_prefix = name_space_prefix


        class Profiles(Entity):
            """
            DHCP Snoop Profile
            
            .. attribute:: profile
            
            	DHCP Snoop profile
            	**type**\: list of    :py:class:`Profile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.Profiles.Profile>`
            
            

            """

            _prefix = 'ipv4-dhcpd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Ipv4Dhcpd.Snoop.Profiles, self).__init__()

                self.yang_name = "profiles"
                self.yang_parent_name = "snoop"

                self.profile = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Ipv4Dhcpd.Snoop.Profiles, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Ipv4Dhcpd.Snoop.Profiles, self).__setattr__(name, value)


            class Profile(Entity):
                """
                DHCP Snoop profile
                
                .. attribute:: profile_name  <key>
                
                	Profile name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: snoop_profile_name
                
                	Profile Name
                	**type**\:  str
                
                	**length:** 0..65
                
                .. attribute:: snoop_profile_relay_info_allow_untrusted
                
                	Allow untrusted relay info
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: snoop_profile_relay_info_option
                
                	Relay info option
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: snoop_profile_relay_info_policy
                
                	Relay info policy
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: snoop_profile_trusted
                
                	Trust
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: snoop_profile_uid
                
                	Profile unique ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Snoop.Profiles.Profile, self).__init__()

                    self.yang_name = "profile"
                    self.yang_parent_name = "profiles"

                    self.profile_name = YLeaf(YType.str, "profile-name")

                    self.snoop_profile_name = YLeaf(YType.str, "snoop-profile-name")

                    self.snoop_profile_relay_info_allow_untrusted = YLeaf(YType.uint8, "snoop-profile-relay-info-allow-untrusted")

                    self.snoop_profile_relay_info_option = YLeaf(YType.uint8, "snoop-profile-relay-info-option")

                    self.snoop_profile_relay_info_policy = YLeaf(YType.uint8, "snoop-profile-relay-info-policy")

                    self.snoop_profile_trusted = YLeaf(YType.uint8, "snoop-profile-trusted")

                    self.snoop_profile_uid = YLeaf(YType.uint32, "snoop-profile-uid")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("profile_name",
                                    "snoop_profile_name",
                                    "snoop_profile_relay_info_allow_untrusted",
                                    "snoop_profile_relay_info_option",
                                    "snoop_profile_relay_info_policy",
                                    "snoop_profile_trusted",
                                    "snoop_profile_uid") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Ipv4Dhcpd.Snoop.Profiles.Profile, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Ipv4Dhcpd.Snoop.Profiles.Profile, self).__setattr__(name, value)

                def has_data(self):
                    return (
                        self.profile_name.is_set or
                        self.snoop_profile_name.is_set or
                        self.snoop_profile_relay_info_allow_untrusted.is_set or
                        self.snoop_profile_relay_info_option.is_set or
                        self.snoop_profile_relay_info_policy.is_set or
                        self.snoop_profile_trusted.is_set or
                        self.snoop_profile_uid.is_set)

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.profile_name.yfilter != YFilter.not_set or
                        self.snoop_profile_name.yfilter != YFilter.not_set or
                        self.snoop_profile_relay_info_allow_untrusted.yfilter != YFilter.not_set or
                        self.snoop_profile_relay_info_option.yfilter != YFilter.not_set or
                        self.snoop_profile_relay_info_policy.yfilter != YFilter.not_set or
                        self.snoop_profile_trusted.yfilter != YFilter.not_set or
                        self.snoop_profile_uid.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "profile" + "[profile-name='" + self.profile_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/profiles/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.profile_name.get_name_leafdata())
                    if (self.snoop_profile_name.is_set or self.snoop_profile_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_profile_name.get_name_leafdata())
                    if (self.snoop_profile_relay_info_allow_untrusted.is_set or self.snoop_profile_relay_info_allow_untrusted.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_profile_relay_info_allow_untrusted.get_name_leafdata())
                    if (self.snoop_profile_relay_info_option.is_set or self.snoop_profile_relay_info_option.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_profile_relay_info_option.get_name_leafdata())
                    if (self.snoop_profile_relay_info_policy.is_set or self.snoop_profile_relay_info_policy.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_profile_relay_info_policy.get_name_leafdata())
                    if (self.snoop_profile_trusted.is_set or self.snoop_profile_trusted.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_profile_trusted.get_name_leafdata())
                    if (self.snoop_profile_uid.is_set or self.snoop_profile_uid.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_profile_uid.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "profile-name" or name == "snoop-profile-name" or name == "snoop-profile-relay-info-allow-untrusted" or name == "snoop-profile-relay-info-option" or name == "snoop-profile-relay-info-policy" or name == "snoop-profile-trusted" or name == "snoop-profile-uid"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "profile-name"):
                        self.profile_name = value
                        self.profile_name.value_namespace = name_space
                        self.profile_name.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-profile-name"):
                        self.snoop_profile_name = value
                        self.snoop_profile_name.value_namespace = name_space
                        self.snoop_profile_name.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-profile-relay-info-allow-untrusted"):
                        self.snoop_profile_relay_info_allow_untrusted = value
                        self.snoop_profile_relay_info_allow_untrusted.value_namespace = name_space
                        self.snoop_profile_relay_info_allow_untrusted.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-profile-relay-info-option"):
                        self.snoop_profile_relay_info_option = value
                        self.snoop_profile_relay_info_option.value_namespace = name_space
                        self.snoop_profile_relay_info_option.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-profile-relay-info-policy"):
                        self.snoop_profile_relay_info_policy = value
                        self.snoop_profile_relay_info_policy.value_namespace = name_space
                        self.snoop_profile_relay_info_policy.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-profile-trusted"):
                        self.snoop_profile_trusted = value
                        self.snoop_profile_trusted.value_namespace = name_space
                        self.snoop_profile_trusted.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-profile-uid"):
                        self.snoop_profile_uid = value
                        self.snoop_profile_uid.value_namespace = name_space
                        self.snoop_profile_uid.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.profile:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.profile:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "profiles" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "profile"):
                    for c in self.profile:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Ipv4Dhcpd.Snoop.Profiles.Profile()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.profile.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "profile"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Statistics(Entity):
            """
            DHCP Snoop Statistics
            
            .. attribute:: statistic
            
            	DHCP Snoop bridge domain statistics
            	**type**\: list of    :py:class:`Statistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Snoop.Statistics.Statistic>`
            
            

            """

            _prefix = 'ipv4-dhcpd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Ipv4Dhcpd.Snoop.Statistics, self).__init__()

                self.yang_name = "statistics"
                self.yang_parent_name = "snoop"

                self.statistic = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Ipv4Dhcpd.Snoop.Statistics, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Ipv4Dhcpd.Snoop.Statistics, self).__setattr__(name, value)


            class Statistic(Entity):
                """
                DHCP Snoop bridge domain statistics
                
                .. attribute:: bridge_name  <key>
                
                	Bridge domain name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: snoop_statistic
                
                	Public snoop statistics
                	**type**\:  list of int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: snoop_statistics_bridge_name
                
                	DHCP L2 bridge name
                	**type**\:  str
                
                	**length:** 0..74
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Snoop.Statistics.Statistic, self).__init__()

                    self.yang_name = "statistic"
                    self.yang_parent_name = "statistics"

                    self.bridge_name = YLeaf(YType.str, "bridge-name")

                    self.snoop_statistic = YLeafList(YType.uint64, "snoop-statistic")

                    self.snoop_statistics_bridge_name = YLeaf(YType.str, "snoop-statistics-bridge-name")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("bridge_name",
                                    "snoop_statistic",
                                    "snoop_statistics_bridge_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Ipv4Dhcpd.Snoop.Statistics.Statistic, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Ipv4Dhcpd.Snoop.Statistics.Statistic, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.snoop_statistic.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return (
                        self.bridge_name.is_set or
                        self.snoop_statistics_bridge_name.is_set)

                def has_operation(self):
                    for leaf in self.snoop_statistic.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.bridge_name.yfilter != YFilter.not_set or
                        self.snoop_statistic.yfilter != YFilter.not_set or
                        self.snoop_statistics_bridge_name.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "statistic" + "[bridge-name='" + self.bridge_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/statistics/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.bridge_name.is_set or self.bridge_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.bridge_name.get_name_leafdata())
                    if (self.snoop_statistics_bridge_name.is_set or self.snoop_statistics_bridge_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.snoop_statistics_bridge_name.get_name_leafdata())

                    leaf_name_data.extend(self.snoop_statistic.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "bridge-name" or name == "snoop-statistic" or name == "snoop-statistics-bridge-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "bridge-name"):
                        self.bridge_name = value
                        self.bridge_name.value_namespace = name_space
                        self.bridge_name.value_namespace_prefix = name_space_prefix
                    if(value_path == "snoop-statistic"):
                        self.snoop_statistic.append(value)
                    if(value_path == "snoop-statistics-bridge-name"):
                        self.snoop_statistics_bridge_name = value
                        self.snoop_statistics_bridge_name.value_namespace = name_space
                        self.snoop_statistics_bridge_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.statistic:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.statistic:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "statistics" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/snoop/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "statistic"):
                    for c in self.statistic:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Ipv4Dhcpd.Snoop.Statistics.Statistic()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.statistic.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "statistic"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (
                (self.binding_statistics is not None and self.binding_statistics.has_data()) or
                (self.bindings is not None and self.bindings.has_data()) or
                (self.profiles is not None and self.profiles.has_data()) or
                (self.statistics is not None and self.statistics.has_data()) or
                (self.statistics_info is not None and self.statistics_info.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.binding_statistics is not None and self.binding_statistics.has_operation()) or
                (self.bindings is not None and self.bindings.has_operation()) or
                (self.profiles is not None and self.profiles.has_operation()) or
                (self.statistics is not None and self.statistics.has_operation()) or
                (self.statistics_info is not None and self.statistics_info.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "snoop" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "binding-statistics"):
                if (self.binding_statistics is None):
                    self.binding_statistics = Ipv4Dhcpd.Snoop.BindingStatistics()
                    self.binding_statistics.parent = self
                    self._children_name_map["binding_statistics"] = "binding-statistics"
                return self.binding_statistics

            if (child_yang_name == "bindings"):
                if (self.bindings is None):
                    self.bindings = Ipv4Dhcpd.Snoop.Bindings()
                    self.bindings.parent = self
                    self._children_name_map["bindings"] = "bindings"
                return self.bindings

            if (child_yang_name == "profiles"):
                if (self.profiles is None):
                    self.profiles = Ipv4Dhcpd.Snoop.Profiles()
                    self.profiles.parent = self
                    self._children_name_map["profiles"] = "profiles"
                return self.profiles

            if (child_yang_name == "statistics"):
                if (self.statistics is None):
                    self.statistics = Ipv4Dhcpd.Snoop.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                return self.statistics

            if (child_yang_name == "statistics-info"):
                if (self.statistics_info is None):
                    self.statistics_info = Ipv4Dhcpd.Snoop.StatisticsInfo()
                    self.statistics_info.parent = self
                    self._children_name_map["statistics_info"] = "statistics-info"
                return self.statistics_info

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "binding-statistics" or name == "bindings" or name == "profiles" or name == "statistics" or name == "statistics-info"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Nodes(Entity):
        """
        IPv4 DHCPD operational data for a particular
        location
        
        .. attribute:: node
        
        	Location. For eg., 0/1/CPU0
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node>`
        
        

        """

        _prefix = 'ipv4-dhcpd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Ipv4Dhcpd.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "ipv4-dhcpd"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Ipv4Dhcpd.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Ipv4Dhcpd.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            Location. For eg., 0/1/CPU0
            
            .. attribute:: nodeid  <key>
            
            	The node id to filter on. For eg., 0/1/CPU0
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: base
            
            	IPv4 DHCP base operational data
            	**type**\:   :py:class:`Base <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base>`
            
            .. attribute:: interfaces
            
            	IPv4 DHCP proxy/server Interface
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Interfaces>`
            
            .. attribute:: proxy
            
            	IPv4 DHCP proxy operational data
            	**type**\:   :py:class:`Proxy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy>`
            
            .. attribute:: relay
            
            	IPv4 DHCPD Relay operational data
            	**type**\:   :py:class:`Relay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay>`
            
            .. attribute:: server
            
            	IPv4 DHCP Server operational data
            	**type**\:   :py:class:`Server <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server>`
            
            

            """

            _prefix = 'ipv4-dhcpd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Ipv4Dhcpd.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.nodeid = YLeaf(YType.str, "nodeid")

                self.base = Ipv4Dhcpd.Nodes.Node.Base()
                self.base.parent = self
                self._children_name_map["base"] = "base"
                self._children_yang_names.add("base")

                self.interfaces = Ipv4Dhcpd.Nodes.Node.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")

                self.proxy = Ipv4Dhcpd.Nodes.Node.Proxy()
                self.proxy.parent = self
                self._children_name_map["proxy"] = "proxy"
                self._children_yang_names.add("proxy")

                self.relay = Ipv4Dhcpd.Nodes.Node.Relay()
                self.relay.parent = self
                self._children_name_map["relay"] = "relay"
                self._children_yang_names.add("relay")

                self.server = Ipv4Dhcpd.Nodes.Node.Server()
                self.server.parent = self
                self._children_name_map["server"] = "server"
                self._children_yang_names.add("server")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("nodeid") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Ipv4Dhcpd.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Ipv4Dhcpd.Nodes.Node, self).__setattr__(name, value)


            class Proxy(Entity):
                """
                IPv4 DHCP proxy operational data
                
                .. attribute:: binding
                
                	DHCP proxy bindings
                	**type**\:   :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Binding>`
                
                .. attribute:: profiles
                
                	IPv4 DHCP proxy profile
                	**type**\:   :py:class:`Profiles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Profiles>`
                
                .. attribute:: statistics
                
                	DHCP proxy statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Statistics>`
                
                .. attribute:: statistics_info
                
                	DHCP proxy stats info
                	**type**\:   :py:class:`StatisticsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.StatisticsInfo>`
                
                .. attribute:: vrfs
                
                	DHCP proxy list of VRF names
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs>`
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Nodes.Node.Proxy, self).__init__()

                    self.yang_name = "proxy"
                    self.yang_parent_name = "node"

                    self.binding = Ipv4Dhcpd.Nodes.Node.Proxy.Binding()
                    self.binding.parent = self
                    self._children_name_map["binding"] = "binding"
                    self._children_yang_names.add("binding")

                    self.profiles = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles()
                    self.profiles.parent = self
                    self._children_name_map["profiles"] = "profiles"
                    self._children_yang_names.add("profiles")

                    self.statistics = Ipv4Dhcpd.Nodes.Node.Proxy.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.statistics_info = Ipv4Dhcpd.Nodes.Node.Proxy.StatisticsInfo()
                    self.statistics_info.parent = self
                    self._children_name_map["statistics_info"] = "statistics-info"
                    self._children_yang_names.add("statistics-info")

                    self.vrfs = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"
                    self._children_yang_names.add("vrfs")


                class StatisticsInfo(Entity):
                    """
                    DHCP proxy stats info
                    
                    .. attribute:: proxy_stats_timestamp
                    
                    	Proxy Stats timestamp
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Proxy.StatisticsInfo, self).__init__()

                        self.yang_name = "statistics-info"
                        self.yang_parent_name = "proxy"

                        self.proxy_stats_timestamp = YLeaf(YType.uint32, "proxy-stats-timestamp")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("proxy_stats_timestamp") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.StatisticsInfo, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.StatisticsInfo, self).__setattr__(name, value)

                    def has_data(self):
                        return self.proxy_stats_timestamp.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.proxy_stats_timestamp.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics-info" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.proxy_stats_timestamp.is_set or self.proxy_stats_timestamp.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.proxy_stats_timestamp.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "proxy-stats-timestamp"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "proxy-stats-timestamp"):
                            self.proxy_stats_timestamp = value
                            self.proxy_stats_timestamp.value_namespace = name_space
                            self.proxy_stats_timestamp.value_namespace_prefix = name_space_prefix


                class Vrfs(Entity):
                    """
                    DHCP proxy list of VRF names
                    
                    .. attribute:: vrf
                    
                    	IPv4 DHCP proxy VRF name
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "proxy"

                        self.vrf = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs, self).__setattr__(name, value)


                    class Vrf(Entity):
                        """
                        IPv4 DHCP proxy VRF name
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: statistics
                        
                        	IPv4 DHCP proxy statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            IPv4 DHCP proxy statistics
                            
                            .. attribute:: ack
                            
                            	DHCP ack packets
                            	**type**\:   :py:class:`Ack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Ack>`
                            
                            .. attribute:: bootp_reply
                            
                            	DHCP BOOTP reply
                            	**type**\:   :py:class:`BootpReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpReply>`
                            
                            .. attribute:: bootp_request
                            
                            	DHCP BOOTP request
                            	**type**\:   :py:class:`BootpRequest <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpRequest>`
                            
                            .. attribute:: decline
                            
                            	DHCP decline packets
                            	**type**\:   :py:class:`Decline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline>`
                            
                            .. attribute:: discover
                            
                            	DHCP discover packets
                            	**type**\:   :py:class:`Discover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Discover>`
                            
                            .. attribute:: inform
                            
                            	DHCP inform packets
                            	**type**\:   :py:class:`Inform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform>`
                            
                            .. attribute:: lease_active
                            
                            	DHCP lease active
                            	**type**\:   :py:class:`LeaseActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseActive>`
                            
                            .. attribute:: lease_not_assigned
                            
                            	DHCP lease not assigned
                            	**type**\:   :py:class:`LeaseNotAssigned <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseNotAssigned>`
                            
                            .. attribute:: lease_query
                            
                            	DHCP lease query packets
                            	**type**\:   :py:class:`LeaseQuery <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery>`
                            
                            .. attribute:: lease_unknown
                            
                            	DHCP lease unknown
                            	**type**\:   :py:class:`LeaseUnknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseUnknown>`
                            
                            .. attribute:: nak
                            
                            	DHCP nak packets
                            	**type**\:   :py:class:`Nak <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Nak>`
                            
                            .. attribute:: offer
                            
                            	DHCP offer packets
                            	**type**\:   :py:class:`Offer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Offer>`
                            
                            .. attribute:: release
                            
                            	DHCP release packets
                            	**type**\:   :py:class:`Release <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release>`
                            
                            .. attribute:: request
                            
                            	DHCP request packets
                            	**type**\:   :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "vrf"

                                self.ack = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Ack()
                                self.ack.parent = self
                                self._children_name_map["ack"] = "ack"
                                self._children_yang_names.add("ack")

                                self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpReply()
                                self.bootp_reply.parent = self
                                self._children_name_map["bootp_reply"] = "bootp-reply"
                                self._children_yang_names.add("bootp-reply")

                                self.bootp_request = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpRequest()
                                self.bootp_request.parent = self
                                self._children_name_map["bootp_request"] = "bootp-request"
                                self._children_yang_names.add("bootp-request")

                                self.decline = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline()
                                self.decline.parent = self
                                self._children_name_map["decline"] = "decline"
                                self._children_yang_names.add("decline")

                                self.discover = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Discover()
                                self.discover.parent = self
                                self._children_name_map["discover"] = "discover"
                                self._children_yang_names.add("discover")

                                self.inform = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform()
                                self.inform.parent = self
                                self._children_name_map["inform"] = "inform"
                                self._children_yang_names.add("inform")

                                self.lease_active = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseActive()
                                self.lease_active.parent = self
                                self._children_name_map["lease_active"] = "lease-active"
                                self._children_yang_names.add("lease-active")

                                self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseNotAssigned()
                                self.lease_not_assigned.parent = self
                                self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                self._children_yang_names.add("lease-not-assigned")

                                self.lease_query = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery()
                                self.lease_query.parent = self
                                self._children_name_map["lease_query"] = "lease-query"
                                self._children_yang_names.add("lease-query")

                                self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseUnknown()
                                self.lease_unknown.parent = self
                                self._children_name_map["lease_unknown"] = "lease-unknown"
                                self._children_yang_names.add("lease-unknown")

                                self.nak = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Nak()
                                self.nak.parent = self
                                self._children_name_map["nak"] = "nak"
                                self._children_yang_names.add("nak")

                                self.offer = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Offer()
                                self.offer.parent = self
                                self._children_name_map["offer"] = "offer"
                                self._children_yang_names.add("offer")

                                self.release = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release()
                                self.release.parent = self
                                self._children_name_map["release"] = "release"
                                self._children_yang_names.add("release")

                                self.request = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request()
                                self.request.parent = self
                                self._children_name_map["request"] = "request"
                                self._children_yang_names.add("request")


                            class Discover(Entity):
                                """
                                DHCP discover packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Discover, self).__init__()

                                    self.yang_name = "discover"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Discover, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Discover, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "discover" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Offer(Entity):
                                """
                                DHCP offer packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Offer, self).__init__()

                                    self.yang_name = "offer"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Offer, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Offer, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "offer" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Request(Entity):
                                """
                                DHCP request packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request, self).__init__()

                                    self.yang_name = "request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Decline(Entity):
                                """
                                DHCP decline packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline, self).__init__()

                                    self.yang_name = "decline"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "decline" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Ack(Entity):
                                """
                                DHCP ack packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Ack, self).__init__()

                                    self.yang_name = "ack"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Ack, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Ack, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ack" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Nak(Entity):
                                """
                                DHCP nak packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Nak, self).__init__()

                                    self.yang_name = "nak"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Nak, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Nak, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "nak" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Release(Entity):
                                """
                                DHCP release packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release, self).__init__()

                                    self.yang_name = "release"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "release" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Inform(Entity):
                                """
                                DHCP inform packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform, self).__init__()

                                    self.yang_name = "inform"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "inform" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQuery(Entity):
                                """
                                DHCP lease query packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery, self).__init__()

                                    self.yang_name = "lease-query"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseNotAssigned(Entity):
                                """
                                DHCP lease not assigned
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__init__()

                                    self.yang_name = "lease-not-assigned"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-not-assigned" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseUnknown(Entity):
                                """
                                DHCP lease unknown
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseUnknown, self).__init__()

                                    self.yang_name = "lease-unknown"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseUnknown, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseUnknown, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-unknown" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseActive(Entity):
                                """
                                DHCP lease active
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseActive, self).__init__()

                                    self.yang_name = "lease-active"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseActive, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseActive, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-active" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpRequest(Entity):
                                """
                                DHCP BOOTP request
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpRequest, self).__init__()

                                    self.yang_name = "bootp-request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpRequest, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpRequest, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpReply(Entity):
                                """
                                DHCP BOOTP reply
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpReply, self).__init__()

                                    self.yang_name = "bootp-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ack is not None and self.ack.has_data()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_data()) or
                                    (self.bootp_request is not None and self.bootp_request.has_data()) or
                                    (self.decline is not None and self.decline.has_data()) or
                                    (self.discover is not None and self.discover.has_data()) or
                                    (self.inform is not None and self.inform.has_data()) or
                                    (self.lease_active is not None and self.lease_active.has_data()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_data()) or
                                    (self.lease_query is not None and self.lease_query.has_data()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_data()) or
                                    (self.nak is not None and self.nak.has_data()) or
                                    (self.offer is not None and self.offer.has_data()) or
                                    (self.release is not None and self.release.has_data()) or
                                    (self.request is not None and self.request.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ack is not None and self.ack.has_operation()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_operation()) or
                                    (self.bootp_request is not None and self.bootp_request.has_operation()) or
                                    (self.decline is not None and self.decline.has_operation()) or
                                    (self.discover is not None and self.discover.has_operation()) or
                                    (self.inform is not None and self.inform.has_operation()) or
                                    (self.lease_active is not None and self.lease_active.has_operation()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_operation()) or
                                    (self.lease_query is not None and self.lease_query.has_operation()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_operation()) or
                                    (self.nak is not None and self.nak.has_operation()) or
                                    (self.offer is not None and self.offer.has_operation()) or
                                    (self.release is not None and self.release.has_operation()) or
                                    (self.request is not None and self.request.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ack"):
                                    if (self.ack is None):
                                        self.ack = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Ack()
                                        self.ack.parent = self
                                        self._children_name_map["ack"] = "ack"
                                    return self.ack

                                if (child_yang_name == "bootp-reply"):
                                    if (self.bootp_reply is None):
                                        self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpReply()
                                        self.bootp_reply.parent = self
                                        self._children_name_map["bootp_reply"] = "bootp-reply"
                                    return self.bootp_reply

                                if (child_yang_name == "bootp-request"):
                                    if (self.bootp_request is None):
                                        self.bootp_request = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.BootpRequest()
                                        self.bootp_request.parent = self
                                        self._children_name_map["bootp_request"] = "bootp-request"
                                    return self.bootp_request

                                if (child_yang_name == "decline"):
                                    if (self.decline is None):
                                        self.decline = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline()
                                        self.decline.parent = self
                                        self._children_name_map["decline"] = "decline"
                                    return self.decline

                                if (child_yang_name == "discover"):
                                    if (self.discover is None):
                                        self.discover = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Discover()
                                        self.discover.parent = self
                                        self._children_name_map["discover"] = "discover"
                                    return self.discover

                                if (child_yang_name == "inform"):
                                    if (self.inform is None):
                                        self.inform = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform()
                                        self.inform.parent = self
                                        self._children_name_map["inform"] = "inform"
                                    return self.inform

                                if (child_yang_name == "lease-active"):
                                    if (self.lease_active is None):
                                        self.lease_active = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseActive()
                                        self.lease_active.parent = self
                                        self._children_name_map["lease_active"] = "lease-active"
                                    return self.lease_active

                                if (child_yang_name == "lease-not-assigned"):
                                    if (self.lease_not_assigned is None):
                                        self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseNotAssigned()
                                        self.lease_not_assigned.parent = self
                                        self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                    return self.lease_not_assigned

                                if (child_yang_name == "lease-query"):
                                    if (self.lease_query is None):
                                        self.lease_query = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery()
                                        self.lease_query.parent = self
                                        self._children_name_map["lease_query"] = "lease-query"
                                    return self.lease_query

                                if (child_yang_name == "lease-unknown"):
                                    if (self.lease_unknown is None):
                                        self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseUnknown()
                                        self.lease_unknown.parent = self
                                        self._children_name_map["lease_unknown"] = "lease-unknown"
                                    return self.lease_unknown

                                if (child_yang_name == "nak"):
                                    if (self.nak is None):
                                        self.nak = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Nak()
                                        self.nak.parent = self
                                        self._children_name_map["nak"] = "nak"
                                    return self.nak

                                if (child_yang_name == "offer"):
                                    if (self.offer is None):
                                        self.offer = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Offer()
                                        self.offer.parent = self
                                        self._children_name_map["offer"] = "offer"
                                    return self.offer

                                if (child_yang_name == "release"):
                                    if (self.release is None):
                                        self.release = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release()
                                        self.release.parent = self
                                        self._children_name_map["release"] = "release"
                                    return self.release

                                if (child_yang_name == "request"):
                                    if (self.request is None):
                                        self.request = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request()
                                        self.request.parent = self
                                        self._children_name_map["request"] = "request"
                                    return self.request

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ack" or name == "bootp-reply" or name == "bootp-request" or name == "decline" or name == "discover" or name == "inform" or name == "lease-active" or name == "lease-not-assigned" or name == "lease-query" or name == "lease-unknown" or name == "nak" or name == "offer" or name == "release" or name == "request"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrfs" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf"):
                            for c in self.vrf:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs.Vrf()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Profiles(Entity):
                    """
                    IPv4 DHCP proxy profile
                    
                    .. attribute:: profile
                    
                    	IPv4 DHCP proxy profile
                    	**type**\: list of    :py:class:`Profile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles, self).__init__()

                        self.yang_name = "profiles"
                        self.yang_parent_name = "proxy"

                        self.profile = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles, self).__setattr__(name, value)


                    class Profile(Entity):
                        """
                        IPv4 DHCP proxy profile
                        
                        .. attribute:: profile_name  <key>
                        
                        	Profile name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: gi_addr
                        
                        	Gateway addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: interface_references
                        
                        	Interface references
                        	**type**\:   :py:class:`InterfaceReferences <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences>`
                        
                        .. attribute:: is_move_allowed
                        
                        	Is true if dhcp subscriber is allowed to move
                        	**type**\:  bool
                        
                        .. attribute:: is_relay_allow_untrusted_enabled
                        
                        	Is true if relay untrusted is enabled
                        	**type**\:  bool
                        
                        .. attribute:: is_relay_check
                        
                        	Is true if relay check enabled
                        	**type**\:  bool
                        
                        .. attribute:: is_relay_option_enabled
                        
                        	Is true if relay option is enabled
                        	**type**\:  bool
                        
                        .. attribute:: is_relay_optionvpn_enabled
                        
                        	Is true if relay VPN enabled
                        	**type**\:  bool
                        
                        .. attribute:: profile_helper_address
                        
                        	Helper addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: proxy_broadcast_flag_policy
                        
                        	Broadcast policy
                        	**type**\:   :py:class:`BroadcastFlag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.BroadcastFlag>`
                        
                        .. attribute:: proxy_lease_limit_count
                        
                        	Lease limit count
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: proxy_lease_limit_type
                        
                        	Lease limit type
                        	**type**\:   :py:class:`ProxyLeaseLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.ProxyLeaseLimit>`
                        
                        .. attribute:: proxy_profile_client_lease_time
                        
                        	Client lease time in seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: relay_authenticate
                        
                        	Relay authenticate
                        	**type**\:   :py:class:`RelayInfoAuthenticate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.RelayInfoAuthenticate>`
                        
                        .. attribute:: relay_optionvpn_enabled_mode
                        
                        	Relay VPN RFC/Cisco mode
                        	**type**\:   :py:class:`RelayInfoVpnMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.RelayInfoVpnMode>`
                        
                        .. attribute:: relay_policy
                        
                        	Relay policy
                        	**type**\:   :py:class:`RelayInfoPolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.RelayInfoPolicy>`
                        
                        .. attribute:: vrf_name
                        
                        	VRF names
                        	**type**\:  list of str
                        
                        	**length:** 0..33
                        
                        .. attribute:: vrf_references
                        
                        	VRF references
                        	**type**\:   :py:class:`VrfReferences <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile, self).__init__()

                            self.yang_name = "profile"
                            self.yang_parent_name = "profiles"

                            self.profile_name = YLeaf(YType.str, "profile-name")

                            self.gi_addr = YLeafList(YType.str, "gi-addr")

                            self.is_move_allowed = YLeaf(YType.boolean, "is-move-allowed")

                            self.is_relay_allow_untrusted_enabled = YLeaf(YType.boolean, "is-relay-allow-untrusted-enabled")

                            self.is_relay_check = YLeaf(YType.boolean, "is-relay-check")

                            self.is_relay_option_enabled = YLeaf(YType.boolean, "is-relay-option-enabled")

                            self.is_relay_optionvpn_enabled = YLeaf(YType.boolean, "is-relay-optionvpn-enabled")

                            self.profile_helper_address = YLeafList(YType.str, "profile-helper-address")

                            self.proxy_broadcast_flag_policy = YLeaf(YType.enumeration, "proxy-broadcast-flag-policy")

                            self.proxy_lease_limit_count = YLeaf(YType.uint32, "proxy-lease-limit-count")

                            self.proxy_lease_limit_type = YLeaf(YType.enumeration, "proxy-lease-limit-type")

                            self.proxy_profile_client_lease_time = YLeaf(YType.uint32, "proxy-profile-client-lease-time")

                            self.relay_authenticate = YLeaf(YType.enumeration, "relay-authenticate")

                            self.relay_optionvpn_enabled_mode = YLeaf(YType.enumeration, "relay-optionvpn-enabled-mode")

                            self.relay_policy = YLeaf(YType.enumeration, "relay-policy")

                            self.vrf_name = YLeafList(YType.str, "vrf-name")

                            self.interface_references = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences()
                            self.interface_references.parent = self
                            self._children_name_map["interface_references"] = "interface-references"
                            self._children_yang_names.add("interface-references")

                            self.vrf_references = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences()
                            self.vrf_references.parent = self
                            self._children_name_map["vrf_references"] = "vrf-references"
                            self._children_yang_names.add("vrf-references")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("profile_name",
                                            "gi_addr",
                                            "is_move_allowed",
                                            "is_relay_allow_untrusted_enabled",
                                            "is_relay_check",
                                            "is_relay_option_enabled",
                                            "is_relay_optionvpn_enabled",
                                            "profile_helper_address",
                                            "proxy_broadcast_flag_policy",
                                            "proxy_lease_limit_count",
                                            "proxy_lease_limit_type",
                                            "proxy_profile_client_lease_time",
                                            "relay_authenticate",
                                            "relay_optionvpn_enabled_mode",
                                            "relay_policy",
                                            "vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile, self).__setattr__(name, value)


                        class VrfReferences(Entity):
                            """
                            VRF references
                            
                            .. attribute:: ipv4_dhcpd_proxy_vrf_reference
                            
                            	ipv4 dhcpd proxy vrf reference
                            	**type**\: list of    :py:class:`Ipv4DhcpdProxyVrfReference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences.Ipv4DhcpdProxyVrfReference>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences, self).__init__()

                                self.yang_name = "vrf-references"
                                self.yang_parent_name = "profile"

                                self.ipv4_dhcpd_proxy_vrf_reference = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences, self).__setattr__(name, value)


                            class Ipv4DhcpdProxyVrfReference(Entity):
                                """
                                ipv4 dhcpd proxy vrf reference
                                
                                .. attribute:: proxy_reference_vrf_name
                                
                                	VRF name
                                	**type**\:  str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences.Ipv4DhcpdProxyVrfReference, self).__init__()

                                    self.yang_name = "ipv4-dhcpd-proxy-vrf-reference"
                                    self.yang_parent_name = "vrf-references"

                                    self.proxy_reference_vrf_name = YLeaf(YType.str, "proxy-reference-vrf-name")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("proxy_reference_vrf_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences.Ipv4DhcpdProxyVrfReference, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences.Ipv4DhcpdProxyVrfReference, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.proxy_reference_vrf_name.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.proxy_reference_vrf_name.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ipv4-dhcpd-proxy-vrf-reference" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.proxy_reference_vrf_name.is_set or self.proxy_reference_vrf_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.proxy_reference_vrf_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "proxy-reference-vrf-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "proxy-reference-vrf-name"):
                                        self.proxy_reference_vrf_name = value
                                        self.proxy_reference_vrf_name.value_namespace = name_space
                                        self.proxy_reference_vrf_name.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.ipv4_dhcpd_proxy_vrf_reference:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.ipv4_dhcpd_proxy_vrf_reference:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "vrf-references" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ipv4-dhcpd-proxy-vrf-reference"):
                                    for c in self.ipv4_dhcpd_proxy_vrf_reference:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences.Ipv4DhcpdProxyVrfReference()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.ipv4_dhcpd_proxy_vrf_reference.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ipv4-dhcpd-proxy-vrf-reference"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class InterfaceReferences(Entity):
                            """
                            Interface references
                            
                            .. attribute:: ipv4_dhcpd_proxy_interface_reference
                            
                            	ipv4 dhcpd proxy interface reference
                            	**type**\: list of    :py:class:`Ipv4DhcpdProxyInterfaceReference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences.Ipv4DhcpdProxyInterfaceReference>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences, self).__init__()

                                self.yang_name = "interface-references"
                                self.yang_parent_name = "profile"

                                self.ipv4_dhcpd_proxy_interface_reference = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences, self).__setattr__(name, value)


                            class Ipv4DhcpdProxyInterfaceReference(Entity):
                                """
                                ipv4 dhcpd proxy interface reference
                                
                                .. attribute:: proxy_reference_interface_name
                                
                                	Interface name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences.Ipv4DhcpdProxyInterfaceReference, self).__init__()

                                    self.yang_name = "ipv4-dhcpd-proxy-interface-reference"
                                    self.yang_parent_name = "interface-references"

                                    self.proxy_reference_interface_name = YLeaf(YType.str, "proxy-reference-interface-name")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("proxy_reference_interface_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences.Ipv4DhcpdProxyInterfaceReference, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences.Ipv4DhcpdProxyInterfaceReference, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.proxy_reference_interface_name.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.proxy_reference_interface_name.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ipv4-dhcpd-proxy-interface-reference" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.proxy_reference_interface_name.is_set or self.proxy_reference_interface_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.proxy_reference_interface_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "proxy-reference-interface-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "proxy-reference-interface-name"):
                                        self.proxy_reference_interface_name = value
                                        self.proxy_reference_interface_name.value_namespace = name_space
                                        self.proxy_reference_interface_name.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.ipv4_dhcpd_proxy_interface_reference:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.ipv4_dhcpd_proxy_interface_reference:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "interface-references" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ipv4-dhcpd-proxy-interface-reference"):
                                    for c in self.ipv4_dhcpd_proxy_interface_reference:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences.Ipv4DhcpdProxyInterfaceReference()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.ipv4_dhcpd_proxy_interface_reference.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ipv4-dhcpd-proxy-interface-reference"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            for leaf in self.gi_addr.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            for leaf in self.profile_helper_address.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            for leaf in self.vrf_name.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            return (
                                self.profile_name.is_set or
                                self.is_move_allowed.is_set or
                                self.is_relay_allow_untrusted_enabled.is_set or
                                self.is_relay_check.is_set or
                                self.is_relay_option_enabled.is_set or
                                self.is_relay_optionvpn_enabled.is_set or
                                self.proxy_broadcast_flag_policy.is_set or
                                self.proxy_lease_limit_count.is_set or
                                self.proxy_lease_limit_type.is_set or
                                self.proxy_profile_client_lease_time.is_set or
                                self.relay_authenticate.is_set or
                                self.relay_optionvpn_enabled_mode.is_set or
                                self.relay_policy.is_set or
                                (self.interface_references is not None and self.interface_references.has_data()) or
                                (self.vrf_references is not None and self.vrf_references.has_data()))

                        def has_operation(self):
                            for leaf in self.gi_addr.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            for leaf in self.profile_helper_address.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            for leaf in self.vrf_name.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.profile_name.yfilter != YFilter.not_set or
                                self.gi_addr.yfilter != YFilter.not_set or
                                self.is_move_allowed.yfilter != YFilter.not_set or
                                self.is_relay_allow_untrusted_enabled.yfilter != YFilter.not_set or
                                self.is_relay_check.yfilter != YFilter.not_set or
                                self.is_relay_option_enabled.yfilter != YFilter.not_set or
                                self.is_relay_optionvpn_enabled.yfilter != YFilter.not_set or
                                self.profile_helper_address.yfilter != YFilter.not_set or
                                self.proxy_broadcast_flag_policy.yfilter != YFilter.not_set or
                                self.proxy_lease_limit_count.yfilter != YFilter.not_set or
                                self.proxy_lease_limit_type.yfilter != YFilter.not_set or
                                self.proxy_profile_client_lease_time.yfilter != YFilter.not_set or
                                self.relay_authenticate.yfilter != YFilter.not_set or
                                self.relay_optionvpn_enabled_mode.yfilter != YFilter.not_set or
                                self.relay_policy.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.interface_references is not None and self.interface_references.has_operation()) or
                                (self.vrf_references is not None and self.vrf_references.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "profile" + "[profile-name='" + self.profile_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.profile_name.get_name_leafdata())
                            if (self.is_move_allowed.is_set or self.is_move_allowed.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_move_allowed.get_name_leafdata())
                            if (self.is_relay_allow_untrusted_enabled.is_set or self.is_relay_allow_untrusted_enabled.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_relay_allow_untrusted_enabled.get_name_leafdata())
                            if (self.is_relay_check.is_set or self.is_relay_check.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_relay_check.get_name_leafdata())
                            if (self.is_relay_option_enabled.is_set or self.is_relay_option_enabled.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_relay_option_enabled.get_name_leafdata())
                            if (self.is_relay_optionvpn_enabled.is_set or self.is_relay_optionvpn_enabled.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_relay_optionvpn_enabled.get_name_leafdata())
                            if (self.proxy_broadcast_flag_policy.is_set or self.proxy_broadcast_flag_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_broadcast_flag_policy.get_name_leafdata())
                            if (self.proxy_lease_limit_count.is_set or self.proxy_lease_limit_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_lease_limit_count.get_name_leafdata())
                            if (self.proxy_lease_limit_type.is_set or self.proxy_lease_limit_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_lease_limit_type.get_name_leafdata())
                            if (self.proxy_profile_client_lease_time.is_set or self.proxy_profile_client_lease_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_profile_client_lease_time.get_name_leafdata())
                            if (self.relay_authenticate.is_set or self.relay_authenticate.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_authenticate.get_name_leafdata())
                            if (self.relay_optionvpn_enabled_mode.is_set or self.relay_optionvpn_enabled_mode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_optionvpn_enabled_mode.get_name_leafdata())
                            if (self.relay_policy.is_set or self.relay_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_policy.get_name_leafdata())

                            leaf_name_data.extend(self.gi_addr.get_name_leafdata())

                            leaf_name_data.extend(self.profile_helper_address.get_name_leafdata())

                            leaf_name_data.extend(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "interface-references"):
                                if (self.interface_references is None):
                                    self.interface_references = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.InterfaceReferences()
                                    self.interface_references.parent = self
                                    self._children_name_map["interface_references"] = "interface-references"
                                return self.interface_references

                            if (child_yang_name == "vrf-references"):
                                if (self.vrf_references is None):
                                    self.vrf_references = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile.VrfReferences()
                                    self.vrf_references.parent = self
                                    self._children_name_map["vrf_references"] = "vrf-references"
                                return self.vrf_references

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "interface-references" or name == "vrf-references" or name == "profile-name" or name == "gi-addr" or name == "is-move-allowed" or name == "is-relay-allow-untrusted-enabled" or name == "is-relay-check" or name == "is-relay-option-enabled" or name == "is-relay-optionvpn-enabled" or name == "profile-helper-address" or name == "proxy-broadcast-flag-policy" or name == "proxy-lease-limit-count" or name == "proxy-lease-limit-type" or name == "proxy-profile-client-lease-time" or name == "relay-authenticate" or name == "relay-optionvpn-enabled-mode" or name == "relay-policy" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "profile-name"):
                                self.profile_name = value
                                self.profile_name.value_namespace = name_space
                                self.profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "gi-addr"):
                                self.gi_addr.append(value)
                            if(value_path == "is-move-allowed"):
                                self.is_move_allowed = value
                                self.is_move_allowed.value_namespace = name_space
                                self.is_move_allowed.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-relay-allow-untrusted-enabled"):
                                self.is_relay_allow_untrusted_enabled = value
                                self.is_relay_allow_untrusted_enabled.value_namespace = name_space
                                self.is_relay_allow_untrusted_enabled.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-relay-check"):
                                self.is_relay_check = value
                                self.is_relay_check.value_namespace = name_space
                                self.is_relay_check.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-relay-option-enabled"):
                                self.is_relay_option_enabled = value
                                self.is_relay_option_enabled.value_namespace = name_space
                                self.is_relay_option_enabled.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-relay-optionvpn-enabled"):
                                self.is_relay_optionvpn_enabled = value
                                self.is_relay_optionvpn_enabled.value_namespace = name_space
                                self.is_relay_optionvpn_enabled.value_namespace_prefix = name_space_prefix
                            if(value_path == "profile-helper-address"):
                                self.profile_helper_address.append(value)
                            if(value_path == "proxy-broadcast-flag-policy"):
                                self.proxy_broadcast_flag_policy = value
                                self.proxy_broadcast_flag_policy.value_namespace = name_space
                                self.proxy_broadcast_flag_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-lease-limit-count"):
                                self.proxy_lease_limit_count = value
                                self.proxy_lease_limit_count.value_namespace = name_space
                                self.proxy_lease_limit_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-lease-limit-type"):
                                self.proxy_lease_limit_type = value
                                self.proxy_lease_limit_type.value_namespace = name_space
                                self.proxy_lease_limit_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-profile-client-lease-time"):
                                self.proxy_profile_client_lease_time = value
                                self.proxy_profile_client_lease_time.value_namespace = name_space
                                self.proxy_profile_client_lease_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-authenticate"):
                                self.relay_authenticate = value
                                self.relay_authenticate.value_namespace = name_space
                                self.relay_authenticate.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-optionvpn-enabled-mode"):
                                self.relay_optionvpn_enabled_mode = value
                                self.relay_optionvpn_enabled_mode.value_namespace = name_space
                                self.relay_optionvpn_enabled_mode.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-policy"):
                                self.relay_policy = value
                                self.relay_policy.value_namespace = name_space
                                self.relay_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "vrf-name"):
                                self.vrf_name.append(value)

                    def has_data(self):
                        for c in self.profile:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.profile:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "profiles" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "profile"):
                            for c in self.profile:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles.Profile()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.profile.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "profile"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Statistics(Entity):
                    """
                    DHCP proxy statistics
                    
                    .. attribute:: ipv4_dhcpd_proxy_stat
                    
                    	ipv4 dhcpd proxy stat
                    	**type**\: list of    :py:class:`Ipv4DhcpdProxyStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "proxy"

                        self.ipv4_dhcpd_proxy_stat = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics, self).__setattr__(name, value)


                    class Ipv4DhcpdProxyStat(Entity):
                        """
                        ipv4 dhcpd proxy stat
                        
                        .. attribute:: statistics
                        
                        	Proxy statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat.Statistics>`
                        
                        .. attribute:: vrf_name
                        
                        	DHCP L3 VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat, self).__init__()

                            self.yang_name = "ipv4-dhcpd-proxy-stat"
                            self.yang_parent_name = "statistics"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            Proxy statistics
                            
                            .. attribute:: dropped_packets
                            
                            	Dropped packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: received_packets
                            
                            	Received packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: transmitted_packets
                            
                            	Transmitted packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "ipv4-dhcpd-proxy-stat"

                                self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                self.received_packets = YLeaf(YType.uint64, "received-packets")

                                self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dropped_packets",
                                                "received_packets",
                                                "transmitted_packets") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dropped_packets.is_set or
                                    self.received_packets.is_set or
                                    self.transmitted_packets.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dropped_packets.yfilter != YFilter.not_set or
                                    self.received_packets.yfilter != YFilter.not_set or
                                    self.transmitted_packets.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.received_packets.get_name_leafdata())
                                if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dropped-packets"):
                                    self.dropped_packets = value
                                    self.dropped_packets.value_namespace = name_space
                                    self.dropped_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "received-packets"):
                                    self.received_packets = value
                                    self.received_packets.value_namespace = name_space
                                    self.received_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "transmitted-packets"):
                                    self.transmitted_packets = value
                                    self.transmitted_packets.value_namespace = name_space
                                    self.transmitted_packets.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv4-dhcpd-proxy-stat" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv4_dhcpd_proxy_stat:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv4_dhcpd_proxy_stat:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv4-dhcpd-proxy-stat"):
                            for c in self.ipv4_dhcpd_proxy_stat:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Proxy.Statistics.Ipv4DhcpdProxyStat()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv4_dhcpd_proxy_stat.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv4-dhcpd-proxy-stat"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Binding(Entity):
                    """
                    DHCP proxy bindings
                    
                    .. attribute:: clients
                    
                    	DHCP proxy client bindings
                    	**type**\:   :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients>`
                    
                    .. attribute:: summary
                    
                    	DHCP proxy binding summary
                    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Summary>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding, self).__init__()

                        self.yang_name = "binding"
                        self.yang_parent_name = "proxy"

                        self.clients = Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients()
                        self.clients.parent = self
                        self._children_name_map["clients"] = "clients"
                        self._children_yang_names.add("clients")

                        self.summary = Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                        self._children_yang_names.add("summary")


                    class Clients(Entity):
                        """
                        DHCP proxy client bindings
                        
                        .. attribute:: client
                        
                        	Single DHCP proxy binding
                        	**type**\: list of    :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients.Client>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients, self).__init__()

                            self.yang_name = "clients"
                            self.yang_parent_name = "binding"

                            self.client = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients, self).__setattr__(name, value)


                        class Client(Entity):
                            """
                            Single DHCP proxy binding
                            
                            .. attribute:: client_id  <key>
                            
                            	Client ID
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: access_vrf_name
                            
                            	DHCP access interface VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: client_gi_addr
                            
                            	DHCP client GIADDR
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: client_id_xr
                            
                            	DHCP client identifier
                            	**type**\:  str
                            
                            	**length:** 0..1275
                            
                            .. attribute:: event_history
                            
                            	event history
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: interface_name
                            
                            	DHCP access interface to client
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: ip_address
                            
                            	DHCP IP address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: is_auth_received
                            
                            	Is true if authentication is on received option82
                            	**type**\:  bool
                            
                            .. attribute:: is_mbl_subscriber
                            
                            	Is true if DHCP subscriber is Mobile
                            	**type**\:  bool
                            
                            .. attribute:: is_nak_next_renew
                            
                            	Is true if DHCP next renew from client will be NAK'd
                            	**type**\:  bool
                            
                            .. attribute:: lease_time
                            
                            	Lease time in seconds
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: mac_address
                            
                            	DHCP client MAC address
                            	**type**\:  str
                            
                            .. attribute:: old_subscriber_label
                            
                            	DHCP old subscriber label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: param_request
                            
                            	DHCP parameter request option
                            	**type**\:  str
                            
                            	**length:** 0..513
                            
                            .. attribute:: param_response
                            
                            	DHCP saved options
                            	**type**\:  str
                            
                            	**length:** 0..2051
                            
                            .. attribute:: profile_name
                            
                            	DHCP profile name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: proxy_binding_inner_tag
                            
                            	DHCP VLAN inner VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: proxy_binding_outer_tag
                            
                            	DHCP VLAN outer VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: remaining_lease_time
                            
                            	Remaining lease time in seconds
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: reply_server_ip_address
                            
                            	DHCP reply server IP address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: rx_circuit_id
                            
                            	DHCP received circuit ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: rx_remote_id
                            
                            	DHCP received Remote ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: rx_vsiso
                            
                            	DHCP received VSISO
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: server_ip_address
                            
                            	DHCP server IP address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: server_vrf_name
                            
                            	DHCP server VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: session_start_time
                            
                            	session start time
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: srg_state
                            
                            	DHCPV4 SRG state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: state
                            
                            	DHCP client state
                            	**type**\:   :py:class:`BagDhcpdProxyState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.BagDhcpdProxyState>`
                            
                            .. attribute:: subscriber_interface_name
                            
                            	DHCP subscriber interface
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: subscriber_label
                            
                            	DHCP subscriber label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: to_server_gi_addr
                            
                            	DHCP to server GIADDR
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tx_circuit_id
                            
                            	DHCP transmitted circuit ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: tx_remote_id
                            
                            	DHCP transmitted Remote ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: tx_vsiso
                            
                            	DHCP transmitted VSISO
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: vrf_name
                            
                            	DHCP client/subscriber VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients.Client, self).__init__()

                                self.yang_name = "client"
                                self.yang_parent_name = "clients"

                                self.client_id = YLeaf(YType.str, "client-id")

                                self.access_vrf_name = YLeaf(YType.str, "access-vrf-name")

                                self.client_gi_addr = YLeaf(YType.str, "client-gi-addr")

                                self.client_id_xr = YLeaf(YType.str, "client-id-xr")

                                self.event_history = YLeafList(YType.uint32, "event-history")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.ip_address = YLeaf(YType.str, "ip-address")

                                self.is_auth_received = YLeaf(YType.boolean, "is-auth-received")

                                self.is_mbl_subscriber = YLeaf(YType.boolean, "is-mbl-subscriber")

                                self.is_nak_next_renew = YLeaf(YType.boolean, "is-nak-next-renew")

                                self.lease_time = YLeaf(YType.uint32, "lease-time")

                                self.mac_address = YLeaf(YType.str, "mac-address")

                                self.old_subscriber_label = YLeaf(YType.uint32, "old-subscriber-label")

                                self.param_request = YLeaf(YType.str, "param-request")

                                self.param_response = YLeaf(YType.str, "param-response")

                                self.profile_name = YLeaf(YType.str, "profile-name")

                                self.proxy_binding_inner_tag = YLeaf(YType.uint32, "proxy-binding-inner-tag")

                                self.proxy_binding_outer_tag = YLeaf(YType.uint32, "proxy-binding-outer-tag")

                                self.remaining_lease_time = YLeaf(YType.uint32, "remaining-lease-time")

                                self.reply_server_ip_address = YLeaf(YType.str, "reply-server-ip-address")

                                self.rx_circuit_id = YLeaf(YType.str, "rx-circuit-id")

                                self.rx_remote_id = YLeaf(YType.str, "rx-remote-id")

                                self.rx_vsiso = YLeaf(YType.str, "rx-vsiso")

                                self.server_ip_address = YLeaf(YType.str, "server-ip-address")

                                self.server_vrf_name = YLeaf(YType.str, "server-vrf-name")

                                self.session_start_time = YLeaf(YType.uint64, "session-start-time")

                                self.srg_state = YLeaf(YType.uint32, "srg-state")

                                self.state = YLeaf(YType.enumeration, "state")

                                self.subscriber_interface_name = YLeaf(YType.str, "subscriber-interface-name")

                                self.subscriber_label = YLeaf(YType.uint32, "subscriber-label")

                                self.to_server_gi_addr = YLeaf(YType.str, "to-server-gi-addr")

                                self.tx_circuit_id = YLeaf(YType.str, "tx-circuit-id")

                                self.tx_remote_id = YLeaf(YType.str, "tx-remote-id")

                                self.tx_vsiso = YLeaf(YType.str, "tx-vsiso")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("client_id",
                                                "access_vrf_name",
                                                "client_gi_addr",
                                                "client_id_xr",
                                                "event_history",
                                                "interface_name",
                                                "ip_address",
                                                "is_auth_received",
                                                "is_mbl_subscriber",
                                                "is_nak_next_renew",
                                                "lease_time",
                                                "mac_address",
                                                "old_subscriber_label",
                                                "param_request",
                                                "param_response",
                                                "profile_name",
                                                "proxy_binding_inner_tag",
                                                "proxy_binding_outer_tag",
                                                "remaining_lease_time",
                                                "reply_server_ip_address",
                                                "rx_circuit_id",
                                                "rx_remote_id",
                                                "rx_vsiso",
                                                "server_ip_address",
                                                "server_vrf_name",
                                                "session_start_time",
                                                "srg_state",
                                                "state",
                                                "subscriber_interface_name",
                                                "subscriber_label",
                                                "to_server_gi_addr",
                                                "tx_circuit_id",
                                                "tx_remote_id",
                                                "tx_vsiso",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients.Client, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients.Client, self).__setattr__(name, value)

                            def has_data(self):
                                for leaf in self.event_history.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return (
                                    self.client_id.is_set or
                                    self.access_vrf_name.is_set or
                                    self.client_gi_addr.is_set or
                                    self.client_id_xr.is_set or
                                    self.interface_name.is_set or
                                    self.ip_address.is_set or
                                    self.is_auth_received.is_set or
                                    self.is_mbl_subscriber.is_set or
                                    self.is_nak_next_renew.is_set or
                                    self.lease_time.is_set or
                                    self.mac_address.is_set or
                                    self.old_subscriber_label.is_set or
                                    self.param_request.is_set or
                                    self.param_response.is_set or
                                    self.profile_name.is_set or
                                    self.proxy_binding_inner_tag.is_set or
                                    self.proxy_binding_outer_tag.is_set or
                                    self.remaining_lease_time.is_set or
                                    self.reply_server_ip_address.is_set or
                                    self.rx_circuit_id.is_set or
                                    self.rx_remote_id.is_set or
                                    self.rx_vsiso.is_set or
                                    self.server_ip_address.is_set or
                                    self.server_vrf_name.is_set or
                                    self.session_start_time.is_set or
                                    self.srg_state.is_set or
                                    self.state.is_set or
                                    self.subscriber_interface_name.is_set or
                                    self.subscriber_label.is_set or
                                    self.to_server_gi_addr.is_set or
                                    self.tx_circuit_id.is_set or
                                    self.tx_remote_id.is_set or
                                    self.tx_vsiso.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                for leaf in self.event_history.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.client_id.yfilter != YFilter.not_set or
                                    self.access_vrf_name.yfilter != YFilter.not_set or
                                    self.client_gi_addr.yfilter != YFilter.not_set or
                                    self.client_id_xr.yfilter != YFilter.not_set or
                                    self.event_history.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.ip_address.yfilter != YFilter.not_set or
                                    self.is_auth_received.yfilter != YFilter.not_set or
                                    self.is_mbl_subscriber.yfilter != YFilter.not_set or
                                    self.is_nak_next_renew.yfilter != YFilter.not_set or
                                    self.lease_time.yfilter != YFilter.not_set or
                                    self.mac_address.yfilter != YFilter.not_set or
                                    self.old_subscriber_label.yfilter != YFilter.not_set or
                                    self.param_request.yfilter != YFilter.not_set or
                                    self.param_response.yfilter != YFilter.not_set or
                                    self.profile_name.yfilter != YFilter.not_set or
                                    self.proxy_binding_inner_tag.yfilter != YFilter.not_set or
                                    self.proxy_binding_outer_tag.yfilter != YFilter.not_set or
                                    self.remaining_lease_time.yfilter != YFilter.not_set or
                                    self.reply_server_ip_address.yfilter != YFilter.not_set or
                                    self.rx_circuit_id.yfilter != YFilter.not_set or
                                    self.rx_remote_id.yfilter != YFilter.not_set or
                                    self.rx_vsiso.yfilter != YFilter.not_set or
                                    self.server_ip_address.yfilter != YFilter.not_set or
                                    self.server_vrf_name.yfilter != YFilter.not_set or
                                    self.session_start_time.yfilter != YFilter.not_set or
                                    self.srg_state.yfilter != YFilter.not_set or
                                    self.state.yfilter != YFilter.not_set or
                                    self.subscriber_interface_name.yfilter != YFilter.not_set or
                                    self.subscriber_label.yfilter != YFilter.not_set or
                                    self.to_server_gi_addr.yfilter != YFilter.not_set or
                                    self.tx_circuit_id.yfilter != YFilter.not_set or
                                    self.tx_remote_id.yfilter != YFilter.not_set or
                                    self.tx_vsiso.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "client" + "[client-id='" + self.client_id.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.client_id.is_set or self.client_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id.get_name_leafdata())
                                if (self.access_vrf_name.is_set or self.access_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.access_vrf_name.get_name_leafdata())
                                if (self.client_gi_addr.is_set or self.client_gi_addr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_gi_addr.get_name_leafdata())
                                if (self.client_id_xr.is_set or self.client_id_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id_xr.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.ip_address.is_set or self.ip_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ip_address.get_name_leafdata())
                                if (self.is_auth_received.is_set or self.is_auth_received.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_auth_received.get_name_leafdata())
                                if (self.is_mbl_subscriber.is_set or self.is_mbl_subscriber.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_mbl_subscriber.get_name_leafdata())
                                if (self.is_nak_next_renew.is_set or self.is_nak_next_renew.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_nak_next_renew.get_name_leafdata())
                                if (self.lease_time.is_set or self.lease_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.lease_time.get_name_leafdata())
                                if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mac_address.get_name_leafdata())
                                if (self.old_subscriber_label.is_set or self.old_subscriber_label.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.old_subscriber_label.get_name_leafdata())
                                if (self.param_request.is_set or self.param_request.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.param_request.get_name_leafdata())
                                if (self.param_response.is_set or self.param_response.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.param_response.get_name_leafdata())
                                if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_name.get_name_leafdata())
                                if (self.proxy_binding_inner_tag.is_set or self.proxy_binding_inner_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proxy_binding_inner_tag.get_name_leafdata())
                                if (self.proxy_binding_outer_tag.is_set or self.proxy_binding_outer_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proxy_binding_outer_tag.get_name_leafdata())
                                if (self.remaining_lease_time.is_set or self.remaining_lease_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.remaining_lease_time.get_name_leafdata())
                                if (self.reply_server_ip_address.is_set or self.reply_server_ip_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.reply_server_ip_address.get_name_leafdata())
                                if (self.rx_circuit_id.is_set or self.rx_circuit_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_circuit_id.get_name_leafdata())
                                if (self.rx_remote_id.is_set or self.rx_remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_remote_id.get_name_leafdata())
                                if (self.rx_vsiso.is_set or self.rx_vsiso.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_vsiso.get_name_leafdata())
                                if (self.server_ip_address.is_set or self.server_ip_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_ip_address.get_name_leafdata())
                                if (self.server_vrf_name.is_set or self.server_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_vrf_name.get_name_leafdata())
                                if (self.session_start_time.is_set or self.session_start_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.session_start_time.get_name_leafdata())
                                if (self.srg_state.is_set or self.srg_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_state.get_name_leafdata())
                                if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.state.get_name_leafdata())
                                if (self.subscriber_interface_name.is_set or self.subscriber_interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.subscriber_interface_name.get_name_leafdata())
                                if (self.subscriber_label.is_set or self.subscriber_label.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.subscriber_label.get_name_leafdata())
                                if (self.to_server_gi_addr.is_set or self.to_server_gi_addr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.to_server_gi_addr.get_name_leafdata())
                                if (self.tx_circuit_id.is_set or self.tx_circuit_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_circuit_id.get_name_leafdata())
                                if (self.tx_remote_id.is_set or self.tx_remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_remote_id.get_name_leafdata())
                                if (self.tx_vsiso.is_set or self.tx_vsiso.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_vsiso.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                leaf_name_data.extend(self.event_history.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "client-id" or name == "access-vrf-name" or name == "client-gi-addr" or name == "client-id-xr" or name == "event-history" or name == "interface-name" or name == "ip-address" or name == "is-auth-received" or name == "is-mbl-subscriber" or name == "is-nak-next-renew" or name == "lease-time" or name == "mac-address" or name == "old-subscriber-label" or name == "param-request" or name == "param-response" or name == "profile-name" or name == "proxy-binding-inner-tag" or name == "proxy-binding-outer-tag" or name == "remaining-lease-time" or name == "reply-server-ip-address" or name == "rx-circuit-id" or name == "rx-remote-id" or name == "rx-vsiso" or name == "server-ip-address" or name == "server-vrf-name" or name == "session-start-time" or name == "srg-state" or name == "state" or name == "subscriber-interface-name" or name == "subscriber-label" or name == "to-server-gi-addr" or name == "tx-circuit-id" or name == "tx-remote-id" or name == "tx-vsiso" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "client-id"):
                                    self.client_id = value
                                    self.client_id.value_namespace = name_space
                                    self.client_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "access-vrf-name"):
                                    self.access_vrf_name = value
                                    self.access_vrf_name.value_namespace = name_space
                                    self.access_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-gi-addr"):
                                    self.client_gi_addr = value
                                    self.client_gi_addr.value_namespace = name_space
                                    self.client_gi_addr.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-id-xr"):
                                    self.client_id_xr = value
                                    self.client_id_xr.value_namespace = name_space
                                    self.client_id_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "event-history"):
                                    self.event_history.append(value)
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "ip-address"):
                                    self.ip_address = value
                                    self.ip_address.value_namespace = name_space
                                    self.ip_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-auth-received"):
                                    self.is_auth_received = value
                                    self.is_auth_received.value_namespace = name_space
                                    self.is_auth_received.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-mbl-subscriber"):
                                    self.is_mbl_subscriber = value
                                    self.is_mbl_subscriber.value_namespace = name_space
                                    self.is_mbl_subscriber.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-nak-next-renew"):
                                    self.is_nak_next_renew = value
                                    self.is_nak_next_renew.value_namespace = name_space
                                    self.is_nak_next_renew.value_namespace_prefix = name_space_prefix
                                if(value_path == "lease-time"):
                                    self.lease_time = value
                                    self.lease_time.value_namespace = name_space
                                    self.lease_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "mac-address"):
                                    self.mac_address = value
                                    self.mac_address.value_namespace = name_space
                                    self.mac_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "old-subscriber-label"):
                                    self.old_subscriber_label = value
                                    self.old_subscriber_label.value_namespace = name_space
                                    self.old_subscriber_label.value_namespace_prefix = name_space_prefix
                                if(value_path == "param-request"):
                                    self.param_request = value
                                    self.param_request.value_namespace = name_space
                                    self.param_request.value_namespace_prefix = name_space_prefix
                                if(value_path == "param-response"):
                                    self.param_response = value
                                    self.param_response.value_namespace = name_space
                                    self.param_response.value_namespace_prefix = name_space_prefix
                                if(value_path == "profile-name"):
                                    self.profile_name = value
                                    self.profile_name.value_namespace = name_space
                                    self.profile_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "proxy-binding-inner-tag"):
                                    self.proxy_binding_inner_tag = value
                                    self.proxy_binding_inner_tag.value_namespace = name_space
                                    self.proxy_binding_inner_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "proxy-binding-outer-tag"):
                                    self.proxy_binding_outer_tag = value
                                    self.proxy_binding_outer_tag.value_namespace = name_space
                                    self.proxy_binding_outer_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "remaining-lease-time"):
                                    self.remaining_lease_time = value
                                    self.remaining_lease_time.value_namespace = name_space
                                    self.remaining_lease_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "reply-server-ip-address"):
                                    self.reply_server_ip_address = value
                                    self.reply_server_ip_address.value_namespace = name_space
                                    self.reply_server_ip_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-circuit-id"):
                                    self.rx_circuit_id = value
                                    self.rx_circuit_id.value_namespace = name_space
                                    self.rx_circuit_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-remote-id"):
                                    self.rx_remote_id = value
                                    self.rx_remote_id.value_namespace = name_space
                                    self.rx_remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-vsiso"):
                                    self.rx_vsiso = value
                                    self.rx_vsiso.value_namespace = name_space
                                    self.rx_vsiso.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-ip-address"):
                                    self.server_ip_address = value
                                    self.server_ip_address.value_namespace = name_space
                                    self.server_ip_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-vrf-name"):
                                    self.server_vrf_name = value
                                    self.server_vrf_name.value_namespace = name_space
                                    self.server_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "session-start-time"):
                                    self.session_start_time = value
                                    self.session_start_time.value_namespace = name_space
                                    self.session_start_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-state"):
                                    self.srg_state = value
                                    self.srg_state.value_namespace = name_space
                                    self.srg_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "state"):
                                    self.state = value
                                    self.state.value_namespace = name_space
                                    self.state.value_namespace_prefix = name_space_prefix
                                if(value_path == "subscriber-interface-name"):
                                    self.subscriber_interface_name = value
                                    self.subscriber_interface_name.value_namespace = name_space
                                    self.subscriber_interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "subscriber-label"):
                                    self.subscriber_label = value
                                    self.subscriber_label.value_namespace = name_space
                                    self.subscriber_label.value_namespace_prefix = name_space_prefix
                                if(value_path == "to-server-gi-addr"):
                                    self.to_server_gi_addr = value
                                    self.to_server_gi_addr.value_namespace = name_space
                                    self.to_server_gi_addr.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-circuit-id"):
                                    self.tx_circuit_id = value
                                    self.tx_circuit_id.value_namespace = name_space
                                    self.tx_circuit_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-remote-id"):
                                    self.tx_remote_id = value
                                    self.tx_remote_id.value_namespace = name_space
                                    self.tx_remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-vsiso"):
                                    self.tx_vsiso = value
                                    self.tx_vsiso.value_namespace = name_space
                                    self.tx_vsiso.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.client:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.client:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "clients" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "client"):
                                for c in self.client:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients.Client()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.client.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "client"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Summary(Entity):
                        """
                        DHCP proxy binding summary
                        
                        .. attribute:: ack_waiting_for_dpm
                        
                        	Number of clients in Waiting for DPM with ACK
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: bound_clients
                        
                        	Number of clients in bound state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: clients
                        
                        	Total number of clients
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: deleting_clients_d
                        
                        	Number of clients in deleting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: disconnected_clients
                        
                        	Number of clients in disconnected state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: informing_clients
                        
                        	Number of clients in informing state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: initializing_clients
                        
                        	Number of clients in init state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: offer_sent_for_client
                        
                        	Number of clients in Offer sent state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reauthorizing_clients
                        
                        	Number of clients in reauth state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: renewing_clients
                        
                        	Number of clients in renewing state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: request_waiting_for_dpm
                        
                        	Number of clients in Waiting for DPM with Request
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: requesting_clients
                        
                        	Number of clients in requesting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: restarting_clients
                        
                        	Number of clients in restarting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: selecting_clients
                        
                        	Number of clients in selecting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_daps_init
                        
                        	Number of clients in Init DAPS wait state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_dpm_addr_change
                        
                        	Number of clients in Waiting for DPM after addr change
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_dpm_disconnect
                        
                        	Number of clients in waiting for DPM disconnect state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_dpm_init
                        
                        	Number of clients in Init DPM wait state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Summary, self).__init__()

                            self.yang_name = "summary"
                            self.yang_parent_name = "binding"

                            self.ack_waiting_for_dpm = YLeaf(YType.uint32, "ack-waiting-for-dpm")

                            self.bound_clients = YLeaf(YType.uint32, "bound-clients")

                            self.clients = YLeaf(YType.uint32, "clients")

                            self.deleting_clients_d = YLeaf(YType.uint32, "deleting-clients-d")

                            self.disconnected_clients = YLeaf(YType.uint32, "disconnected-clients")

                            self.informing_clients = YLeaf(YType.uint32, "informing-clients")

                            self.initializing_clients = YLeaf(YType.uint32, "initializing-clients")

                            self.offer_sent_for_client = YLeaf(YType.uint32, "offer-sent-for-client")

                            self.reauthorizing_clients = YLeaf(YType.uint32, "reauthorizing-clients")

                            self.renewing_clients = YLeaf(YType.uint32, "renewing-clients")

                            self.request_waiting_for_dpm = YLeaf(YType.uint32, "request-waiting-for-dpm")

                            self.requesting_clients = YLeaf(YType.uint32, "requesting-clients")

                            self.restarting_clients = YLeaf(YType.uint32, "restarting-clients")

                            self.selecting_clients = YLeaf(YType.uint32, "selecting-clients")

                            self.waiting_for_daps_init = YLeaf(YType.uint32, "waiting-for-daps-init")

                            self.waiting_for_dpm_addr_change = YLeaf(YType.uint32, "waiting-for-dpm-addr-change")

                            self.waiting_for_dpm_disconnect = YLeaf(YType.uint32, "waiting-for-dpm-disconnect")

                            self.waiting_for_dpm_init = YLeaf(YType.uint32, "waiting-for-dpm-init")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("ack_waiting_for_dpm",
                                            "bound_clients",
                                            "clients",
                                            "deleting_clients_d",
                                            "disconnected_clients",
                                            "informing_clients",
                                            "initializing_clients",
                                            "offer_sent_for_client",
                                            "reauthorizing_clients",
                                            "renewing_clients",
                                            "request_waiting_for_dpm",
                                            "requesting_clients",
                                            "restarting_clients",
                                            "selecting_clients",
                                            "waiting_for_daps_init",
                                            "waiting_for_dpm_addr_change",
                                            "waiting_for_dpm_disconnect",
                                            "waiting_for_dpm_init") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Summary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Summary, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.ack_waiting_for_dpm.is_set or
                                self.bound_clients.is_set or
                                self.clients.is_set or
                                self.deleting_clients_d.is_set or
                                self.disconnected_clients.is_set or
                                self.informing_clients.is_set or
                                self.initializing_clients.is_set or
                                self.offer_sent_for_client.is_set or
                                self.reauthorizing_clients.is_set or
                                self.renewing_clients.is_set or
                                self.request_waiting_for_dpm.is_set or
                                self.requesting_clients.is_set or
                                self.restarting_clients.is_set or
                                self.selecting_clients.is_set or
                                self.waiting_for_daps_init.is_set or
                                self.waiting_for_dpm_addr_change.is_set or
                                self.waiting_for_dpm_disconnect.is_set or
                                self.waiting_for_dpm_init.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.ack_waiting_for_dpm.yfilter != YFilter.not_set or
                                self.bound_clients.yfilter != YFilter.not_set or
                                self.clients.yfilter != YFilter.not_set or
                                self.deleting_clients_d.yfilter != YFilter.not_set or
                                self.disconnected_clients.yfilter != YFilter.not_set or
                                self.informing_clients.yfilter != YFilter.not_set or
                                self.initializing_clients.yfilter != YFilter.not_set or
                                self.offer_sent_for_client.yfilter != YFilter.not_set or
                                self.reauthorizing_clients.yfilter != YFilter.not_set or
                                self.renewing_clients.yfilter != YFilter.not_set or
                                self.request_waiting_for_dpm.yfilter != YFilter.not_set or
                                self.requesting_clients.yfilter != YFilter.not_set or
                                self.restarting_clients.yfilter != YFilter.not_set or
                                self.selecting_clients.yfilter != YFilter.not_set or
                                self.waiting_for_daps_init.yfilter != YFilter.not_set or
                                self.waiting_for_dpm_addr_change.yfilter != YFilter.not_set or
                                self.waiting_for_dpm_disconnect.yfilter != YFilter.not_set or
                                self.waiting_for_dpm_init.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "summary" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.ack_waiting_for_dpm.is_set or self.ack_waiting_for_dpm.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.ack_waiting_for_dpm.get_name_leafdata())
                            if (self.bound_clients.is_set or self.bound_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.bound_clients.get_name_leafdata())
                            if (self.clients.is_set or self.clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.clients.get_name_leafdata())
                            if (self.deleting_clients_d.is_set or self.deleting_clients_d.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.deleting_clients_d.get_name_leafdata())
                            if (self.disconnected_clients.is_set or self.disconnected_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.disconnected_clients.get_name_leafdata())
                            if (self.informing_clients.is_set or self.informing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.informing_clients.get_name_leafdata())
                            if (self.initializing_clients.is_set or self.initializing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.initializing_clients.get_name_leafdata())
                            if (self.offer_sent_for_client.is_set or self.offer_sent_for_client.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.offer_sent_for_client.get_name_leafdata())
                            if (self.reauthorizing_clients.is_set or self.reauthorizing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.reauthorizing_clients.get_name_leafdata())
                            if (self.renewing_clients.is_set or self.renewing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.renewing_clients.get_name_leafdata())
                            if (self.request_waiting_for_dpm.is_set or self.request_waiting_for_dpm.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.request_waiting_for_dpm.get_name_leafdata())
                            if (self.requesting_clients.is_set or self.requesting_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.requesting_clients.get_name_leafdata())
                            if (self.restarting_clients.is_set or self.restarting_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.restarting_clients.get_name_leafdata())
                            if (self.selecting_clients.is_set or self.selecting_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.selecting_clients.get_name_leafdata())
                            if (self.waiting_for_daps_init.is_set or self.waiting_for_daps_init.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_daps_init.get_name_leafdata())
                            if (self.waiting_for_dpm_addr_change.is_set or self.waiting_for_dpm_addr_change.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_dpm_addr_change.get_name_leafdata())
                            if (self.waiting_for_dpm_disconnect.is_set or self.waiting_for_dpm_disconnect.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_dpm_disconnect.get_name_leafdata())
                            if (self.waiting_for_dpm_init.is_set or self.waiting_for_dpm_init.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_dpm_init.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "ack-waiting-for-dpm" or name == "bound-clients" or name == "clients" or name == "deleting-clients-d" or name == "disconnected-clients" or name == "informing-clients" or name == "initializing-clients" or name == "offer-sent-for-client" or name == "reauthorizing-clients" or name == "renewing-clients" or name == "request-waiting-for-dpm" or name == "requesting-clients" or name == "restarting-clients" or name == "selecting-clients" or name == "waiting-for-daps-init" or name == "waiting-for-dpm-addr-change" or name == "waiting-for-dpm-disconnect" or name == "waiting-for-dpm-init"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "ack-waiting-for-dpm"):
                                self.ack_waiting_for_dpm = value
                                self.ack_waiting_for_dpm.value_namespace = name_space
                                self.ack_waiting_for_dpm.value_namespace_prefix = name_space_prefix
                            if(value_path == "bound-clients"):
                                self.bound_clients = value
                                self.bound_clients.value_namespace = name_space
                                self.bound_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "clients"):
                                self.clients = value
                                self.clients.value_namespace = name_space
                                self.clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "deleting-clients-d"):
                                self.deleting_clients_d = value
                                self.deleting_clients_d.value_namespace = name_space
                                self.deleting_clients_d.value_namespace_prefix = name_space_prefix
                            if(value_path == "disconnected-clients"):
                                self.disconnected_clients = value
                                self.disconnected_clients.value_namespace = name_space
                                self.disconnected_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "informing-clients"):
                                self.informing_clients = value
                                self.informing_clients.value_namespace = name_space
                                self.informing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "initializing-clients"):
                                self.initializing_clients = value
                                self.initializing_clients.value_namespace = name_space
                                self.initializing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "offer-sent-for-client"):
                                self.offer_sent_for_client = value
                                self.offer_sent_for_client.value_namespace = name_space
                                self.offer_sent_for_client.value_namespace_prefix = name_space_prefix
                            if(value_path == "reauthorizing-clients"):
                                self.reauthorizing_clients = value
                                self.reauthorizing_clients.value_namespace = name_space
                                self.reauthorizing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "renewing-clients"):
                                self.renewing_clients = value
                                self.renewing_clients.value_namespace = name_space
                                self.renewing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "request-waiting-for-dpm"):
                                self.request_waiting_for_dpm = value
                                self.request_waiting_for_dpm.value_namespace = name_space
                                self.request_waiting_for_dpm.value_namespace_prefix = name_space_prefix
                            if(value_path == "requesting-clients"):
                                self.requesting_clients = value
                                self.requesting_clients.value_namespace = name_space
                                self.requesting_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "restarting-clients"):
                                self.restarting_clients = value
                                self.restarting_clients.value_namespace = name_space
                                self.restarting_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "selecting-clients"):
                                self.selecting_clients = value
                                self.selecting_clients.value_namespace = name_space
                                self.selecting_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-daps-init"):
                                self.waiting_for_daps_init = value
                                self.waiting_for_daps_init.value_namespace = name_space
                                self.waiting_for_daps_init.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-dpm-addr-change"):
                                self.waiting_for_dpm_addr_change = value
                                self.waiting_for_dpm_addr_change.value_namespace = name_space
                                self.waiting_for_dpm_addr_change.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-dpm-disconnect"):
                                self.waiting_for_dpm_disconnect = value
                                self.waiting_for_dpm_disconnect.value_namespace = name_space
                                self.waiting_for_dpm_disconnect.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-dpm-init"):
                                self.waiting_for_dpm_init = value
                                self.waiting_for_dpm_init.value_namespace = name_space
                                self.waiting_for_dpm_init.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            (self.clients is not None and self.clients.has_data()) or
                            (self.summary is not None and self.summary.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.clients is not None and self.clients.has_operation()) or
                            (self.summary is not None and self.summary.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "binding" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "clients"):
                            if (self.clients is None):
                                self.clients = Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Clients()
                                self.clients.parent = self
                                self._children_name_map["clients"] = "clients"
                            return self.clients

                        if (child_yang_name == "summary"):
                            if (self.summary is None):
                                self.summary = Ipv4Dhcpd.Nodes.Node.Proxy.Binding.Summary()
                                self.summary.parent = self
                                self._children_name_map["summary"] = "summary"
                            return self.summary

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "clients" or name == "summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.binding is not None and self.binding.has_data()) or
                        (self.profiles is not None and self.profiles.has_data()) or
                        (self.statistics is not None and self.statistics.has_data()) or
                        (self.statistics_info is not None and self.statistics_info.has_data()) or
                        (self.vrfs is not None and self.vrfs.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.binding is not None and self.binding.has_operation()) or
                        (self.profiles is not None and self.profiles.has_operation()) or
                        (self.statistics is not None and self.statistics.has_operation()) or
                        (self.statistics_info is not None and self.statistics_info.has_operation()) or
                        (self.vrfs is not None and self.vrfs.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "proxy" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "binding"):
                        if (self.binding is None):
                            self.binding = Ipv4Dhcpd.Nodes.Node.Proxy.Binding()
                            self.binding.parent = self
                            self._children_name_map["binding"] = "binding"
                        return self.binding

                    if (child_yang_name == "profiles"):
                        if (self.profiles is None):
                            self.profiles = Ipv4Dhcpd.Nodes.Node.Proxy.Profiles()
                            self.profiles.parent = self
                            self._children_name_map["profiles"] = "profiles"
                        return self.profiles

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Ipv4Dhcpd.Nodes.Node.Proxy.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    if (child_yang_name == "statistics-info"):
                        if (self.statistics_info is None):
                            self.statistics_info = Ipv4Dhcpd.Nodes.Node.Proxy.StatisticsInfo()
                            self.statistics_info.parent = self
                            self._children_name_map["statistics_info"] = "statistics-info"
                        return self.statistics_info

                    if (child_yang_name == "vrfs"):
                        if (self.vrfs is None):
                            self.vrfs = Ipv4Dhcpd.Nodes.Node.Proxy.Vrfs()
                            self.vrfs.parent = self
                            self._children_name_map["vrfs"] = "vrfs"
                        return self.vrfs

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "binding" or name == "profiles" or name == "statistics" or name == "statistics-info" or name == "vrfs"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Interfaces(Entity):
                """
                IPv4 DHCP proxy/server Interface
                
                .. attribute:: interface
                
                	IPv4 DHCP proxy/server interface info
                	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Interfaces.Interface>`
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Nodes.Node.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "node"

                    self.interface = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Ipv4Dhcpd.Nodes.Node.Interfaces, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Ipv4Dhcpd.Nodes.Node.Interfaces, self).__setattr__(name, value)


                class Interface(Entity):
                    """
                    IPv4 DHCP proxy/server interface info
                    
                    .. attribute:: interface_name  <key>
                    
                    	Interface Name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: intf_ifhandle
                    
                    	Ifhandle of the interface
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: intf_is_ambiguous
                    
                    	Is interface ambiguous
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: intf_lease_limit_count
                    
                    	Lease limit count on interface
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: intf_lease_limit_type
                    
                    	Lease limit type on interface
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: intf_mode
                    
                    	Mode of interface
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: intf_profile_name
                    
                    	Name of profile attached to the interface
                    	**type**\:  str
                    
                    	**length:** 0..65
                    
                    .. attribute:: mac_throttle
                    
                    	Mac Throttle Status
                    	**type**\:  bool
                    
                    .. attribute:: srg_role
                    
                    	DHCPv6 Interface SRG role
                    	**type**\:   :py:class:`BagDhcpdIntfSrgRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.BagDhcpdIntfSrgRole>`
                    
                    .. attribute:: vrf_name
                    
                    	VRF name
                    	**type**\:  str
                    
                    	**length:** 0..33
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Interfaces.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interfaces"

                        self.interface_name = YLeaf(YType.str, "interface-name")

                        self.intf_ifhandle = YLeaf(YType.uint32, "intf-ifhandle")

                        self.intf_is_ambiguous = YLeaf(YType.uint32, "intf-is-ambiguous")

                        self.intf_lease_limit_count = YLeaf(YType.uint32, "intf-lease-limit-count")

                        self.intf_lease_limit_type = YLeaf(YType.uint32, "intf-lease-limit-type")

                        self.intf_mode = YLeaf(YType.uint32, "intf-mode")

                        self.intf_profile_name = YLeaf(YType.str, "intf-profile-name")

                        self.mac_throttle = YLeaf(YType.boolean, "mac-throttle")

                        self.srg_role = YLeaf(YType.enumeration, "srg-role")

                        self.vrf_name = YLeaf(YType.str, "vrf-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("interface_name",
                                        "intf_ifhandle",
                                        "intf_is_ambiguous",
                                        "intf_lease_limit_count",
                                        "intf_lease_limit_type",
                                        "intf_mode",
                                        "intf_profile_name",
                                        "mac_throttle",
                                        "srg_role",
                                        "vrf_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.interface_name.is_set or
                            self.intf_ifhandle.is_set or
                            self.intf_is_ambiguous.is_set or
                            self.intf_lease_limit_count.is_set or
                            self.intf_lease_limit_type.is_set or
                            self.intf_mode.is_set or
                            self.intf_profile_name.is_set or
                            self.mac_throttle.is_set or
                            self.srg_role.is_set or
                            self.vrf_name.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.interface_name.yfilter != YFilter.not_set or
                            self.intf_ifhandle.yfilter != YFilter.not_set or
                            self.intf_is_ambiguous.yfilter != YFilter.not_set or
                            self.intf_lease_limit_count.yfilter != YFilter.not_set or
                            self.intf_lease_limit_type.yfilter != YFilter.not_set or
                            self.intf_mode.yfilter != YFilter.not_set or
                            self.intf_profile_name.yfilter != YFilter.not_set or
                            self.mac_throttle.yfilter != YFilter.not_set or
                            self.srg_role.yfilter != YFilter.not_set or
                            self.vrf_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.interface_name.get_name_leafdata())
                        if (self.intf_ifhandle.is_set or self.intf_ifhandle.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.intf_ifhandle.get_name_leafdata())
                        if (self.intf_is_ambiguous.is_set or self.intf_is_ambiguous.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.intf_is_ambiguous.get_name_leafdata())
                        if (self.intf_lease_limit_count.is_set or self.intf_lease_limit_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.intf_lease_limit_count.get_name_leafdata())
                        if (self.intf_lease_limit_type.is_set or self.intf_lease_limit_type.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.intf_lease_limit_type.get_name_leafdata())
                        if (self.intf_mode.is_set or self.intf_mode.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.intf_mode.get_name_leafdata())
                        if (self.intf_profile_name.is_set or self.intf_profile_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.intf_profile_name.get_name_leafdata())
                        if (self.mac_throttle.is_set or self.mac_throttle.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.mac_throttle.get_name_leafdata())
                        if (self.srg_role.is_set or self.srg_role.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.srg_role.get_name_leafdata())
                        if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.vrf_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "interface-name" or name == "intf-ifhandle" or name == "intf-is-ambiguous" or name == "intf-lease-limit-count" or name == "intf-lease-limit-type" or name == "intf-mode" or name == "intf-profile-name" or name == "mac-throttle" or name == "srg-role" or name == "vrf-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "interface-name"):
                            self.interface_name = value
                            self.interface_name.value_namespace = name_space
                            self.interface_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "intf-ifhandle"):
                            self.intf_ifhandle = value
                            self.intf_ifhandle.value_namespace = name_space
                            self.intf_ifhandle.value_namespace_prefix = name_space_prefix
                        if(value_path == "intf-is-ambiguous"):
                            self.intf_is_ambiguous = value
                            self.intf_is_ambiguous.value_namespace = name_space
                            self.intf_is_ambiguous.value_namespace_prefix = name_space_prefix
                        if(value_path == "intf-lease-limit-count"):
                            self.intf_lease_limit_count = value
                            self.intf_lease_limit_count.value_namespace = name_space
                            self.intf_lease_limit_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "intf-lease-limit-type"):
                            self.intf_lease_limit_type = value
                            self.intf_lease_limit_type.value_namespace = name_space
                            self.intf_lease_limit_type.value_namespace_prefix = name_space_prefix
                        if(value_path == "intf-mode"):
                            self.intf_mode = value
                            self.intf_mode.value_namespace = name_space
                            self.intf_mode.value_namespace_prefix = name_space_prefix
                        if(value_path == "intf-profile-name"):
                            self.intf_profile_name = value
                            self.intf_profile_name.value_namespace = name_space
                            self.intf_profile_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "mac-throttle"):
                            self.mac_throttle = value
                            self.mac_throttle.value_namespace = name_space
                            self.mac_throttle.value_namespace_prefix = name_space_prefix
                        if(value_path == "srg-role"):
                            self.srg_role = value
                            self.srg_role.value_namespace = name_space
                            self.srg_role.value_namespace_prefix = name_space_prefix
                        if(value_path == "vrf-name"):
                            self.vrf_name = value
                            self.vrf_name.value_namespace = name_space
                            self.vrf_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.interface:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.interface:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "interfaces" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "interface"):
                        for c in self.interface:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Ipv4Dhcpd.Nodes.Node.Interfaces.Interface()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.interface.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "interface"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Base(Entity):
                """
                IPv4 DHCP base operational data
                
                .. attribute:: database
                
                	IPv4 DHCP database
                	**type**\:   :py:class:`Database <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Database>`
                
                .. attribute:: issu_status
                
                	IPv4 DHCP ISSU status
                	**type**\:   :py:class:`IssuStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.IssuStatus>`
                
                .. attribute:: profiles
                
                	IPv4 DHCP Base profile
                	**type**\:   :py:class:`Profiles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Profiles>`
                
                .. attribute:: statistics
                
                	DHCP base statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Statistics>`
                
                .. attribute:: vrfs
                
                	DHCP base list of VRF names
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs>`
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Nodes.Node.Base, self).__init__()

                    self.yang_name = "base"
                    self.yang_parent_name = "node"

                    self.database = Ipv4Dhcpd.Nodes.Node.Base.Database()
                    self.database.parent = self
                    self._children_name_map["database"] = "database"
                    self._children_yang_names.add("database")

                    self.issu_status = Ipv4Dhcpd.Nodes.Node.Base.IssuStatus()
                    self.issu_status.parent = self
                    self._children_name_map["issu_status"] = "issu-status"
                    self._children_yang_names.add("issu-status")

                    self.profiles = Ipv4Dhcpd.Nodes.Node.Base.Profiles()
                    self.profiles.parent = self
                    self._children_name_map["profiles"] = "profiles"
                    self._children_yang_names.add("profiles")

                    self.statistics = Ipv4Dhcpd.Nodes.Node.Base.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.vrfs = Ipv4Dhcpd.Nodes.Node.Base.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"
                    self._children_yang_names.add("vrfs")


                class Statistics(Entity):
                    """
                    DHCP base statistics
                    
                    .. attribute:: ipv4_dhcpd_proxy_stat
                    
                    	ipv4 dhcpd proxy stat
                    	**type**\: list of    :py:class:`Ipv4DhcpdProxyStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Base.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "base"

                        self.ipv4_dhcpd_proxy_stat = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Statistics, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Base.Statistics, self).__setattr__(name, value)


                    class Ipv4DhcpdProxyStat(Entity):
                        """
                        ipv4 dhcpd proxy stat
                        
                        .. attribute:: statistics
                        
                        	Proxy statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat.Statistics>`
                        
                        .. attribute:: vrf_name
                        
                        	DHCP L3 VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat, self).__init__()

                            self.yang_name = "ipv4-dhcpd-proxy-stat"
                            self.yang_parent_name = "statistics"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            Proxy statistics
                            
                            .. attribute:: dropped_packets
                            
                            	Dropped packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: received_packets
                            
                            	Received packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: transmitted_packets
                            
                            	Transmitted packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "ipv4-dhcpd-proxy-stat"

                                self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                self.received_packets = YLeaf(YType.uint64, "received-packets")

                                self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dropped_packets",
                                                "received_packets",
                                                "transmitted_packets") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dropped_packets.is_set or
                                    self.received_packets.is_set or
                                    self.transmitted_packets.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dropped_packets.yfilter != YFilter.not_set or
                                    self.received_packets.yfilter != YFilter.not_set or
                                    self.transmitted_packets.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.received_packets.get_name_leafdata())
                                if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dropped-packets"):
                                    self.dropped_packets = value
                                    self.dropped_packets.value_namespace = name_space
                                    self.dropped_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "received-packets"):
                                    self.received_packets = value
                                    self.received_packets.value_namespace = name_space
                                    self.received_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "transmitted-packets"):
                                    self.transmitted_packets = value
                                    self.transmitted_packets.value_namespace = name_space
                                    self.transmitted_packets.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv4-dhcpd-proxy-stat" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv4_dhcpd_proxy_stat:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv4_dhcpd_proxy_stat:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv4-dhcpd-proxy-stat"):
                            for c in self.ipv4_dhcpd_proxy_stat:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Base.Statistics.Ipv4DhcpdProxyStat()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv4_dhcpd_proxy_stat.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv4-dhcpd-proxy-stat"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class IssuStatus(Entity):
                    """
                    IPv4 DHCP ISSU status
                    
                    .. attribute:: big_bang_time
                    
                    	Timestamp for the Big Bang notification time in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC , January 1, 1970
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: issu_ready_entries_replicate
                    
                    	Whether or not DHCP has received all replicated entries during the ISSU Load Phase
                    	**type**\:  bool
                    
                    .. attribute:: issu_ready_issu_mgr_connection
                    
                    	Whether or not DHCP is currently connected to ISSU Manager during the ISSU Load Phase
                    	**type**\:  bool
                    
                    .. attribute:: issu_ready_time
                    
                    	Timestamp for the ISSU ready declaration in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC , January 1, 1970
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: issu_sync_complete_time
                    
                    	Timestamp for the ISSU sync complete in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC , January 1, 1970
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: issu_sync_start_time
                    
                    	Timestamp for the ISSU sync start in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC, January 1, 1970
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: phase
                    
                    	The current ISSU phase of the DHCP process
                    	**type**\:   :py:class:`DhcpIssuPhase <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpIssuPhase>`
                    
                    .. attribute:: primary_role_time
                    
                    	Timestamp for the change to Primary role notification time in nanoseconds since Epoch, i .e. since 00\:00\:00 UTC, January 1, 1970
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: role
                    
                    	The current role of the DHCP process
                    	**type**\:   :py:class:`DhcpIssuRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpIssuRole>`
                    
                    .. attribute:: version
                    
                    	The current version of the DHCP process in the context of an ISSU
                    	**type**\:   :py:class:`DhcpIssuVersion <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.DhcpIssuVersion>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Base.IssuStatus, self).__init__()

                        self.yang_name = "issu-status"
                        self.yang_parent_name = "base"

                        self.big_bang_time = YLeaf(YType.uint64, "big-bang-time")

                        self.issu_ready_entries_replicate = YLeaf(YType.boolean, "issu-ready-entries-replicate")

                        self.issu_ready_issu_mgr_connection = YLeaf(YType.boolean, "issu-ready-issu-mgr-connection")

                        self.issu_ready_time = YLeaf(YType.uint64, "issu-ready-time")

                        self.issu_sync_complete_time = YLeaf(YType.uint64, "issu-sync-complete-time")

                        self.issu_sync_start_time = YLeaf(YType.uint64, "issu-sync-start-time")

                        self.phase = YLeaf(YType.enumeration, "phase")

                        self.primary_role_time = YLeaf(YType.uint64, "primary-role-time")

                        self.role = YLeaf(YType.enumeration, "role")

                        self.version = YLeaf(YType.enumeration, "version")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("big_bang_time",
                                        "issu_ready_entries_replicate",
                                        "issu_ready_issu_mgr_connection",
                                        "issu_ready_time",
                                        "issu_sync_complete_time",
                                        "issu_sync_start_time",
                                        "phase",
                                        "primary_role_time",
                                        "role",
                                        "version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.IssuStatus, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Base.IssuStatus, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.big_bang_time.is_set or
                            self.issu_ready_entries_replicate.is_set or
                            self.issu_ready_issu_mgr_connection.is_set or
                            self.issu_ready_time.is_set or
                            self.issu_sync_complete_time.is_set or
                            self.issu_sync_start_time.is_set or
                            self.phase.is_set or
                            self.primary_role_time.is_set or
                            self.role.is_set or
                            self.version.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.big_bang_time.yfilter != YFilter.not_set or
                            self.issu_ready_entries_replicate.yfilter != YFilter.not_set or
                            self.issu_ready_issu_mgr_connection.yfilter != YFilter.not_set or
                            self.issu_ready_time.yfilter != YFilter.not_set or
                            self.issu_sync_complete_time.yfilter != YFilter.not_set or
                            self.issu_sync_start_time.yfilter != YFilter.not_set or
                            self.phase.yfilter != YFilter.not_set or
                            self.primary_role_time.yfilter != YFilter.not_set or
                            self.role.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "issu-status" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.big_bang_time.is_set or self.big_bang_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.big_bang_time.get_name_leafdata())
                        if (self.issu_ready_entries_replicate.is_set or self.issu_ready_entries_replicate.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.issu_ready_entries_replicate.get_name_leafdata())
                        if (self.issu_ready_issu_mgr_connection.is_set or self.issu_ready_issu_mgr_connection.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.issu_ready_issu_mgr_connection.get_name_leafdata())
                        if (self.issu_ready_time.is_set or self.issu_ready_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.issu_ready_time.get_name_leafdata())
                        if (self.issu_sync_complete_time.is_set or self.issu_sync_complete_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.issu_sync_complete_time.get_name_leafdata())
                        if (self.issu_sync_start_time.is_set or self.issu_sync_start_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.issu_sync_start_time.get_name_leafdata())
                        if (self.phase.is_set or self.phase.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.phase.get_name_leafdata())
                        if (self.primary_role_time.is_set or self.primary_role_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.primary_role_time.get_name_leafdata())
                        if (self.role.is_set or self.role.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.role.get_name_leafdata())
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "big-bang-time" or name == "issu-ready-entries-replicate" or name == "issu-ready-issu-mgr-connection" or name == "issu-ready-time" or name == "issu-sync-complete-time" or name == "issu-sync-start-time" or name == "phase" or name == "primary-role-time" or name == "role" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "big-bang-time"):
                            self.big_bang_time = value
                            self.big_bang_time.value_namespace = name_space
                            self.big_bang_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "issu-ready-entries-replicate"):
                            self.issu_ready_entries_replicate = value
                            self.issu_ready_entries_replicate.value_namespace = name_space
                            self.issu_ready_entries_replicate.value_namespace_prefix = name_space_prefix
                        if(value_path == "issu-ready-issu-mgr-connection"):
                            self.issu_ready_issu_mgr_connection = value
                            self.issu_ready_issu_mgr_connection.value_namespace = name_space
                            self.issu_ready_issu_mgr_connection.value_namespace_prefix = name_space_prefix
                        if(value_path == "issu-ready-time"):
                            self.issu_ready_time = value
                            self.issu_ready_time.value_namespace = name_space
                            self.issu_ready_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "issu-sync-complete-time"):
                            self.issu_sync_complete_time = value
                            self.issu_sync_complete_time.value_namespace = name_space
                            self.issu_sync_complete_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "issu-sync-start-time"):
                            self.issu_sync_start_time = value
                            self.issu_sync_start_time.value_namespace = name_space
                            self.issu_sync_start_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "phase"):
                            self.phase = value
                            self.phase.value_namespace = name_space
                            self.phase.value_namespace_prefix = name_space_prefix
                        if(value_path == "primary-role-time"):
                            self.primary_role_time = value
                            self.primary_role_time.value_namespace = name_space
                            self.primary_role_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "role"):
                            self.role = value
                            self.role.value_namespace = name_space
                            self.role.value_namespace_prefix = name_space_prefix
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix


                class Vrfs(Entity):
                    """
                    DHCP base list of VRF names
                    
                    .. attribute:: vrf
                    
                    	IPv4 DHCP base VRF name
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "base"

                        self.vrf = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs, self).__setattr__(name, value)


                    class Vrf(Entity):
                        """
                        IPv4 DHCP base VRF name
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: statistics
                        
                        	IPv4 DHCP base statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            IPv4 DHCP base statistics
                            
                            .. attribute:: ack
                            
                            	DHCP ack packets
                            	**type**\:   :py:class:`Ack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Ack>`
                            
                            .. attribute:: bootp_reply
                            
                            	DHCP BOOTP reply
                            	**type**\:   :py:class:`BootpReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpReply>`
                            
                            .. attribute:: bootp_request
                            
                            	DHCP BOOTP request
                            	**type**\:   :py:class:`BootpRequest <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpRequest>`
                            
                            .. attribute:: decline
                            
                            	DHCP decline packets
                            	**type**\:   :py:class:`Decline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Decline>`
                            
                            .. attribute:: discover
                            
                            	DHCP discover packets
                            	**type**\:   :py:class:`Discover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Discover>`
                            
                            .. attribute:: inform
                            
                            	DHCP inform packets
                            	**type**\:   :py:class:`Inform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Inform>`
                            
                            .. attribute:: lease_active
                            
                            	DHCP lease active
                            	**type**\:   :py:class:`LeaseActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseActive>`
                            
                            .. attribute:: lease_not_assigned
                            
                            	DHCP lease not assigned
                            	**type**\:   :py:class:`LeaseNotAssigned <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseNotAssigned>`
                            
                            .. attribute:: lease_query
                            
                            	DHCP lease query packets
                            	**type**\:   :py:class:`LeaseQuery <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseQuery>`
                            
                            .. attribute:: lease_unknown
                            
                            	DHCP lease unknown
                            	**type**\:   :py:class:`LeaseUnknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseUnknown>`
                            
                            .. attribute:: nak
                            
                            	DHCP nak packets
                            	**type**\:   :py:class:`Nak <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Nak>`
                            
                            .. attribute:: offer
                            
                            	DHCP offer packets
                            	**type**\:   :py:class:`Offer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Offer>`
                            
                            .. attribute:: release
                            
                            	DHCP release packets
                            	**type**\:   :py:class:`Release <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Release>`
                            
                            .. attribute:: request
                            
                            	DHCP request packets
                            	**type**\:   :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Request>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "vrf"

                                self.ack = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Ack()
                                self.ack.parent = self
                                self._children_name_map["ack"] = "ack"
                                self._children_yang_names.add("ack")

                                self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpReply()
                                self.bootp_reply.parent = self
                                self._children_name_map["bootp_reply"] = "bootp-reply"
                                self._children_yang_names.add("bootp-reply")

                                self.bootp_request = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpRequest()
                                self.bootp_request.parent = self
                                self._children_name_map["bootp_request"] = "bootp-request"
                                self._children_yang_names.add("bootp-request")

                                self.decline = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Decline()
                                self.decline.parent = self
                                self._children_name_map["decline"] = "decline"
                                self._children_yang_names.add("decline")

                                self.discover = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Discover()
                                self.discover.parent = self
                                self._children_name_map["discover"] = "discover"
                                self._children_yang_names.add("discover")

                                self.inform = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Inform()
                                self.inform.parent = self
                                self._children_name_map["inform"] = "inform"
                                self._children_yang_names.add("inform")

                                self.lease_active = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseActive()
                                self.lease_active.parent = self
                                self._children_name_map["lease_active"] = "lease-active"
                                self._children_yang_names.add("lease-active")

                                self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseNotAssigned()
                                self.lease_not_assigned.parent = self
                                self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                self._children_yang_names.add("lease-not-assigned")

                                self.lease_query = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseQuery()
                                self.lease_query.parent = self
                                self._children_name_map["lease_query"] = "lease-query"
                                self._children_yang_names.add("lease-query")

                                self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseUnknown()
                                self.lease_unknown.parent = self
                                self._children_name_map["lease_unknown"] = "lease-unknown"
                                self._children_yang_names.add("lease-unknown")

                                self.nak = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Nak()
                                self.nak.parent = self
                                self._children_name_map["nak"] = "nak"
                                self._children_yang_names.add("nak")

                                self.offer = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Offer()
                                self.offer.parent = self
                                self._children_name_map["offer"] = "offer"
                                self._children_yang_names.add("offer")

                                self.release = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Release()
                                self.release.parent = self
                                self._children_name_map["release"] = "release"
                                self._children_yang_names.add("release")

                                self.request = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Request()
                                self.request.parent = self
                                self._children_name_map["request"] = "request"
                                self._children_yang_names.add("request")


                            class Discover(Entity):
                                """
                                DHCP discover packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Discover, self).__init__()

                                    self.yang_name = "discover"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Discover, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Discover, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "discover" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Offer(Entity):
                                """
                                DHCP offer packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Offer, self).__init__()

                                    self.yang_name = "offer"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Offer, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Offer, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "offer" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Request(Entity):
                                """
                                DHCP request packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Request, self).__init__()

                                    self.yang_name = "request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Decline(Entity):
                                """
                                DHCP decline packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Decline, self).__init__()

                                    self.yang_name = "decline"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "decline" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Ack(Entity):
                                """
                                DHCP ack packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Ack, self).__init__()

                                    self.yang_name = "ack"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Ack, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Ack, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ack" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Nak(Entity):
                                """
                                DHCP nak packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Nak, self).__init__()

                                    self.yang_name = "nak"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Nak, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Nak, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "nak" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Release(Entity):
                                """
                                DHCP release packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Release, self).__init__()

                                    self.yang_name = "release"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "release" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Inform(Entity):
                                """
                                DHCP inform packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Inform, self).__init__()

                                    self.yang_name = "inform"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "inform" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQuery(Entity):
                                """
                                DHCP lease query packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseQuery, self).__init__()

                                    self.yang_name = "lease-query"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseNotAssigned(Entity):
                                """
                                DHCP lease not assigned
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__init__()

                                    self.yang_name = "lease-not-assigned"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-not-assigned" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseUnknown(Entity):
                                """
                                DHCP lease unknown
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseUnknown, self).__init__()

                                    self.yang_name = "lease-unknown"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseUnknown, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseUnknown, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-unknown" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseActive(Entity):
                                """
                                DHCP lease active
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseActive, self).__init__()

                                    self.yang_name = "lease-active"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseActive, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseActive, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-active" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpRequest(Entity):
                                """
                                DHCP BOOTP request
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpRequest, self).__init__()

                                    self.yang_name = "bootp-request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpRequest, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpRequest, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpReply(Entity):
                                """
                                DHCP BOOTP reply
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpReply, self).__init__()

                                    self.yang_name = "bootp-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ack is not None and self.ack.has_data()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_data()) or
                                    (self.bootp_request is not None and self.bootp_request.has_data()) or
                                    (self.decline is not None and self.decline.has_data()) or
                                    (self.discover is not None and self.discover.has_data()) or
                                    (self.inform is not None and self.inform.has_data()) or
                                    (self.lease_active is not None and self.lease_active.has_data()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_data()) or
                                    (self.lease_query is not None and self.lease_query.has_data()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_data()) or
                                    (self.nak is not None and self.nak.has_data()) or
                                    (self.offer is not None and self.offer.has_data()) or
                                    (self.release is not None and self.release.has_data()) or
                                    (self.request is not None and self.request.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ack is not None and self.ack.has_operation()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_operation()) or
                                    (self.bootp_request is not None and self.bootp_request.has_operation()) or
                                    (self.decline is not None and self.decline.has_operation()) or
                                    (self.discover is not None and self.discover.has_operation()) or
                                    (self.inform is not None and self.inform.has_operation()) or
                                    (self.lease_active is not None and self.lease_active.has_operation()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_operation()) or
                                    (self.lease_query is not None and self.lease_query.has_operation()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_operation()) or
                                    (self.nak is not None and self.nak.has_operation()) or
                                    (self.offer is not None and self.offer.has_operation()) or
                                    (self.release is not None and self.release.has_operation()) or
                                    (self.request is not None and self.request.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ack"):
                                    if (self.ack is None):
                                        self.ack = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Ack()
                                        self.ack.parent = self
                                        self._children_name_map["ack"] = "ack"
                                    return self.ack

                                if (child_yang_name == "bootp-reply"):
                                    if (self.bootp_reply is None):
                                        self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpReply()
                                        self.bootp_reply.parent = self
                                        self._children_name_map["bootp_reply"] = "bootp-reply"
                                    return self.bootp_reply

                                if (child_yang_name == "bootp-request"):
                                    if (self.bootp_request is None):
                                        self.bootp_request = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.BootpRequest()
                                        self.bootp_request.parent = self
                                        self._children_name_map["bootp_request"] = "bootp-request"
                                    return self.bootp_request

                                if (child_yang_name == "decline"):
                                    if (self.decline is None):
                                        self.decline = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Decline()
                                        self.decline.parent = self
                                        self._children_name_map["decline"] = "decline"
                                    return self.decline

                                if (child_yang_name == "discover"):
                                    if (self.discover is None):
                                        self.discover = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Discover()
                                        self.discover.parent = self
                                        self._children_name_map["discover"] = "discover"
                                    return self.discover

                                if (child_yang_name == "inform"):
                                    if (self.inform is None):
                                        self.inform = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Inform()
                                        self.inform.parent = self
                                        self._children_name_map["inform"] = "inform"
                                    return self.inform

                                if (child_yang_name == "lease-active"):
                                    if (self.lease_active is None):
                                        self.lease_active = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseActive()
                                        self.lease_active.parent = self
                                        self._children_name_map["lease_active"] = "lease-active"
                                    return self.lease_active

                                if (child_yang_name == "lease-not-assigned"):
                                    if (self.lease_not_assigned is None):
                                        self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseNotAssigned()
                                        self.lease_not_assigned.parent = self
                                        self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                    return self.lease_not_assigned

                                if (child_yang_name == "lease-query"):
                                    if (self.lease_query is None):
                                        self.lease_query = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseQuery()
                                        self.lease_query.parent = self
                                        self._children_name_map["lease_query"] = "lease-query"
                                    return self.lease_query

                                if (child_yang_name == "lease-unknown"):
                                    if (self.lease_unknown is None):
                                        self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.LeaseUnknown()
                                        self.lease_unknown.parent = self
                                        self._children_name_map["lease_unknown"] = "lease-unknown"
                                    return self.lease_unknown

                                if (child_yang_name == "nak"):
                                    if (self.nak is None):
                                        self.nak = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Nak()
                                        self.nak.parent = self
                                        self._children_name_map["nak"] = "nak"
                                    return self.nak

                                if (child_yang_name == "offer"):
                                    if (self.offer is None):
                                        self.offer = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Offer()
                                        self.offer.parent = self
                                        self._children_name_map["offer"] = "offer"
                                    return self.offer

                                if (child_yang_name == "release"):
                                    if (self.release is None):
                                        self.release = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Release()
                                        self.release.parent = self
                                        self._children_name_map["release"] = "release"
                                    return self.release

                                if (child_yang_name == "request"):
                                    if (self.request is None):
                                        self.request = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics.Request()
                                        self.request.parent = self
                                        self._children_name_map["request"] = "request"
                                    return self.request

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ack" or name == "bootp-reply" or name == "bootp-request" or name == "decline" or name == "discover" or name == "inform" or name == "lease-active" or name == "lease-not-assigned" or name == "lease-query" or name == "lease-unknown" or name == "nak" or name == "offer" or name == "release" or name == "request"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrfs" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf"):
                            for c in self.vrf:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Base.Vrfs.Vrf()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Profiles(Entity):
                    """
                    IPv4 DHCP Base profile
                    
                    .. attribute:: profile
                    
                    	IPv4 DHCP base profile
                    	**type**\: list of    :py:class:`Profile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Base.Profiles, self).__init__()

                        self.yang_name = "profiles"
                        self.yang_parent_name = "base"

                        self.profile = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Profiles, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Base.Profiles, self).__setattr__(name, value)


                    class Profile(Entity):
                        """
                        IPv4 DHCP base profile
                        
                        .. attribute:: profile_name  <key>
                        
                        	Profile name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: base_default_profile_name
                        
                        	Base Default Profile name
                        	**type**\:  str
                        
                        	**length:** 0..65
                        
                        .. attribute:: child_profile_count
                        
                        	Child profile count
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: child_profile_info
                        
                        	child profile info
                        	**type**\:   :py:class:`ChildProfileInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo>`
                        
                        .. attribute:: default_profile_mode
                        
                        	Default Profile mode
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: interface_references
                        
                        	Interface references
                        	**type**\:   :py:class:`InterfaceReferences <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences>`
                        
                        .. attribute:: intf_ref_count
                        
                        	Interface reference count
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_authenticate
                        
                        	Relay authenticate
                        	**type**\:   :py:class:`RelayInfoAuthenticate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.RelayInfoAuthenticate>`
                        
                        .. attribute:: remote_id
                        
                        	DHCP configured Remote ID
                        	**type**\:  str
                        
                        	**length:** 0..768
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile, self).__init__()

                            self.yang_name = "profile"
                            self.yang_parent_name = "profiles"

                            self.profile_name = YLeaf(YType.str, "profile-name")

                            self.base_default_profile_name = YLeaf(YType.str, "base-default-profile-name")

                            self.child_profile_count = YLeaf(YType.uint8, "child-profile-count")

                            self.default_profile_mode = YLeaf(YType.uint8, "default-profile-mode")

                            self.intf_ref_count = YLeaf(YType.uint8, "intf-ref-count")

                            self.relay_authenticate = YLeaf(YType.enumeration, "relay-authenticate")

                            self.remote_id = YLeaf(YType.str, "remote-id")

                            self.child_profile_info = Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo()
                            self.child_profile_info.parent = self
                            self._children_name_map["child_profile_info"] = "child-profile-info"
                            self._children_yang_names.add("child-profile-info")

                            self.interface_references = Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences()
                            self.interface_references.parent = self
                            self._children_name_map["interface_references"] = "interface-references"
                            self._children_yang_names.add("interface-references")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("profile_name",
                                            "base_default_profile_name",
                                            "child_profile_count",
                                            "default_profile_mode",
                                            "intf_ref_count",
                                            "relay_authenticate",
                                            "remote_id") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile, self).__setattr__(name, value)


                        class InterfaceReferences(Entity):
                            """
                            Interface references
                            
                            .. attribute:: ipv4_dhcpd_base_interface_reference
                            
                            	ipv4 dhcpd base interface reference
                            	**type**\: list of    :py:class:`Ipv4DhcpdBaseInterfaceReference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences.Ipv4DhcpdBaseInterfaceReference>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences, self).__init__()

                                self.yang_name = "interface-references"
                                self.yang_parent_name = "profile"

                                self.ipv4_dhcpd_base_interface_reference = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences, self).__setattr__(name, value)


                            class Ipv4DhcpdBaseInterfaceReference(Entity):
                                """
                                ipv4 dhcpd base interface reference
                                
                                .. attribute:: base_reference_interface_name
                                
                                	Interface name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences.Ipv4DhcpdBaseInterfaceReference, self).__init__()

                                    self.yang_name = "ipv4-dhcpd-base-interface-reference"
                                    self.yang_parent_name = "interface-references"

                                    self.base_reference_interface_name = YLeaf(YType.str, "base-reference-interface-name")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("base_reference_interface_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences.Ipv4DhcpdBaseInterfaceReference, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences.Ipv4DhcpdBaseInterfaceReference, self).__setattr__(name, value)

                                def has_data(self):
                                    return self.base_reference_interface_name.is_set

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.base_reference_interface_name.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ipv4-dhcpd-base-interface-reference" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.base_reference_interface_name.is_set or self.base_reference_interface_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.base_reference_interface_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "base-reference-interface-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "base-reference-interface-name"):
                                        self.base_reference_interface_name = value
                                        self.base_reference_interface_name.value_namespace = name_space
                                        self.base_reference_interface_name.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.ipv4_dhcpd_base_interface_reference:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.ipv4_dhcpd_base_interface_reference:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "interface-references" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ipv4-dhcpd-base-interface-reference"):
                                    for c in self.ipv4_dhcpd_base_interface_reference:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences.Ipv4DhcpdBaseInterfaceReference()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.ipv4_dhcpd_base_interface_reference.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ipv4-dhcpd-base-interface-reference"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class ChildProfileInfo(Entity):
                            """
                            child profile info
                            
                            .. attribute:: ipv4_dhcpd_base_child_profile_info
                            
                            	ipv4 dhcpd base child profile info
                            	**type**\: list of    :py:class:`Ipv4DhcpdBaseChildProfileInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo.Ipv4DhcpdBaseChildProfileInfo>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo, self).__init__()

                                self.yang_name = "child-profile-info"
                                self.yang_parent_name = "profile"

                                self.ipv4_dhcpd_base_child_profile_info = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo, self).__setattr__(name, value)


                            class Ipv4DhcpdBaseChildProfileInfo(Entity):
                                """
                                ipv4 dhcpd base child profile info
                                
                                .. attribute:: base_child_profile_name
                                
                                	Base Child Profile name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                .. attribute:: matched_option_code
                                
                                	Matched option code
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: matched_option_len
                                
                                	Matched option len
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: mode
                                
                                	Profile mode
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: option_data
                                
                                	Matched option data
                                	**type**\:  str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo.Ipv4DhcpdBaseChildProfileInfo, self).__init__()

                                    self.yang_name = "ipv4-dhcpd-base-child-profile-info"
                                    self.yang_parent_name = "child-profile-info"

                                    self.base_child_profile_name = YLeaf(YType.str, "base-child-profile-name")

                                    self.matched_option_code = YLeaf(YType.uint8, "matched-option-code")

                                    self.matched_option_len = YLeaf(YType.uint8, "matched-option-len")

                                    self.mode = YLeaf(YType.uint8, "mode")

                                    self.option_data = YLeaf(YType.str, "option-data")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("base_child_profile_name",
                                                    "matched_option_code",
                                                    "matched_option_len",
                                                    "mode",
                                                    "option_data") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo.Ipv4DhcpdBaseChildProfileInfo, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo.Ipv4DhcpdBaseChildProfileInfo, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.base_child_profile_name.is_set or
                                        self.matched_option_code.is_set or
                                        self.matched_option_len.is_set or
                                        self.mode.is_set or
                                        self.option_data.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.base_child_profile_name.yfilter != YFilter.not_set or
                                        self.matched_option_code.yfilter != YFilter.not_set or
                                        self.matched_option_len.yfilter != YFilter.not_set or
                                        self.mode.yfilter != YFilter.not_set or
                                        self.option_data.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ipv4-dhcpd-base-child-profile-info" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.base_child_profile_name.is_set or self.base_child_profile_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.base_child_profile_name.get_name_leafdata())
                                    if (self.matched_option_code.is_set or self.matched_option_code.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.matched_option_code.get_name_leafdata())
                                    if (self.matched_option_len.is_set or self.matched_option_len.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.matched_option_len.get_name_leafdata())
                                    if (self.mode.is_set or self.mode.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.mode.get_name_leafdata())
                                    if (self.option_data.is_set or self.option_data.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.option_data.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "base-child-profile-name" or name == "matched-option-code" or name == "matched-option-len" or name == "mode" or name == "option-data"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "base-child-profile-name"):
                                        self.base_child_profile_name = value
                                        self.base_child_profile_name.value_namespace = name_space
                                        self.base_child_profile_name.value_namespace_prefix = name_space_prefix
                                    if(value_path == "matched-option-code"):
                                        self.matched_option_code = value
                                        self.matched_option_code.value_namespace = name_space
                                        self.matched_option_code.value_namespace_prefix = name_space_prefix
                                    if(value_path == "matched-option-len"):
                                        self.matched_option_len = value
                                        self.matched_option_len.value_namespace = name_space
                                        self.matched_option_len.value_namespace_prefix = name_space_prefix
                                    if(value_path == "mode"):
                                        self.mode = value
                                        self.mode.value_namespace = name_space
                                        self.mode.value_namespace_prefix = name_space_prefix
                                    if(value_path == "option-data"):
                                        self.option_data = value
                                        self.option_data.value_namespace = name_space
                                        self.option_data.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.ipv4_dhcpd_base_child_profile_info:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.ipv4_dhcpd_base_child_profile_info:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "child-profile-info" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ipv4-dhcpd-base-child-profile-info"):
                                    for c in self.ipv4_dhcpd_base_child_profile_info:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo.Ipv4DhcpdBaseChildProfileInfo()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.ipv4_dhcpd_base_child_profile_info.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ipv4-dhcpd-base-child-profile-info"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.profile_name.is_set or
                                self.base_default_profile_name.is_set or
                                self.child_profile_count.is_set or
                                self.default_profile_mode.is_set or
                                self.intf_ref_count.is_set or
                                self.relay_authenticate.is_set or
                                self.remote_id.is_set or
                                (self.child_profile_info is not None and self.child_profile_info.has_data()) or
                                (self.interface_references is not None and self.interface_references.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.profile_name.yfilter != YFilter.not_set or
                                self.base_default_profile_name.yfilter != YFilter.not_set or
                                self.child_profile_count.yfilter != YFilter.not_set or
                                self.default_profile_mode.yfilter != YFilter.not_set or
                                self.intf_ref_count.yfilter != YFilter.not_set or
                                self.relay_authenticate.yfilter != YFilter.not_set or
                                self.remote_id.yfilter != YFilter.not_set or
                                (self.child_profile_info is not None and self.child_profile_info.has_operation()) or
                                (self.interface_references is not None and self.interface_references.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "profile" + "[profile-name='" + self.profile_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.profile_name.get_name_leafdata())
                            if (self.base_default_profile_name.is_set or self.base_default_profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.base_default_profile_name.get_name_leafdata())
                            if (self.child_profile_count.is_set or self.child_profile_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.child_profile_count.get_name_leafdata())
                            if (self.default_profile_mode.is_set or self.default_profile_mode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.default_profile_mode.get_name_leafdata())
                            if (self.intf_ref_count.is_set or self.intf_ref_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.intf_ref_count.get_name_leafdata())
                            if (self.relay_authenticate.is_set or self.relay_authenticate.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_authenticate.get_name_leafdata())
                            if (self.remote_id.is_set or self.remote_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.remote_id.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "child-profile-info"):
                                if (self.child_profile_info is None):
                                    self.child_profile_info = Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.ChildProfileInfo()
                                    self.child_profile_info.parent = self
                                    self._children_name_map["child_profile_info"] = "child-profile-info"
                                return self.child_profile_info

                            if (child_yang_name == "interface-references"):
                                if (self.interface_references is None):
                                    self.interface_references = Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile.InterfaceReferences()
                                    self.interface_references.parent = self
                                    self._children_name_map["interface_references"] = "interface-references"
                                return self.interface_references

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "child-profile-info" or name == "interface-references" or name == "profile-name" or name == "base-default-profile-name" or name == "child-profile-count" or name == "default-profile-mode" or name == "intf-ref-count" or name == "relay-authenticate" or name == "remote-id"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "profile-name"):
                                self.profile_name = value
                                self.profile_name.value_namespace = name_space
                                self.profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "base-default-profile-name"):
                                self.base_default_profile_name = value
                                self.base_default_profile_name.value_namespace = name_space
                                self.base_default_profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "child-profile-count"):
                                self.child_profile_count = value
                                self.child_profile_count.value_namespace = name_space
                                self.child_profile_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "default-profile-mode"):
                                self.default_profile_mode = value
                                self.default_profile_mode.value_namespace = name_space
                                self.default_profile_mode.value_namespace_prefix = name_space_prefix
                            if(value_path == "intf-ref-count"):
                                self.intf_ref_count = value
                                self.intf_ref_count.value_namespace = name_space
                                self.intf_ref_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-authenticate"):
                                self.relay_authenticate = value
                                self.relay_authenticate.value_namespace = name_space
                                self.relay_authenticate.value_namespace_prefix = name_space_prefix
                            if(value_path == "remote-id"):
                                self.remote_id = value
                                self.remote_id.value_namespace = name_space
                                self.remote_id.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.profile:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.profile:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "profiles" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "profile"):
                            for c in self.profile:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Base.Profiles.Profile()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.profile.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "profile"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Database(Entity):
                    """
                    IPv4 DHCP database
                    
                    .. attribute:: configured
                    
                    	Database feature configured
                    	**type**\:  bool
                    
                    .. attribute:: failed_full_file_write_count
                    
                    	Failed full file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: failed_incremental_file_write_count
                    
                    	Failed incremental file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: full_file_record_count
                    
                    	Full file record count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: full_file_write_count
                    
                    	Full file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: full_file_write_interval
                    
                    	Full file write interval in minutes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: minute
                    
                    .. attribute:: incremental_file_record_count
                    
                    	Incremental file record count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: incremental_file_write_count
                    
                    	Incremental file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: incremental_file_write_interval
                    
                    	Incremental file write interval in minutes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: minute
                    
                    .. attribute:: last_full_file_write_error_timestamp
                    
                    	Last full file write error timestamp since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_full_write_file_name
                    
                    	Last full write file name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: last_full_write_time
                    
                    	Last full write time since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_incremental_file_write_error_timestamp
                    
                    	Last incremental file write error timestamp since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_incremental_write_file_name
                    
                    	Last incremental write file name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: last_incremental_write_time
                    
                    	Last incremental write time since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: version
                    
                    	Current file version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Base.Database, self).__init__()

                        self.yang_name = "database"
                        self.yang_parent_name = "base"

                        self.configured = YLeaf(YType.boolean, "configured")

                        self.failed_full_file_write_count = YLeaf(YType.uint32, "failed-full-file-write-count")

                        self.failed_incremental_file_write_count = YLeaf(YType.uint32, "failed-incremental-file-write-count")

                        self.full_file_record_count = YLeaf(YType.uint32, "full-file-record-count")

                        self.full_file_write_count = YLeaf(YType.uint32, "full-file-write-count")

                        self.full_file_write_interval = YLeaf(YType.uint32, "full-file-write-interval")

                        self.incremental_file_record_count = YLeaf(YType.uint32, "incremental-file-record-count")

                        self.incremental_file_write_count = YLeaf(YType.uint32, "incremental-file-write-count")

                        self.incremental_file_write_interval = YLeaf(YType.uint32, "incremental-file-write-interval")

                        self.last_full_file_write_error_timestamp = YLeaf(YType.uint32, "last-full-file-write-error-timestamp")

                        self.last_full_write_file_name = YLeaf(YType.str, "last-full-write-file-name")

                        self.last_full_write_time = YLeaf(YType.uint32, "last-full-write-time")

                        self.last_incremental_file_write_error_timestamp = YLeaf(YType.uint32, "last-incremental-file-write-error-timestamp")

                        self.last_incremental_write_file_name = YLeaf(YType.str, "last-incremental-write-file-name")

                        self.last_incremental_write_time = YLeaf(YType.uint32, "last-incremental-write-time")

                        self.version = YLeaf(YType.uint32, "version")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("configured",
                                        "failed_full_file_write_count",
                                        "failed_incremental_file_write_count",
                                        "full_file_record_count",
                                        "full_file_write_count",
                                        "full_file_write_interval",
                                        "incremental_file_record_count",
                                        "incremental_file_write_count",
                                        "incremental_file_write_interval",
                                        "last_full_file_write_error_timestamp",
                                        "last_full_write_file_name",
                                        "last_full_write_time",
                                        "last_incremental_file_write_error_timestamp",
                                        "last_incremental_write_file_name",
                                        "last_incremental_write_time",
                                        "version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Base.Database, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Base.Database, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.configured.is_set or
                            self.failed_full_file_write_count.is_set or
                            self.failed_incremental_file_write_count.is_set or
                            self.full_file_record_count.is_set or
                            self.full_file_write_count.is_set or
                            self.full_file_write_interval.is_set or
                            self.incremental_file_record_count.is_set or
                            self.incremental_file_write_count.is_set or
                            self.incremental_file_write_interval.is_set or
                            self.last_full_file_write_error_timestamp.is_set or
                            self.last_full_write_file_name.is_set or
                            self.last_full_write_time.is_set or
                            self.last_incremental_file_write_error_timestamp.is_set or
                            self.last_incremental_write_file_name.is_set or
                            self.last_incremental_write_time.is_set or
                            self.version.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.configured.yfilter != YFilter.not_set or
                            self.failed_full_file_write_count.yfilter != YFilter.not_set or
                            self.failed_incremental_file_write_count.yfilter != YFilter.not_set or
                            self.full_file_record_count.yfilter != YFilter.not_set or
                            self.full_file_write_count.yfilter != YFilter.not_set or
                            self.full_file_write_interval.yfilter != YFilter.not_set or
                            self.incremental_file_record_count.yfilter != YFilter.not_set or
                            self.incremental_file_write_count.yfilter != YFilter.not_set or
                            self.incremental_file_write_interval.yfilter != YFilter.not_set or
                            self.last_full_file_write_error_timestamp.yfilter != YFilter.not_set or
                            self.last_full_write_file_name.yfilter != YFilter.not_set or
                            self.last_full_write_time.yfilter != YFilter.not_set or
                            self.last_incremental_file_write_error_timestamp.yfilter != YFilter.not_set or
                            self.last_incremental_write_file_name.yfilter != YFilter.not_set or
                            self.last_incremental_write_time.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "database" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.configured.is_set or self.configured.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.configured.get_name_leafdata())
                        if (self.failed_full_file_write_count.is_set or self.failed_full_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.failed_full_file_write_count.get_name_leafdata())
                        if (self.failed_incremental_file_write_count.is_set or self.failed_incremental_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.failed_incremental_file_write_count.get_name_leafdata())
                        if (self.full_file_record_count.is_set or self.full_file_record_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.full_file_record_count.get_name_leafdata())
                        if (self.full_file_write_count.is_set or self.full_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.full_file_write_count.get_name_leafdata())
                        if (self.full_file_write_interval.is_set or self.full_file_write_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.full_file_write_interval.get_name_leafdata())
                        if (self.incremental_file_record_count.is_set or self.incremental_file_record_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.incremental_file_record_count.get_name_leafdata())
                        if (self.incremental_file_write_count.is_set or self.incremental_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.incremental_file_write_count.get_name_leafdata())
                        if (self.incremental_file_write_interval.is_set or self.incremental_file_write_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.incremental_file_write_interval.get_name_leafdata())
                        if (self.last_full_file_write_error_timestamp.is_set or self.last_full_file_write_error_timestamp.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_full_file_write_error_timestamp.get_name_leafdata())
                        if (self.last_full_write_file_name.is_set or self.last_full_write_file_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_full_write_file_name.get_name_leafdata())
                        if (self.last_full_write_time.is_set or self.last_full_write_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_full_write_time.get_name_leafdata())
                        if (self.last_incremental_file_write_error_timestamp.is_set or self.last_incremental_file_write_error_timestamp.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_incremental_file_write_error_timestamp.get_name_leafdata())
                        if (self.last_incremental_write_file_name.is_set or self.last_incremental_write_file_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_incremental_write_file_name.get_name_leafdata())
                        if (self.last_incremental_write_time.is_set or self.last_incremental_write_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_incremental_write_time.get_name_leafdata())
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "configured" or name == "failed-full-file-write-count" or name == "failed-incremental-file-write-count" or name == "full-file-record-count" or name == "full-file-write-count" or name == "full-file-write-interval" or name == "incremental-file-record-count" or name == "incremental-file-write-count" or name == "incremental-file-write-interval" or name == "last-full-file-write-error-timestamp" or name == "last-full-write-file-name" or name == "last-full-write-time" or name == "last-incremental-file-write-error-timestamp" or name == "last-incremental-write-file-name" or name == "last-incremental-write-time" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "configured"):
                            self.configured = value
                            self.configured.value_namespace = name_space
                            self.configured.value_namespace_prefix = name_space_prefix
                        if(value_path == "failed-full-file-write-count"):
                            self.failed_full_file_write_count = value
                            self.failed_full_file_write_count.value_namespace = name_space
                            self.failed_full_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "failed-incremental-file-write-count"):
                            self.failed_incremental_file_write_count = value
                            self.failed_incremental_file_write_count.value_namespace = name_space
                            self.failed_incremental_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "full-file-record-count"):
                            self.full_file_record_count = value
                            self.full_file_record_count.value_namespace = name_space
                            self.full_file_record_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "full-file-write-count"):
                            self.full_file_write_count = value
                            self.full_file_write_count.value_namespace = name_space
                            self.full_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "full-file-write-interval"):
                            self.full_file_write_interval = value
                            self.full_file_write_interval.value_namespace = name_space
                            self.full_file_write_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "incremental-file-record-count"):
                            self.incremental_file_record_count = value
                            self.incremental_file_record_count.value_namespace = name_space
                            self.incremental_file_record_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "incremental-file-write-count"):
                            self.incremental_file_write_count = value
                            self.incremental_file_write_count.value_namespace = name_space
                            self.incremental_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "incremental-file-write-interval"):
                            self.incremental_file_write_interval = value
                            self.incremental_file_write_interval.value_namespace = name_space
                            self.incremental_file_write_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-full-file-write-error-timestamp"):
                            self.last_full_file_write_error_timestamp = value
                            self.last_full_file_write_error_timestamp.value_namespace = name_space
                            self.last_full_file_write_error_timestamp.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-full-write-file-name"):
                            self.last_full_write_file_name = value
                            self.last_full_write_file_name.value_namespace = name_space
                            self.last_full_write_file_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-full-write-time"):
                            self.last_full_write_time = value
                            self.last_full_write_time.value_namespace = name_space
                            self.last_full_write_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-incremental-file-write-error-timestamp"):
                            self.last_incremental_file_write_error_timestamp = value
                            self.last_incremental_file_write_error_timestamp.value_namespace = name_space
                            self.last_incremental_file_write_error_timestamp.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-incremental-write-file-name"):
                            self.last_incremental_write_file_name = value
                            self.last_incremental_write_file_name.value_namespace = name_space
                            self.last_incremental_write_file_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-incremental-write-time"):
                            self.last_incremental_write_time = value
                            self.last_incremental_write_time.value_namespace = name_space
                            self.last_incremental_write_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (
                        (self.database is not None and self.database.has_data()) or
                        (self.issu_status is not None and self.issu_status.has_data()) or
                        (self.profiles is not None and self.profiles.has_data()) or
                        (self.statistics is not None and self.statistics.has_data()) or
                        (self.vrfs is not None and self.vrfs.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.database is not None and self.database.has_operation()) or
                        (self.issu_status is not None and self.issu_status.has_operation()) or
                        (self.profiles is not None and self.profiles.has_operation()) or
                        (self.statistics is not None and self.statistics.has_operation()) or
                        (self.vrfs is not None and self.vrfs.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "base" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "database"):
                        if (self.database is None):
                            self.database = Ipv4Dhcpd.Nodes.Node.Base.Database()
                            self.database.parent = self
                            self._children_name_map["database"] = "database"
                        return self.database

                    if (child_yang_name == "issu-status"):
                        if (self.issu_status is None):
                            self.issu_status = Ipv4Dhcpd.Nodes.Node.Base.IssuStatus()
                            self.issu_status.parent = self
                            self._children_name_map["issu_status"] = "issu-status"
                        return self.issu_status

                    if (child_yang_name == "profiles"):
                        if (self.profiles is None):
                            self.profiles = Ipv4Dhcpd.Nodes.Node.Base.Profiles()
                            self.profiles.parent = self
                            self._children_name_map["profiles"] = "profiles"
                        return self.profiles

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Ipv4Dhcpd.Nodes.Node.Base.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    if (child_yang_name == "vrfs"):
                        if (self.vrfs is None):
                            self.vrfs = Ipv4Dhcpd.Nodes.Node.Base.Vrfs()
                            self.vrfs.parent = self
                            self._children_name_map["vrfs"] = "vrfs"
                        return self.vrfs

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "database" or name == "issu-status" or name == "profiles" or name == "statistics" or name == "vrfs"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Server(Entity):
                """
                IPv4 DHCP Server operational data
                
                .. attribute:: binding
                
                	DHCP server bindings
                	**type**\:   :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Binding>`
                
                .. attribute:: profiles
                
                	IPv4 DHCP Server profile
                	**type**\:   :py:class:`Profiles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Profiles>`
                
                .. attribute:: statistics
                
                	DHCP Server statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Statistics>`
                
                .. attribute:: statistics_info
                
                	DHCP proxy stats info
                	**type**\:   :py:class:`StatisticsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.StatisticsInfo>`
                
                .. attribute:: vrfs
                
                	DHCP Server list of VRF names
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs>`
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Nodes.Node.Server, self).__init__()

                    self.yang_name = "server"
                    self.yang_parent_name = "node"

                    self.binding = Ipv4Dhcpd.Nodes.Node.Server.Binding()
                    self.binding.parent = self
                    self._children_name_map["binding"] = "binding"
                    self._children_yang_names.add("binding")

                    self.profiles = Ipv4Dhcpd.Nodes.Node.Server.Profiles()
                    self.profiles.parent = self
                    self._children_name_map["profiles"] = "profiles"
                    self._children_yang_names.add("profiles")

                    self.statistics = Ipv4Dhcpd.Nodes.Node.Server.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.statistics_info = Ipv4Dhcpd.Nodes.Node.Server.StatisticsInfo()
                    self.statistics_info.parent = self
                    self._children_name_map["statistics_info"] = "statistics-info"
                    self._children_yang_names.add("statistics-info")

                    self.vrfs = Ipv4Dhcpd.Nodes.Node.Server.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"
                    self._children_yang_names.add("vrfs")


                class Profiles(Entity):
                    """
                    IPv4 DHCP Server profile
                    
                    .. attribute:: profile
                    
                    	IPv4 DHCP server profile
                    	**type**\: list of    :py:class:`Profile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Profiles.Profile>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Server.Profiles, self).__init__()

                        self.yang_name = "profiles"
                        self.yang_parent_name = "server"

                        self.profile = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Profiles, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Server.Profiles, self).__setattr__(name, value)


                    class Profile(Entity):
                        """
                        IPv4 DHCP server profile
                        
                        .. attribute:: server_profile_name  <key>
                        
                        	Profile name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: bcast_policy
                        
                        	Bcast Policy
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: duplicate_ip_address_check
                        
                        	Duplicate IP Address Check
                        	**type**\:  bool
                        
                        .. attribute:: duplicate_mac_address_check
                        
                        	Duplicate MAC Address Check
                        	**type**\:  bool
                        
                        .. attribute:: giaddr_policy
                        
                        	Giaddr Policy
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: is_move_allowed
                        
                        	Is true if dhcp subscriber is allowed to move
                        	**type**\:  bool
                        
                        .. attribute:: lease_limit_count
                        
                        	Lease Limit Count
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lease_limit_type
                        
                        	Lease Limit Type
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: requested_address_check
                        
                        	Requested Address Check
                        	**type**\:  bool
                        
                        .. attribute:: secure_arp
                        
                        	Secure ARP
                        	**type**\:  bool
                        
                        .. attribute:: server_bootfile_name
                        
                        	Server Bootfile name
                        	**type**\:  str
                        
                        	**length:** 0..256
                        
                        .. attribute:: server_domain_name
                        
                        	Server Domain name
                        	**type**\:  str
                        
                        	**length:** 0..256
                        
                        .. attribute:: server_id_check
                        
                        	Server ID Check
                        	**type**\:  bool
                        
                        .. attribute:: server_pool_name
                        
                        	Pool Name
                        	**type**\:  str
                        
                        	**length:** 0..65
                        
                        .. attribute:: server_profile_default_router
                        
                        	Server default addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: server_profile_dns
                        
                        	Server DNS addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: server_profile_lease
                        
                        	Lease
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: server_profile_name_xr
                        
                        	Profile Name
                        	**type**\:  str
                        
                        	**length:** 0..65
                        
                        .. attribute:: server_profile_netbios_name_svr_count
                        
                        	Server netbios svr count 
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: server_profile_netbios_node_type
                        
                        	Server netbios node type
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: server_profile_netbious_name_server
                        
                        	Server netbios addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: server_profile_server_dns_count
                        
                        	Server DNS Count
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: server_profile_time_server
                        
                        	Server Time addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: server_profile_time_svr_count
                        
                        	Server time svr count 
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: server_profiledefault_router_count
                        
                        	Server default count 
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: server_profileiedge_check
                        
                        	Server iEdge Check
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: subnet_mask
                        
                        	Subnet Mask
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Server.Profiles.Profile, self).__init__()

                            self.yang_name = "profile"
                            self.yang_parent_name = "profiles"

                            self.server_profile_name = YLeaf(YType.str, "server-profile-name")

                            self.bcast_policy = YLeaf(YType.uint8, "bcast-policy")

                            self.duplicate_ip_address_check = YLeaf(YType.boolean, "duplicate-ip-address-check")

                            self.duplicate_mac_address_check = YLeaf(YType.boolean, "duplicate-mac-address-check")

                            self.giaddr_policy = YLeaf(YType.uint8, "giaddr-policy")

                            self.is_move_allowed = YLeaf(YType.boolean, "is-move-allowed")

                            self.lease_limit_count = YLeaf(YType.uint32, "lease-limit-count")

                            self.lease_limit_type = YLeaf(YType.uint8, "lease-limit-type")

                            self.requested_address_check = YLeaf(YType.boolean, "requested-address-check")

                            self.secure_arp = YLeaf(YType.boolean, "secure-arp")

                            self.server_bootfile_name = YLeaf(YType.str, "server-bootfile-name")

                            self.server_domain_name = YLeaf(YType.str, "server-domain-name")

                            self.server_id_check = YLeaf(YType.boolean, "server-id-check")

                            self.server_pool_name = YLeaf(YType.str, "server-pool-name")

                            self.server_profile_default_router = YLeafList(YType.str, "server-profile-default-router")

                            self.server_profile_dns = YLeafList(YType.str, "server-profile-dns")

                            self.server_profile_lease = YLeaf(YType.uint32, "server-profile-lease")

                            self.server_profile_name_xr = YLeaf(YType.str, "server-profile-name-xr")

                            self.server_profile_netbios_name_svr_count = YLeaf(YType.uint8, "server-profile-netbios-name-svr-count")

                            self.server_profile_netbios_node_type = YLeaf(YType.uint8, "server-profile-netbios-node-type")

                            self.server_profile_netbious_name_server = YLeafList(YType.str, "server-profile-netbious-name-server")

                            self.server_profile_server_dns_count = YLeaf(YType.uint8, "server-profile-server-dns-count")

                            self.server_profile_time_server = YLeafList(YType.str, "server-profile-time-server")

                            self.server_profile_time_svr_count = YLeaf(YType.uint8, "server-profile-time-svr-count")

                            self.server_profiledefault_router_count = YLeaf(YType.uint8, "server-profiledefault-router-count")

                            self.server_profileiedge_check = YLeaf(YType.uint8, "server-profileiedge-check")

                            self.subnet_mask = YLeaf(YType.str, "subnet-mask")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("server_profile_name",
                                            "bcast_policy",
                                            "duplicate_ip_address_check",
                                            "duplicate_mac_address_check",
                                            "giaddr_policy",
                                            "is_move_allowed",
                                            "lease_limit_count",
                                            "lease_limit_type",
                                            "requested_address_check",
                                            "secure_arp",
                                            "server_bootfile_name",
                                            "server_domain_name",
                                            "server_id_check",
                                            "server_pool_name",
                                            "server_profile_default_router",
                                            "server_profile_dns",
                                            "server_profile_lease",
                                            "server_profile_name_xr",
                                            "server_profile_netbios_name_svr_count",
                                            "server_profile_netbios_node_type",
                                            "server_profile_netbious_name_server",
                                            "server_profile_server_dns_count",
                                            "server_profile_time_server",
                                            "server_profile_time_svr_count",
                                            "server_profiledefault_router_count",
                                            "server_profileiedge_check",
                                            "subnet_mask") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Server.Profiles.Profile, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Profiles.Profile, self).__setattr__(name, value)

                        def has_data(self):
                            for leaf in self.server_profile_default_router.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            for leaf in self.server_profile_dns.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            for leaf in self.server_profile_netbious_name_server.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            for leaf in self.server_profile_time_server.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            return (
                                self.server_profile_name.is_set or
                                self.bcast_policy.is_set or
                                self.duplicate_ip_address_check.is_set or
                                self.duplicate_mac_address_check.is_set or
                                self.giaddr_policy.is_set or
                                self.is_move_allowed.is_set or
                                self.lease_limit_count.is_set or
                                self.lease_limit_type.is_set or
                                self.requested_address_check.is_set or
                                self.secure_arp.is_set or
                                self.server_bootfile_name.is_set or
                                self.server_domain_name.is_set or
                                self.server_id_check.is_set or
                                self.server_pool_name.is_set or
                                self.server_profile_lease.is_set or
                                self.server_profile_name_xr.is_set or
                                self.server_profile_netbios_name_svr_count.is_set or
                                self.server_profile_netbios_node_type.is_set or
                                self.server_profile_server_dns_count.is_set or
                                self.server_profile_time_svr_count.is_set or
                                self.server_profiledefault_router_count.is_set or
                                self.server_profileiedge_check.is_set or
                                self.subnet_mask.is_set)

                        def has_operation(self):
                            for leaf in self.server_profile_default_router.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            for leaf in self.server_profile_dns.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            for leaf in self.server_profile_netbious_name_server.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            for leaf in self.server_profile_time_server.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.server_profile_name.yfilter != YFilter.not_set or
                                self.bcast_policy.yfilter != YFilter.not_set or
                                self.duplicate_ip_address_check.yfilter != YFilter.not_set or
                                self.duplicate_mac_address_check.yfilter != YFilter.not_set or
                                self.giaddr_policy.yfilter != YFilter.not_set or
                                self.is_move_allowed.yfilter != YFilter.not_set or
                                self.lease_limit_count.yfilter != YFilter.not_set or
                                self.lease_limit_type.yfilter != YFilter.not_set or
                                self.requested_address_check.yfilter != YFilter.not_set or
                                self.secure_arp.yfilter != YFilter.not_set or
                                self.server_bootfile_name.yfilter != YFilter.not_set or
                                self.server_domain_name.yfilter != YFilter.not_set or
                                self.server_id_check.yfilter != YFilter.not_set or
                                self.server_pool_name.yfilter != YFilter.not_set or
                                self.server_profile_default_router.yfilter != YFilter.not_set or
                                self.server_profile_dns.yfilter != YFilter.not_set or
                                self.server_profile_lease.yfilter != YFilter.not_set or
                                self.server_profile_name_xr.yfilter != YFilter.not_set or
                                self.server_profile_netbios_name_svr_count.yfilter != YFilter.not_set or
                                self.server_profile_netbios_node_type.yfilter != YFilter.not_set or
                                self.server_profile_netbious_name_server.yfilter != YFilter.not_set or
                                self.server_profile_server_dns_count.yfilter != YFilter.not_set or
                                self.server_profile_time_server.yfilter != YFilter.not_set or
                                self.server_profile_time_svr_count.yfilter != YFilter.not_set or
                                self.server_profiledefault_router_count.yfilter != YFilter.not_set or
                                self.server_profileiedge_check.yfilter != YFilter.not_set or
                                self.subnet_mask.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "profile" + "[server-profile-name='" + self.server_profile_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.server_profile_name.is_set or self.server_profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profile_name.get_name_leafdata())
                            if (self.bcast_policy.is_set or self.bcast_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.bcast_policy.get_name_leafdata())
                            if (self.duplicate_ip_address_check.is_set or self.duplicate_ip_address_check.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.duplicate_ip_address_check.get_name_leafdata())
                            if (self.duplicate_mac_address_check.is_set or self.duplicate_mac_address_check.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.duplicate_mac_address_check.get_name_leafdata())
                            if (self.giaddr_policy.is_set or self.giaddr_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.giaddr_policy.get_name_leafdata())
                            if (self.is_move_allowed.is_set or self.is_move_allowed.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_move_allowed.get_name_leafdata())
                            if (self.lease_limit_count.is_set or self.lease_limit_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.lease_limit_count.get_name_leafdata())
                            if (self.lease_limit_type.is_set or self.lease_limit_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.lease_limit_type.get_name_leafdata())
                            if (self.requested_address_check.is_set or self.requested_address_check.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.requested_address_check.get_name_leafdata())
                            if (self.secure_arp.is_set or self.secure_arp.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.secure_arp.get_name_leafdata())
                            if (self.server_bootfile_name.is_set or self.server_bootfile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_bootfile_name.get_name_leafdata())
                            if (self.server_domain_name.is_set or self.server_domain_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_domain_name.get_name_leafdata())
                            if (self.server_id_check.is_set or self.server_id_check.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_id_check.get_name_leafdata())
                            if (self.server_pool_name.is_set or self.server_pool_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_pool_name.get_name_leafdata())
                            if (self.server_profile_lease.is_set or self.server_profile_lease.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profile_lease.get_name_leafdata())
                            if (self.server_profile_name_xr.is_set or self.server_profile_name_xr.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profile_name_xr.get_name_leafdata())
                            if (self.server_profile_netbios_name_svr_count.is_set or self.server_profile_netbios_name_svr_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profile_netbios_name_svr_count.get_name_leafdata())
                            if (self.server_profile_netbios_node_type.is_set or self.server_profile_netbios_node_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profile_netbios_node_type.get_name_leafdata())
                            if (self.server_profile_server_dns_count.is_set or self.server_profile_server_dns_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profile_server_dns_count.get_name_leafdata())
                            if (self.server_profile_time_svr_count.is_set or self.server_profile_time_svr_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profile_time_svr_count.get_name_leafdata())
                            if (self.server_profiledefault_router_count.is_set or self.server_profiledefault_router_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profiledefault_router_count.get_name_leafdata())
                            if (self.server_profileiedge_check.is_set or self.server_profileiedge_check.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_profileiedge_check.get_name_leafdata())
                            if (self.subnet_mask.is_set or self.subnet_mask.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.subnet_mask.get_name_leafdata())

                            leaf_name_data.extend(self.server_profile_default_router.get_name_leafdata())

                            leaf_name_data.extend(self.server_profile_dns.get_name_leafdata())

                            leaf_name_data.extend(self.server_profile_netbious_name_server.get_name_leafdata())

                            leaf_name_data.extend(self.server_profile_time_server.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "server-profile-name" or name == "bcast-policy" or name == "duplicate-ip-address-check" or name == "duplicate-mac-address-check" or name == "giaddr-policy" or name == "is-move-allowed" or name == "lease-limit-count" or name == "lease-limit-type" or name == "requested-address-check" or name == "secure-arp" or name == "server-bootfile-name" or name == "server-domain-name" or name == "server-id-check" or name == "server-pool-name" or name == "server-profile-default-router" or name == "server-profile-dns" or name == "server-profile-lease" or name == "server-profile-name-xr" or name == "server-profile-netbios-name-svr-count" or name == "server-profile-netbios-node-type" or name == "server-profile-netbious-name-server" or name == "server-profile-server-dns-count" or name == "server-profile-time-server" or name == "server-profile-time-svr-count" or name == "server-profiledefault-router-count" or name == "server-profileiedge-check" or name == "subnet-mask"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "server-profile-name"):
                                self.server_profile_name = value
                                self.server_profile_name.value_namespace = name_space
                                self.server_profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "bcast-policy"):
                                self.bcast_policy = value
                                self.bcast_policy.value_namespace = name_space
                                self.bcast_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "duplicate-ip-address-check"):
                                self.duplicate_ip_address_check = value
                                self.duplicate_ip_address_check.value_namespace = name_space
                                self.duplicate_ip_address_check.value_namespace_prefix = name_space_prefix
                            if(value_path == "duplicate-mac-address-check"):
                                self.duplicate_mac_address_check = value
                                self.duplicate_mac_address_check.value_namespace = name_space
                                self.duplicate_mac_address_check.value_namespace_prefix = name_space_prefix
                            if(value_path == "giaddr-policy"):
                                self.giaddr_policy = value
                                self.giaddr_policy.value_namespace = name_space
                                self.giaddr_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-move-allowed"):
                                self.is_move_allowed = value
                                self.is_move_allowed.value_namespace = name_space
                                self.is_move_allowed.value_namespace_prefix = name_space_prefix
                            if(value_path == "lease-limit-count"):
                                self.lease_limit_count = value
                                self.lease_limit_count.value_namespace = name_space
                                self.lease_limit_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "lease-limit-type"):
                                self.lease_limit_type = value
                                self.lease_limit_type.value_namespace = name_space
                                self.lease_limit_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "requested-address-check"):
                                self.requested_address_check = value
                                self.requested_address_check.value_namespace = name_space
                                self.requested_address_check.value_namespace_prefix = name_space_prefix
                            if(value_path == "secure-arp"):
                                self.secure_arp = value
                                self.secure_arp.value_namespace = name_space
                                self.secure_arp.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-bootfile-name"):
                                self.server_bootfile_name = value
                                self.server_bootfile_name.value_namespace = name_space
                                self.server_bootfile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-domain-name"):
                                self.server_domain_name = value
                                self.server_domain_name.value_namespace = name_space
                                self.server_domain_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-id-check"):
                                self.server_id_check = value
                                self.server_id_check.value_namespace = name_space
                                self.server_id_check.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-pool-name"):
                                self.server_pool_name = value
                                self.server_pool_name.value_namespace = name_space
                                self.server_pool_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profile-default-router"):
                                self.server_profile_default_router.append(value)
                            if(value_path == "server-profile-dns"):
                                self.server_profile_dns.append(value)
                            if(value_path == "server-profile-lease"):
                                self.server_profile_lease = value
                                self.server_profile_lease.value_namespace = name_space
                                self.server_profile_lease.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profile-name-xr"):
                                self.server_profile_name_xr = value
                                self.server_profile_name_xr.value_namespace = name_space
                                self.server_profile_name_xr.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profile-netbios-name-svr-count"):
                                self.server_profile_netbios_name_svr_count = value
                                self.server_profile_netbios_name_svr_count.value_namespace = name_space
                                self.server_profile_netbios_name_svr_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profile-netbios-node-type"):
                                self.server_profile_netbios_node_type = value
                                self.server_profile_netbios_node_type.value_namespace = name_space
                                self.server_profile_netbios_node_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profile-netbious-name-server"):
                                self.server_profile_netbious_name_server.append(value)
                            if(value_path == "server-profile-server-dns-count"):
                                self.server_profile_server_dns_count = value
                                self.server_profile_server_dns_count.value_namespace = name_space
                                self.server_profile_server_dns_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profile-time-server"):
                                self.server_profile_time_server.append(value)
                            if(value_path == "server-profile-time-svr-count"):
                                self.server_profile_time_svr_count = value
                                self.server_profile_time_svr_count.value_namespace = name_space
                                self.server_profile_time_svr_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profiledefault-router-count"):
                                self.server_profiledefault_router_count = value
                                self.server_profiledefault_router_count.value_namespace = name_space
                                self.server_profiledefault_router_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-profileiedge-check"):
                                self.server_profileiedge_check = value
                                self.server_profileiedge_check.value_namespace = name_space
                                self.server_profileiedge_check.value_namespace_prefix = name_space_prefix
                            if(value_path == "subnet-mask"):
                                self.subnet_mask = value
                                self.subnet_mask.value_namespace = name_space
                                self.subnet_mask.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.profile:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.profile:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "profiles" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "profile"):
                            for c in self.profile:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Server.Profiles.Profile()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.profile.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "profile"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Statistics(Entity):
                    """
                    DHCP Server statistics
                    
                    .. attribute:: ipv4_dhcpd_proxy_stat
                    
                    	ipv4 dhcpd proxy stat
                    	**type**\: list of    :py:class:`Ipv4DhcpdProxyStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Server.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "server"

                        self.ipv4_dhcpd_proxy_stat = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Statistics, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Server.Statistics, self).__setattr__(name, value)


                    class Ipv4DhcpdProxyStat(Entity):
                        """
                        ipv4 dhcpd proxy stat
                        
                        .. attribute:: statistics
                        
                        	Proxy statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat.Statistics>`
                        
                        .. attribute:: vrf_name
                        
                        	DHCP L3 VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat, self).__init__()

                            self.yang_name = "ipv4-dhcpd-proxy-stat"
                            self.yang_parent_name = "statistics"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            Proxy statistics
                            
                            .. attribute:: dropped_packets
                            
                            	Dropped packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: received_packets
                            
                            	Received packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: transmitted_packets
                            
                            	Transmitted packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "ipv4-dhcpd-proxy-stat"

                                self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                self.received_packets = YLeaf(YType.uint64, "received-packets")

                                self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dropped_packets",
                                                "received_packets",
                                                "transmitted_packets") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat.Statistics, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dropped_packets.is_set or
                                    self.received_packets.is_set or
                                    self.transmitted_packets.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dropped_packets.yfilter != YFilter.not_set or
                                    self.received_packets.yfilter != YFilter.not_set or
                                    self.transmitted_packets.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.received_packets.get_name_leafdata())
                                if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dropped-packets"):
                                    self.dropped_packets = value
                                    self.dropped_packets.value_namespace = name_space
                                    self.dropped_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "received-packets"):
                                    self.received_packets = value
                                    self.received_packets.value_namespace = name_space
                                    self.received_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "transmitted-packets"):
                                    self.transmitted_packets = value
                                    self.transmitted_packets.value_namespace = name_space
                                    self.transmitted_packets.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv4-dhcpd-proxy-stat" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv4_dhcpd_proxy_stat:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv4_dhcpd_proxy_stat:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv4-dhcpd-proxy-stat"):
                            for c in self.ipv4_dhcpd_proxy_stat:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Server.Statistics.Ipv4DhcpdProxyStat()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv4_dhcpd_proxy_stat.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv4-dhcpd-proxy-stat"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Binding(Entity):
                    """
                    DHCP server bindings
                    
                    .. attribute:: clients
                    
                    	DHCP server client bindings
                    	**type**\:   :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients>`
                    
                    .. attribute:: summary
                    
                    	DHCP server binding summary
                    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Binding.Summary>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Server.Binding, self).__init__()

                        self.yang_name = "binding"
                        self.yang_parent_name = "server"

                        self.clients = Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients()
                        self.clients.parent = self
                        self._children_name_map["clients"] = "clients"
                        self._children_yang_names.add("clients")

                        self.summary = Ipv4Dhcpd.Nodes.Node.Server.Binding.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                        self._children_yang_names.add("summary")


                    class Summary(Entity):
                        """
                        DHCP server binding summary
                        
                        .. attribute:: ack_waiting_for_dpm
                        
                        	Number of clients in Waiting for DPM with ACK
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: bound_clients
                        
                        	Number of clients in bound state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: clients
                        
                        	Total number of clients
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: deleting_clients_d
                        
                        	Number of clients in deleting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: disconnected_clients
                        
                        	Number of clients in disconnected state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: informing_clients
                        
                        	Number of clients in informing state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: initializing_clients
                        
                        	Number of clients in init state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: offer_sent_for_client
                        
                        	Number of clients in Offer sent state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reauthorizing_clients
                        
                        	Number of clients in reauth state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: renewing_clients
                        
                        	Number of clients in renewing state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: request_waiting_for_dpm
                        
                        	Number of clients in Waiting for DPM with Request
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: requesting_clients
                        
                        	Number of clients in requesting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: restarting_clients
                        
                        	Number of clients in restarting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: selecting_clients
                        
                        	Number of clients in selecting state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_daps_init
                        
                        	Number of clients in Init DAPS wait state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_dpm_addr_change
                        
                        	Number of clients in Waiting for DPM after addr change
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_dpm_disconnect
                        
                        	Number of clients in waiting for DPM disconnect state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: waiting_for_dpm_init
                        
                        	Number of clients in Init DPM wait state
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Summary, self).__init__()

                            self.yang_name = "summary"
                            self.yang_parent_name = "binding"

                            self.ack_waiting_for_dpm = YLeaf(YType.uint32, "ack-waiting-for-dpm")

                            self.bound_clients = YLeaf(YType.uint32, "bound-clients")

                            self.clients = YLeaf(YType.uint32, "clients")

                            self.deleting_clients_d = YLeaf(YType.uint32, "deleting-clients-d")

                            self.disconnected_clients = YLeaf(YType.uint32, "disconnected-clients")

                            self.informing_clients = YLeaf(YType.uint32, "informing-clients")

                            self.initializing_clients = YLeaf(YType.uint32, "initializing-clients")

                            self.offer_sent_for_client = YLeaf(YType.uint32, "offer-sent-for-client")

                            self.reauthorizing_clients = YLeaf(YType.uint32, "reauthorizing-clients")

                            self.renewing_clients = YLeaf(YType.uint32, "renewing-clients")

                            self.request_waiting_for_dpm = YLeaf(YType.uint32, "request-waiting-for-dpm")

                            self.requesting_clients = YLeaf(YType.uint32, "requesting-clients")

                            self.restarting_clients = YLeaf(YType.uint32, "restarting-clients")

                            self.selecting_clients = YLeaf(YType.uint32, "selecting-clients")

                            self.waiting_for_daps_init = YLeaf(YType.uint32, "waiting-for-daps-init")

                            self.waiting_for_dpm_addr_change = YLeaf(YType.uint32, "waiting-for-dpm-addr-change")

                            self.waiting_for_dpm_disconnect = YLeaf(YType.uint32, "waiting-for-dpm-disconnect")

                            self.waiting_for_dpm_init = YLeaf(YType.uint32, "waiting-for-dpm-init")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("ack_waiting_for_dpm",
                                            "bound_clients",
                                            "clients",
                                            "deleting_clients_d",
                                            "disconnected_clients",
                                            "informing_clients",
                                            "initializing_clients",
                                            "offer_sent_for_client",
                                            "reauthorizing_clients",
                                            "renewing_clients",
                                            "request_waiting_for_dpm",
                                            "requesting_clients",
                                            "restarting_clients",
                                            "selecting_clients",
                                            "waiting_for_daps_init",
                                            "waiting_for_dpm_addr_change",
                                            "waiting_for_dpm_disconnect",
                                            "waiting_for_dpm_init") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Summary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Summary, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.ack_waiting_for_dpm.is_set or
                                self.bound_clients.is_set or
                                self.clients.is_set or
                                self.deleting_clients_d.is_set or
                                self.disconnected_clients.is_set or
                                self.informing_clients.is_set or
                                self.initializing_clients.is_set or
                                self.offer_sent_for_client.is_set or
                                self.reauthorizing_clients.is_set or
                                self.renewing_clients.is_set or
                                self.request_waiting_for_dpm.is_set or
                                self.requesting_clients.is_set or
                                self.restarting_clients.is_set or
                                self.selecting_clients.is_set or
                                self.waiting_for_daps_init.is_set or
                                self.waiting_for_dpm_addr_change.is_set or
                                self.waiting_for_dpm_disconnect.is_set or
                                self.waiting_for_dpm_init.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.ack_waiting_for_dpm.yfilter != YFilter.not_set or
                                self.bound_clients.yfilter != YFilter.not_set or
                                self.clients.yfilter != YFilter.not_set or
                                self.deleting_clients_d.yfilter != YFilter.not_set or
                                self.disconnected_clients.yfilter != YFilter.not_set or
                                self.informing_clients.yfilter != YFilter.not_set or
                                self.initializing_clients.yfilter != YFilter.not_set or
                                self.offer_sent_for_client.yfilter != YFilter.not_set or
                                self.reauthorizing_clients.yfilter != YFilter.not_set or
                                self.renewing_clients.yfilter != YFilter.not_set or
                                self.request_waiting_for_dpm.yfilter != YFilter.not_set or
                                self.requesting_clients.yfilter != YFilter.not_set or
                                self.restarting_clients.yfilter != YFilter.not_set or
                                self.selecting_clients.yfilter != YFilter.not_set or
                                self.waiting_for_daps_init.yfilter != YFilter.not_set or
                                self.waiting_for_dpm_addr_change.yfilter != YFilter.not_set or
                                self.waiting_for_dpm_disconnect.yfilter != YFilter.not_set or
                                self.waiting_for_dpm_init.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "summary" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.ack_waiting_for_dpm.is_set or self.ack_waiting_for_dpm.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.ack_waiting_for_dpm.get_name_leafdata())
                            if (self.bound_clients.is_set or self.bound_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.bound_clients.get_name_leafdata())
                            if (self.clients.is_set or self.clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.clients.get_name_leafdata())
                            if (self.deleting_clients_d.is_set or self.deleting_clients_d.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.deleting_clients_d.get_name_leafdata())
                            if (self.disconnected_clients.is_set or self.disconnected_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.disconnected_clients.get_name_leafdata())
                            if (self.informing_clients.is_set or self.informing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.informing_clients.get_name_leafdata())
                            if (self.initializing_clients.is_set or self.initializing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.initializing_clients.get_name_leafdata())
                            if (self.offer_sent_for_client.is_set or self.offer_sent_for_client.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.offer_sent_for_client.get_name_leafdata())
                            if (self.reauthorizing_clients.is_set or self.reauthorizing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.reauthorizing_clients.get_name_leafdata())
                            if (self.renewing_clients.is_set or self.renewing_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.renewing_clients.get_name_leafdata())
                            if (self.request_waiting_for_dpm.is_set or self.request_waiting_for_dpm.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.request_waiting_for_dpm.get_name_leafdata())
                            if (self.requesting_clients.is_set or self.requesting_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.requesting_clients.get_name_leafdata())
                            if (self.restarting_clients.is_set or self.restarting_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.restarting_clients.get_name_leafdata())
                            if (self.selecting_clients.is_set or self.selecting_clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.selecting_clients.get_name_leafdata())
                            if (self.waiting_for_daps_init.is_set or self.waiting_for_daps_init.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_daps_init.get_name_leafdata())
                            if (self.waiting_for_dpm_addr_change.is_set or self.waiting_for_dpm_addr_change.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_dpm_addr_change.get_name_leafdata())
                            if (self.waiting_for_dpm_disconnect.is_set or self.waiting_for_dpm_disconnect.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_dpm_disconnect.get_name_leafdata())
                            if (self.waiting_for_dpm_init.is_set or self.waiting_for_dpm_init.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.waiting_for_dpm_init.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "ack-waiting-for-dpm" or name == "bound-clients" or name == "clients" or name == "deleting-clients-d" or name == "disconnected-clients" or name == "informing-clients" or name == "initializing-clients" or name == "offer-sent-for-client" or name == "reauthorizing-clients" or name == "renewing-clients" or name == "request-waiting-for-dpm" or name == "requesting-clients" or name == "restarting-clients" or name == "selecting-clients" or name == "waiting-for-daps-init" or name == "waiting-for-dpm-addr-change" or name == "waiting-for-dpm-disconnect" or name == "waiting-for-dpm-init"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "ack-waiting-for-dpm"):
                                self.ack_waiting_for_dpm = value
                                self.ack_waiting_for_dpm.value_namespace = name_space
                                self.ack_waiting_for_dpm.value_namespace_prefix = name_space_prefix
                            if(value_path == "bound-clients"):
                                self.bound_clients = value
                                self.bound_clients.value_namespace = name_space
                                self.bound_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "clients"):
                                self.clients = value
                                self.clients.value_namespace = name_space
                                self.clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "deleting-clients-d"):
                                self.deleting_clients_d = value
                                self.deleting_clients_d.value_namespace = name_space
                                self.deleting_clients_d.value_namespace_prefix = name_space_prefix
                            if(value_path == "disconnected-clients"):
                                self.disconnected_clients = value
                                self.disconnected_clients.value_namespace = name_space
                                self.disconnected_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "informing-clients"):
                                self.informing_clients = value
                                self.informing_clients.value_namespace = name_space
                                self.informing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "initializing-clients"):
                                self.initializing_clients = value
                                self.initializing_clients.value_namespace = name_space
                                self.initializing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "offer-sent-for-client"):
                                self.offer_sent_for_client = value
                                self.offer_sent_for_client.value_namespace = name_space
                                self.offer_sent_for_client.value_namespace_prefix = name_space_prefix
                            if(value_path == "reauthorizing-clients"):
                                self.reauthorizing_clients = value
                                self.reauthorizing_clients.value_namespace = name_space
                                self.reauthorizing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "renewing-clients"):
                                self.renewing_clients = value
                                self.renewing_clients.value_namespace = name_space
                                self.renewing_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "request-waiting-for-dpm"):
                                self.request_waiting_for_dpm = value
                                self.request_waiting_for_dpm.value_namespace = name_space
                                self.request_waiting_for_dpm.value_namespace_prefix = name_space_prefix
                            if(value_path == "requesting-clients"):
                                self.requesting_clients = value
                                self.requesting_clients.value_namespace = name_space
                                self.requesting_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "restarting-clients"):
                                self.restarting_clients = value
                                self.restarting_clients.value_namespace = name_space
                                self.restarting_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "selecting-clients"):
                                self.selecting_clients = value
                                self.selecting_clients.value_namespace = name_space
                                self.selecting_clients.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-daps-init"):
                                self.waiting_for_daps_init = value
                                self.waiting_for_daps_init.value_namespace = name_space
                                self.waiting_for_daps_init.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-dpm-addr-change"):
                                self.waiting_for_dpm_addr_change = value
                                self.waiting_for_dpm_addr_change.value_namespace = name_space
                                self.waiting_for_dpm_addr_change.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-dpm-disconnect"):
                                self.waiting_for_dpm_disconnect = value
                                self.waiting_for_dpm_disconnect.value_namespace = name_space
                                self.waiting_for_dpm_disconnect.value_namespace_prefix = name_space_prefix
                            if(value_path == "waiting-for-dpm-init"):
                                self.waiting_for_dpm_init = value
                                self.waiting_for_dpm_init.value_namespace = name_space
                                self.waiting_for_dpm_init.value_namespace_prefix = name_space_prefix


                    class Clients(Entity):
                        """
                        DHCP server client bindings
                        
                        .. attribute:: client
                        
                        	Single DHCP Server binding
                        	**type**\: list of    :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients.Client>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients, self).__init__()

                            self.yang_name = "clients"
                            self.yang_parent_name = "binding"

                            self.client = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients, self).__setattr__(name, value)


                        class Client(Entity):
                            """
                            Single DHCP Server binding
                            
                            .. attribute:: client_id  <key>
                            
                            	Client ID
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: access_vrf_name
                            
                            	DHCP access interface VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: client_gi_addr
                            
                            	DHCP client GIADDR
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: client_id_xr
                            
                            	DHCP client identifier
                            	**type**\:  str
                            
                            	**length:** 0..1275
                            
                            .. attribute:: event_history
                            
                            	event history
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: interface_name
                            
                            	DHCP access interface to client
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: ip_address
                            
                            	DHCP IP address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: is_auth_received
                            
                            	Is true if authentication is on received option82
                            	**type**\:  bool
                            
                            .. attribute:: is_mbl_subscriber
                            
                            	Is true if DHCP subscriber is Mobile
                            	**type**\:  bool
                            
                            .. attribute:: is_nak_next_renew
                            
                            	Is true if DHCP next renew from client will be NAK'd
                            	**type**\:  bool
                            
                            .. attribute:: lease_time
                            
                            	Lease time in seconds
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: mac_address
                            
                            	DHCP client MAC address
                            	**type**\:  str
                            
                            .. attribute:: old_subscriber_label
                            
                            	DHCP old subscriber label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: param_request
                            
                            	DHCP parameter request option
                            	**type**\:  str
                            
                            	**length:** 0..513
                            
                            .. attribute:: param_response
                            
                            	DHCP saved options
                            	**type**\:  str
                            
                            	**length:** 0..2051
                            
                            .. attribute:: profile_name
                            
                            	DHCP profile name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: proxy_binding_inner_tag
                            
                            	DHCP VLAN inner VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: proxy_binding_outer_tag
                            
                            	DHCP VLAN outer VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: remaining_lease_time
                            
                            	Remaining lease time in seconds
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: second
                            
                            .. attribute:: reply_server_ip_address
                            
                            	DHCP reply server IP address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: rx_circuit_id
                            
                            	DHCP received circuit ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: rx_remote_id
                            
                            	DHCP received Remote ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: rx_vsiso
                            
                            	DHCP received VSISO
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: server_ip_address
                            
                            	DHCP server IP address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: server_vrf_name
                            
                            	DHCP server VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: session_start_time
                            
                            	session start time
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: srg_state
                            
                            	DHCPV4 SRG state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: state
                            
                            	DHCP client state
                            	**type**\:   :py:class:`BagDhcpdProxyState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.BagDhcpdProxyState>`
                            
                            .. attribute:: subscriber_interface_name
                            
                            	DHCP subscriber interface
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: subscriber_label
                            
                            	DHCP subscriber label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: to_server_gi_addr
                            
                            	DHCP to server GIADDR
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tx_circuit_id
                            
                            	DHCP transmitted circuit ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: tx_remote_id
                            
                            	DHCP transmitted Remote ID
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: tx_vsiso
                            
                            	DHCP transmitted VSISO
                            	**type**\:  str
                            
                            	**length:** 0..768
                            
                            .. attribute:: vrf_name
                            
                            	DHCP client/subscriber VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients.Client, self).__init__()

                                self.yang_name = "client"
                                self.yang_parent_name = "clients"

                                self.client_id = YLeaf(YType.str, "client-id")

                                self.access_vrf_name = YLeaf(YType.str, "access-vrf-name")

                                self.client_gi_addr = YLeaf(YType.str, "client-gi-addr")

                                self.client_id_xr = YLeaf(YType.str, "client-id-xr")

                                self.event_history = YLeafList(YType.uint32, "event-history")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.ip_address = YLeaf(YType.str, "ip-address")

                                self.is_auth_received = YLeaf(YType.boolean, "is-auth-received")

                                self.is_mbl_subscriber = YLeaf(YType.boolean, "is-mbl-subscriber")

                                self.is_nak_next_renew = YLeaf(YType.boolean, "is-nak-next-renew")

                                self.lease_time = YLeaf(YType.uint32, "lease-time")

                                self.mac_address = YLeaf(YType.str, "mac-address")

                                self.old_subscriber_label = YLeaf(YType.uint32, "old-subscriber-label")

                                self.param_request = YLeaf(YType.str, "param-request")

                                self.param_response = YLeaf(YType.str, "param-response")

                                self.profile_name = YLeaf(YType.str, "profile-name")

                                self.proxy_binding_inner_tag = YLeaf(YType.uint32, "proxy-binding-inner-tag")

                                self.proxy_binding_outer_tag = YLeaf(YType.uint32, "proxy-binding-outer-tag")

                                self.remaining_lease_time = YLeaf(YType.uint32, "remaining-lease-time")

                                self.reply_server_ip_address = YLeaf(YType.str, "reply-server-ip-address")

                                self.rx_circuit_id = YLeaf(YType.str, "rx-circuit-id")

                                self.rx_remote_id = YLeaf(YType.str, "rx-remote-id")

                                self.rx_vsiso = YLeaf(YType.str, "rx-vsiso")

                                self.server_ip_address = YLeaf(YType.str, "server-ip-address")

                                self.server_vrf_name = YLeaf(YType.str, "server-vrf-name")

                                self.session_start_time = YLeaf(YType.uint64, "session-start-time")

                                self.srg_state = YLeaf(YType.uint32, "srg-state")

                                self.state = YLeaf(YType.enumeration, "state")

                                self.subscriber_interface_name = YLeaf(YType.str, "subscriber-interface-name")

                                self.subscriber_label = YLeaf(YType.uint32, "subscriber-label")

                                self.to_server_gi_addr = YLeaf(YType.str, "to-server-gi-addr")

                                self.tx_circuit_id = YLeaf(YType.str, "tx-circuit-id")

                                self.tx_remote_id = YLeaf(YType.str, "tx-remote-id")

                                self.tx_vsiso = YLeaf(YType.str, "tx-vsiso")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("client_id",
                                                "access_vrf_name",
                                                "client_gi_addr",
                                                "client_id_xr",
                                                "event_history",
                                                "interface_name",
                                                "ip_address",
                                                "is_auth_received",
                                                "is_mbl_subscriber",
                                                "is_nak_next_renew",
                                                "lease_time",
                                                "mac_address",
                                                "old_subscriber_label",
                                                "param_request",
                                                "param_response",
                                                "profile_name",
                                                "proxy_binding_inner_tag",
                                                "proxy_binding_outer_tag",
                                                "remaining_lease_time",
                                                "reply_server_ip_address",
                                                "rx_circuit_id",
                                                "rx_remote_id",
                                                "rx_vsiso",
                                                "server_ip_address",
                                                "server_vrf_name",
                                                "session_start_time",
                                                "srg_state",
                                                "state",
                                                "subscriber_interface_name",
                                                "subscriber_label",
                                                "to_server_gi_addr",
                                                "tx_circuit_id",
                                                "tx_remote_id",
                                                "tx_vsiso",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients.Client, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients.Client, self).__setattr__(name, value)

                            def has_data(self):
                                for leaf in self.event_history.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return (
                                    self.client_id.is_set or
                                    self.access_vrf_name.is_set or
                                    self.client_gi_addr.is_set or
                                    self.client_id_xr.is_set or
                                    self.interface_name.is_set or
                                    self.ip_address.is_set or
                                    self.is_auth_received.is_set or
                                    self.is_mbl_subscriber.is_set or
                                    self.is_nak_next_renew.is_set or
                                    self.lease_time.is_set or
                                    self.mac_address.is_set or
                                    self.old_subscriber_label.is_set or
                                    self.param_request.is_set or
                                    self.param_response.is_set or
                                    self.profile_name.is_set or
                                    self.proxy_binding_inner_tag.is_set or
                                    self.proxy_binding_outer_tag.is_set or
                                    self.remaining_lease_time.is_set or
                                    self.reply_server_ip_address.is_set or
                                    self.rx_circuit_id.is_set or
                                    self.rx_remote_id.is_set or
                                    self.rx_vsiso.is_set or
                                    self.server_ip_address.is_set or
                                    self.server_vrf_name.is_set or
                                    self.session_start_time.is_set or
                                    self.srg_state.is_set or
                                    self.state.is_set or
                                    self.subscriber_interface_name.is_set or
                                    self.subscriber_label.is_set or
                                    self.to_server_gi_addr.is_set or
                                    self.tx_circuit_id.is_set or
                                    self.tx_remote_id.is_set or
                                    self.tx_vsiso.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                for leaf in self.event_history.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.client_id.yfilter != YFilter.not_set or
                                    self.access_vrf_name.yfilter != YFilter.not_set or
                                    self.client_gi_addr.yfilter != YFilter.not_set or
                                    self.client_id_xr.yfilter != YFilter.not_set or
                                    self.event_history.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.ip_address.yfilter != YFilter.not_set or
                                    self.is_auth_received.yfilter != YFilter.not_set or
                                    self.is_mbl_subscriber.yfilter != YFilter.not_set or
                                    self.is_nak_next_renew.yfilter != YFilter.not_set or
                                    self.lease_time.yfilter != YFilter.not_set or
                                    self.mac_address.yfilter != YFilter.not_set or
                                    self.old_subscriber_label.yfilter != YFilter.not_set or
                                    self.param_request.yfilter != YFilter.not_set or
                                    self.param_response.yfilter != YFilter.not_set or
                                    self.profile_name.yfilter != YFilter.not_set or
                                    self.proxy_binding_inner_tag.yfilter != YFilter.not_set or
                                    self.proxy_binding_outer_tag.yfilter != YFilter.not_set or
                                    self.remaining_lease_time.yfilter != YFilter.not_set or
                                    self.reply_server_ip_address.yfilter != YFilter.not_set or
                                    self.rx_circuit_id.yfilter != YFilter.not_set or
                                    self.rx_remote_id.yfilter != YFilter.not_set or
                                    self.rx_vsiso.yfilter != YFilter.not_set or
                                    self.server_ip_address.yfilter != YFilter.not_set or
                                    self.server_vrf_name.yfilter != YFilter.not_set or
                                    self.session_start_time.yfilter != YFilter.not_set or
                                    self.srg_state.yfilter != YFilter.not_set or
                                    self.state.yfilter != YFilter.not_set or
                                    self.subscriber_interface_name.yfilter != YFilter.not_set or
                                    self.subscriber_label.yfilter != YFilter.not_set or
                                    self.to_server_gi_addr.yfilter != YFilter.not_set or
                                    self.tx_circuit_id.yfilter != YFilter.not_set or
                                    self.tx_remote_id.yfilter != YFilter.not_set or
                                    self.tx_vsiso.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "client" + "[client-id='" + self.client_id.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.client_id.is_set or self.client_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id.get_name_leafdata())
                                if (self.access_vrf_name.is_set or self.access_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.access_vrf_name.get_name_leafdata())
                                if (self.client_gi_addr.is_set or self.client_gi_addr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_gi_addr.get_name_leafdata())
                                if (self.client_id_xr.is_set or self.client_id_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id_xr.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.ip_address.is_set or self.ip_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ip_address.get_name_leafdata())
                                if (self.is_auth_received.is_set or self.is_auth_received.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_auth_received.get_name_leafdata())
                                if (self.is_mbl_subscriber.is_set or self.is_mbl_subscriber.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_mbl_subscriber.get_name_leafdata())
                                if (self.is_nak_next_renew.is_set or self.is_nak_next_renew.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_nak_next_renew.get_name_leafdata())
                                if (self.lease_time.is_set or self.lease_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.lease_time.get_name_leafdata())
                                if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mac_address.get_name_leafdata())
                                if (self.old_subscriber_label.is_set or self.old_subscriber_label.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.old_subscriber_label.get_name_leafdata())
                                if (self.param_request.is_set or self.param_request.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.param_request.get_name_leafdata())
                                if (self.param_response.is_set or self.param_response.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.param_response.get_name_leafdata())
                                if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_name.get_name_leafdata())
                                if (self.proxy_binding_inner_tag.is_set or self.proxy_binding_inner_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proxy_binding_inner_tag.get_name_leafdata())
                                if (self.proxy_binding_outer_tag.is_set or self.proxy_binding_outer_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proxy_binding_outer_tag.get_name_leafdata())
                                if (self.remaining_lease_time.is_set or self.remaining_lease_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.remaining_lease_time.get_name_leafdata())
                                if (self.reply_server_ip_address.is_set or self.reply_server_ip_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.reply_server_ip_address.get_name_leafdata())
                                if (self.rx_circuit_id.is_set or self.rx_circuit_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_circuit_id.get_name_leafdata())
                                if (self.rx_remote_id.is_set or self.rx_remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_remote_id.get_name_leafdata())
                                if (self.rx_vsiso.is_set or self.rx_vsiso.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_vsiso.get_name_leafdata())
                                if (self.server_ip_address.is_set or self.server_ip_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_ip_address.get_name_leafdata())
                                if (self.server_vrf_name.is_set or self.server_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_vrf_name.get_name_leafdata())
                                if (self.session_start_time.is_set or self.session_start_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.session_start_time.get_name_leafdata())
                                if (self.srg_state.is_set or self.srg_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_state.get_name_leafdata())
                                if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.state.get_name_leafdata())
                                if (self.subscriber_interface_name.is_set or self.subscriber_interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.subscriber_interface_name.get_name_leafdata())
                                if (self.subscriber_label.is_set or self.subscriber_label.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.subscriber_label.get_name_leafdata())
                                if (self.to_server_gi_addr.is_set or self.to_server_gi_addr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.to_server_gi_addr.get_name_leafdata())
                                if (self.tx_circuit_id.is_set or self.tx_circuit_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_circuit_id.get_name_leafdata())
                                if (self.tx_remote_id.is_set or self.tx_remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_remote_id.get_name_leafdata())
                                if (self.tx_vsiso.is_set or self.tx_vsiso.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_vsiso.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                leaf_name_data.extend(self.event_history.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "client-id" or name == "access-vrf-name" or name == "client-gi-addr" or name == "client-id-xr" or name == "event-history" or name == "interface-name" or name == "ip-address" or name == "is-auth-received" or name == "is-mbl-subscriber" or name == "is-nak-next-renew" or name == "lease-time" or name == "mac-address" or name == "old-subscriber-label" or name == "param-request" or name == "param-response" or name == "profile-name" or name == "proxy-binding-inner-tag" or name == "proxy-binding-outer-tag" or name == "remaining-lease-time" or name == "reply-server-ip-address" or name == "rx-circuit-id" or name == "rx-remote-id" or name == "rx-vsiso" or name == "server-ip-address" or name == "server-vrf-name" or name == "session-start-time" or name == "srg-state" or name == "state" or name == "subscriber-interface-name" or name == "subscriber-label" or name == "to-server-gi-addr" or name == "tx-circuit-id" or name == "tx-remote-id" or name == "tx-vsiso" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "client-id"):
                                    self.client_id = value
                                    self.client_id.value_namespace = name_space
                                    self.client_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "access-vrf-name"):
                                    self.access_vrf_name = value
                                    self.access_vrf_name.value_namespace = name_space
                                    self.access_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-gi-addr"):
                                    self.client_gi_addr = value
                                    self.client_gi_addr.value_namespace = name_space
                                    self.client_gi_addr.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-id-xr"):
                                    self.client_id_xr = value
                                    self.client_id_xr.value_namespace = name_space
                                    self.client_id_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "event-history"):
                                    self.event_history.append(value)
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "ip-address"):
                                    self.ip_address = value
                                    self.ip_address.value_namespace = name_space
                                    self.ip_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-auth-received"):
                                    self.is_auth_received = value
                                    self.is_auth_received.value_namespace = name_space
                                    self.is_auth_received.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-mbl-subscriber"):
                                    self.is_mbl_subscriber = value
                                    self.is_mbl_subscriber.value_namespace = name_space
                                    self.is_mbl_subscriber.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-nak-next-renew"):
                                    self.is_nak_next_renew = value
                                    self.is_nak_next_renew.value_namespace = name_space
                                    self.is_nak_next_renew.value_namespace_prefix = name_space_prefix
                                if(value_path == "lease-time"):
                                    self.lease_time = value
                                    self.lease_time.value_namespace = name_space
                                    self.lease_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "mac-address"):
                                    self.mac_address = value
                                    self.mac_address.value_namespace = name_space
                                    self.mac_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "old-subscriber-label"):
                                    self.old_subscriber_label = value
                                    self.old_subscriber_label.value_namespace = name_space
                                    self.old_subscriber_label.value_namespace_prefix = name_space_prefix
                                if(value_path == "param-request"):
                                    self.param_request = value
                                    self.param_request.value_namespace = name_space
                                    self.param_request.value_namespace_prefix = name_space_prefix
                                if(value_path == "param-response"):
                                    self.param_response = value
                                    self.param_response.value_namespace = name_space
                                    self.param_response.value_namespace_prefix = name_space_prefix
                                if(value_path == "profile-name"):
                                    self.profile_name = value
                                    self.profile_name.value_namespace = name_space
                                    self.profile_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "proxy-binding-inner-tag"):
                                    self.proxy_binding_inner_tag = value
                                    self.proxy_binding_inner_tag.value_namespace = name_space
                                    self.proxy_binding_inner_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "proxy-binding-outer-tag"):
                                    self.proxy_binding_outer_tag = value
                                    self.proxy_binding_outer_tag.value_namespace = name_space
                                    self.proxy_binding_outer_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "remaining-lease-time"):
                                    self.remaining_lease_time = value
                                    self.remaining_lease_time.value_namespace = name_space
                                    self.remaining_lease_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "reply-server-ip-address"):
                                    self.reply_server_ip_address = value
                                    self.reply_server_ip_address.value_namespace = name_space
                                    self.reply_server_ip_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-circuit-id"):
                                    self.rx_circuit_id = value
                                    self.rx_circuit_id.value_namespace = name_space
                                    self.rx_circuit_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-remote-id"):
                                    self.rx_remote_id = value
                                    self.rx_remote_id.value_namespace = name_space
                                    self.rx_remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-vsiso"):
                                    self.rx_vsiso = value
                                    self.rx_vsiso.value_namespace = name_space
                                    self.rx_vsiso.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-ip-address"):
                                    self.server_ip_address = value
                                    self.server_ip_address.value_namespace = name_space
                                    self.server_ip_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-vrf-name"):
                                    self.server_vrf_name = value
                                    self.server_vrf_name.value_namespace = name_space
                                    self.server_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "session-start-time"):
                                    self.session_start_time = value
                                    self.session_start_time.value_namespace = name_space
                                    self.session_start_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-state"):
                                    self.srg_state = value
                                    self.srg_state.value_namespace = name_space
                                    self.srg_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "state"):
                                    self.state = value
                                    self.state.value_namespace = name_space
                                    self.state.value_namespace_prefix = name_space_prefix
                                if(value_path == "subscriber-interface-name"):
                                    self.subscriber_interface_name = value
                                    self.subscriber_interface_name.value_namespace = name_space
                                    self.subscriber_interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "subscriber-label"):
                                    self.subscriber_label = value
                                    self.subscriber_label.value_namespace = name_space
                                    self.subscriber_label.value_namespace_prefix = name_space_prefix
                                if(value_path == "to-server-gi-addr"):
                                    self.to_server_gi_addr = value
                                    self.to_server_gi_addr.value_namespace = name_space
                                    self.to_server_gi_addr.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-circuit-id"):
                                    self.tx_circuit_id = value
                                    self.tx_circuit_id.value_namespace = name_space
                                    self.tx_circuit_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-remote-id"):
                                    self.tx_remote_id = value
                                    self.tx_remote_id.value_namespace = name_space
                                    self.tx_remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-vsiso"):
                                    self.tx_vsiso = value
                                    self.tx_vsiso.value_namespace = name_space
                                    self.tx_vsiso.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.client:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.client:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "clients" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "client"):
                                for c in self.client:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients.Client()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.client.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "client"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            (self.clients is not None and self.clients.has_data()) or
                            (self.summary is not None and self.summary.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.clients is not None and self.clients.has_operation()) or
                            (self.summary is not None and self.summary.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "binding" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "clients"):
                            if (self.clients is None):
                                self.clients = Ipv4Dhcpd.Nodes.Node.Server.Binding.Clients()
                                self.clients.parent = self
                                self._children_name_map["clients"] = "clients"
                            return self.clients

                        if (child_yang_name == "summary"):
                            if (self.summary is None):
                                self.summary = Ipv4Dhcpd.Nodes.Node.Server.Binding.Summary()
                                self.summary.parent = self
                                self._children_name_map["summary"] = "summary"
                            return self.summary

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "clients" or name == "summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class StatisticsInfo(Entity):
                    """
                    DHCP proxy stats info
                    
                    .. attribute:: proxy_stats_timestamp
                    
                    	Proxy Stats timestamp
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Server.StatisticsInfo, self).__init__()

                        self.yang_name = "statistics-info"
                        self.yang_parent_name = "server"

                        self.proxy_stats_timestamp = YLeaf(YType.uint32, "proxy-stats-timestamp")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("proxy_stats_timestamp") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.StatisticsInfo, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Server.StatisticsInfo, self).__setattr__(name, value)

                    def has_data(self):
                        return self.proxy_stats_timestamp.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.proxy_stats_timestamp.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics-info" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.proxy_stats_timestamp.is_set or self.proxy_stats_timestamp.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.proxy_stats_timestamp.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "proxy-stats-timestamp"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "proxy-stats-timestamp"):
                            self.proxy_stats_timestamp = value
                            self.proxy_stats_timestamp.value_namespace = name_space
                            self.proxy_stats_timestamp.value_namespace_prefix = name_space_prefix


                class Vrfs(Entity):
                    """
                    DHCP Server list of VRF names
                    
                    .. attribute:: vrf
                    
                    	IPv4 DHCP server VRF name
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "server"

                        self.vrf = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs, self).__setattr__(name, value)


                    class Vrf(Entity):
                        """
                        IPv4 DHCP server VRF name
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: statistics
                        
                        	IPv4 DHCP server statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            IPv4 DHCP server statistics
                            
                            .. attribute:: ack
                            
                            	DHCP ack packets
                            	**type**\:   :py:class:`Ack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Ack>`
                            
                            .. attribute:: bootp_reply
                            
                            	DHCP BOOTP reply
                            	**type**\:   :py:class:`BootpReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpReply>`
                            
                            .. attribute:: bootp_request
                            
                            	DHCP BOOTP request
                            	**type**\:   :py:class:`BootpRequest <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpRequest>`
                            
                            .. attribute:: decline
                            
                            	DHCP decline packets
                            	**type**\:   :py:class:`Decline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline>`
                            
                            .. attribute:: discover
                            
                            	DHCP discover packets
                            	**type**\:   :py:class:`Discover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Discover>`
                            
                            .. attribute:: inform
                            
                            	DHCP inform packets
                            	**type**\:   :py:class:`Inform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform>`
                            
                            .. attribute:: lease_active
                            
                            	DHCP lease active
                            	**type**\:   :py:class:`LeaseActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseActive>`
                            
                            .. attribute:: lease_not_assigned
                            
                            	DHCP lease not assigned
                            	**type**\:   :py:class:`LeaseNotAssigned <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseNotAssigned>`
                            
                            .. attribute:: lease_query
                            
                            	DHCP lease query packets
                            	**type**\:   :py:class:`LeaseQuery <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery>`
                            
                            .. attribute:: lease_unknown
                            
                            	DHCP lease unknown
                            	**type**\:   :py:class:`LeaseUnknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseUnknown>`
                            
                            .. attribute:: nak
                            
                            	DHCP nak packets
                            	**type**\:   :py:class:`Nak <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Nak>`
                            
                            .. attribute:: offer
                            
                            	DHCP offer packets
                            	**type**\:   :py:class:`Offer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Offer>`
                            
                            .. attribute:: release
                            
                            	DHCP release packets
                            	**type**\:   :py:class:`Release <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release>`
                            
                            .. attribute:: request
                            
                            	DHCP request packets
                            	**type**\:   :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "vrf"

                                self.ack = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Ack()
                                self.ack.parent = self
                                self._children_name_map["ack"] = "ack"
                                self._children_yang_names.add("ack")

                                self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpReply()
                                self.bootp_reply.parent = self
                                self._children_name_map["bootp_reply"] = "bootp-reply"
                                self._children_yang_names.add("bootp-reply")

                                self.bootp_request = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpRequest()
                                self.bootp_request.parent = self
                                self._children_name_map["bootp_request"] = "bootp-request"
                                self._children_yang_names.add("bootp-request")

                                self.decline = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline()
                                self.decline.parent = self
                                self._children_name_map["decline"] = "decline"
                                self._children_yang_names.add("decline")

                                self.discover = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Discover()
                                self.discover.parent = self
                                self._children_name_map["discover"] = "discover"
                                self._children_yang_names.add("discover")

                                self.inform = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform()
                                self.inform.parent = self
                                self._children_name_map["inform"] = "inform"
                                self._children_yang_names.add("inform")

                                self.lease_active = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseActive()
                                self.lease_active.parent = self
                                self._children_name_map["lease_active"] = "lease-active"
                                self._children_yang_names.add("lease-active")

                                self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseNotAssigned()
                                self.lease_not_assigned.parent = self
                                self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                self._children_yang_names.add("lease-not-assigned")

                                self.lease_query = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery()
                                self.lease_query.parent = self
                                self._children_name_map["lease_query"] = "lease-query"
                                self._children_yang_names.add("lease-query")

                                self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseUnknown()
                                self.lease_unknown.parent = self
                                self._children_name_map["lease_unknown"] = "lease-unknown"
                                self._children_yang_names.add("lease-unknown")

                                self.nak = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Nak()
                                self.nak.parent = self
                                self._children_name_map["nak"] = "nak"
                                self._children_yang_names.add("nak")

                                self.offer = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Offer()
                                self.offer.parent = self
                                self._children_name_map["offer"] = "offer"
                                self._children_yang_names.add("offer")

                                self.release = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release()
                                self.release.parent = self
                                self._children_name_map["release"] = "release"
                                self._children_yang_names.add("release")

                                self.request = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request()
                                self.request.parent = self
                                self._children_name_map["request"] = "request"
                                self._children_yang_names.add("request")


                            class Discover(Entity):
                                """
                                DHCP discover packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Discover, self).__init__()

                                    self.yang_name = "discover"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Discover, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Discover, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "discover" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Offer(Entity):
                                """
                                DHCP offer packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Offer, self).__init__()

                                    self.yang_name = "offer"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Offer, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Offer, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "offer" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Request(Entity):
                                """
                                DHCP request packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request, self).__init__()

                                    self.yang_name = "request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Decline(Entity):
                                """
                                DHCP decline packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline, self).__init__()

                                    self.yang_name = "decline"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "decline" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Ack(Entity):
                                """
                                DHCP ack packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Ack, self).__init__()

                                    self.yang_name = "ack"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Ack, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Ack, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ack" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Nak(Entity):
                                """
                                DHCP nak packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Nak, self).__init__()

                                    self.yang_name = "nak"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Nak, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Nak, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "nak" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Release(Entity):
                                """
                                DHCP release packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release, self).__init__()

                                    self.yang_name = "release"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "release" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Inform(Entity):
                                """
                                DHCP inform packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform, self).__init__()

                                    self.yang_name = "inform"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "inform" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQuery(Entity):
                                """
                                DHCP lease query packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery, self).__init__()

                                    self.yang_name = "lease-query"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseNotAssigned(Entity):
                                """
                                DHCP lease not assigned
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__init__()

                                    self.yang_name = "lease-not-assigned"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseNotAssigned, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-not-assigned" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseUnknown(Entity):
                                """
                                DHCP lease unknown
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseUnknown, self).__init__()

                                    self.yang_name = "lease-unknown"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseUnknown, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseUnknown, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-unknown" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseActive(Entity):
                                """
                                DHCP lease active
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseActive, self).__init__()

                                    self.yang_name = "lease-active"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseActive, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseActive, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-active" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpRequest(Entity):
                                """
                                DHCP BOOTP request
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpRequest, self).__init__()

                                    self.yang_name = "bootp-request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpRequest, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpRequest, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpReply(Entity):
                                """
                                DHCP BOOTP reply
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpReply, self).__init__()

                                    self.yang_name = "bootp-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ack is not None and self.ack.has_data()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_data()) or
                                    (self.bootp_request is not None and self.bootp_request.has_data()) or
                                    (self.decline is not None and self.decline.has_data()) or
                                    (self.discover is not None and self.discover.has_data()) or
                                    (self.inform is not None and self.inform.has_data()) or
                                    (self.lease_active is not None and self.lease_active.has_data()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_data()) or
                                    (self.lease_query is not None and self.lease_query.has_data()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_data()) or
                                    (self.nak is not None and self.nak.has_data()) or
                                    (self.offer is not None and self.offer.has_data()) or
                                    (self.release is not None and self.release.has_data()) or
                                    (self.request is not None and self.request.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ack is not None and self.ack.has_operation()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_operation()) or
                                    (self.bootp_request is not None and self.bootp_request.has_operation()) or
                                    (self.decline is not None and self.decline.has_operation()) or
                                    (self.discover is not None and self.discover.has_operation()) or
                                    (self.inform is not None and self.inform.has_operation()) or
                                    (self.lease_active is not None and self.lease_active.has_operation()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_operation()) or
                                    (self.lease_query is not None and self.lease_query.has_operation()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_operation()) or
                                    (self.nak is not None and self.nak.has_operation()) or
                                    (self.offer is not None and self.offer.has_operation()) or
                                    (self.release is not None and self.release.has_operation()) or
                                    (self.request is not None and self.request.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ack"):
                                    if (self.ack is None):
                                        self.ack = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Ack()
                                        self.ack.parent = self
                                        self._children_name_map["ack"] = "ack"
                                    return self.ack

                                if (child_yang_name == "bootp-reply"):
                                    if (self.bootp_reply is None):
                                        self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpReply()
                                        self.bootp_reply.parent = self
                                        self._children_name_map["bootp_reply"] = "bootp-reply"
                                    return self.bootp_reply

                                if (child_yang_name == "bootp-request"):
                                    if (self.bootp_request is None):
                                        self.bootp_request = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.BootpRequest()
                                        self.bootp_request.parent = self
                                        self._children_name_map["bootp_request"] = "bootp-request"
                                    return self.bootp_request

                                if (child_yang_name == "decline"):
                                    if (self.decline is None):
                                        self.decline = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline()
                                        self.decline.parent = self
                                        self._children_name_map["decline"] = "decline"
                                    return self.decline

                                if (child_yang_name == "discover"):
                                    if (self.discover is None):
                                        self.discover = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Discover()
                                        self.discover.parent = self
                                        self._children_name_map["discover"] = "discover"
                                    return self.discover

                                if (child_yang_name == "inform"):
                                    if (self.inform is None):
                                        self.inform = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform()
                                        self.inform.parent = self
                                        self._children_name_map["inform"] = "inform"
                                    return self.inform

                                if (child_yang_name == "lease-active"):
                                    if (self.lease_active is None):
                                        self.lease_active = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseActive()
                                        self.lease_active.parent = self
                                        self._children_name_map["lease_active"] = "lease-active"
                                    return self.lease_active

                                if (child_yang_name == "lease-not-assigned"):
                                    if (self.lease_not_assigned is None):
                                        self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseNotAssigned()
                                        self.lease_not_assigned.parent = self
                                        self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                    return self.lease_not_assigned

                                if (child_yang_name == "lease-query"):
                                    if (self.lease_query is None):
                                        self.lease_query = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery()
                                        self.lease_query.parent = self
                                        self._children_name_map["lease_query"] = "lease-query"
                                    return self.lease_query

                                if (child_yang_name == "lease-unknown"):
                                    if (self.lease_unknown is None):
                                        self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseUnknown()
                                        self.lease_unknown.parent = self
                                        self._children_name_map["lease_unknown"] = "lease-unknown"
                                    return self.lease_unknown

                                if (child_yang_name == "nak"):
                                    if (self.nak is None):
                                        self.nak = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Nak()
                                        self.nak.parent = self
                                        self._children_name_map["nak"] = "nak"
                                    return self.nak

                                if (child_yang_name == "offer"):
                                    if (self.offer is None):
                                        self.offer = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Offer()
                                        self.offer.parent = self
                                        self._children_name_map["offer"] = "offer"
                                    return self.offer

                                if (child_yang_name == "release"):
                                    if (self.release is None):
                                        self.release = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release()
                                        self.release.parent = self
                                        self._children_name_map["release"] = "release"
                                    return self.release

                                if (child_yang_name == "request"):
                                    if (self.request is None):
                                        self.request = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request()
                                        self.request.parent = self
                                        self._children_name_map["request"] = "request"
                                    return self.request

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ack" or name == "bootp-reply" or name == "bootp-request" or name == "decline" or name == "discover" or name == "inform" or name == "lease-active" or name == "lease-not-assigned" or name == "lease-query" or name == "lease-unknown" or name == "nak" or name == "offer" or name == "release" or name == "request"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrfs" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf"):
                            for c in self.vrf:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Server.Vrfs.Vrf()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.binding is not None and self.binding.has_data()) or
                        (self.profiles is not None and self.profiles.has_data()) or
                        (self.statistics is not None and self.statistics.has_data()) or
                        (self.statistics_info is not None and self.statistics_info.has_data()) or
                        (self.vrfs is not None and self.vrfs.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.binding is not None and self.binding.has_operation()) or
                        (self.profiles is not None and self.profiles.has_operation()) or
                        (self.statistics is not None and self.statistics.has_operation()) or
                        (self.statistics_info is not None and self.statistics_info.has_operation()) or
                        (self.vrfs is not None and self.vrfs.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "server" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "binding"):
                        if (self.binding is None):
                            self.binding = Ipv4Dhcpd.Nodes.Node.Server.Binding()
                            self.binding.parent = self
                            self._children_name_map["binding"] = "binding"
                        return self.binding

                    if (child_yang_name == "profiles"):
                        if (self.profiles is None):
                            self.profiles = Ipv4Dhcpd.Nodes.Node.Server.Profiles()
                            self.profiles.parent = self
                            self._children_name_map["profiles"] = "profiles"
                        return self.profiles

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Ipv4Dhcpd.Nodes.Node.Server.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    if (child_yang_name == "statistics-info"):
                        if (self.statistics_info is None):
                            self.statistics_info = Ipv4Dhcpd.Nodes.Node.Server.StatisticsInfo()
                            self.statistics_info.parent = self
                            self._children_name_map["statistics_info"] = "statistics-info"
                        return self.statistics_info

                    if (child_yang_name == "vrfs"):
                        if (self.vrfs is None):
                            self.vrfs = Ipv4Dhcpd.Nodes.Node.Server.Vrfs()
                            self.vrfs.parent = self
                            self._children_name_map["vrfs"] = "vrfs"
                        return self.vrfs

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "binding" or name == "profiles" or name == "statistics" or name == "statistics-info" or name == "vrfs"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Relay(Entity):
                """
                IPv4 DHCPD Relay operational data
                
                .. attribute:: profiles
                
                	DHCP Relay Profiles
                	**type**\:   :py:class:`Profiles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Profiles>`
                
                .. attribute:: statistics
                
                	DHCP Relay VRF statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Statistics>`
                
                .. attribute:: statistics_info
                
                	DHCP relay statistics info
                	**type**\:   :py:class:`StatisticsInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.StatisticsInfo>`
                
                .. attribute:: vrfs
                
                	DHCP relay list of VRF names
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs>`
                
                

                """

                _prefix = 'ipv4-dhcpd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Ipv4Dhcpd.Nodes.Node.Relay, self).__init__()

                    self.yang_name = "relay"
                    self.yang_parent_name = "node"

                    self.profiles = Ipv4Dhcpd.Nodes.Node.Relay.Profiles()
                    self.profiles.parent = self
                    self._children_name_map["profiles"] = "profiles"
                    self._children_yang_names.add("profiles")

                    self.statistics = Ipv4Dhcpd.Nodes.Node.Relay.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.statistics_info = Ipv4Dhcpd.Nodes.Node.Relay.StatisticsInfo()
                    self.statistics_info.parent = self
                    self._children_name_map["statistics_info"] = "statistics-info"
                    self._children_yang_names.add("statistics-info")

                    self.vrfs = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"
                    self._children_yang_names.add("vrfs")


                class Profiles(Entity):
                    """
                    DHCP Relay Profiles
                    
                    .. attribute:: profile
                    
                    	DHCP Relay profile
                    	**type**\: list of    :py:class:`Profile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Profiles.Profile>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Relay.Profiles, self).__init__()

                        self.yang_name = "profiles"
                        self.yang_parent_name = "relay"

                        self.profile = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Profiles, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Relay.Profiles, self).__setattr__(name, value)


                    class Profile(Entity):
                        """
                        DHCP Relay profile
                        
                        .. attribute:: profile_name  <key>
                        
                        	Profile name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: relay_profile_broadcast_flag_policy
                        
                        	Broadcast policy
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_gi_addr
                        
                        	Gateway addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: relay_profile_gi_addr_policy
                        
                        	GIADDR policy
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_helper_address
                        
                        	Helper addresses
                        	**type**\:  list of str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: relay_profile_helper_count
                        
                        	Helper address count
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_helper_vrf
                        
                        	Helper address vrfs
                        	**type**\:  list of str
                        
                        	**length:** 0..33
                        
                        .. attribute:: relay_profile_name
                        
                        	Profile Name
                        	**type**\:  str
                        
                        	**length:** 0..65
                        
                        .. attribute:: relay_profile_relay_info_allow_untrusted
                        
                        	Relay info untrusted
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_relay_info_check
                        
                        	Relay info check
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_relay_info_option
                        
                        	Relay info option
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_relay_info_optionvpn
                        
                        	Relay info option vpn
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_relay_info_optionvpn_mode
                        
                        	Relay info option vpn\-mode
                        	**type**\:   :py:class:`RelayInfoVpnMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.RelayInfoVpnMode>`
                        
                        .. attribute:: relay_profile_relay_info_policy
                        
                        	Relay info policy
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: relay_profile_uid
                        
                        	Profile UID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Relay.Profiles.Profile, self).__init__()

                            self.yang_name = "profile"
                            self.yang_parent_name = "profiles"

                            self.profile_name = YLeaf(YType.str, "profile-name")

                            self.relay_profile_broadcast_flag_policy = YLeaf(YType.uint8, "relay-profile-broadcast-flag-policy")

                            self.relay_profile_gi_addr = YLeafList(YType.str, "relay-profile-gi-addr")

                            self.relay_profile_gi_addr_policy = YLeaf(YType.uint8, "relay-profile-gi-addr-policy")

                            self.relay_profile_helper_address = YLeafList(YType.str, "relay-profile-helper-address")

                            self.relay_profile_helper_count = YLeaf(YType.uint8, "relay-profile-helper-count")

                            self.relay_profile_helper_vrf = YLeafList(YType.str, "relay-profile-helper-vrf")

                            self.relay_profile_name = YLeaf(YType.str, "relay-profile-name")

                            self.relay_profile_relay_info_allow_untrusted = YLeaf(YType.uint8, "relay-profile-relay-info-allow-untrusted")

                            self.relay_profile_relay_info_check = YLeaf(YType.uint8, "relay-profile-relay-info-check")

                            self.relay_profile_relay_info_option = YLeaf(YType.uint8, "relay-profile-relay-info-option")

                            self.relay_profile_relay_info_optionvpn = YLeaf(YType.uint8, "relay-profile-relay-info-optionvpn")

                            self.relay_profile_relay_info_optionvpn_mode = YLeaf(YType.enumeration, "relay-profile-relay-info-optionvpn-mode")

                            self.relay_profile_relay_info_policy = YLeaf(YType.uint8, "relay-profile-relay-info-policy")

                            self.relay_profile_uid = YLeaf(YType.uint32, "relay-profile-uid")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("profile_name",
                                            "relay_profile_broadcast_flag_policy",
                                            "relay_profile_gi_addr",
                                            "relay_profile_gi_addr_policy",
                                            "relay_profile_helper_address",
                                            "relay_profile_helper_count",
                                            "relay_profile_helper_vrf",
                                            "relay_profile_name",
                                            "relay_profile_relay_info_allow_untrusted",
                                            "relay_profile_relay_info_check",
                                            "relay_profile_relay_info_option",
                                            "relay_profile_relay_info_optionvpn",
                                            "relay_profile_relay_info_optionvpn_mode",
                                            "relay_profile_relay_info_policy",
                                            "relay_profile_uid") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Relay.Profiles.Profile, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Profiles.Profile, self).__setattr__(name, value)

                        def has_data(self):
                            for leaf in self.relay_profile_gi_addr.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            for leaf in self.relay_profile_helper_address.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            for leaf in self.relay_profile_helper_vrf.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            return (
                                self.profile_name.is_set or
                                self.relay_profile_broadcast_flag_policy.is_set or
                                self.relay_profile_gi_addr_policy.is_set or
                                self.relay_profile_helper_count.is_set or
                                self.relay_profile_name.is_set or
                                self.relay_profile_relay_info_allow_untrusted.is_set or
                                self.relay_profile_relay_info_check.is_set or
                                self.relay_profile_relay_info_option.is_set or
                                self.relay_profile_relay_info_optionvpn.is_set or
                                self.relay_profile_relay_info_optionvpn_mode.is_set or
                                self.relay_profile_relay_info_policy.is_set or
                                self.relay_profile_uid.is_set)

                        def has_operation(self):
                            for leaf in self.relay_profile_gi_addr.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            for leaf in self.relay_profile_helper_address.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            for leaf in self.relay_profile_helper_vrf.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.profile_name.yfilter != YFilter.not_set or
                                self.relay_profile_broadcast_flag_policy.yfilter != YFilter.not_set or
                                self.relay_profile_gi_addr.yfilter != YFilter.not_set or
                                self.relay_profile_gi_addr_policy.yfilter != YFilter.not_set or
                                self.relay_profile_helper_address.yfilter != YFilter.not_set or
                                self.relay_profile_helper_count.yfilter != YFilter.not_set or
                                self.relay_profile_helper_vrf.yfilter != YFilter.not_set or
                                self.relay_profile_name.yfilter != YFilter.not_set or
                                self.relay_profile_relay_info_allow_untrusted.yfilter != YFilter.not_set or
                                self.relay_profile_relay_info_check.yfilter != YFilter.not_set or
                                self.relay_profile_relay_info_option.yfilter != YFilter.not_set or
                                self.relay_profile_relay_info_optionvpn.yfilter != YFilter.not_set or
                                self.relay_profile_relay_info_optionvpn_mode.yfilter != YFilter.not_set or
                                self.relay_profile_relay_info_policy.yfilter != YFilter.not_set or
                                self.relay_profile_uid.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "profile" + "[profile-name='" + self.profile_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.profile_name.get_name_leafdata())
                            if (self.relay_profile_broadcast_flag_policy.is_set or self.relay_profile_broadcast_flag_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_broadcast_flag_policy.get_name_leafdata())
                            if (self.relay_profile_gi_addr_policy.is_set or self.relay_profile_gi_addr_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_gi_addr_policy.get_name_leafdata())
                            if (self.relay_profile_helper_count.is_set or self.relay_profile_helper_count.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_helper_count.get_name_leafdata())
                            if (self.relay_profile_name.is_set or self.relay_profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_name.get_name_leafdata())
                            if (self.relay_profile_relay_info_allow_untrusted.is_set or self.relay_profile_relay_info_allow_untrusted.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_relay_info_allow_untrusted.get_name_leafdata())
                            if (self.relay_profile_relay_info_check.is_set or self.relay_profile_relay_info_check.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_relay_info_check.get_name_leafdata())
                            if (self.relay_profile_relay_info_option.is_set or self.relay_profile_relay_info_option.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_relay_info_option.get_name_leafdata())
                            if (self.relay_profile_relay_info_optionvpn.is_set or self.relay_profile_relay_info_optionvpn.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_relay_info_optionvpn.get_name_leafdata())
                            if (self.relay_profile_relay_info_optionvpn_mode.is_set or self.relay_profile_relay_info_optionvpn_mode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_relay_info_optionvpn_mode.get_name_leafdata())
                            if (self.relay_profile_relay_info_policy.is_set or self.relay_profile_relay_info_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_relay_info_policy.get_name_leafdata())
                            if (self.relay_profile_uid.is_set or self.relay_profile_uid.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_profile_uid.get_name_leafdata())

                            leaf_name_data.extend(self.relay_profile_gi_addr.get_name_leafdata())

                            leaf_name_data.extend(self.relay_profile_helper_address.get_name_leafdata())

                            leaf_name_data.extend(self.relay_profile_helper_vrf.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "profile-name" or name == "relay-profile-broadcast-flag-policy" or name == "relay-profile-gi-addr" or name == "relay-profile-gi-addr-policy" or name == "relay-profile-helper-address" or name == "relay-profile-helper-count" or name == "relay-profile-helper-vrf" or name == "relay-profile-name" or name == "relay-profile-relay-info-allow-untrusted" or name == "relay-profile-relay-info-check" or name == "relay-profile-relay-info-option" or name == "relay-profile-relay-info-optionvpn" or name == "relay-profile-relay-info-optionvpn-mode" or name == "relay-profile-relay-info-policy" or name == "relay-profile-uid"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "profile-name"):
                                self.profile_name = value
                                self.profile_name.value_namespace = name_space
                                self.profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-broadcast-flag-policy"):
                                self.relay_profile_broadcast_flag_policy = value
                                self.relay_profile_broadcast_flag_policy.value_namespace = name_space
                                self.relay_profile_broadcast_flag_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-gi-addr"):
                                self.relay_profile_gi_addr.append(value)
                            if(value_path == "relay-profile-gi-addr-policy"):
                                self.relay_profile_gi_addr_policy = value
                                self.relay_profile_gi_addr_policy.value_namespace = name_space
                                self.relay_profile_gi_addr_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-helper-address"):
                                self.relay_profile_helper_address.append(value)
                            if(value_path == "relay-profile-helper-count"):
                                self.relay_profile_helper_count = value
                                self.relay_profile_helper_count.value_namespace = name_space
                                self.relay_profile_helper_count.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-helper-vrf"):
                                self.relay_profile_helper_vrf.append(value)
                            if(value_path == "relay-profile-name"):
                                self.relay_profile_name = value
                                self.relay_profile_name.value_namespace = name_space
                                self.relay_profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-relay-info-allow-untrusted"):
                                self.relay_profile_relay_info_allow_untrusted = value
                                self.relay_profile_relay_info_allow_untrusted.value_namespace = name_space
                                self.relay_profile_relay_info_allow_untrusted.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-relay-info-check"):
                                self.relay_profile_relay_info_check = value
                                self.relay_profile_relay_info_check.value_namespace = name_space
                                self.relay_profile_relay_info_check.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-relay-info-option"):
                                self.relay_profile_relay_info_option = value
                                self.relay_profile_relay_info_option.value_namespace = name_space
                                self.relay_profile_relay_info_option.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-relay-info-optionvpn"):
                                self.relay_profile_relay_info_optionvpn = value
                                self.relay_profile_relay_info_optionvpn.value_namespace = name_space
                                self.relay_profile_relay_info_optionvpn.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-relay-info-optionvpn-mode"):
                                self.relay_profile_relay_info_optionvpn_mode = value
                                self.relay_profile_relay_info_optionvpn_mode.value_namespace = name_space
                                self.relay_profile_relay_info_optionvpn_mode.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-relay-info-policy"):
                                self.relay_profile_relay_info_policy = value
                                self.relay_profile_relay_info_policy.value_namespace = name_space
                                self.relay_profile_relay_info_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "relay-profile-uid"):
                                self.relay_profile_uid = value
                                self.relay_profile_uid.value_namespace = name_space
                                self.relay_profile_uid.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.profile:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.profile:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "profiles" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "profile"):
                            for c in self.profile:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Relay.Profiles.Profile()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.profile.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "profile"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class StatisticsInfo(Entity):
                    """
                    DHCP relay statistics info
                    
                    .. attribute:: relay_stats_timestamp
                    
                    	Relay Stats timestamp
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Relay.StatisticsInfo, self).__init__()

                        self.yang_name = "statistics-info"
                        self.yang_parent_name = "relay"

                        self.relay_stats_timestamp = YLeaf(YType.uint32, "relay-stats-timestamp")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("relay_stats_timestamp") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.StatisticsInfo, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Relay.StatisticsInfo, self).__setattr__(name, value)

                    def has_data(self):
                        return self.relay_stats_timestamp.is_set

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.relay_stats_timestamp.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics-info" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.relay_stats_timestamp.is_set or self.relay_stats_timestamp.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.relay_stats_timestamp.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "relay-stats-timestamp"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "relay-stats-timestamp"):
                            self.relay_stats_timestamp = value
                            self.relay_stats_timestamp.value_namespace = name_space
                            self.relay_stats_timestamp.value_namespace_prefix = name_space_prefix


                class Statistics(Entity):
                    """
                    DHCP Relay VRF statistics
                    
                    .. attribute:: ipv4_dhcpd_relay_stat
                    
                    	ipv4 dhcpd relay stat
                    	**type**\: list of    :py:class:`Ipv4DhcpdRelayStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "relay"

                        self.ipv4_dhcpd_relay_stat = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics, self).__setattr__(name, value)


                    class Ipv4DhcpdRelayStat(Entity):
                        """
                        ipv4 dhcpd relay stat
                        
                        .. attribute:: relay_statistics_vrf_name
                        
                        	DHCP L3 VRF Name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        .. attribute:: statistics
                        
                        	Public relay statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat.Statistics>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat, self).__init__()

                            self.yang_name = "ipv4-dhcpd-relay-stat"
                            self.yang_parent_name = "statistics"

                            self.relay_statistics_vrf_name = YLeaf(YType.str, "relay-statistics-vrf-name")

                            self.statistics = Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("relay_statistics_vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            Public relay statistics
                            
                            .. attribute:: dropped_packets
                            
                            	Dropped packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: received_packets
                            
                            	Received packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: transmitted_packets
                            
                            	Transmitted packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "ipv4-dhcpd-relay-stat"

                                self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                self.received_packets = YLeaf(YType.uint64, "received-packets")

                                self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dropped_packets",
                                                "received_packets",
                                                "transmitted_packets") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat.Statistics, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat.Statistics, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dropped_packets.is_set or
                                    self.received_packets.is_set or
                                    self.transmitted_packets.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dropped_packets.yfilter != YFilter.not_set or
                                    self.received_packets.yfilter != YFilter.not_set or
                                    self.transmitted_packets.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.received_packets.get_name_leafdata())
                                if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dropped-packets"):
                                    self.dropped_packets = value
                                    self.dropped_packets.value_namespace = name_space
                                    self.dropped_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "received-packets"):
                                    self.received_packets = value
                                    self.received_packets.value_namespace = name_space
                                    self.received_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "transmitted-packets"):
                                    self.transmitted_packets = value
                                    self.transmitted_packets.value_namespace = name_space
                                    self.transmitted_packets.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.relay_statistics_vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.relay_statistics_vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv4-dhcpd-relay-stat" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.relay_statistics_vrf_name.is_set or self.relay_statistics_vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.relay_statistics_vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "relay-statistics-vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "relay-statistics-vrf-name"):
                                self.relay_statistics_vrf_name = value
                                self.relay_statistics_vrf_name.value_namespace = name_space
                                self.relay_statistics_vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv4_dhcpd_relay_stat:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv4_dhcpd_relay_stat:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv4-dhcpd-relay-stat"):
                            for c in self.ipv4_dhcpd_relay_stat:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Relay.Statistics.Ipv4DhcpdRelayStat()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv4_dhcpd_relay_stat.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv4-dhcpd-relay-stat"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Vrfs(Entity):
                    """
                    DHCP relay list of VRF names
                    
                    .. attribute:: vrf
                    
                    	IPv4 DHCP relay VRF name
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv4-dhcpd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "relay"

                        self.vrf = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs, self).__setattr__(name, value)


                    class Vrf(Entity):
                        """
                        IPv4 DHCP relay VRF name
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: vrf_statistics
                        
                        	IPv4 DHCP relay statistics
                        	**type**\:   :py:class:`VrfStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics>`
                        
                        

                        """

                        _prefix = 'ipv4-dhcpd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.vrf_statistics = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics()
                            self.vrf_statistics.parent = self
                            self._children_name_map["vrf_statistics"] = "vrf-statistics"
                            self._children_yang_names.add("vrf-statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf, self).__setattr__(name, value)


                        class VrfStatistics(Entity):
                            """
                            IPv4 DHCP relay statistics
                            
                            .. attribute:: ack
                            
                            	DHCP ack packets
                            	**type**\:   :py:class:`Ack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Ack>`
                            
                            .. attribute:: bootp_reply
                            
                            	DHCP BOOTP reply
                            	**type**\:   :py:class:`BootpReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpReply>`
                            
                            .. attribute:: bootp_request
                            
                            	DHCP BOOTP request
                            	**type**\:   :py:class:`BootpRequest <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpRequest>`
                            
                            .. attribute:: decline
                            
                            	DHCP decline packets
                            	**type**\:   :py:class:`Decline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Decline>`
                            
                            .. attribute:: discover
                            
                            	DHCP discover packets
                            	**type**\:   :py:class:`Discover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Discover>`
                            
                            .. attribute:: inform
                            
                            	DHCP inform packets
                            	**type**\:   :py:class:`Inform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Inform>`
                            
                            .. attribute:: lease_active
                            
                            	DHCP lease active
                            	**type**\:   :py:class:`LeaseActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseActive>`
                            
                            .. attribute:: lease_not_assigned
                            
                            	DHCP lease not assigned
                            	**type**\:   :py:class:`LeaseNotAssigned <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseNotAssigned>`
                            
                            .. attribute:: lease_query
                            
                            	DHCP lease query packets
                            	**type**\:   :py:class:`LeaseQuery <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseQuery>`
                            
                            .. attribute:: lease_unknown
                            
                            	DHCP lease unknown
                            	**type**\:   :py:class:`LeaseUnknown <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseUnknown>`
                            
                            .. attribute:: nak
                            
                            	DHCP nak packets
                            	**type**\:   :py:class:`Nak <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Nak>`
                            
                            .. attribute:: offer
                            
                            	DHCP offer packets
                            	**type**\:   :py:class:`Offer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Offer>`
                            
                            .. attribute:: release
                            
                            	DHCP release packets
                            	**type**\:   :py:class:`Release <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Release>`
                            
                            .. attribute:: request
                            
                            	DHCP request packets
                            	**type**\:   :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_dhcpd_oper.Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Request>`
                            
                            

                            """

                            _prefix = 'ipv4-dhcpd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics, self).__init__()

                                self.yang_name = "vrf-statistics"
                                self.yang_parent_name = "vrf"

                                self.ack = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Ack()
                                self.ack.parent = self
                                self._children_name_map["ack"] = "ack"
                                self._children_yang_names.add("ack")

                                self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpReply()
                                self.bootp_reply.parent = self
                                self._children_name_map["bootp_reply"] = "bootp-reply"
                                self._children_yang_names.add("bootp-reply")

                                self.bootp_request = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpRequest()
                                self.bootp_request.parent = self
                                self._children_name_map["bootp_request"] = "bootp-request"
                                self._children_yang_names.add("bootp-request")

                                self.decline = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Decline()
                                self.decline.parent = self
                                self._children_name_map["decline"] = "decline"
                                self._children_yang_names.add("decline")

                                self.discover = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Discover()
                                self.discover.parent = self
                                self._children_name_map["discover"] = "discover"
                                self._children_yang_names.add("discover")

                                self.inform = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Inform()
                                self.inform.parent = self
                                self._children_name_map["inform"] = "inform"
                                self._children_yang_names.add("inform")

                                self.lease_active = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseActive()
                                self.lease_active.parent = self
                                self._children_name_map["lease_active"] = "lease-active"
                                self._children_yang_names.add("lease-active")

                                self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseNotAssigned()
                                self.lease_not_assigned.parent = self
                                self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                self._children_yang_names.add("lease-not-assigned")

                                self.lease_query = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseQuery()
                                self.lease_query.parent = self
                                self._children_name_map["lease_query"] = "lease-query"
                                self._children_yang_names.add("lease-query")

                                self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseUnknown()
                                self.lease_unknown.parent = self
                                self._children_name_map["lease_unknown"] = "lease-unknown"
                                self._children_yang_names.add("lease-unknown")

                                self.nak = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Nak()
                                self.nak.parent = self
                                self._children_name_map["nak"] = "nak"
                                self._children_yang_names.add("nak")

                                self.offer = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Offer()
                                self.offer.parent = self
                                self._children_name_map["offer"] = "offer"
                                self._children_yang_names.add("offer")

                                self.release = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Release()
                                self.release.parent = self
                                self._children_name_map["release"] = "release"
                                self._children_yang_names.add("release")

                                self.request = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Request()
                                self.request.parent = self
                                self._children_name_map["request"] = "request"
                                self._children_yang_names.add("request")


                            class Discover(Entity):
                                """
                                DHCP discover packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Discover, self).__init__()

                                    self.yang_name = "discover"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Discover, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Discover, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "discover" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Offer(Entity):
                                """
                                DHCP offer packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Offer, self).__init__()

                                    self.yang_name = "offer"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Offer, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Offer, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "offer" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Request(Entity):
                                """
                                DHCP request packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Request, self).__init__()

                                    self.yang_name = "request"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Request, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Request, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Decline(Entity):
                                """
                                DHCP decline packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Decline, self).__init__()

                                    self.yang_name = "decline"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Decline, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Decline, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "decline" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Ack(Entity):
                                """
                                DHCP ack packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Ack, self).__init__()

                                    self.yang_name = "ack"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Ack, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Ack, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ack" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Nak(Entity):
                                """
                                DHCP nak packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Nak, self).__init__()

                                    self.yang_name = "nak"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Nak, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Nak, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "nak" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Release(Entity):
                                """
                                DHCP release packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Release, self).__init__()

                                    self.yang_name = "release"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Release, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Release, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "release" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Inform(Entity):
                                """
                                DHCP inform packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Inform, self).__init__()

                                    self.yang_name = "inform"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Inform, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Inform, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "inform" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQuery(Entity):
                                """
                                DHCP lease query packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseQuery, self).__init__()

                                    self.yang_name = "lease-query"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseQuery, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseQuery, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseNotAssigned(Entity):
                                """
                                DHCP lease not assigned
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseNotAssigned, self).__init__()

                                    self.yang_name = "lease-not-assigned"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseNotAssigned, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseNotAssigned, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-not-assigned" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseUnknown(Entity):
                                """
                                DHCP lease unknown
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseUnknown, self).__init__()

                                    self.yang_name = "lease-unknown"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseUnknown, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseUnknown, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-unknown" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseActive(Entity):
                                """
                                DHCP lease active
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseActive, self).__init__()

                                    self.yang_name = "lease-active"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseActive, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseActive, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-active" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpRequest(Entity):
                                """
                                DHCP BOOTP request
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpRequest, self).__init__()

                                    self.yang_name = "bootp-request"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpRequest, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpRequest, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class BootpReply(Entity):
                                """
                                DHCP BOOTP reply
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv4-dhcpd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpReply, self).__init__()

                                    self.yang_name = "bootp-reply"
                                    self.yang_parent_name = "vrf-statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bootp-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.ack is not None and self.ack.has_data()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_data()) or
                                    (self.bootp_request is not None and self.bootp_request.has_data()) or
                                    (self.decline is not None and self.decline.has_data()) or
                                    (self.discover is not None and self.discover.has_data()) or
                                    (self.inform is not None and self.inform.has_data()) or
                                    (self.lease_active is not None and self.lease_active.has_data()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_data()) or
                                    (self.lease_query is not None and self.lease_query.has_data()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_data()) or
                                    (self.nak is not None and self.nak.has_data()) or
                                    (self.offer is not None and self.offer.has_data()) or
                                    (self.release is not None and self.release.has_data()) or
                                    (self.request is not None and self.request.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.ack is not None and self.ack.has_operation()) or
                                    (self.bootp_reply is not None and self.bootp_reply.has_operation()) or
                                    (self.bootp_request is not None and self.bootp_request.has_operation()) or
                                    (self.decline is not None and self.decline.has_operation()) or
                                    (self.discover is not None and self.discover.has_operation()) or
                                    (self.inform is not None and self.inform.has_operation()) or
                                    (self.lease_active is not None and self.lease_active.has_operation()) or
                                    (self.lease_not_assigned is not None and self.lease_not_assigned.has_operation()) or
                                    (self.lease_query is not None and self.lease_query.has_operation()) or
                                    (self.lease_unknown is not None and self.lease_unknown.has_operation()) or
                                    (self.nak is not None and self.nak.has_operation()) or
                                    (self.offer is not None and self.offer.has_operation()) or
                                    (self.release is not None and self.release.has_operation()) or
                                    (self.request is not None and self.request.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "vrf-statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ack"):
                                    if (self.ack is None):
                                        self.ack = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Ack()
                                        self.ack.parent = self
                                        self._children_name_map["ack"] = "ack"
                                    return self.ack

                                if (child_yang_name == "bootp-reply"):
                                    if (self.bootp_reply is None):
                                        self.bootp_reply = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpReply()
                                        self.bootp_reply.parent = self
                                        self._children_name_map["bootp_reply"] = "bootp-reply"
                                    return self.bootp_reply

                                if (child_yang_name == "bootp-request"):
                                    if (self.bootp_request is None):
                                        self.bootp_request = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.BootpRequest()
                                        self.bootp_request.parent = self
                                        self._children_name_map["bootp_request"] = "bootp-request"
                                    return self.bootp_request

                                if (child_yang_name == "decline"):
                                    if (self.decline is None):
                                        self.decline = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Decline()
                                        self.decline.parent = self
                                        self._children_name_map["decline"] = "decline"
                                    return self.decline

                                if (child_yang_name == "discover"):
                                    if (self.discover is None):
                                        self.discover = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Discover()
                                        self.discover.parent = self
                                        self._children_name_map["discover"] = "discover"
                                    return self.discover

                                if (child_yang_name == "inform"):
                                    if (self.inform is None):
                                        self.inform = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Inform()
                                        self.inform.parent = self
                                        self._children_name_map["inform"] = "inform"
                                    return self.inform

                                if (child_yang_name == "lease-active"):
                                    if (self.lease_active is None):
                                        self.lease_active = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseActive()
                                        self.lease_active.parent = self
                                        self._children_name_map["lease_active"] = "lease-active"
                                    return self.lease_active

                                if (child_yang_name == "lease-not-assigned"):
                                    if (self.lease_not_assigned is None):
                                        self.lease_not_assigned = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseNotAssigned()
                                        self.lease_not_assigned.parent = self
                                        self._children_name_map["lease_not_assigned"] = "lease-not-assigned"
                                    return self.lease_not_assigned

                                if (child_yang_name == "lease-query"):
                                    if (self.lease_query is None):
                                        self.lease_query = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseQuery()
                                        self.lease_query.parent = self
                                        self._children_name_map["lease_query"] = "lease-query"
                                    return self.lease_query

                                if (child_yang_name == "lease-unknown"):
                                    if (self.lease_unknown is None):
                                        self.lease_unknown = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.LeaseUnknown()
                                        self.lease_unknown.parent = self
                                        self._children_name_map["lease_unknown"] = "lease-unknown"
                                    return self.lease_unknown

                                if (child_yang_name == "nak"):
                                    if (self.nak is None):
                                        self.nak = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Nak()
                                        self.nak.parent = self
                                        self._children_name_map["nak"] = "nak"
                                    return self.nak

                                if (child_yang_name == "offer"):
                                    if (self.offer is None):
                                        self.offer = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Offer()
                                        self.offer.parent = self
                                        self._children_name_map["offer"] = "offer"
                                    return self.offer

                                if (child_yang_name == "release"):
                                    if (self.release is None):
                                        self.release = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Release()
                                        self.release.parent = self
                                        self._children_name_map["release"] = "release"
                                    return self.release

                                if (child_yang_name == "request"):
                                    if (self.request is None):
                                        self.request = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics.Request()
                                        self.request.parent = self
                                        self._children_name_map["request"] = "request"
                                    return self.request

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ack" or name == "bootp-reply" or name == "bootp-request" or name == "decline" or name == "discover" or name == "inform" or name == "lease-active" or name == "lease-not-assigned" or name == "lease-query" or name == "lease-unknown" or name == "nak" or name == "offer" or name == "release" or name == "request"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.vrf_statistics is not None and self.vrf_statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.vrf_statistics is not None and self.vrf_statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "vrf-statistics"):
                                if (self.vrf_statistics is None):
                                    self.vrf_statistics = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf.VrfStatistics()
                                    self.vrf_statistics.parent = self
                                    self._children_name_map["vrf_statistics"] = "vrf-statistics"
                                return self.vrf_statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "vrf-statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrfs" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf"):
                            for c in self.vrf:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs.Vrf()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.profiles is not None and self.profiles.has_data()) or
                        (self.statistics is not None and self.statistics.has_data()) or
                        (self.statistics_info is not None and self.statistics_info.has_data()) or
                        (self.vrfs is not None and self.vrfs.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.profiles is not None and self.profiles.has_operation()) or
                        (self.statistics is not None and self.statistics.has_operation()) or
                        (self.statistics_info is not None and self.statistics_info.has_operation()) or
                        (self.vrfs is not None and self.vrfs.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "relay" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "profiles"):
                        if (self.profiles is None):
                            self.profiles = Ipv4Dhcpd.Nodes.Node.Relay.Profiles()
                            self.profiles.parent = self
                            self._children_name_map["profiles"] = "profiles"
                        return self.profiles

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Ipv4Dhcpd.Nodes.Node.Relay.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    if (child_yang_name == "statistics-info"):
                        if (self.statistics_info is None):
                            self.statistics_info = Ipv4Dhcpd.Nodes.Node.Relay.StatisticsInfo()
                            self.statistics_info.parent = self
                            self._children_name_map["statistics_info"] = "statistics-info"
                        return self.statistics_info

                    if (child_yang_name == "vrfs"):
                        if (self.vrfs is None):
                            self.vrfs = Ipv4Dhcpd.Nodes.Node.Relay.Vrfs()
                            self.vrfs.parent = self
                            self._children_name_map["vrfs"] = "vrfs"
                        return self.vrfs

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "profiles" or name == "statistics" or name == "statistics-info" or name == "vrfs"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.nodeid.is_set or
                    (self.base is not None and self.base.has_data()) or
                    (self.interfaces is not None and self.interfaces.has_data()) or
                    (self.proxy is not None and self.proxy.has_data()) or
                    (self.relay is not None and self.relay.has_data()) or
                    (self.server is not None and self.server.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.nodeid.yfilter != YFilter.not_set or
                    (self.base is not None and self.base.has_operation()) or
                    (self.interfaces is not None and self.interfaces.has_operation()) or
                    (self.proxy is not None and self.proxy.has_operation()) or
                    (self.relay is not None and self.relay.has_operation()) or
                    (self.server is not None and self.server.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[nodeid='" + self.nodeid.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.nodeid.is_set or self.nodeid.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.nodeid.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "base"):
                    if (self.base is None):
                        self.base = Ipv4Dhcpd.Nodes.Node.Base()
                        self.base.parent = self
                        self._children_name_map["base"] = "base"
                    return self.base

                if (child_yang_name == "interfaces"):
                    if (self.interfaces is None):
                        self.interfaces = Ipv4Dhcpd.Nodes.Node.Interfaces()
                        self.interfaces.parent = self
                        self._children_name_map["interfaces"] = "interfaces"
                    return self.interfaces

                if (child_yang_name == "proxy"):
                    if (self.proxy is None):
                        self.proxy = Ipv4Dhcpd.Nodes.Node.Proxy()
                        self.proxy.parent = self
                        self._children_name_map["proxy"] = "proxy"
                    return self.proxy

                if (child_yang_name == "relay"):
                    if (self.relay is None):
                        self.relay = Ipv4Dhcpd.Nodes.Node.Relay()
                        self.relay.parent = self
                        self._children_name_map["relay"] = "relay"
                    return self.relay

                if (child_yang_name == "server"):
                    if (self.server is None):
                        self.server = Ipv4Dhcpd.Nodes.Node.Server()
                        self.server.parent = self
                        self._children_name_map["server"] = "server"
                    return self.server

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "base" or name == "interfaces" or name == "proxy" or name == "relay" or name == "server" or name == "nodeid"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "nodeid"):
                    self.nodeid = value
                    self.nodeid.value_namespace = name_space
                    self.nodeid.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Ipv4Dhcpd.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (
            (self.nodes is not None and self.nodes.has_data()) or
            (self.snoop is not None and self.snoop.has_data()))

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.nodes is not None and self.nodes.has_operation()) or
            (self.snoop is not None and self.snoop.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-ipv4-dhcpd-oper:ipv4-dhcpd" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = Ipv4Dhcpd.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        if (child_yang_name == "snoop"):
            if (self.snoop is None):
                self.snoop = Ipv4Dhcpd.Snoop()
                self.snoop.parent = self
                self._children_name_map["snoop"] = "snoop"
            return self.snoop

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "nodes" or name == "snoop"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = Ipv4Dhcpd()
        return self._top_entity

