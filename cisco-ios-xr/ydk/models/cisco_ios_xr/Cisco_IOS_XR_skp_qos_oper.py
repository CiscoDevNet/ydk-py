""" Cisco_IOS_XR_skp_qos_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR skp\-qos package operational data.

This module contains definitions
for the following management objects\:
  platform\-qos\: QoS Skywarp platform operational data 
  platform\-qos\-ea\: platform qos ea

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class Action(Enum):
    """
    Action

    Action type

    .. data:: police_transmit = 0

    	Police action transmit

    .. data:: police_set_transmit = 1

    	Police action set transmit

    .. data:: police_drop = 2

    	Police action drop

    .. data:: police_unknown = 3

    	Police action unknown

    """

    police_transmit = Enum.YLeaf(0, "police-transmit")

    police_set_transmit = Enum.YLeaf(1, "police-set-transmit")

    police_drop = Enum.YLeaf(2, "police-drop")

    police_unknown = Enum.YLeaf(3, "police-unknown")


class ActionOpcode(Enum):
    """
    ActionOpcode

    Action opcode

    .. data:: precedence = 0

    	Precedence

    .. data:: dscp = 1

    	DSCP

    .. data:: discard_class = 2

    	Discard class

    .. data:: qos_group = 3

    	QoS group

    .. data:: cos_inner = 4

    	COS inner

    .. data:: cos = 5

    	COS

    .. data:: exp_top = 6

    	EXP top

    .. data:: exp_imp = 7

    	EXP IMP

    .. data:: tunnel_precedence = 8

    	Tunnel precedence

    .. data:: tunnel_dscp = 9

    	Tunnel DSCP

    .. data:: itag_dei = 10

    	ITAG DEI

    .. data:: itag_cos = 11

    	ITAG COS

    .. data:: cos_imposition = 12

    	COS imposition

    .. data:: dei_imposition = 13

    	DEI imposition

    .. data:: dei = 14

    	DEI

    .. data:: no_marking = 15

    	No marking

    """

    precedence = Enum.YLeaf(0, "precedence")

    dscp = Enum.YLeaf(1, "dscp")

    discard_class = Enum.YLeaf(2, "discard-class")

    qos_group = Enum.YLeaf(3, "qos-group")

    cos_inner = Enum.YLeaf(4, "cos-inner")

    cos = Enum.YLeaf(5, "cos")

    exp_top = Enum.YLeaf(6, "exp-top")

    exp_imp = Enum.YLeaf(7, "exp-imp")

    tunnel_precedence = Enum.YLeaf(8, "tunnel-precedence")

    tunnel_dscp = Enum.YLeaf(9, "tunnel-dscp")

    itag_dei = Enum.YLeaf(10, "itag-dei")

    itag_cos = Enum.YLeaf(11, "itag-cos")

    cos_imposition = Enum.YLeaf(12, "cos-imposition")

    dei_imposition = Enum.YLeaf(13, "dei-imposition")

    dei = Enum.YLeaf(14, "dei")

    no_marking = Enum.YLeaf(15, "no-marking")


class CacState(Enum):
    """
    CacState

    CAC/UBRL class states

    .. data:: unknown = 0

    	unknown

    .. data:: admit = 1

    	admit

    .. data:: redirect = 2

    	redirect

    .. data:: ubrl = 3

    	ubrl

    """

    unknown = Enum.YLeaf(0, "unknown")

    admit = Enum.YLeaf(1, "admit")

    redirect = Enum.YLeaf(2, "redirect")

    ubrl = Enum.YLeaf(3, "ubrl")


class PolicyParamUnit(Enum):
    """
    PolicyParamUnit

    Policy param unit

    .. data:: policy_param_unit_invalid = 0

    	policy param unit invalid

    .. data:: policy_param_unit_bytes = 1

    	policy param unit bytes

    .. data:: policy_param_unit_kbytes = 2

    	policy param unit kbytes

    .. data:: policy_param_unit_mbytes = 3

    	policy param unit mbytes

    .. data:: policy_param_unit_gbytes = 4

    	policy param unit gbytes

    .. data:: policy_param_unit_bitsps = 5

    	policy param unit bitsps

    .. data:: policy_param_unit_kbitsps = 6

    	policy param unit kbitsps

    .. data:: policy_param_unit_mbitsps = 7

    	policy param unit mbitsps

    .. data:: policy_param_unit_gbitsps = 8

    	policy param unit gbitsps

    .. data:: policy_param_unit_cells_ps = 9

    	policy param unit cells ps

    .. data:: policy_param_unit_packets_ps = 10

    	policy param unit packets ps

    .. data:: policy_param_unit_us = 11

    	policy param unit us

    .. data:: policy_param_unit_ms = 12

    	policy param unit ms

    .. data:: policy_param_unit_seconds = 13

    	policy param unit seconds

    .. data:: policy_param_unit_packets = 14

    	policy param unit packets

    .. data:: policy_param_unit_cells = 15

    	policy param unit cells

    .. data:: policy_param_unit_percent = 16

    	policy param unit percent

    .. data:: policy_param_unit_per_thousand = 17

    	policy param unit per thousand

    .. data:: policy_param_unit_per_million = 18

    	policy param unit per million

    .. data:: policy_param_unit_hz = 19

    	policy param unit hz

    .. data:: policy_param_unit_khz = 20

    	policy param unit khz

    .. data:: policy_param_unit_mhz = 21

    	policy param unit mhz

    .. data:: policy_param_unit_ratio = 22

    	policy param unit ratio

    .. data:: policy_param_unit_max = 23

    	policy param unit max

    """

    policy_param_unit_invalid = Enum.YLeaf(0, "policy-param-unit-invalid")

    policy_param_unit_bytes = Enum.YLeaf(1, "policy-param-unit-bytes")

    policy_param_unit_kbytes = Enum.YLeaf(2, "policy-param-unit-kbytes")

    policy_param_unit_mbytes = Enum.YLeaf(3, "policy-param-unit-mbytes")

    policy_param_unit_gbytes = Enum.YLeaf(4, "policy-param-unit-gbytes")

    policy_param_unit_bitsps = Enum.YLeaf(5, "policy-param-unit-bitsps")

    policy_param_unit_kbitsps = Enum.YLeaf(6, "policy-param-unit-kbitsps")

    policy_param_unit_mbitsps = Enum.YLeaf(7, "policy-param-unit-mbitsps")

    policy_param_unit_gbitsps = Enum.YLeaf(8, "policy-param-unit-gbitsps")

    policy_param_unit_cells_ps = Enum.YLeaf(9, "policy-param-unit-cells-ps")

    policy_param_unit_packets_ps = Enum.YLeaf(10, "policy-param-unit-packets-ps")

    policy_param_unit_us = Enum.YLeaf(11, "policy-param-unit-us")

    policy_param_unit_ms = Enum.YLeaf(12, "policy-param-unit-ms")

    policy_param_unit_seconds = Enum.YLeaf(13, "policy-param-unit-seconds")

    policy_param_unit_packets = Enum.YLeaf(14, "policy-param-unit-packets")

    policy_param_unit_cells = Enum.YLeaf(15, "policy-param-unit-cells")

    policy_param_unit_percent = Enum.YLeaf(16, "policy-param-unit-percent")

    policy_param_unit_per_thousand = Enum.YLeaf(17, "policy-param-unit-per-thousand")

    policy_param_unit_per_million = Enum.YLeaf(18, "policy-param-unit-per-million")

    policy_param_unit_hz = Enum.YLeaf(19, "policy-param-unit-hz")

    policy_param_unit_khz = Enum.YLeaf(20, "policy-param-unit-khz")

    policy_param_unit_mhz = Enum.YLeaf(21, "policy-param-unit-mhz")

    policy_param_unit_ratio = Enum.YLeaf(22, "policy-param-unit-ratio")

    policy_param_unit_max = Enum.YLeaf(23, "policy-param-unit-max")


class PolicyState(Enum):
    """
    PolicyState

    Different Interface states

    .. data:: active = 0

    	active

    .. data:: suspended = 1

    	suspended

    """

    active = Enum.YLeaf(0, "active")

    suspended = Enum.YLeaf(1, "suspended")


class QosUnit(Enum):
    """
    QosUnit

    QoS parameter unit

    .. data:: invalid = 0

    	Invalid type

    .. data:: bytes = 1

    	Bytes

    .. data:: kilobytes = 2

    	Kilobytes

    .. data:: megabytes = 3

    	Megabytes

    .. data:: gigabytes = 4

    	Gigabytes

    .. data:: bps = 5

    	Bits per second

    .. data:: kbps = 6

    	Kilo bits per second

    .. data:: mbps = 7

    	Mega bits per second

    .. data:: gbps = 8

    	Giga bits per second

    .. data:: cells_per_second = 9

    	Cells per second

    .. data:: packets_per_second = 10

    	Packets per second

    .. data:: microsecond = 11

    	Microsecond

    .. data:: millisecond = 12

    	Millisecond

    .. data:: packets = 13

    	Number of packets

    .. data:: cells = 14

    	Number of cells

    .. data:: percentage = 15

    	Percentage

    .. data:: ratio = 16

    	Ratio

    """

    invalid = Enum.YLeaf(0, "invalid")

    bytes = Enum.YLeaf(1, "bytes")

    kilobytes = Enum.YLeaf(2, "kilobytes")

    megabytes = Enum.YLeaf(3, "megabytes")

    gigabytes = Enum.YLeaf(4, "gigabytes")

    bps = Enum.YLeaf(5, "bps")

    kbps = Enum.YLeaf(6, "kbps")

    mbps = Enum.YLeaf(7, "mbps")

    gbps = Enum.YLeaf(8, "gbps")

    cells_per_second = Enum.YLeaf(9, "cells-per-second")

    packets_per_second = Enum.YLeaf(10, "packets-per-second")

    microsecond = Enum.YLeaf(11, "microsecond")

    millisecond = Enum.YLeaf(12, "millisecond")

    packets = Enum.YLeaf(13, "packets")

    cells = Enum.YLeaf(14, "cells")

    percentage = Enum.YLeaf(15, "percentage")

    ratio = Enum.YLeaf(16, "ratio")


class TbAlgorithm(Enum):
    """
    TbAlgorithm

    Tokenbucket type

    .. data:: inactive = 0

    	Inactive, configured but disabled

    .. data:: single = 1

    	Single token bucket

    .. data:: single_rate_tcm = 2

    	Single rate three color marker

    .. data:: two_rate_tcm = 3

    	Two rate three color marker

    .. data:: mef_tcm = 4

    	Allows coupling between CIR and PIR tb's

    .. data:: dummy = 5

    	Internal dummy token bucket for coupled-policer

    	child

    """

    inactive = Enum.YLeaf(0, "inactive")

    single = Enum.YLeaf(1, "single")

    single_rate_tcm = Enum.YLeaf(2, "single-rate-tcm")

    two_rate_tcm = Enum.YLeaf(3, "two-rate-tcm")

    mef_tcm = Enum.YLeaf(4, "mef-tcm")

    dummy = Enum.YLeaf(5, "dummy")


class Wred(Enum):
    """
    Wred

    Wred

    .. data:: wred_cos_cmd = 0

    	wred cos cmd

    .. data:: wred_dscp_cmd = 1

    	wred dscp cmd

    .. data:: wred_precedence_cmd = 2

    	wred precedence cmd

    .. data:: wred_discard_class_cmd = 3

    	wred discard class cmd

    .. data:: wred_mpls_exp_cmd = 4

    	wred mpls exp cmd

    .. data:: red_with_user_min_max = 5

    	red with user min max

    .. data:: red_with_default_min_max = 6

    	red with default min max

    .. data:: wred_dei_cmd = 7

    	wred dei cmd

    .. data:: wred_ecn_cmd = 8

    	wred ecn cmd

    .. data:: wred_invalid_cmd = 9

    	wred invalid cmd

    """

    wred_cos_cmd = Enum.YLeaf(0, "wred-cos-cmd")

    wred_dscp_cmd = Enum.YLeaf(1, "wred-dscp-cmd")

    wred_precedence_cmd = Enum.YLeaf(2, "wred-precedence-cmd")

    wred_discard_class_cmd = Enum.YLeaf(3, "wred-discard-class-cmd")

    wred_mpls_exp_cmd = Enum.YLeaf(4, "wred-mpls-exp-cmd")

    red_with_user_min_max = Enum.YLeaf(5, "red-with-user-min-max")

    red_with_default_min_max = Enum.YLeaf(6, "red-with-default-min-max")

    wred_dei_cmd = Enum.YLeaf(7, "wred-dei-cmd")

    wred_ecn_cmd = Enum.YLeaf(8, "wred-ecn-cmd")

    wred_invalid_cmd = Enum.YLeaf(9, "wred-invalid-cmd")



class PlatformQos(Entity):
    """
    QoS Skywarp platform operational data 
    
    .. attribute:: nodes
    
    	List of nodes with platform specific QoS configuration
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes>`
    
    

    """

    _prefix = 'skp-qos-oper'
    _revision = '2016-02-18'

    def __init__(self):
        super(PlatformQos, self).__init__()
        self._top_entity = None

        self.yang_name = "platform-qos"
        self.yang_parent_name = "Cisco-IOS-XR-skp-qos-oper"

        self.nodes = PlatformQos.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")


    class Nodes(Entity):
        """
        List of nodes with platform specific QoS
        configuration
        
        .. attribute:: node
        
        	Node with platform specific QoS configuration
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node>`
        
        

        """

        _prefix = 'skp-qos-oper'
        _revision = '2016-02-18'

        def __init__(self):
            super(PlatformQos.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "platform-qos"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(PlatformQos.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(PlatformQos.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            Node with platform specific QoS configuration
            
            .. attribute:: node_name  <key>
            
            	Node name
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: bundle_interfaces
            
            	QoS list of bundle interfaces
            	**type**\:   :py:class:`BundleInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces>`
            
            .. attribute:: capability
            
            	QoS system capability
            	**type**\:   :py:class:`Capability <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Capability>`
            
            .. attribute:: interfaces
            
            	QoS list of interfaces
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces>`
            
            

            """

            _prefix = 'skp-qos-oper'
            _revision = '2016-02-18'

            def __init__(self):
                super(PlatformQos.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.node_name = YLeaf(YType.str, "node-name")

                self.bundle_interfaces = PlatformQos.Nodes.Node.BundleInterfaces()
                self.bundle_interfaces.parent = self
                self._children_name_map["bundle_interfaces"] = "bundle-interfaces"
                self._children_yang_names.add("bundle-interfaces")

                self.capability = PlatformQos.Nodes.Node.Capability()
                self.capability.parent = self
                self._children_name_map["capability"] = "capability"
                self._children_yang_names.add("capability")

                self.interfaces = PlatformQos.Nodes.Node.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(PlatformQos.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(PlatformQos.Nodes.Node, self).__setattr__(name, value)


            class BundleInterfaces(Entity):
                """
                QoS list of bundle interfaces
                
                .. attribute:: bundle_interface
                
                	QoS interface name
                	**type**\: list of    :py:class:`BundleInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface>`
                
                

                """

                _prefix = 'skp-qos-oper'
                _revision = '2016-02-18'

                def __init__(self):
                    super(PlatformQos.Nodes.Node.BundleInterfaces, self).__init__()

                    self.yang_name = "bundle-interfaces"
                    self.yang_parent_name = "node"

                    self.bundle_interface = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PlatformQos.Nodes.Node.BundleInterfaces, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PlatformQos.Nodes.Node.BundleInterfaces, self).__setattr__(name, value)


                class BundleInterface(Entity):
                    """
                    QoS interface name
                    
                    .. attribute:: interface_name  <key>
                    
                    	Bundle interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: member_interfaces
                    
                    	QoS list of member interfaces
                    	**type**\:   :py:class:`MemberInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces>`
                    
                    

                    """

                    _prefix = 'skp-qos-oper'
                    _revision = '2016-02-18'

                    def __init__(self):
                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface, self).__init__()

                        self.yang_name = "bundle-interface"
                        self.yang_parent_name = "bundle-interfaces"

                        self.interface_name = YLeaf(YType.str, "interface-name")

                        self.member_interfaces = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces()
                        self.member_interfaces.parent = self
                        self._children_name_map["member_interfaces"] = "member-interfaces"
                        self._children_yang_names.add("member-interfaces")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("interface_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface, self).__setattr__(name, value)


                    class MemberInterfaces(Entity):
                        """
                        QoS list of member interfaces
                        
                        .. attribute:: member_interface
                        
                        	QoS interface name
                        	**type**\: list of    :py:class:`MemberInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface>`
                        
                        

                        """

                        _prefix = 'skp-qos-oper'
                        _revision = '2016-02-18'

                        def __init__(self):
                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces, self).__init__()

                            self.yang_name = "member-interfaces"
                            self.yang_parent_name = "bundle-interface"

                            self.member_interface = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces, self).__setattr__(name, value)


                        class MemberInterface(Entity):
                            """
                            QoS interface name
                            
                            .. attribute:: interface_name  <key>
                            
                            	Memeber interface
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: bundle_input
                            
                            	QoS policy direction input
                            	**type**\:   :py:class:`BundleInput <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput>`
                            
                            .. attribute:: bundle_output
                            
                            	QoS policy direction output
                            	**type**\:   :py:class:`BundleOutput <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface, self).__init__()

                                self.yang_name = "member-interface"
                                self.yang_parent_name = "member-interfaces"

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.bundle_input = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput()
                                self.bundle_input.parent = self
                                self._children_name_map["bundle_input"] = "bundle-input"
                                self._children_yang_names.add("bundle-input")

                                self.bundle_output = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput()
                                self.bundle_output.parent = self
                                self._children_name_map["bundle_output"] = "bundle-output"
                                self._children_yang_names.add("bundle-output")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("interface_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface, self).__setattr__(name, value)


                            class BundleInput(Entity):
                                """
                                QoS policy direction input
                                
                                .. attribute:: header
                                
                                	QoS EA policy header
                                	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Header>`
                                
                                .. attribute:: interface_parameters
                                
                                	QoS Interface Parameters
                                	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters>`
                                
                                .. attribute:: skywarp_qos_policy_class
                                
                                	Skywarp QoS policy class details
                                	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput, self).__init__()

                                    self.yang_name = "bundle-input"
                                    self.yang_parent_name = "member-interface"

                                    self.header = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Header()
                                    self.header.parent = self
                                    self._children_name_map["header"] = "header"
                                    self._children_yang_names.add("header")

                                    self.interface_parameters = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters()
                                    self.interface_parameters.parent = self
                                    self._children_name_map["interface_parameters"] = "interface-parameters"
                                    self._children_yang_names.add("interface-parameters")

                                    self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass()
                                    self.skywarp_qos_policy_class.parent = self
                                    self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                    self._children_yang_names.add("skywarp-qos-policy-class")


                                class Header(Entity):
                                    """
                                    QoS EA policy header
                                    
                                    .. attribute:: classes
                                    
                                    	Number of classes
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: direction
                                    
                                    	Direction
                                    	**type**\:  str
                                    
                                    	**length:** 0..11
                                    
                                    .. attribute:: interface_name
                                    
                                    	Interface Name
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    .. attribute:: policy_name
                                    
                                    	Policy name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Header, self).__init__()

                                        self.yang_name = "header"
                                        self.yang_parent_name = "bundle-input"

                                        self.classes = YLeaf(YType.uint16, "classes")

                                        self.direction = YLeaf(YType.str, "direction")

                                        self.interface_name = YLeaf(YType.str, "interface-name")

                                        self.policy_name = YLeaf(YType.str, "policy-name")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("classes",
                                                        "direction",
                                                        "interface_name",
                                                        "policy_name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Header, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Header, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.classes.is_set or
                                            self.direction.is_set or
                                            self.interface_name.is_set or
                                            self.policy_name.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.classes.yfilter != YFilter.not_set or
                                            self.direction.yfilter != YFilter.not_set or
                                            self.interface_name.yfilter != YFilter.not_set or
                                            self.policy_name.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "header" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.classes.get_name_leafdata())
                                        if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.direction.get_name_leafdata())
                                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.interface_name.get_name_leafdata())
                                        if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policy_name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "classes"):
                                            self.classes = value
                                            self.classes.value_namespace = name_space
                                            self.classes.value_namespace_prefix = name_space_prefix
                                        if(value_path == "direction"):
                                            self.direction = value
                                            self.direction.value_namespace = name_space
                                            self.direction.value_namespace_prefix = name_space_prefix
                                        if(value_path == "interface-name"):
                                            self.interface_name = value
                                            self.interface_name.value_namespace = name_space
                                            self.interface_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "policy-name"):
                                            self.policy_name = value
                                            self.policy_name.value_namespace = name_space
                                            self.policy_name.value_namespace_prefix = name_space_prefix


                                class InterfaceParameters(Entity):
                                    """
                                    QoS Interface Parameters
                                    
                                    .. attribute:: interface_config_rate
                                    
                                    	Interface Configured Rate
                                    	**type**\:   :py:class:`InterfaceConfigRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceConfigRate>`
                                    
                                    .. attribute:: interface_program_rate
                                    
                                    	Interface Programmed Rate
                                    	**type**\:   :py:class:`InterfaceProgramRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceProgramRate>`
                                    
                                    .. attribute:: port_shaper_rate
                                    
                                    	Port Shaper Rate
                                    	**type**\:   :py:class:`PortShaperRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.PortShaperRate>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters, self).__init__()

                                        self.yang_name = "interface-parameters"
                                        self.yang_parent_name = "bundle-input"

                                        self.interface_config_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceConfigRate()
                                        self.interface_config_rate.parent = self
                                        self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                        self._children_yang_names.add("interface-config-rate")

                                        self.interface_program_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceProgramRate()
                                        self.interface_program_rate.parent = self
                                        self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                        self._children_yang_names.add("interface-program-rate")

                                        self.port_shaper_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.PortShaperRate()
                                        self.port_shaper_rate.parent = self
                                        self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                        self._children_yang_names.add("port-shaper-rate")


                                    class InterfaceConfigRate(Entity):
                                        """
                                        Interface Configured Rate
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceConfigRate, self).__init__()

                                            self.yang_name = "interface-config-rate"
                                            self.yang_parent_name = "interface-parameters"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "interface-config-rate" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class InterfaceProgramRate(Entity):
                                        """
                                        Interface Programmed Rate
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceProgramRate, self).__init__()

                                            self.yang_name = "interface-program-rate"
                                            self.yang_parent_name = "interface-parameters"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "interface-program-rate" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class PortShaperRate(Entity):
                                        """
                                        Port Shaper Rate
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.PortShaperRate, self).__init__()

                                            self.yang_name = "port-shaper-rate"
                                            self.yang_parent_name = "interface-parameters"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "port-shaper-rate" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.interface_config_rate is not None and self.interface_config_rate.has_data()) or
                                            (self.interface_program_rate is not None and self.interface_program_rate.has_data()) or
                                            (self.port_shaper_rate is not None and self.port_shaper_rate.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.interface_config_rate is not None and self.interface_config_rate.has_operation()) or
                                            (self.interface_program_rate is not None and self.interface_program_rate.has_operation()) or
                                            (self.port_shaper_rate is not None and self.port_shaper_rate.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "interface-parameters" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "interface-config-rate"):
                                            if (self.interface_config_rate is None):
                                                self.interface_config_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceConfigRate()
                                                self.interface_config_rate.parent = self
                                                self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                            return self.interface_config_rate

                                        if (child_yang_name == "interface-program-rate"):
                                            if (self.interface_program_rate is None):
                                                self.interface_program_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.InterfaceProgramRate()
                                                self.interface_program_rate.parent = self
                                                self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                            return self.interface_program_rate

                                        if (child_yang_name == "port-shaper-rate"):
                                            if (self.port_shaper_rate is None):
                                                self.port_shaper_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters.PortShaperRate()
                                                self.port_shaper_rate.parent = self
                                                self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                            return self.port_shaper_rate

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "interface-config-rate" or name == "interface-program-rate" or name == "port-shaper-rate"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass


                                class SkywarpQosPolicyClass(Entity):
                                    """
                                    Skywarp QoS policy class details
                                    
                                    .. attribute:: qos_show_pclass_st
                                    
                                    	qos show pclass st
                                    	**type**\: list of    :py:class:`QosShowPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass, self).__init__()

                                        self.yang_name = "skywarp-qos-policy-class"
                                        self.yang_parent_name = "bundle-input"

                                        self.qos_show_pclass_st = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in () and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass, self).__setattr__(name, value)


                                    class QosShowPclassSt(Entity):
                                        """
                                        qos show pclass st
                                        
                                        .. attribute:: class_level
                                        
                                        	Class level
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: class_name
                                        
                                        	Class name
                                        	**type**\:  str
                                        
                                        	**length:** 0..65
                                        
                                        .. attribute:: marking
                                        
                                        	QoS Mark parameters
                                        	**type**\:   :py:class:`Marking <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking>`
                                        
                                        .. attribute:: police
                                        
                                        	QoS Policer parameters
                                        	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police>`
                                        
                                        .. attribute:: queue
                                        
                                        	QoS Queue parameters
                                        	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Queue>`
                                        
                                        .. attribute:: shape
                                        
                                        	QoS EA Shaper parameters
                                        	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape>`
                                        
                                        .. attribute:: wfq
                                        
                                        	QoS WFQ parameters
                                        	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt, self).__init__()

                                            self.yang_name = "qos-show-pclass-st"
                                            self.yang_parent_name = "skywarp-qos-policy-class"

                                            self.class_level = YLeaf(YType.uint8, "class-level")

                                            self.class_name = YLeaf(YType.str, "class-name")

                                            self.marking = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                            self.marking.parent = self
                                            self._children_name_map["marking"] = "marking"
                                            self._children_yang_names.add("marking")

                                            self.police = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                            self._children_yang_names.add("police")

                                            self.queue = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                            self.queue.parent = self
                                            self._children_name_map["queue"] = "queue"
                                            self._children_yang_names.add("queue")

                                            self.shape = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                            self.shape.parent = self
                                            self._children_name_map["shape"] = "shape"
                                            self._children_yang_names.add("shape")

                                            self.wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                            self.wfq.parent = self
                                            self._children_name_map["wfq"] = "wfq"
                                            self._children_yang_names.add("wfq")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("class_level",
                                                            "class_name") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)


                                        class Queue(Entity):
                                            """
                                            QoS Queue parameters
                                            
                                            .. attribute:: queue_id
                                            
                                            	Queue ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: queue_type
                                            
                                            	Queue Type
                                            	**type**\:  str
                                            
                                            	**length:** 0..101
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__init__()

                                                self.yang_name = "queue"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.queue_id = YLeaf(YType.uint32, "queue-id")

                                                self.queue_type = YLeaf(YType.str, "queue-type")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("queue_id",
                                                                "queue_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.queue_id.is_set or
                                                    self.queue_type.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.queue_id.yfilter != YFilter.not_set or
                                                    self.queue_type.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "queue" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.queue_id.get_name_leafdata())
                                                if (self.queue_type.is_set or self.queue_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.queue_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "queue-id" or name == "queue-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "queue-id"):
                                                    self.queue_id = value
                                                    self.queue_id.value_namespace = name_space
                                                    self.queue_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "queue-type"):
                                                    self.queue_type = value
                                                    self.queue_type.value_namespace = name_space
                                                    self.queue_type.value_namespace_prefix = name_space_prefix


                                        class Shape(Entity):
                                            """
                                            QoS EA Shaper parameters
                                            
                                            .. attribute:: pbs
                                            
                                            	PBS in bytes
                                            	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs>`
                                            
                                            .. attribute:: pir
                                            
                                            	PIR in kbps
                                            	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape, self).__init__()

                                                self.yang_name = "shape"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.pbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                                self.pbs.parent = self
                                                self._children_name_map["pbs"] = "pbs"
                                                self._children_yang_names.add("pbs")

                                                self.pir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                                self.pir.parent = self
                                                self._children_name_map["pir"] = "pir"
                                                self._children_yang_names.add("pir")


                                            class Pir(Entity):
                                                """
                                                PIR in kbps
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__init__()

                                                    self.yang_name = "pir"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Pbs(Entity):
                                                """
                                                PBS in bytes
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__init__()

                                                    self.yang_name = "pbs"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.pbs is not None and self.pbs.has_data()) or
                                                    (self.pir is not None and self.pir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.pbs is not None and self.pbs.has_operation()) or
                                                    (self.pir is not None and self.pir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "shape" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "pbs"):
                                                    if (self.pbs is None):
                                                        self.pbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                                        self.pbs.parent = self
                                                        self._children_name_map["pbs"] = "pbs"
                                                    return self.pbs

                                                if (child_yang_name == "pir"):
                                                    if (self.pir is None):
                                                        self.pir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                                        self.pir.parent = self
                                                        self._children_name_map["pir"] = "pir"
                                                    return self.pir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "pbs" or name == "pir"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class Wfq(Entity):
                                            """
                                            QoS WFQ parameters
                                            
                                            .. attribute:: committed_weight
                                            
                                            	Committed Weight
                                            	**type**\:   :py:class:`CommittedWeight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight>`
                                            
                                            .. attribute:: excess_weight
                                            
                                            	Excess Weight
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: programmed_wfq
                                            
                                            	QoS Programmed WFQ parameters
                                            	**type**\:   :py:class:`ProgrammedWfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__init__()

                                                self.yang_name = "wfq"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.excess_weight = YLeaf(YType.uint16, "excess-weight")

                                                self.committed_weight = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                                self.committed_weight.parent = self
                                                self._children_name_map["committed_weight"] = "committed-weight"
                                                self._children_yang_names.add("committed-weight")

                                                self.programmed_wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                                self.programmed_wfq.parent = self
                                                self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                                self._children_yang_names.add("programmed-wfq")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("excess_weight") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)


                                            class CommittedWeight(Entity):
                                                """
                                                Committed Weight
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__init__()

                                                    self.yang_name = "committed-weight"
                                                    self.yang_parent_name = "wfq"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "committed-weight" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class ProgrammedWfq(Entity):
                                                """
                                                QoS Programmed WFQ parameters
                                                
                                                .. attribute:: bandwidth
                                                
                                                	Bandwidth
                                                	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth>`
                                                
                                                .. attribute:: excess_ratio
                                                
                                                	Excess Ratio
                                                	**type**\:  int
                                                
                                                	**range:** 0..65535
                                                
                                                .. attribute:: sum_of_bandwidth
                                                
                                                	Sum of Bandwidth
                                                	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__init__()

                                                    self.yang_name = "programmed-wfq"
                                                    self.yang_parent_name = "wfq"

                                                    self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                                    self.bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                                    self.bandwidth.parent = self
                                                    self._children_name_map["bandwidth"] = "bandwidth"
                                                    self._children_yang_names.add("bandwidth")

                                                    self.sum_of_bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                                    self.sum_of_bandwidth.parent = self
                                                    self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                    self._children_yang_names.add("sum-of-bandwidth")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("excess_ratio") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)


                                                class Bandwidth(Entity):
                                                    """
                                                    Bandwidth
                                                    
                                                    .. attribute:: unit
                                                    
                                                    	Config unit
                                                    	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                    
                                                    .. attribute:: value
                                                    
                                                    	Config value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__init__()

                                                        self.yang_name = "bandwidth"
                                                        self.yang_parent_name = "programmed-wfq"

                                                        self.unit = YLeaf(YType.enumeration, "unit")

                                                        self.value = YLeaf(YType.uint32, "value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("unit",
                                                                        "value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.unit.is_set or
                                                            self.value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.unit.yfilter != YFilter.not_set or
                                                            self.value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "bandwidth" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.unit.get_name_leafdata())
                                                        if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "unit" or name == "value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "unit"):
                                                            self.unit = value
                                                            self.unit.value_namespace = name_space
                                                            self.unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "value"):
                                                            self.value = value
                                                            self.value.value_namespace = name_space
                                                            self.value.value_namespace_prefix = name_space_prefix


                                                class SumOfBandwidth(Entity):
                                                    """
                                                    Sum of Bandwidth
                                                    
                                                    .. attribute:: unit
                                                    
                                                    	Config unit
                                                    	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                    
                                                    .. attribute:: value
                                                    
                                                    	Config value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__init__()

                                                        self.yang_name = "sum-of-bandwidth"
                                                        self.yang_parent_name = "programmed-wfq"

                                                        self.unit = YLeaf(YType.enumeration, "unit")

                                                        self.value = YLeaf(YType.uint32, "value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("unit",
                                                                        "value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.unit.is_set or
                                                            self.value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.unit.yfilter != YFilter.not_set or
                                                            self.value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "sum-of-bandwidth" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.unit.get_name_leafdata())
                                                        if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "unit" or name == "value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "unit"):
                                                            self.unit = value
                                                            self.unit.value_namespace = name_space
                                                            self.unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "value"):
                                                            self.value = value
                                                            self.value.value_namespace = name_space
                                                            self.value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.excess_ratio.is_set or
                                                        (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                        (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.excess_ratio.yfilter != YFilter.not_set or
                                                        (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                        (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "programmed-wfq" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "bandwidth"):
                                                        if (self.bandwidth is None):
                                                            self.bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                                            self.bandwidth.parent = self
                                                            self._children_name_map["bandwidth"] = "bandwidth"
                                                        return self.bandwidth

                                                    if (child_yang_name == "sum-of-bandwidth"):
                                                        if (self.sum_of_bandwidth is None):
                                                            self.sum_of_bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                                            self.sum_of_bandwidth.parent = self
                                                            self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                        return self.sum_of_bandwidth

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "excess-ratio"):
                                                        self.excess_ratio = value
                                                        self.excess_ratio.value_namespace = name_space
                                                        self.excess_ratio.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.excess_weight.is_set or
                                                    (self.committed_weight is not None and self.committed_weight.has_data()) or
                                                    (self.programmed_wfq is not None and self.programmed_wfq.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.excess_weight.yfilter != YFilter.not_set or
                                                    (self.committed_weight is not None and self.committed_weight.has_operation()) or
                                                    (self.programmed_wfq is not None and self.programmed_wfq.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "wfq" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.excess_weight.is_set or self.excess_weight.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.excess_weight.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "committed-weight"):
                                                    if (self.committed_weight is None):
                                                        self.committed_weight = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                                        self.committed_weight.parent = self
                                                        self._children_name_map["committed_weight"] = "committed-weight"
                                                    return self.committed_weight

                                                if (child_yang_name == "programmed-wfq"):
                                                    if (self.programmed_wfq is None):
                                                        self.programmed_wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                                        self.programmed_wfq.parent = self
                                                        self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                                    return self.programmed_wfq

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "committed-weight" or name == "programmed-wfq" or name == "excess-weight"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "excess-weight"):
                                                    self.excess_weight = value
                                                    self.excess_weight.value_namespace = name_space
                                                    self.excess_weight.value_namespace_prefix = name_space_prefix


                                        class Police(Entity):
                                            """
                                            QoS Policer parameters
                                            
                                            .. attribute:: cbs
                                            
                                            	CBS
                                            	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs>`
                                            
                                            .. attribute:: cir
                                            
                                            	CIR
                                            	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir>`
                                            
                                            .. attribute:: policer_id
                                            
                                            	policer ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: policer_type
                                            
                                            	Policer type
                                            	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__init__()

                                                self.yang_name = "police"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.policer_id = YLeaf(YType.uint32, "policer-id")

                                                self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                                self.cbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                                self.cbs.parent = self
                                                self._children_name_map["cbs"] = "cbs"
                                                self._children_yang_names.add("cbs")

                                                self.cir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                                self.cir.parent = self
                                                self._children_name_map["cir"] = "cir"
                                                self._children_yang_names.add("cir")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("policer_id",
                                                                "policer_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)


                                            class Cir(Entity):
                                                """
                                                CIR
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__init__()

                                                    self.yang_name = "cir"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Cbs(Entity):
                                                """
                                                CBS
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__init__()

                                                    self.yang_name = "cbs"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.policer_id.is_set or
                                                    self.policer_type.is_set or
                                                    (self.cbs is not None and self.cbs.has_data()) or
                                                    (self.cir is not None and self.cir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.policer_id.yfilter != YFilter.not_set or
                                                    self.policer_type.yfilter != YFilter.not_set or
                                                    (self.cbs is not None and self.cbs.has_operation()) or
                                                    (self.cir is not None and self.cir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "police" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.policer_id.is_set or self.policer_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policer_id.get_name_leafdata())
                                                if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policer_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "cbs"):
                                                    if (self.cbs is None):
                                                        self.cbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                                        self.cbs.parent = self
                                                        self._children_name_map["cbs"] = "cbs"
                                                    return self.cbs

                                                if (child_yang_name == "cir"):
                                                    if (self.cir is None):
                                                        self.cir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                                        self.cir.parent = self
                                                        self._children_name_map["cir"] = "cir"
                                                    return self.cir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "cbs" or name == "cir" or name == "policer-id" or name == "policer-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "policer-id"):
                                                    self.policer_id = value
                                                    self.policer_id.value_namespace = name_space
                                                    self.policer_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "policer-type"):
                                                    self.policer_type = value
                                                    self.policer_type.value_namespace = name_space
                                                    self.policer_type.value_namespace_prefix = name_space_prefix


                                        class Marking(Entity):
                                            """
                                            QoS Mark parameters
                                            
                                            .. attribute:: mark_only
                                            
                                            	Mark Only
                                            	**type**\:   :py:class:`MarkOnly <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly>`
                                            
                                            .. attribute:: police_conform
                                            
                                            	Police conform mark
                                            	**type**\:   :py:class:`PoliceConform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform>`
                                            
                                            .. attribute:: police_exceed
                                            
                                            	Police exceed mark
                                            	**type**\:   :py:class:`PoliceExceed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking, self).__init__()

                                                self.yang_name = "marking"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.mark_only = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                                self.mark_only.parent = self
                                                self._children_name_map["mark_only"] = "mark-only"
                                                self._children_yang_names.add("mark-only")

                                                self.police_conform = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                                self.police_conform.parent = self
                                                self._children_name_map["police_conform"] = "police-conform"
                                                self._children_yang_names.add("police-conform")

                                                self.police_exceed = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                                self.police_exceed.parent = self
                                                self._children_name_map["police_exceed"] = "police-exceed"
                                                self._children_yang_names.add("police-exceed")


                                            class MarkOnly(Entity):
                                                """
                                                Mark Only
                                                
                                                .. attribute:: action_type
                                                
                                                	Action type
                                                	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                                
                                                .. attribute:: mark_detail
                                                
                                                	Mark value
                                                	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__init__()

                                                    self.yang_name = "mark-only"
                                                    self.yang_parent_name = "marking"

                                                    self.action_type = YLeaf(YType.enumeration, "action-type")

                                                    self.mark_detail = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("action_type") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)


                                                class MarkDetail(Entity):
                                                    """
                                                    Mark value
                                                    
                                                    .. attribute:: action_opcode
                                                    
                                                    	Action opcode
                                                    	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                                    
                                                    .. attribute:: mark_value
                                                    
                                                    	Mark value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__init__()

                                                        self.yang_name = "mark-detail"
                                                        self.yang_parent_name = "mark-only"

                                                        self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                        self.mark_value = YLeaf(YType.uint8, "mark-value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("action_opcode",
                                                                        "mark_value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.action_opcode.is_set or
                                                            self.mark_value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.action_opcode.yfilter != YFilter.not_set or
                                                            self.mark_value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "mark-detail" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                        if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "action-opcode" or name == "mark-value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "action-opcode"):
                                                            self.action_opcode = value
                                                            self.action_opcode.value_namespace = name_space
                                                            self.action_opcode.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "mark-value"):
                                                            self.mark_value = value
                                                            self.mark_value.value_namespace = name_space
                                                            self.mark_value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_data()):
                                                            return True
                                                    return self.action_type.is_set

                                                def has_operation(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_operation()):
                                                            return True
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.action_type.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "mark-only" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.action_type.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "mark-detail"):
                                                        for c in self.mark_detail:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.mark_detail.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "mark-detail" or name == "action-type"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "action-type"):
                                                        self.action_type = value
                                                        self.action_type.value_namespace = name_space
                                                        self.action_type.value_namespace_prefix = name_space_prefix


                                            class PoliceConform(Entity):
                                                """
                                                Police conform mark
                                                
                                                .. attribute:: action_type
                                                
                                                	Action type
                                                	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                                
                                                .. attribute:: mark_detail
                                                
                                                	Mark value
                                                	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__init__()

                                                    self.yang_name = "police-conform"
                                                    self.yang_parent_name = "marking"

                                                    self.action_type = YLeaf(YType.enumeration, "action-type")

                                                    self.mark_detail = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("action_type") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)


                                                class MarkDetail(Entity):
                                                    """
                                                    Mark value
                                                    
                                                    .. attribute:: action_opcode
                                                    
                                                    	Action opcode
                                                    	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                                    
                                                    .. attribute:: mark_value
                                                    
                                                    	Mark value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__init__()

                                                        self.yang_name = "mark-detail"
                                                        self.yang_parent_name = "police-conform"

                                                        self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                        self.mark_value = YLeaf(YType.uint8, "mark-value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("action_opcode",
                                                                        "mark_value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.action_opcode.is_set or
                                                            self.mark_value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.action_opcode.yfilter != YFilter.not_set or
                                                            self.mark_value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "mark-detail" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                        if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "action-opcode" or name == "mark-value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "action-opcode"):
                                                            self.action_opcode = value
                                                            self.action_opcode.value_namespace = name_space
                                                            self.action_opcode.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "mark-value"):
                                                            self.mark_value = value
                                                            self.mark_value.value_namespace = name_space
                                                            self.mark_value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_data()):
                                                            return True
                                                    return self.action_type.is_set

                                                def has_operation(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_operation()):
                                                            return True
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.action_type.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "police-conform" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.action_type.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "mark-detail"):
                                                        for c in self.mark_detail:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.mark_detail.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "mark-detail" or name == "action-type"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "action-type"):
                                                        self.action_type = value
                                                        self.action_type.value_namespace = name_space
                                                        self.action_type.value_namespace_prefix = name_space_prefix


                                            class PoliceExceed(Entity):
                                                """
                                                Police exceed mark
                                                
                                                .. attribute:: action_type
                                                
                                                	Action type
                                                	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                                
                                                .. attribute:: mark_detail
                                                
                                                	Mark value
                                                	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__init__()

                                                    self.yang_name = "police-exceed"
                                                    self.yang_parent_name = "marking"

                                                    self.action_type = YLeaf(YType.enumeration, "action-type")

                                                    self.mark_detail = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("action_type") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)


                                                class MarkDetail(Entity):
                                                    """
                                                    Mark value
                                                    
                                                    .. attribute:: action_opcode
                                                    
                                                    	Action opcode
                                                    	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                                    
                                                    .. attribute:: mark_value
                                                    
                                                    	Mark value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__init__()

                                                        self.yang_name = "mark-detail"
                                                        self.yang_parent_name = "police-exceed"

                                                        self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                        self.mark_value = YLeaf(YType.uint8, "mark-value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("action_opcode",
                                                                        "mark_value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.action_opcode.is_set or
                                                            self.mark_value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.action_opcode.yfilter != YFilter.not_set or
                                                            self.mark_value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "mark-detail" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                        if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "action-opcode" or name == "mark-value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "action-opcode"):
                                                            self.action_opcode = value
                                                            self.action_opcode.value_namespace = name_space
                                                            self.action_opcode.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "mark-value"):
                                                            self.mark_value = value
                                                            self.mark_value.value_namespace = name_space
                                                            self.mark_value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_data()):
                                                            return True
                                                    return self.action_type.is_set

                                                def has_operation(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_operation()):
                                                            return True
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.action_type.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "police-exceed" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.action_type.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "mark-detail"):
                                                        for c in self.mark_detail:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.mark_detail.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "mark-detail" or name == "action-type"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "action-type"):
                                                        self.action_type = value
                                                        self.action_type.value_namespace = name_space
                                                        self.action_type.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.mark_only is not None and self.mark_only.has_data()) or
                                                    (self.police_conform is not None and self.police_conform.has_data()) or
                                                    (self.police_exceed is not None and self.police_exceed.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.mark_only is not None and self.mark_only.has_operation()) or
                                                    (self.police_conform is not None and self.police_conform.has_operation()) or
                                                    (self.police_exceed is not None and self.police_exceed.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "marking" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "mark-only"):
                                                    if (self.mark_only is None):
                                                        self.mark_only = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                                        self.mark_only.parent = self
                                                        self._children_name_map["mark_only"] = "mark-only"
                                                    return self.mark_only

                                                if (child_yang_name == "police-conform"):
                                                    if (self.police_conform is None):
                                                        self.police_conform = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                                        self.police_conform.parent = self
                                                        self._children_name_map["police_conform"] = "police-conform"
                                                    return self.police_conform

                                                if (child_yang_name == "police-exceed"):
                                                    if (self.police_exceed is None):
                                                        self.police_exceed = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                                        self.police_exceed.parent = self
                                                        self._children_name_map["police_exceed"] = "police-exceed"
                                                    return self.police_exceed

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "mark-only" or name == "police-conform" or name == "police-exceed"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass

                                        def has_data(self):
                                            return (
                                                self.class_level.is_set or
                                                self.class_name.is_set or
                                                (self.marking is not None and self.marking.has_data()) or
                                                (self.police is not None and self.police.has_data()) or
                                                (self.queue is not None and self.queue.has_data()) or
                                                (self.shape is not None and self.shape.has_data()) or
                                                (self.wfq is not None and self.wfq.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.class_level.yfilter != YFilter.not_set or
                                                self.class_name.yfilter != YFilter.not_set or
                                                (self.marking is not None and self.marking.has_operation()) or
                                                (self.police is not None and self.police.has_operation()) or
                                                (self.queue is not None and self.queue.has_operation()) or
                                                (self.shape is not None and self.shape.has_operation()) or
                                                (self.wfq is not None and self.wfq.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "qos-show-pclass-st" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.class_level.get_name_leafdata())
                                            if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.class_name.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "marking"):
                                                if (self.marking is None):
                                                    self.marking = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                                    self.marking.parent = self
                                                    self._children_name_map["marking"] = "marking"
                                                return self.marking

                                            if (child_yang_name == "police"):
                                                if (self.police is None):
                                                    self.police = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                return self.police

                                            if (child_yang_name == "queue"):
                                                if (self.queue is None):
                                                    self.queue = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                                    self.queue.parent = self
                                                    self._children_name_map["queue"] = "queue"
                                                return self.queue

                                            if (child_yang_name == "shape"):
                                                if (self.shape is None):
                                                    self.shape = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                                    self.shape.parent = self
                                                    self._children_name_map["shape"] = "shape"
                                                return self.shape

                                            if (child_yang_name == "wfq"):
                                                if (self.wfq is None):
                                                    self.wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                                    self.wfq.parent = self
                                                    self._children_name_map["wfq"] = "wfq"
                                                return self.wfq

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "marking" or name == "police" or name == "queue" or name == "shape" or name == "wfq" or name == "class-level" or name == "class-name"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "class-level"):
                                                self.class_level = value
                                                self.class_level.value_namespace = name_space
                                                self.class_level.value_namespace_prefix = name_space_prefix
                                            if(value_path == "class-name"):
                                                self.class_name = value
                                                self.class_name.value_namespace = name_space
                                                self.class_name.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        for c in self.qos_show_pclass_st:
                                            if (c.has_data()):
                                                return True
                                        return False

                                    def has_operation(self):
                                        for c in self.qos_show_pclass_st:
                                            if (c.has_operation()):
                                                return True
                                        return self.yfilter != YFilter.not_set

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "skywarp-qos-policy-class" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "qos-show-pclass-st"):
                                            for c in self.qos_show_pclass_st:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass.QosShowPclassSt()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.qos_show_pclass_st.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "qos-show-pclass-st"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (
                                        (self.header is not None and self.header.has_data()) or
                                        (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                        (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.header is not None and self.header.has_operation()) or
                                        (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                        (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bundle-input" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "header"):
                                        if (self.header is None):
                                            self.header = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Header()
                                            self.header.parent = self
                                            self._children_name_map["header"] = "header"
                                        return self.header

                                    if (child_yang_name == "interface-parameters"):
                                        if (self.interface_parameters is None):
                                            self.interface_parameters = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.InterfaceParameters()
                                            self.interface_parameters.parent = self
                                            self._children_name_map["interface_parameters"] = "interface-parameters"
                                        return self.interface_parameters

                                    if (child_yang_name == "skywarp-qos-policy-class"):
                                        if (self.skywarp_qos_policy_class is None):
                                            self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.SkywarpQosPolicyClass()
                                            self.skywarp_qos_policy_class.parent = self
                                            self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                        return self.skywarp_qos_policy_class

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class BundleOutput(Entity):
                                """
                                QoS policy direction output
                                
                                .. attribute:: header
                                
                                	QoS EA policy header
                                	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Header>`
                                
                                .. attribute:: interface_parameters
                                
                                	QoS Interface Parameters
                                	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters>`
                                
                                .. attribute:: skywarp_qos_policy_class
                                
                                	Skywarp QoS policy class details
                                	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput, self).__init__()

                                    self.yang_name = "bundle-output"
                                    self.yang_parent_name = "member-interface"

                                    self.header = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Header()
                                    self.header.parent = self
                                    self._children_name_map["header"] = "header"
                                    self._children_yang_names.add("header")

                                    self.interface_parameters = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters()
                                    self.interface_parameters.parent = self
                                    self._children_name_map["interface_parameters"] = "interface-parameters"
                                    self._children_yang_names.add("interface-parameters")

                                    self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass()
                                    self.skywarp_qos_policy_class.parent = self
                                    self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                    self._children_yang_names.add("skywarp-qos-policy-class")


                                class Header(Entity):
                                    """
                                    QoS EA policy header
                                    
                                    .. attribute:: classes
                                    
                                    	Number of classes
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: direction
                                    
                                    	Direction
                                    	**type**\:  str
                                    
                                    	**length:** 0..11
                                    
                                    .. attribute:: interface_name
                                    
                                    	Interface Name
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    .. attribute:: policy_name
                                    
                                    	Policy name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Header, self).__init__()

                                        self.yang_name = "header"
                                        self.yang_parent_name = "bundle-output"

                                        self.classes = YLeaf(YType.uint16, "classes")

                                        self.direction = YLeaf(YType.str, "direction")

                                        self.interface_name = YLeaf(YType.str, "interface-name")

                                        self.policy_name = YLeaf(YType.str, "policy-name")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("classes",
                                                        "direction",
                                                        "interface_name",
                                                        "policy_name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Header, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Header, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.classes.is_set or
                                            self.direction.is_set or
                                            self.interface_name.is_set or
                                            self.policy_name.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.classes.yfilter != YFilter.not_set or
                                            self.direction.yfilter != YFilter.not_set or
                                            self.interface_name.yfilter != YFilter.not_set or
                                            self.policy_name.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "header" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.classes.get_name_leafdata())
                                        if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.direction.get_name_leafdata())
                                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.interface_name.get_name_leafdata())
                                        if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policy_name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "classes"):
                                            self.classes = value
                                            self.classes.value_namespace = name_space
                                            self.classes.value_namespace_prefix = name_space_prefix
                                        if(value_path == "direction"):
                                            self.direction = value
                                            self.direction.value_namespace = name_space
                                            self.direction.value_namespace_prefix = name_space_prefix
                                        if(value_path == "interface-name"):
                                            self.interface_name = value
                                            self.interface_name.value_namespace = name_space
                                            self.interface_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "policy-name"):
                                            self.policy_name = value
                                            self.policy_name.value_namespace = name_space
                                            self.policy_name.value_namespace_prefix = name_space_prefix


                                class InterfaceParameters(Entity):
                                    """
                                    QoS Interface Parameters
                                    
                                    .. attribute:: interface_config_rate
                                    
                                    	Interface Configured Rate
                                    	**type**\:   :py:class:`InterfaceConfigRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceConfigRate>`
                                    
                                    .. attribute:: interface_program_rate
                                    
                                    	Interface Programmed Rate
                                    	**type**\:   :py:class:`InterfaceProgramRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceProgramRate>`
                                    
                                    .. attribute:: port_shaper_rate
                                    
                                    	Port Shaper Rate
                                    	**type**\:   :py:class:`PortShaperRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.PortShaperRate>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters, self).__init__()

                                        self.yang_name = "interface-parameters"
                                        self.yang_parent_name = "bundle-output"

                                        self.interface_config_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceConfigRate()
                                        self.interface_config_rate.parent = self
                                        self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                        self._children_yang_names.add("interface-config-rate")

                                        self.interface_program_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceProgramRate()
                                        self.interface_program_rate.parent = self
                                        self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                        self._children_yang_names.add("interface-program-rate")

                                        self.port_shaper_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.PortShaperRate()
                                        self.port_shaper_rate.parent = self
                                        self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                        self._children_yang_names.add("port-shaper-rate")


                                    class InterfaceConfigRate(Entity):
                                        """
                                        Interface Configured Rate
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceConfigRate, self).__init__()

                                            self.yang_name = "interface-config-rate"
                                            self.yang_parent_name = "interface-parameters"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "interface-config-rate" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class InterfaceProgramRate(Entity):
                                        """
                                        Interface Programmed Rate
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceProgramRate, self).__init__()

                                            self.yang_name = "interface-program-rate"
                                            self.yang_parent_name = "interface-parameters"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "interface-program-rate" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class PortShaperRate(Entity):
                                        """
                                        Port Shaper Rate
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.PortShaperRate, self).__init__()

                                            self.yang_name = "port-shaper-rate"
                                            self.yang_parent_name = "interface-parameters"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "port-shaper-rate" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.interface_config_rate is not None and self.interface_config_rate.has_data()) or
                                            (self.interface_program_rate is not None and self.interface_program_rate.has_data()) or
                                            (self.port_shaper_rate is not None and self.port_shaper_rate.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.interface_config_rate is not None and self.interface_config_rate.has_operation()) or
                                            (self.interface_program_rate is not None and self.interface_program_rate.has_operation()) or
                                            (self.port_shaper_rate is not None and self.port_shaper_rate.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "interface-parameters" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "interface-config-rate"):
                                            if (self.interface_config_rate is None):
                                                self.interface_config_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceConfigRate()
                                                self.interface_config_rate.parent = self
                                                self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                            return self.interface_config_rate

                                        if (child_yang_name == "interface-program-rate"):
                                            if (self.interface_program_rate is None):
                                                self.interface_program_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.InterfaceProgramRate()
                                                self.interface_program_rate.parent = self
                                                self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                            return self.interface_program_rate

                                        if (child_yang_name == "port-shaper-rate"):
                                            if (self.port_shaper_rate is None):
                                                self.port_shaper_rate = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters.PortShaperRate()
                                                self.port_shaper_rate.parent = self
                                                self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                            return self.port_shaper_rate

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "interface-config-rate" or name == "interface-program-rate" or name == "port-shaper-rate"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass


                                class SkywarpQosPolicyClass(Entity):
                                    """
                                    Skywarp QoS policy class details
                                    
                                    .. attribute:: qos_show_pclass_st
                                    
                                    	qos show pclass st
                                    	**type**\: list of    :py:class:`QosShowPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass, self).__init__()

                                        self.yang_name = "skywarp-qos-policy-class"
                                        self.yang_parent_name = "bundle-output"

                                        self.qos_show_pclass_st = YList(self)

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in () and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass, self).__setattr__(name, value)


                                    class QosShowPclassSt(Entity):
                                        """
                                        qos show pclass st
                                        
                                        .. attribute:: class_level
                                        
                                        	Class level
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: class_name
                                        
                                        	Class name
                                        	**type**\:  str
                                        
                                        	**length:** 0..65
                                        
                                        .. attribute:: marking
                                        
                                        	QoS Mark parameters
                                        	**type**\:   :py:class:`Marking <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking>`
                                        
                                        .. attribute:: police
                                        
                                        	QoS Policer parameters
                                        	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police>`
                                        
                                        .. attribute:: queue
                                        
                                        	QoS Queue parameters
                                        	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Queue>`
                                        
                                        .. attribute:: shape
                                        
                                        	QoS EA Shaper parameters
                                        	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape>`
                                        
                                        .. attribute:: wfq
                                        
                                        	QoS WFQ parameters
                                        	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt, self).__init__()

                                            self.yang_name = "qos-show-pclass-st"
                                            self.yang_parent_name = "skywarp-qos-policy-class"

                                            self.class_level = YLeaf(YType.uint8, "class-level")

                                            self.class_name = YLeaf(YType.str, "class-name")

                                            self.marking = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                            self.marking.parent = self
                                            self._children_name_map["marking"] = "marking"
                                            self._children_yang_names.add("marking")

                                            self.police = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                            self._children_yang_names.add("police")

                                            self.queue = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                            self.queue.parent = self
                                            self._children_name_map["queue"] = "queue"
                                            self._children_yang_names.add("queue")

                                            self.shape = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                            self.shape.parent = self
                                            self._children_name_map["shape"] = "shape"
                                            self._children_yang_names.add("shape")

                                            self.wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                            self.wfq.parent = self
                                            self._children_name_map["wfq"] = "wfq"
                                            self._children_yang_names.add("wfq")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("class_level",
                                                            "class_name") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)


                                        class Queue(Entity):
                                            """
                                            QoS Queue parameters
                                            
                                            .. attribute:: queue_id
                                            
                                            	Queue ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: queue_type
                                            
                                            	Queue Type
                                            	**type**\:  str
                                            
                                            	**length:** 0..101
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__init__()

                                                self.yang_name = "queue"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.queue_id = YLeaf(YType.uint32, "queue-id")

                                                self.queue_type = YLeaf(YType.str, "queue-type")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("queue_id",
                                                                "queue_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.queue_id.is_set or
                                                    self.queue_type.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.queue_id.yfilter != YFilter.not_set or
                                                    self.queue_type.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "queue" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.queue_id.get_name_leafdata())
                                                if (self.queue_type.is_set or self.queue_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.queue_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "queue-id" or name == "queue-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "queue-id"):
                                                    self.queue_id = value
                                                    self.queue_id.value_namespace = name_space
                                                    self.queue_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "queue-type"):
                                                    self.queue_type = value
                                                    self.queue_type.value_namespace = name_space
                                                    self.queue_type.value_namespace_prefix = name_space_prefix


                                        class Shape(Entity):
                                            """
                                            QoS EA Shaper parameters
                                            
                                            .. attribute:: pbs
                                            
                                            	PBS in bytes
                                            	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs>`
                                            
                                            .. attribute:: pir
                                            
                                            	PIR in kbps
                                            	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape, self).__init__()

                                                self.yang_name = "shape"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.pbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                                self.pbs.parent = self
                                                self._children_name_map["pbs"] = "pbs"
                                                self._children_yang_names.add("pbs")

                                                self.pir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                                self.pir.parent = self
                                                self._children_name_map["pir"] = "pir"
                                                self._children_yang_names.add("pir")


                                            class Pir(Entity):
                                                """
                                                PIR in kbps
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__init__()

                                                    self.yang_name = "pir"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Pbs(Entity):
                                                """
                                                PBS in bytes
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__init__()

                                                    self.yang_name = "pbs"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.pbs is not None and self.pbs.has_data()) or
                                                    (self.pir is not None and self.pir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.pbs is not None and self.pbs.has_operation()) or
                                                    (self.pir is not None and self.pir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "shape" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "pbs"):
                                                    if (self.pbs is None):
                                                        self.pbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                                        self.pbs.parent = self
                                                        self._children_name_map["pbs"] = "pbs"
                                                    return self.pbs

                                                if (child_yang_name == "pir"):
                                                    if (self.pir is None):
                                                        self.pir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                                        self.pir.parent = self
                                                        self._children_name_map["pir"] = "pir"
                                                    return self.pir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "pbs" or name == "pir"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class Wfq(Entity):
                                            """
                                            QoS WFQ parameters
                                            
                                            .. attribute:: committed_weight
                                            
                                            	Committed Weight
                                            	**type**\:   :py:class:`CommittedWeight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight>`
                                            
                                            .. attribute:: excess_weight
                                            
                                            	Excess Weight
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: programmed_wfq
                                            
                                            	QoS Programmed WFQ parameters
                                            	**type**\:   :py:class:`ProgrammedWfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__init__()

                                                self.yang_name = "wfq"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.excess_weight = YLeaf(YType.uint16, "excess-weight")

                                                self.committed_weight = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                                self.committed_weight.parent = self
                                                self._children_name_map["committed_weight"] = "committed-weight"
                                                self._children_yang_names.add("committed-weight")

                                                self.programmed_wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                                self.programmed_wfq.parent = self
                                                self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                                self._children_yang_names.add("programmed-wfq")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("excess_weight") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)


                                            class CommittedWeight(Entity):
                                                """
                                                Committed Weight
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__init__()

                                                    self.yang_name = "committed-weight"
                                                    self.yang_parent_name = "wfq"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "committed-weight" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class ProgrammedWfq(Entity):
                                                """
                                                QoS Programmed WFQ parameters
                                                
                                                .. attribute:: bandwidth
                                                
                                                	Bandwidth
                                                	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth>`
                                                
                                                .. attribute:: excess_ratio
                                                
                                                	Excess Ratio
                                                	**type**\:  int
                                                
                                                	**range:** 0..65535
                                                
                                                .. attribute:: sum_of_bandwidth
                                                
                                                	Sum of Bandwidth
                                                	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__init__()

                                                    self.yang_name = "programmed-wfq"
                                                    self.yang_parent_name = "wfq"

                                                    self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                                    self.bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                                    self.bandwidth.parent = self
                                                    self._children_name_map["bandwidth"] = "bandwidth"
                                                    self._children_yang_names.add("bandwidth")

                                                    self.sum_of_bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                                    self.sum_of_bandwidth.parent = self
                                                    self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                    self._children_yang_names.add("sum-of-bandwidth")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("excess_ratio") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)


                                                class Bandwidth(Entity):
                                                    """
                                                    Bandwidth
                                                    
                                                    .. attribute:: unit
                                                    
                                                    	Config unit
                                                    	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                    
                                                    .. attribute:: value
                                                    
                                                    	Config value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__init__()

                                                        self.yang_name = "bandwidth"
                                                        self.yang_parent_name = "programmed-wfq"

                                                        self.unit = YLeaf(YType.enumeration, "unit")

                                                        self.value = YLeaf(YType.uint32, "value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("unit",
                                                                        "value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.unit.is_set or
                                                            self.value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.unit.yfilter != YFilter.not_set or
                                                            self.value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "bandwidth" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.unit.get_name_leafdata())
                                                        if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "unit" or name == "value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "unit"):
                                                            self.unit = value
                                                            self.unit.value_namespace = name_space
                                                            self.unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "value"):
                                                            self.value = value
                                                            self.value.value_namespace = name_space
                                                            self.value.value_namespace_prefix = name_space_prefix


                                                class SumOfBandwidth(Entity):
                                                    """
                                                    Sum of Bandwidth
                                                    
                                                    .. attribute:: unit
                                                    
                                                    	Config unit
                                                    	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                    
                                                    .. attribute:: value
                                                    
                                                    	Config value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__init__()

                                                        self.yang_name = "sum-of-bandwidth"
                                                        self.yang_parent_name = "programmed-wfq"

                                                        self.unit = YLeaf(YType.enumeration, "unit")

                                                        self.value = YLeaf(YType.uint32, "value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("unit",
                                                                        "value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.unit.is_set or
                                                            self.value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.unit.yfilter != YFilter.not_set or
                                                            self.value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "sum-of-bandwidth" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.unit.get_name_leafdata())
                                                        if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "unit" or name == "value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "unit"):
                                                            self.unit = value
                                                            self.unit.value_namespace = name_space
                                                            self.unit.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "value"):
                                                            self.value = value
                                                            self.value.value_namespace = name_space
                                                            self.value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.excess_ratio.is_set or
                                                        (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                        (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.excess_ratio.yfilter != YFilter.not_set or
                                                        (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                        (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "programmed-wfq" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "bandwidth"):
                                                        if (self.bandwidth is None):
                                                            self.bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                                            self.bandwidth.parent = self
                                                            self._children_name_map["bandwidth"] = "bandwidth"
                                                        return self.bandwidth

                                                    if (child_yang_name == "sum-of-bandwidth"):
                                                        if (self.sum_of_bandwidth is None):
                                                            self.sum_of_bandwidth = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                                            self.sum_of_bandwidth.parent = self
                                                            self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                        return self.sum_of_bandwidth

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "excess-ratio"):
                                                        self.excess_ratio = value
                                                        self.excess_ratio.value_namespace = name_space
                                                        self.excess_ratio.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.excess_weight.is_set or
                                                    (self.committed_weight is not None and self.committed_weight.has_data()) or
                                                    (self.programmed_wfq is not None and self.programmed_wfq.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.excess_weight.yfilter != YFilter.not_set or
                                                    (self.committed_weight is not None and self.committed_weight.has_operation()) or
                                                    (self.programmed_wfq is not None and self.programmed_wfq.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "wfq" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.excess_weight.is_set or self.excess_weight.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.excess_weight.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "committed-weight"):
                                                    if (self.committed_weight is None):
                                                        self.committed_weight = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                                        self.committed_weight.parent = self
                                                        self._children_name_map["committed_weight"] = "committed-weight"
                                                    return self.committed_weight

                                                if (child_yang_name == "programmed-wfq"):
                                                    if (self.programmed_wfq is None):
                                                        self.programmed_wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                                        self.programmed_wfq.parent = self
                                                        self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                                    return self.programmed_wfq

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "committed-weight" or name == "programmed-wfq" or name == "excess-weight"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "excess-weight"):
                                                    self.excess_weight = value
                                                    self.excess_weight.value_namespace = name_space
                                                    self.excess_weight.value_namespace_prefix = name_space_prefix


                                        class Police(Entity):
                                            """
                                            QoS Policer parameters
                                            
                                            .. attribute:: cbs
                                            
                                            	CBS
                                            	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs>`
                                            
                                            .. attribute:: cir
                                            
                                            	CIR
                                            	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir>`
                                            
                                            .. attribute:: policer_id
                                            
                                            	policer ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: policer_type
                                            
                                            	Policer type
                                            	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__init__()

                                                self.yang_name = "police"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.policer_id = YLeaf(YType.uint32, "policer-id")

                                                self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                                self.cbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                                self.cbs.parent = self
                                                self._children_name_map["cbs"] = "cbs"
                                                self._children_yang_names.add("cbs")

                                                self.cir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                                self.cir.parent = self
                                                self._children_name_map["cir"] = "cir"
                                                self._children_yang_names.add("cir")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("policer_id",
                                                                "policer_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)


                                            class Cir(Entity):
                                                """
                                                CIR
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__init__()

                                                    self.yang_name = "cir"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Cbs(Entity):
                                                """
                                                CBS
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__init__()

                                                    self.yang_name = "cbs"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.policer_id.is_set or
                                                    self.policer_type.is_set or
                                                    (self.cbs is not None and self.cbs.has_data()) or
                                                    (self.cir is not None and self.cir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.policer_id.yfilter != YFilter.not_set or
                                                    self.policer_type.yfilter != YFilter.not_set or
                                                    (self.cbs is not None and self.cbs.has_operation()) or
                                                    (self.cir is not None and self.cir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "police" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.policer_id.is_set or self.policer_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policer_id.get_name_leafdata())
                                                if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policer_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "cbs"):
                                                    if (self.cbs is None):
                                                        self.cbs = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                                        self.cbs.parent = self
                                                        self._children_name_map["cbs"] = "cbs"
                                                    return self.cbs

                                                if (child_yang_name == "cir"):
                                                    if (self.cir is None):
                                                        self.cir = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                                        self.cir.parent = self
                                                        self._children_name_map["cir"] = "cir"
                                                    return self.cir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "cbs" or name == "cir" or name == "policer-id" or name == "policer-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "policer-id"):
                                                    self.policer_id = value
                                                    self.policer_id.value_namespace = name_space
                                                    self.policer_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "policer-type"):
                                                    self.policer_type = value
                                                    self.policer_type.value_namespace = name_space
                                                    self.policer_type.value_namespace_prefix = name_space_prefix


                                        class Marking(Entity):
                                            """
                                            QoS Mark parameters
                                            
                                            .. attribute:: mark_only
                                            
                                            	Mark Only
                                            	**type**\:   :py:class:`MarkOnly <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly>`
                                            
                                            .. attribute:: police_conform
                                            
                                            	Police conform mark
                                            	**type**\:   :py:class:`PoliceConform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform>`
                                            
                                            .. attribute:: police_exceed
                                            
                                            	Police exceed mark
                                            	**type**\:   :py:class:`PoliceExceed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking, self).__init__()

                                                self.yang_name = "marking"
                                                self.yang_parent_name = "qos-show-pclass-st"

                                                self.mark_only = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                                self.mark_only.parent = self
                                                self._children_name_map["mark_only"] = "mark-only"
                                                self._children_yang_names.add("mark-only")

                                                self.police_conform = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                                self.police_conform.parent = self
                                                self._children_name_map["police_conform"] = "police-conform"
                                                self._children_yang_names.add("police-conform")

                                                self.police_exceed = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                                self.police_exceed.parent = self
                                                self._children_name_map["police_exceed"] = "police-exceed"
                                                self._children_yang_names.add("police-exceed")


                                            class MarkOnly(Entity):
                                                """
                                                Mark Only
                                                
                                                .. attribute:: action_type
                                                
                                                	Action type
                                                	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                                
                                                .. attribute:: mark_detail
                                                
                                                	Mark value
                                                	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__init__()

                                                    self.yang_name = "mark-only"
                                                    self.yang_parent_name = "marking"

                                                    self.action_type = YLeaf(YType.enumeration, "action-type")

                                                    self.mark_detail = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("action_type") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)


                                                class MarkDetail(Entity):
                                                    """
                                                    Mark value
                                                    
                                                    .. attribute:: action_opcode
                                                    
                                                    	Action opcode
                                                    	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                                    
                                                    .. attribute:: mark_value
                                                    
                                                    	Mark value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__init__()

                                                        self.yang_name = "mark-detail"
                                                        self.yang_parent_name = "mark-only"

                                                        self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                        self.mark_value = YLeaf(YType.uint8, "mark-value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("action_opcode",
                                                                        "mark_value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.action_opcode.is_set or
                                                            self.mark_value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.action_opcode.yfilter != YFilter.not_set or
                                                            self.mark_value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "mark-detail" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                        if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "action-opcode" or name == "mark-value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "action-opcode"):
                                                            self.action_opcode = value
                                                            self.action_opcode.value_namespace = name_space
                                                            self.action_opcode.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "mark-value"):
                                                            self.mark_value = value
                                                            self.mark_value.value_namespace = name_space
                                                            self.mark_value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_data()):
                                                            return True
                                                    return self.action_type.is_set

                                                def has_operation(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_operation()):
                                                            return True
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.action_type.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "mark-only" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.action_type.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "mark-detail"):
                                                        for c in self.mark_detail:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.mark_detail.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "mark-detail" or name == "action-type"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "action-type"):
                                                        self.action_type = value
                                                        self.action_type.value_namespace = name_space
                                                        self.action_type.value_namespace_prefix = name_space_prefix


                                            class PoliceConform(Entity):
                                                """
                                                Police conform mark
                                                
                                                .. attribute:: action_type
                                                
                                                	Action type
                                                	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                                
                                                .. attribute:: mark_detail
                                                
                                                	Mark value
                                                	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__init__()

                                                    self.yang_name = "police-conform"
                                                    self.yang_parent_name = "marking"

                                                    self.action_type = YLeaf(YType.enumeration, "action-type")

                                                    self.mark_detail = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("action_type") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)


                                                class MarkDetail(Entity):
                                                    """
                                                    Mark value
                                                    
                                                    .. attribute:: action_opcode
                                                    
                                                    	Action opcode
                                                    	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                                    
                                                    .. attribute:: mark_value
                                                    
                                                    	Mark value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__init__()

                                                        self.yang_name = "mark-detail"
                                                        self.yang_parent_name = "police-conform"

                                                        self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                        self.mark_value = YLeaf(YType.uint8, "mark-value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("action_opcode",
                                                                        "mark_value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.action_opcode.is_set or
                                                            self.mark_value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.action_opcode.yfilter != YFilter.not_set or
                                                            self.mark_value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "mark-detail" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                        if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "action-opcode" or name == "mark-value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "action-opcode"):
                                                            self.action_opcode = value
                                                            self.action_opcode.value_namespace = name_space
                                                            self.action_opcode.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "mark-value"):
                                                            self.mark_value = value
                                                            self.mark_value.value_namespace = name_space
                                                            self.mark_value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_data()):
                                                            return True
                                                    return self.action_type.is_set

                                                def has_operation(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_operation()):
                                                            return True
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.action_type.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "police-conform" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.action_type.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "mark-detail"):
                                                        for c in self.mark_detail:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.mark_detail.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "mark-detail" or name == "action-type"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "action-type"):
                                                        self.action_type = value
                                                        self.action_type.value_namespace = name_space
                                                        self.action_type.value_namespace_prefix = name_space_prefix


                                            class PoliceExceed(Entity):
                                                """
                                                Police exceed mark
                                                
                                                .. attribute:: action_type
                                                
                                                	Action type
                                                	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                                
                                                .. attribute:: mark_detail
                                                
                                                	Mark value
                                                	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__init__()

                                                    self.yang_name = "police-exceed"
                                                    self.yang_parent_name = "marking"

                                                    self.action_type = YLeaf(YType.enumeration, "action-type")

                                                    self.mark_detail = YList(self)

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("action_type") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)


                                                class MarkDetail(Entity):
                                                    """
                                                    Mark value
                                                    
                                                    .. attribute:: action_opcode
                                                    
                                                    	Action opcode
                                                    	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                                    
                                                    .. attribute:: mark_value
                                                    
                                                    	Mark value
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..255
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__init__()

                                                        self.yang_name = "mark-detail"
                                                        self.yang_parent_name = "police-exceed"

                                                        self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                        self.mark_value = YLeaf(YType.uint8, "mark-value")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("action_opcode",
                                                                        "mark_value") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.action_opcode.is_set or
                                                            self.mark_value.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.action_opcode.yfilter != YFilter.not_set or
                                                            self.mark_value.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "mark-detail" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                        if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "action-opcode" or name == "mark-value"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "action-opcode"):
                                                            self.action_opcode = value
                                                            self.action_opcode.value_namespace = name_space
                                                            self.action_opcode.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "mark-value"):
                                                            self.mark_value = value
                                                            self.mark_value.value_namespace = name_space
                                                            self.mark_value.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_data()):
                                                            return True
                                                    return self.action_type.is_set

                                                def has_operation(self):
                                                    for c in self.mark_detail:
                                                        if (c.has_operation()):
                                                            return True
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.action_type.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "police-exceed" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.action_type.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "mark-detail"):
                                                        for c in self.mark_detail:
                                                            segment = c.get_segment_path()
                                                            if (segment_path == segment):
                                                                return c
                                                        c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail()
                                                        c.parent = self
                                                        local_reference_key = "ydk::seg::%s" % segment_path
                                                        self._local_refs[local_reference_key] = c
                                                        self.mark_detail.append(c)
                                                        return c

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "mark-detail" or name == "action-type"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "action-type"):
                                                        self.action_type = value
                                                        self.action_type.value_namespace = name_space
                                                        self.action_type.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.mark_only is not None and self.mark_only.has_data()) or
                                                    (self.police_conform is not None and self.police_conform.has_data()) or
                                                    (self.police_exceed is not None and self.police_exceed.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.mark_only is not None and self.mark_only.has_operation()) or
                                                    (self.police_conform is not None and self.police_conform.has_operation()) or
                                                    (self.police_exceed is not None and self.police_exceed.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "marking" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "mark-only"):
                                                    if (self.mark_only is None):
                                                        self.mark_only = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                                        self.mark_only.parent = self
                                                        self._children_name_map["mark_only"] = "mark-only"
                                                    return self.mark_only

                                                if (child_yang_name == "police-conform"):
                                                    if (self.police_conform is None):
                                                        self.police_conform = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                                        self.police_conform.parent = self
                                                        self._children_name_map["police_conform"] = "police-conform"
                                                    return self.police_conform

                                                if (child_yang_name == "police-exceed"):
                                                    if (self.police_exceed is None):
                                                        self.police_exceed = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                                        self.police_exceed.parent = self
                                                        self._children_name_map["police_exceed"] = "police-exceed"
                                                    return self.police_exceed

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "mark-only" or name == "police-conform" or name == "police-exceed"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass

                                        def has_data(self):
                                            return (
                                                self.class_level.is_set or
                                                self.class_name.is_set or
                                                (self.marking is not None and self.marking.has_data()) or
                                                (self.police is not None and self.police.has_data()) or
                                                (self.queue is not None and self.queue.has_data()) or
                                                (self.shape is not None and self.shape.has_data()) or
                                                (self.wfq is not None and self.wfq.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.class_level.yfilter != YFilter.not_set or
                                                self.class_name.yfilter != YFilter.not_set or
                                                (self.marking is not None and self.marking.has_operation()) or
                                                (self.police is not None and self.police.has_operation()) or
                                                (self.queue is not None and self.queue.has_operation()) or
                                                (self.shape is not None and self.shape.has_operation()) or
                                                (self.wfq is not None and self.wfq.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "qos-show-pclass-st" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.class_level.get_name_leafdata())
                                            if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.class_name.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "marking"):
                                                if (self.marking is None):
                                                    self.marking = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                                    self.marking.parent = self
                                                    self._children_name_map["marking"] = "marking"
                                                return self.marking

                                            if (child_yang_name == "police"):
                                                if (self.police is None):
                                                    self.police = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                return self.police

                                            if (child_yang_name == "queue"):
                                                if (self.queue is None):
                                                    self.queue = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                                    self.queue.parent = self
                                                    self._children_name_map["queue"] = "queue"
                                                return self.queue

                                            if (child_yang_name == "shape"):
                                                if (self.shape is None):
                                                    self.shape = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                                    self.shape.parent = self
                                                    self._children_name_map["shape"] = "shape"
                                                return self.shape

                                            if (child_yang_name == "wfq"):
                                                if (self.wfq is None):
                                                    self.wfq = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                                    self.wfq.parent = self
                                                    self._children_name_map["wfq"] = "wfq"
                                                return self.wfq

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "marking" or name == "police" or name == "queue" or name == "shape" or name == "wfq" or name == "class-level" or name == "class-name"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "class-level"):
                                                self.class_level = value
                                                self.class_level.value_namespace = name_space
                                                self.class_level.value_namespace_prefix = name_space_prefix
                                            if(value_path == "class-name"):
                                                self.class_name = value
                                                self.class_name.value_namespace = name_space
                                                self.class_name.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        for c in self.qos_show_pclass_st:
                                            if (c.has_data()):
                                                return True
                                        return False

                                    def has_operation(self):
                                        for c in self.qos_show_pclass_st:
                                            if (c.has_operation()):
                                                return True
                                        return self.yfilter != YFilter.not_set

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "skywarp-qos-policy-class" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "qos-show-pclass-st"):
                                            for c in self.qos_show_pclass_st:
                                                segment = c.get_segment_path()
                                                if (segment_path == segment):
                                                    return c
                                            c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass.QosShowPclassSt()
                                            c.parent = self
                                            local_reference_key = "ydk::seg::%s" % segment_path
                                            self._local_refs[local_reference_key] = c
                                            self.qos_show_pclass_st.append(c)
                                            return c

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "qos-show-pclass-st"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (
                                        (self.header is not None and self.header.has_data()) or
                                        (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                        (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.header is not None and self.header.has_operation()) or
                                        (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                        (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bundle-output" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "header"):
                                        if (self.header is None):
                                            self.header = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Header()
                                            self.header.parent = self
                                            self._children_name_map["header"] = "header"
                                        return self.header

                                    if (child_yang_name == "interface-parameters"):
                                        if (self.interface_parameters is None):
                                            self.interface_parameters = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.InterfaceParameters()
                                            self.interface_parameters.parent = self
                                            self._children_name_map["interface_parameters"] = "interface-parameters"
                                        return self.interface_parameters

                                    if (child_yang_name == "skywarp-qos-policy-class"):
                                        if (self.skywarp_qos_policy_class is None):
                                            self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.SkywarpQosPolicyClass()
                                            self.skywarp_qos_policy_class.parent = self
                                            self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                        return self.skywarp_qos_policy_class

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.interface_name.is_set or
                                    (self.bundle_input is not None and self.bundle_input.has_data()) or
                                    (self.bundle_output is not None and self.bundle_output.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    (self.bundle_input is not None and self.bundle_input.has_operation()) or
                                    (self.bundle_output is not None and self.bundle_output.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "member-interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "bundle-input"):
                                    if (self.bundle_input is None):
                                        self.bundle_input = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput()
                                        self.bundle_input.parent = self
                                        self._children_name_map["bundle_input"] = "bundle-input"
                                    return self.bundle_input

                                if (child_yang_name == "bundle-output"):
                                    if (self.bundle_output is None):
                                        self.bundle_output = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput()
                                        self.bundle_output.parent = self
                                        self._children_name_map["bundle_output"] = "bundle-output"
                                    return self.bundle_output

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "bundle-input" or name == "bundle-output" or name == "interface-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.member_interface:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.member_interface:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "member-interfaces" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "member-interface"):
                                for c in self.member_interface:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.member_interface.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "member-interface"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.interface_name.is_set or
                            (self.member_interfaces is not None and self.member_interfaces.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.interface_name.yfilter != YFilter.not_set or
                            (self.member_interfaces is not None and self.member_interfaces.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "bundle-interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.interface_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "member-interfaces"):
                            if (self.member_interfaces is None):
                                self.member_interfaces = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces()
                                self.member_interfaces.parent = self
                                self._children_name_map["member_interfaces"] = "member-interfaces"
                            return self.member_interfaces

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "member-interfaces" or name == "interface-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "interface-name"):
                            self.interface_name = value
                            self.interface_name.value_namespace = name_space
                            self.interface_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.bundle_interface:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.bundle_interface:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "bundle-interfaces" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "bundle-interface"):
                        for c in self.bundle_interface:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PlatformQos.Nodes.Node.BundleInterfaces.BundleInterface()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.bundle_interface.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "bundle-interface"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Capability(Entity):
                """
                QoS system capability
                
                .. attribute:: max_bundle_members
                
                	Maximum bundle members
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_classes_per_policy
                
                	Maximum classes per policy
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_classmap_name_length
                
                	Maximum classmap name length
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_marking_actions_per_class
                
                	Maximum marking action  per class
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_matches_per_class
                
                	Maximum matches per class
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_police_actions_per_class
                
                	Maximum police actions per class
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_policy_hierarchy
                
                	Maximum policy hierarchy
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_policy_maps
                
                	Maximum policy maps per system
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: max_policy_name_length
                
                	Maximum policy name length
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'skp-qos-oper'
                _revision = '2016-02-18'

                def __init__(self):
                    super(PlatformQos.Nodes.Node.Capability, self).__init__()

                    self.yang_name = "capability"
                    self.yang_parent_name = "node"

                    self.max_bundle_members = YLeaf(YType.uint32, "max-bundle-members")

                    self.max_classes_per_policy = YLeaf(YType.uint32, "max-classes-per-policy")

                    self.max_classmap_name_length = YLeaf(YType.uint32, "max-classmap-name-length")

                    self.max_marking_actions_per_class = YLeaf(YType.uint32, "max-marking-actions-per-class")

                    self.max_matches_per_class = YLeaf(YType.uint32, "max-matches-per-class")

                    self.max_police_actions_per_class = YLeaf(YType.uint32, "max-police-actions-per-class")

                    self.max_policy_hierarchy = YLeaf(YType.uint32, "max-policy-hierarchy")

                    self.max_policy_maps = YLeaf(YType.uint32, "max-policy-maps")

                    self.max_policy_name_length = YLeaf(YType.uint32, "max-policy-name-length")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("max_bundle_members",
                                    "max_classes_per_policy",
                                    "max_classmap_name_length",
                                    "max_marking_actions_per_class",
                                    "max_matches_per_class",
                                    "max_police_actions_per_class",
                                    "max_policy_hierarchy",
                                    "max_policy_maps",
                                    "max_policy_name_length") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PlatformQos.Nodes.Node.Capability, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PlatformQos.Nodes.Node.Capability, self).__setattr__(name, value)

                def has_data(self):
                    return (
                        self.max_bundle_members.is_set or
                        self.max_classes_per_policy.is_set or
                        self.max_classmap_name_length.is_set or
                        self.max_marking_actions_per_class.is_set or
                        self.max_matches_per_class.is_set or
                        self.max_police_actions_per_class.is_set or
                        self.max_policy_hierarchy.is_set or
                        self.max_policy_maps.is_set or
                        self.max_policy_name_length.is_set)

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.max_bundle_members.yfilter != YFilter.not_set or
                        self.max_classes_per_policy.yfilter != YFilter.not_set or
                        self.max_classmap_name_length.yfilter != YFilter.not_set or
                        self.max_marking_actions_per_class.yfilter != YFilter.not_set or
                        self.max_matches_per_class.yfilter != YFilter.not_set or
                        self.max_police_actions_per_class.yfilter != YFilter.not_set or
                        self.max_policy_hierarchy.yfilter != YFilter.not_set or
                        self.max_policy_maps.yfilter != YFilter.not_set or
                        self.max_policy_name_length.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "capability" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.max_bundle_members.is_set or self.max_bundle_members.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_bundle_members.get_name_leafdata())
                    if (self.max_classes_per_policy.is_set or self.max_classes_per_policy.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_classes_per_policy.get_name_leafdata())
                    if (self.max_classmap_name_length.is_set or self.max_classmap_name_length.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_classmap_name_length.get_name_leafdata())
                    if (self.max_marking_actions_per_class.is_set or self.max_marking_actions_per_class.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_marking_actions_per_class.get_name_leafdata())
                    if (self.max_matches_per_class.is_set or self.max_matches_per_class.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_matches_per_class.get_name_leafdata())
                    if (self.max_police_actions_per_class.is_set or self.max_police_actions_per_class.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_police_actions_per_class.get_name_leafdata())
                    if (self.max_policy_hierarchy.is_set or self.max_policy_hierarchy.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_policy_hierarchy.get_name_leafdata())
                    if (self.max_policy_maps.is_set or self.max_policy_maps.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_policy_maps.get_name_leafdata())
                    if (self.max_policy_name_length.is_set or self.max_policy_name_length.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.max_policy_name_length.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "max-bundle-members" or name == "max-classes-per-policy" or name == "max-classmap-name-length" or name == "max-marking-actions-per-class" or name == "max-matches-per-class" or name == "max-police-actions-per-class" or name == "max-policy-hierarchy" or name == "max-policy-maps" or name == "max-policy-name-length"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "max-bundle-members"):
                        self.max_bundle_members = value
                        self.max_bundle_members.value_namespace = name_space
                        self.max_bundle_members.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-classes-per-policy"):
                        self.max_classes_per_policy = value
                        self.max_classes_per_policy.value_namespace = name_space
                        self.max_classes_per_policy.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-classmap-name-length"):
                        self.max_classmap_name_length = value
                        self.max_classmap_name_length.value_namespace = name_space
                        self.max_classmap_name_length.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-marking-actions-per-class"):
                        self.max_marking_actions_per_class = value
                        self.max_marking_actions_per_class.value_namespace = name_space
                        self.max_marking_actions_per_class.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-matches-per-class"):
                        self.max_matches_per_class = value
                        self.max_matches_per_class.value_namespace = name_space
                        self.max_matches_per_class.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-police-actions-per-class"):
                        self.max_police_actions_per_class = value
                        self.max_police_actions_per_class.value_namespace = name_space
                        self.max_police_actions_per_class.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-policy-hierarchy"):
                        self.max_policy_hierarchy = value
                        self.max_policy_hierarchy.value_namespace = name_space
                        self.max_policy_hierarchy.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-policy-maps"):
                        self.max_policy_maps = value
                        self.max_policy_maps.value_namespace = name_space
                        self.max_policy_maps.value_namespace_prefix = name_space_prefix
                    if(value_path == "max-policy-name-length"):
                        self.max_policy_name_length = value
                        self.max_policy_name_length.value_namespace = name_space
                        self.max_policy_name_length.value_namespace_prefix = name_space_prefix


            class Interfaces(Entity):
                """
                QoS list of interfaces
                
                .. attribute:: interface
                
                	QoS interface name
                	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface>`
                
                

                """

                _prefix = 'skp-qos-oper'
                _revision = '2016-02-18'

                def __init__(self):
                    super(PlatformQos.Nodes.Node.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "node"

                    self.interface = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PlatformQos.Nodes.Node.Interfaces, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PlatformQos.Nodes.Node.Interfaces, self).__setattr__(name, value)


                class Interface(Entity):
                    """
                    QoS interface name
                    
                    .. attribute:: interface_name  <key>
                    
                    	The name of the interface
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: input
                    
                    	QoS policy direction ingress
                    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input>`
                    
                    .. attribute:: output
                    
                    	QoS policy direction egress
                    	**type**\:   :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output>`
                    
                    

                    """

                    _prefix = 'skp-qos-oper'
                    _revision = '2016-02-18'

                    def __init__(self):
                        super(PlatformQos.Nodes.Node.Interfaces.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interfaces"

                        self.interface_name = YLeaf(YType.str, "interface-name")

                        self.input = PlatformQos.Nodes.Node.Interfaces.Interface.Input()
                        self.input.parent = self
                        self._children_name_map["input"] = "input"
                        self._children_yang_names.add("input")

                        self.output = PlatformQos.Nodes.Node.Interfaces.Interface.Output()
                        self.output.parent = self
                        self._children_name_map["output"] = "output"
                        self._children_yang_names.add("output")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("interface_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PlatformQos.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)


                    class Output(Entity):
                        """
                        QoS policy direction egress
                        
                        .. attribute:: header
                        
                        	QoS EA policy header
                        	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.Header>`
                        
                        .. attribute:: interface_parameters
                        
                        	QoS Interface Parameters
                        	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters>`
                        
                        .. attribute:: skywarp_qos_policy_class
                        
                        	Skywarp QoS policy class details
                        	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass>`
                        
                        

                        """

                        _prefix = 'skp-qos-oper'
                        _revision = '2016-02-18'

                        def __init__(self):
                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output, self).__init__()

                            self.yang_name = "output"
                            self.yang_parent_name = "interface"

                            self.header = PlatformQos.Nodes.Node.Interfaces.Interface.Output.Header()
                            self.header.parent = self
                            self._children_name_map["header"] = "header"
                            self._children_yang_names.add("header")

                            self.interface_parameters = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters()
                            self.interface_parameters.parent = self
                            self._children_name_map["interface_parameters"] = "interface-parameters"
                            self._children_yang_names.add("interface-parameters")

                            self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass()
                            self.skywarp_qos_policy_class.parent = self
                            self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                            self._children_yang_names.add("skywarp-qos-policy-class")


                        class Header(Entity):
                            """
                            QoS EA policy header
                            
                            .. attribute:: classes
                            
                            	Number of classes
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: direction
                            
                            	Direction
                            	**type**\:  str
                            
                            	**length:** 0..11
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            	**length:** 0..101
                            
                            .. attribute:: policy_name
                            
                            	Policy name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.Header, self).__init__()

                                self.yang_name = "header"
                                self.yang_parent_name = "output"

                                self.classes = YLeaf(YType.uint16, "classes")

                                self.direction = YLeaf(YType.str, "direction")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.policy_name = YLeaf(YType.str, "policy-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("classes",
                                                "direction",
                                                "interface_name",
                                                "policy_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.Header, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.Header, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.classes.is_set or
                                    self.direction.is_set or
                                    self.interface_name.is_set or
                                    self.policy_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.classes.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.policy_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "header" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.classes.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.policy_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "classes"):
                                    self.classes = value
                                    self.classes.value_namespace = name_space
                                    self.classes.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "policy-name"):
                                    self.policy_name = value
                                    self.policy_name.value_namespace = name_space
                                    self.policy_name.value_namespace_prefix = name_space_prefix


                        class InterfaceParameters(Entity):
                            """
                            QoS Interface Parameters
                            
                            .. attribute:: interface_config_rate
                            
                            	Interface Configured Rate
                            	**type**\:   :py:class:`InterfaceConfigRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceConfigRate>`
                            
                            .. attribute:: interface_program_rate
                            
                            	Interface Programmed Rate
                            	**type**\:   :py:class:`InterfaceProgramRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceProgramRate>`
                            
                            .. attribute:: port_shaper_rate
                            
                            	Port Shaper Rate
                            	**type**\:   :py:class:`PortShaperRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.PortShaperRate>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters, self).__init__()

                                self.yang_name = "interface-parameters"
                                self.yang_parent_name = "output"

                                self.interface_config_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceConfigRate()
                                self.interface_config_rate.parent = self
                                self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                self._children_yang_names.add("interface-config-rate")

                                self.interface_program_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceProgramRate()
                                self.interface_program_rate.parent = self
                                self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                self._children_yang_names.add("interface-program-rate")

                                self.port_shaper_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.PortShaperRate()
                                self.port_shaper_rate.parent = self
                                self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                self._children_yang_names.add("port-shaper-rate")


                            class InterfaceConfigRate(Entity):
                                """
                                Interface Configured Rate
                                
                                .. attribute:: unit
                                
                                	Config unit
                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                
                                .. attribute:: value
                                
                                	Config value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceConfigRate, self).__init__()

                                    self.yang_name = "interface-config-rate"
                                    self.yang_parent_name = "interface-parameters"

                                    self.unit = YLeaf(YType.enumeration, "unit")

                                    self.value = YLeaf(YType.uint32, "value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("unit",
                                                    "value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.unit.is_set or
                                        self.value.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.unit.yfilter != YFilter.not_set or
                                        self.value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-config-rate" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "unit" or name == "value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "unit"):
                                        self.unit = value
                                        self.unit.value_namespace = name_space
                                        self.unit.value_namespace_prefix = name_space_prefix
                                    if(value_path == "value"):
                                        self.value = value
                                        self.value.value_namespace = name_space
                                        self.value.value_namespace_prefix = name_space_prefix


                            class InterfaceProgramRate(Entity):
                                """
                                Interface Programmed Rate
                                
                                .. attribute:: unit
                                
                                	Config unit
                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                
                                .. attribute:: value
                                
                                	Config value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceProgramRate, self).__init__()

                                    self.yang_name = "interface-program-rate"
                                    self.yang_parent_name = "interface-parameters"

                                    self.unit = YLeaf(YType.enumeration, "unit")

                                    self.value = YLeaf(YType.uint32, "value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("unit",
                                                    "value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.unit.is_set or
                                        self.value.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.unit.yfilter != YFilter.not_set or
                                        self.value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-program-rate" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "unit" or name == "value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "unit"):
                                        self.unit = value
                                        self.unit.value_namespace = name_space
                                        self.unit.value_namespace_prefix = name_space_prefix
                                    if(value_path == "value"):
                                        self.value = value
                                        self.value.value_namespace = name_space
                                        self.value.value_namespace_prefix = name_space_prefix


                            class PortShaperRate(Entity):
                                """
                                Port Shaper Rate
                                
                                .. attribute:: unit
                                
                                	Config unit
                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                
                                .. attribute:: value
                                
                                	Config value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.PortShaperRate, self).__init__()

                                    self.yang_name = "port-shaper-rate"
                                    self.yang_parent_name = "interface-parameters"

                                    self.unit = YLeaf(YType.enumeration, "unit")

                                    self.value = YLeaf(YType.uint32, "value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("unit",
                                                    "value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.unit.is_set or
                                        self.value.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.unit.yfilter != YFilter.not_set or
                                        self.value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "port-shaper-rate" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "unit" or name == "value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "unit"):
                                        self.unit = value
                                        self.unit.value_namespace = name_space
                                        self.unit.value_namespace_prefix = name_space_prefix
                                    if(value_path == "value"):
                                        self.value = value
                                        self.value.value_namespace = name_space
                                        self.value.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.interface_config_rate is not None and self.interface_config_rate.has_data()) or
                                    (self.interface_program_rate is not None and self.interface_program_rate.has_data()) or
                                    (self.port_shaper_rate is not None and self.port_shaper_rate.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.interface_config_rate is not None and self.interface_config_rate.has_operation()) or
                                    (self.interface_program_rate is not None and self.interface_program_rate.has_operation()) or
                                    (self.port_shaper_rate is not None and self.port_shaper_rate.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "interface-parameters" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "interface-config-rate"):
                                    if (self.interface_config_rate is None):
                                        self.interface_config_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceConfigRate()
                                        self.interface_config_rate.parent = self
                                        self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                    return self.interface_config_rate

                                if (child_yang_name == "interface-program-rate"):
                                    if (self.interface_program_rate is None):
                                        self.interface_program_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.InterfaceProgramRate()
                                        self.interface_program_rate.parent = self
                                        self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                    return self.interface_program_rate

                                if (child_yang_name == "port-shaper-rate"):
                                    if (self.port_shaper_rate is None):
                                        self.port_shaper_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters.PortShaperRate()
                                        self.port_shaper_rate.parent = self
                                        self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                    return self.port_shaper_rate

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "interface-config-rate" or name == "interface-program-rate" or name == "port-shaper-rate"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class SkywarpQosPolicyClass(Entity):
                            """
                            Skywarp QoS policy class details
                            
                            .. attribute:: qos_show_pclass_st
                            
                            	qos show pclass st
                            	**type**\: list of    :py:class:`QosShowPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass, self).__init__()

                                self.yang_name = "skywarp-qos-policy-class"
                                self.yang_parent_name = "output"

                                self.qos_show_pclass_st = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass, self).__setattr__(name, value)


                            class QosShowPclassSt(Entity):
                                """
                                qos show pclass st
                                
                                .. attribute:: class_level
                                
                                	Class level
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: class_name
                                
                                	Class name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                .. attribute:: marking
                                
                                	QoS Mark parameters
                                	**type**\:   :py:class:`Marking <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking>`
                                
                                .. attribute:: police
                                
                                	QoS Policer parameters
                                	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police>`
                                
                                .. attribute:: queue
                                
                                	QoS Queue parameters
                                	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Queue>`
                                
                                .. attribute:: shape
                                
                                	QoS EA Shaper parameters
                                	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape>`
                                
                                .. attribute:: wfq
                                
                                	QoS WFQ parameters
                                	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt, self).__init__()

                                    self.yang_name = "qos-show-pclass-st"
                                    self.yang_parent_name = "skywarp-qos-policy-class"

                                    self.class_level = YLeaf(YType.uint8, "class-level")

                                    self.class_name = YLeaf(YType.str, "class-name")

                                    self.marking = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                    self.marking.parent = self
                                    self._children_name_map["marking"] = "marking"
                                    self._children_yang_names.add("marking")

                                    self.police = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                    self.police.parent = self
                                    self._children_name_map["police"] = "police"
                                    self._children_yang_names.add("police")

                                    self.queue = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                    self.queue.parent = self
                                    self._children_name_map["queue"] = "queue"
                                    self._children_yang_names.add("queue")

                                    self.shape = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                    self.shape.parent = self
                                    self._children_name_map["shape"] = "shape"
                                    self._children_yang_names.add("shape")

                                    self.wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                    self.wfq.parent = self
                                    self._children_name_map["wfq"] = "wfq"
                                    self._children_yang_names.add("wfq")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("class_level",
                                                    "class_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)


                                class Queue(Entity):
                                    """
                                    QoS Queue parameters
                                    
                                    .. attribute:: queue_id
                                    
                                    	Queue ID
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: queue_type
                                    
                                    	Queue Type
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__init__()

                                        self.yang_name = "queue"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.queue_id = YLeaf(YType.uint32, "queue-id")

                                        self.queue_type = YLeaf(YType.str, "queue-type")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("queue_id",
                                                        "queue_type") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.queue_id.is_set or
                                            self.queue_type.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.queue_id.yfilter != YFilter.not_set or
                                            self.queue_type.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "queue" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.queue_id.get_name_leafdata())
                                        if (self.queue_type.is_set or self.queue_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.queue_type.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "queue-id" or name == "queue-type"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "queue-id"):
                                            self.queue_id = value
                                            self.queue_id.value_namespace = name_space
                                            self.queue_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "queue-type"):
                                            self.queue_type = value
                                            self.queue_type.value_namespace = name_space
                                            self.queue_type.value_namespace_prefix = name_space_prefix


                                class Shape(Entity):
                                    """
                                    QoS EA Shaper parameters
                                    
                                    .. attribute:: pbs
                                    
                                    	PBS in bytes
                                    	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs>`
                                    
                                    .. attribute:: pir
                                    
                                    	PIR in kbps
                                    	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape, self).__init__()

                                        self.yang_name = "shape"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.pbs = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                        self.pbs.parent = self
                                        self._children_name_map["pbs"] = "pbs"
                                        self._children_yang_names.add("pbs")

                                        self.pir = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                        self.pir.parent = self
                                        self._children_name_map["pir"] = "pir"
                                        self._children_yang_names.add("pir")


                                    class Pir(Entity):
                                        """
                                        PIR in kbps
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__init__()

                                            self.yang_name = "pir"
                                            self.yang_parent_name = "shape"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "pir" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class Pbs(Entity):
                                        """
                                        PBS in bytes
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__init__()

                                            self.yang_name = "pbs"
                                            self.yang_parent_name = "shape"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "pbs" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.pbs is not None and self.pbs.has_data()) or
                                            (self.pir is not None and self.pir.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.pbs is not None and self.pbs.has_operation()) or
                                            (self.pir is not None and self.pir.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "shape" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "pbs"):
                                            if (self.pbs is None):
                                                self.pbs = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                                self.pbs.parent = self
                                                self._children_name_map["pbs"] = "pbs"
                                            return self.pbs

                                        if (child_yang_name == "pir"):
                                            if (self.pir is None):
                                                self.pir = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                                self.pir.parent = self
                                                self._children_name_map["pir"] = "pir"
                                            return self.pir

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "pbs" or name == "pir"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass


                                class Wfq(Entity):
                                    """
                                    QoS WFQ parameters
                                    
                                    .. attribute:: committed_weight
                                    
                                    	Committed Weight
                                    	**type**\:   :py:class:`CommittedWeight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight>`
                                    
                                    .. attribute:: excess_weight
                                    
                                    	Excess Weight
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: programmed_wfq
                                    
                                    	QoS Programmed WFQ parameters
                                    	**type**\:   :py:class:`ProgrammedWfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__init__()

                                        self.yang_name = "wfq"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.excess_weight = YLeaf(YType.uint16, "excess-weight")

                                        self.committed_weight = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                        self.committed_weight.parent = self
                                        self._children_name_map["committed_weight"] = "committed-weight"
                                        self._children_yang_names.add("committed-weight")

                                        self.programmed_wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                        self.programmed_wfq.parent = self
                                        self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                        self._children_yang_names.add("programmed-wfq")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("excess_weight") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)


                                    class CommittedWeight(Entity):
                                        """
                                        Committed Weight
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__init__()

                                            self.yang_name = "committed-weight"
                                            self.yang_parent_name = "wfq"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "committed-weight" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class ProgrammedWfq(Entity):
                                        """
                                        QoS Programmed WFQ parameters
                                        
                                        .. attribute:: bandwidth
                                        
                                        	Bandwidth
                                        	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth>`
                                        
                                        .. attribute:: excess_ratio
                                        
                                        	Excess Ratio
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: sum_of_bandwidth
                                        
                                        	Sum of Bandwidth
                                        	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__init__()

                                            self.yang_name = "programmed-wfq"
                                            self.yang_parent_name = "wfq"

                                            self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                            self.bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                            self.bandwidth.parent = self
                                            self._children_name_map["bandwidth"] = "bandwidth"
                                            self._children_yang_names.add("bandwidth")

                                            self.sum_of_bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                            self.sum_of_bandwidth.parent = self
                                            self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                            self._children_yang_names.add("sum-of-bandwidth")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("excess_ratio") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)


                                        class Bandwidth(Entity):
                                            """
                                            Bandwidth
                                            
                                            .. attribute:: unit
                                            
                                            	Config unit
                                            	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                            
                                            .. attribute:: value
                                            
                                            	Config value
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__init__()

                                                self.yang_name = "bandwidth"
                                                self.yang_parent_name = "programmed-wfq"

                                                self.unit = YLeaf(YType.enumeration, "unit")

                                                self.value = YLeaf(YType.uint32, "value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("unit",
                                                                "value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.unit.is_set or
                                                    self.value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.unit.yfilter != YFilter.not_set or
                                                    self.value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "bandwidth" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unit.get_name_leafdata())
                                                if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "unit" or name == "value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "unit"):
                                                    self.unit = value
                                                    self.unit.value_namespace = name_space
                                                    self.unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "value"):
                                                    self.value = value
                                                    self.value.value_namespace = name_space
                                                    self.value.value_namespace_prefix = name_space_prefix


                                        class SumOfBandwidth(Entity):
                                            """
                                            Sum of Bandwidth
                                            
                                            .. attribute:: unit
                                            
                                            	Config unit
                                            	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                            
                                            .. attribute:: value
                                            
                                            	Config value
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__init__()

                                                self.yang_name = "sum-of-bandwidth"
                                                self.yang_parent_name = "programmed-wfq"

                                                self.unit = YLeaf(YType.enumeration, "unit")

                                                self.value = YLeaf(YType.uint32, "value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("unit",
                                                                "value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.unit.is_set or
                                                    self.value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.unit.yfilter != YFilter.not_set or
                                                    self.value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "sum-of-bandwidth" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unit.get_name_leafdata())
                                                if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "unit" or name == "value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "unit"):
                                                    self.unit = value
                                                    self.unit.value_namespace = name_space
                                                    self.unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "value"):
                                                    self.value = value
                                                    self.value.value_namespace = name_space
                                                    self.value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.excess_ratio.is_set or
                                                (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.excess_ratio.yfilter != YFilter.not_set or
                                                (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "programmed-wfq" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "bandwidth"):
                                                if (self.bandwidth is None):
                                                    self.bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                                    self.bandwidth.parent = self
                                                    self._children_name_map["bandwidth"] = "bandwidth"
                                                return self.bandwidth

                                            if (child_yang_name == "sum-of-bandwidth"):
                                                if (self.sum_of_bandwidth is None):
                                                    self.sum_of_bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                                    self.sum_of_bandwidth.parent = self
                                                    self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                return self.sum_of_bandwidth

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "excess-ratio"):
                                                self.excess_ratio = value
                                                self.excess_ratio.value_namespace = name_space
                                                self.excess_ratio.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.excess_weight.is_set or
                                            (self.committed_weight is not None and self.committed_weight.has_data()) or
                                            (self.programmed_wfq is not None and self.programmed_wfq.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.excess_weight.yfilter != YFilter.not_set or
                                            (self.committed_weight is not None and self.committed_weight.has_operation()) or
                                            (self.programmed_wfq is not None and self.programmed_wfq.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "wfq" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.excess_weight.is_set or self.excess_weight.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.excess_weight.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "committed-weight"):
                                            if (self.committed_weight is None):
                                                self.committed_weight = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                                self.committed_weight.parent = self
                                                self._children_name_map["committed_weight"] = "committed-weight"
                                            return self.committed_weight

                                        if (child_yang_name == "programmed-wfq"):
                                            if (self.programmed_wfq is None):
                                                self.programmed_wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                                self.programmed_wfq.parent = self
                                                self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                            return self.programmed_wfq

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "committed-weight" or name == "programmed-wfq" or name == "excess-weight"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "excess-weight"):
                                            self.excess_weight = value
                                            self.excess_weight.value_namespace = name_space
                                            self.excess_weight.value_namespace_prefix = name_space_prefix


                                class Police(Entity):
                                    """
                                    QoS Policer parameters
                                    
                                    .. attribute:: cbs
                                    
                                    	CBS
                                    	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs>`
                                    
                                    .. attribute:: cir
                                    
                                    	CIR
                                    	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir>`
                                    
                                    .. attribute:: policer_id
                                    
                                    	policer ID
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: policer_type
                                    
                                    	Policer type
                                    	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__init__()

                                        self.yang_name = "police"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.policer_id = YLeaf(YType.uint32, "policer-id")

                                        self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                        self.cbs = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                        self.cbs.parent = self
                                        self._children_name_map["cbs"] = "cbs"
                                        self._children_yang_names.add("cbs")

                                        self.cir = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                        self.cir.parent = self
                                        self._children_name_map["cir"] = "cir"
                                        self._children_yang_names.add("cir")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("policer_id",
                                                        "policer_type") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)


                                    class Cir(Entity):
                                        """
                                        CIR
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__init__()

                                            self.yang_name = "cir"
                                            self.yang_parent_name = "police"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "cir" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class Cbs(Entity):
                                        """
                                        CBS
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__init__()

                                            self.yang_name = "cbs"
                                            self.yang_parent_name = "police"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "cbs" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.policer_id.is_set or
                                            self.policer_type.is_set or
                                            (self.cbs is not None and self.cbs.has_data()) or
                                            (self.cir is not None and self.cir.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.policer_id.yfilter != YFilter.not_set or
                                            self.policer_type.yfilter != YFilter.not_set or
                                            (self.cbs is not None and self.cbs.has_operation()) or
                                            (self.cir is not None and self.cir.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "police" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.policer_id.is_set or self.policer_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policer_id.get_name_leafdata())
                                        if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policer_type.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "cbs"):
                                            if (self.cbs is None):
                                                self.cbs = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                                self.cbs.parent = self
                                                self._children_name_map["cbs"] = "cbs"
                                            return self.cbs

                                        if (child_yang_name == "cir"):
                                            if (self.cir is None):
                                                self.cir = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                                self.cir.parent = self
                                                self._children_name_map["cir"] = "cir"
                                            return self.cir

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "cbs" or name == "cir" or name == "policer-id" or name == "policer-type"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "policer-id"):
                                            self.policer_id = value
                                            self.policer_id.value_namespace = name_space
                                            self.policer_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "policer-type"):
                                            self.policer_type = value
                                            self.policer_type.value_namespace = name_space
                                            self.policer_type.value_namespace_prefix = name_space_prefix


                                class Marking(Entity):
                                    """
                                    QoS Mark parameters
                                    
                                    .. attribute:: mark_only
                                    
                                    	Mark Only
                                    	**type**\:   :py:class:`MarkOnly <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly>`
                                    
                                    .. attribute:: police_conform
                                    
                                    	Police conform mark
                                    	**type**\:   :py:class:`PoliceConform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform>`
                                    
                                    .. attribute:: police_exceed
                                    
                                    	Police exceed mark
                                    	**type**\:   :py:class:`PoliceExceed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking, self).__init__()

                                        self.yang_name = "marking"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.mark_only = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                        self.mark_only.parent = self
                                        self._children_name_map["mark_only"] = "mark-only"
                                        self._children_yang_names.add("mark-only")

                                        self.police_conform = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                        self.police_conform.parent = self
                                        self._children_name_map["police_conform"] = "police-conform"
                                        self._children_yang_names.add("police-conform")

                                        self.police_exceed = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                        self.police_exceed.parent = self
                                        self._children_name_map["police_exceed"] = "police-exceed"
                                        self._children_yang_names.add("police-exceed")


                                    class MarkOnly(Entity):
                                        """
                                        Mark Only
                                        
                                        .. attribute:: action_type
                                        
                                        	Action type
                                        	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                        
                                        .. attribute:: mark_detail
                                        
                                        	Mark value
                                        	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__init__()

                                            self.yang_name = "mark-only"
                                            self.yang_parent_name = "marking"

                                            self.action_type = YLeaf(YType.enumeration, "action-type")

                                            self.mark_detail = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)


                                        class MarkDetail(Entity):
                                            """
                                            Mark value
                                            
                                            .. attribute:: action_opcode
                                            
                                            	Action opcode
                                            	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                            
                                            .. attribute:: mark_value
                                            
                                            	Mark value
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__init__()

                                                self.yang_name = "mark-detail"
                                                self.yang_parent_name = "mark-only"

                                                self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                self.mark_value = YLeaf(YType.uint8, "mark-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("action_opcode",
                                                                "mark_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.action_opcode.is_set or
                                                    self.mark_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.action_opcode.yfilter != YFilter.not_set or
                                                    self.mark_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "mark-detail" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "action-opcode" or name == "mark-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "action-opcode"):
                                                    self.action_opcode = value
                                                    self.action_opcode.value_namespace = name_space
                                                    self.action_opcode.value_namespace_prefix = name_space_prefix
                                                if(value_path == "mark-value"):
                                                    self.mark_value = value
                                                    self.mark_value.value_namespace = name_space
                                                    self.mark_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.mark_detail:
                                                if (c.has_data()):
                                                    return True
                                            return self.action_type.is_set

                                        def has_operation(self):
                                            for c in self.mark_detail:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action_type.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "mark-only" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "mark-detail"):
                                                for c in self.mark_detail:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.mark_detail.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "mark-detail" or name == "action-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action-type"):
                                                self.action_type = value
                                                self.action_type.value_namespace = name_space
                                                self.action_type.value_namespace_prefix = name_space_prefix


                                    class PoliceConform(Entity):
                                        """
                                        Police conform mark
                                        
                                        .. attribute:: action_type
                                        
                                        	Action type
                                        	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                        
                                        .. attribute:: mark_detail
                                        
                                        	Mark value
                                        	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__init__()

                                            self.yang_name = "police-conform"
                                            self.yang_parent_name = "marking"

                                            self.action_type = YLeaf(YType.enumeration, "action-type")

                                            self.mark_detail = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)


                                        class MarkDetail(Entity):
                                            """
                                            Mark value
                                            
                                            .. attribute:: action_opcode
                                            
                                            	Action opcode
                                            	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                            
                                            .. attribute:: mark_value
                                            
                                            	Mark value
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__init__()

                                                self.yang_name = "mark-detail"
                                                self.yang_parent_name = "police-conform"

                                                self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                self.mark_value = YLeaf(YType.uint8, "mark-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("action_opcode",
                                                                "mark_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.action_opcode.is_set or
                                                    self.mark_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.action_opcode.yfilter != YFilter.not_set or
                                                    self.mark_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "mark-detail" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "action-opcode" or name == "mark-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "action-opcode"):
                                                    self.action_opcode = value
                                                    self.action_opcode.value_namespace = name_space
                                                    self.action_opcode.value_namespace_prefix = name_space_prefix
                                                if(value_path == "mark-value"):
                                                    self.mark_value = value
                                                    self.mark_value.value_namespace = name_space
                                                    self.mark_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.mark_detail:
                                                if (c.has_data()):
                                                    return True
                                            return self.action_type.is_set

                                        def has_operation(self):
                                            for c in self.mark_detail:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action_type.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "police-conform" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "mark-detail"):
                                                for c in self.mark_detail:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.mark_detail.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "mark-detail" or name == "action-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action-type"):
                                                self.action_type = value
                                                self.action_type.value_namespace = name_space
                                                self.action_type.value_namespace_prefix = name_space_prefix


                                    class PoliceExceed(Entity):
                                        """
                                        Police exceed mark
                                        
                                        .. attribute:: action_type
                                        
                                        	Action type
                                        	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                        
                                        .. attribute:: mark_detail
                                        
                                        	Mark value
                                        	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__init__()

                                            self.yang_name = "police-exceed"
                                            self.yang_parent_name = "marking"

                                            self.action_type = YLeaf(YType.enumeration, "action-type")

                                            self.mark_detail = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)


                                        class MarkDetail(Entity):
                                            """
                                            Mark value
                                            
                                            .. attribute:: action_opcode
                                            
                                            	Action opcode
                                            	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                            
                                            .. attribute:: mark_value
                                            
                                            	Mark value
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__init__()

                                                self.yang_name = "mark-detail"
                                                self.yang_parent_name = "police-exceed"

                                                self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                self.mark_value = YLeaf(YType.uint8, "mark-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("action_opcode",
                                                                "mark_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.action_opcode.is_set or
                                                    self.mark_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.action_opcode.yfilter != YFilter.not_set or
                                                    self.mark_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "mark-detail" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "action-opcode" or name == "mark-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "action-opcode"):
                                                    self.action_opcode = value
                                                    self.action_opcode.value_namespace = name_space
                                                    self.action_opcode.value_namespace_prefix = name_space_prefix
                                                if(value_path == "mark-value"):
                                                    self.mark_value = value
                                                    self.mark_value.value_namespace = name_space
                                                    self.mark_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.mark_detail:
                                                if (c.has_data()):
                                                    return True
                                            return self.action_type.is_set

                                        def has_operation(self):
                                            for c in self.mark_detail:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action_type.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "police-exceed" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "mark-detail"):
                                                for c in self.mark_detail:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.mark_detail.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "mark-detail" or name == "action-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action-type"):
                                                self.action_type = value
                                                self.action_type.value_namespace = name_space
                                                self.action_type.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.mark_only is not None and self.mark_only.has_data()) or
                                            (self.police_conform is not None and self.police_conform.has_data()) or
                                            (self.police_exceed is not None and self.police_exceed.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.mark_only is not None and self.mark_only.has_operation()) or
                                            (self.police_conform is not None and self.police_conform.has_operation()) or
                                            (self.police_exceed is not None and self.police_exceed.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "marking" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "mark-only"):
                                            if (self.mark_only is None):
                                                self.mark_only = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                                self.mark_only.parent = self
                                                self._children_name_map["mark_only"] = "mark-only"
                                            return self.mark_only

                                        if (child_yang_name == "police-conform"):
                                            if (self.police_conform is None):
                                                self.police_conform = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                                self.police_conform.parent = self
                                                self._children_name_map["police_conform"] = "police-conform"
                                            return self.police_conform

                                        if (child_yang_name == "police-exceed"):
                                            if (self.police_exceed is None):
                                                self.police_exceed = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                                self.police_exceed.parent = self
                                                self._children_name_map["police_exceed"] = "police-exceed"
                                            return self.police_exceed

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "mark-only" or name == "police-conform" or name == "police-exceed"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (
                                        self.class_level.is_set or
                                        self.class_name.is_set or
                                        (self.marking is not None and self.marking.has_data()) or
                                        (self.police is not None and self.police.has_data()) or
                                        (self.queue is not None and self.queue.has_data()) or
                                        (self.shape is not None and self.shape.has_data()) or
                                        (self.wfq is not None and self.wfq.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.class_level.yfilter != YFilter.not_set or
                                        self.class_name.yfilter != YFilter.not_set or
                                        (self.marking is not None and self.marking.has_operation()) or
                                        (self.police is not None and self.police.has_operation()) or
                                        (self.queue is not None and self.queue.has_operation()) or
                                        (self.shape is not None and self.shape.has_operation()) or
                                        (self.wfq is not None and self.wfq.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "qos-show-pclass-st" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.class_level.get_name_leafdata())
                                    if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.class_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "marking"):
                                        if (self.marking is None):
                                            self.marking = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                            self.marking.parent = self
                                            self._children_name_map["marking"] = "marking"
                                        return self.marking

                                    if (child_yang_name == "police"):
                                        if (self.police is None):
                                            self.police = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                        return self.police

                                    if (child_yang_name == "queue"):
                                        if (self.queue is None):
                                            self.queue = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                            self.queue.parent = self
                                            self._children_name_map["queue"] = "queue"
                                        return self.queue

                                    if (child_yang_name == "shape"):
                                        if (self.shape is None):
                                            self.shape = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                            self.shape.parent = self
                                            self._children_name_map["shape"] = "shape"
                                        return self.shape

                                    if (child_yang_name == "wfq"):
                                        if (self.wfq is None):
                                            self.wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                            self.wfq.parent = self
                                            self._children_name_map["wfq"] = "wfq"
                                        return self.wfq

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "marking" or name == "police" or name == "queue" or name == "shape" or name == "wfq" or name == "class-level" or name == "class-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "class-level"):
                                        self.class_level = value
                                        self.class_level.value_namespace = name_space
                                        self.class_level.value_namespace_prefix = name_space_prefix
                                    if(value_path == "class-name"):
                                        self.class_name = value
                                        self.class_name.value_namespace = name_space
                                        self.class_name.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.qos_show_pclass_st:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.qos_show_pclass_st:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "skywarp-qos-policy-class" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "qos-show-pclass-st"):
                                    for c in self.qos_show_pclass_st:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass.QosShowPclassSt()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.qos_show_pclass_st.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "qos-show-pclass-st"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                (self.header is not None and self.header.has_data()) or
                                (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.header is not None and self.header.has_operation()) or
                                (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "header"):
                                if (self.header is None):
                                    self.header = PlatformQos.Nodes.Node.Interfaces.Interface.Output.Header()
                                    self.header.parent = self
                                    self._children_name_map["header"] = "header"
                                return self.header

                            if (child_yang_name == "interface-parameters"):
                                if (self.interface_parameters is None):
                                    self.interface_parameters = PlatformQos.Nodes.Node.Interfaces.Interface.Output.InterfaceParameters()
                                    self.interface_parameters.parent = self
                                    self._children_name_map["interface_parameters"] = "interface-parameters"
                                return self.interface_parameters

                            if (child_yang_name == "skywarp-qos-policy-class"):
                                if (self.skywarp_qos_policy_class is None):
                                    self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.Interfaces.Interface.Output.SkywarpQosPolicyClass()
                                    self.skywarp_qos_policy_class.parent = self
                                    self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                return self.skywarp_qos_policy_class

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Input(Entity):
                        """
                        QoS policy direction ingress
                        
                        .. attribute:: header
                        
                        	QoS EA policy header
                        	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.Header>`
                        
                        .. attribute:: interface_parameters
                        
                        	QoS Interface Parameters
                        	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters>`
                        
                        .. attribute:: skywarp_qos_policy_class
                        
                        	Skywarp QoS policy class details
                        	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass>`
                        
                        

                        """

                        _prefix = 'skp-qos-oper'
                        _revision = '2016-02-18'

                        def __init__(self):
                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input, self).__init__()

                            self.yang_name = "input"
                            self.yang_parent_name = "interface"

                            self.header = PlatformQos.Nodes.Node.Interfaces.Interface.Input.Header()
                            self.header.parent = self
                            self._children_name_map["header"] = "header"
                            self._children_yang_names.add("header")

                            self.interface_parameters = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters()
                            self.interface_parameters.parent = self
                            self._children_name_map["interface_parameters"] = "interface-parameters"
                            self._children_yang_names.add("interface-parameters")

                            self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass()
                            self.skywarp_qos_policy_class.parent = self
                            self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                            self._children_yang_names.add("skywarp-qos-policy-class")


                        class Header(Entity):
                            """
                            QoS EA policy header
                            
                            .. attribute:: classes
                            
                            	Number of classes
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: direction
                            
                            	Direction
                            	**type**\:  str
                            
                            	**length:** 0..11
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            	**length:** 0..101
                            
                            .. attribute:: policy_name
                            
                            	Policy name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.Header, self).__init__()

                                self.yang_name = "header"
                                self.yang_parent_name = "input"

                                self.classes = YLeaf(YType.uint16, "classes")

                                self.direction = YLeaf(YType.str, "direction")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.policy_name = YLeaf(YType.str, "policy-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("classes",
                                                "direction",
                                                "interface_name",
                                                "policy_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.Header, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.Header, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.classes.is_set or
                                    self.direction.is_set or
                                    self.interface_name.is_set or
                                    self.policy_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.classes.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.policy_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "header" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.classes.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.policy_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "classes"):
                                    self.classes = value
                                    self.classes.value_namespace = name_space
                                    self.classes.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "policy-name"):
                                    self.policy_name = value
                                    self.policy_name.value_namespace = name_space
                                    self.policy_name.value_namespace_prefix = name_space_prefix


                        class InterfaceParameters(Entity):
                            """
                            QoS Interface Parameters
                            
                            .. attribute:: interface_config_rate
                            
                            	Interface Configured Rate
                            	**type**\:   :py:class:`InterfaceConfigRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceConfigRate>`
                            
                            .. attribute:: interface_program_rate
                            
                            	Interface Programmed Rate
                            	**type**\:   :py:class:`InterfaceProgramRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceProgramRate>`
                            
                            .. attribute:: port_shaper_rate
                            
                            	Port Shaper Rate
                            	**type**\:   :py:class:`PortShaperRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.PortShaperRate>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters, self).__init__()

                                self.yang_name = "interface-parameters"
                                self.yang_parent_name = "input"

                                self.interface_config_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceConfigRate()
                                self.interface_config_rate.parent = self
                                self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                self._children_yang_names.add("interface-config-rate")

                                self.interface_program_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceProgramRate()
                                self.interface_program_rate.parent = self
                                self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                self._children_yang_names.add("interface-program-rate")

                                self.port_shaper_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.PortShaperRate()
                                self.port_shaper_rate.parent = self
                                self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                self._children_yang_names.add("port-shaper-rate")


                            class InterfaceConfigRate(Entity):
                                """
                                Interface Configured Rate
                                
                                .. attribute:: unit
                                
                                	Config unit
                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                
                                .. attribute:: value
                                
                                	Config value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceConfigRate, self).__init__()

                                    self.yang_name = "interface-config-rate"
                                    self.yang_parent_name = "interface-parameters"

                                    self.unit = YLeaf(YType.enumeration, "unit")

                                    self.value = YLeaf(YType.uint32, "value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("unit",
                                                    "value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceConfigRate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.unit.is_set or
                                        self.value.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.unit.yfilter != YFilter.not_set or
                                        self.value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-config-rate" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "unit" or name == "value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "unit"):
                                        self.unit = value
                                        self.unit.value_namespace = name_space
                                        self.unit.value_namespace_prefix = name_space_prefix
                                    if(value_path == "value"):
                                        self.value = value
                                        self.value.value_namespace = name_space
                                        self.value.value_namespace_prefix = name_space_prefix


                            class InterfaceProgramRate(Entity):
                                """
                                Interface Programmed Rate
                                
                                .. attribute:: unit
                                
                                	Config unit
                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                
                                .. attribute:: value
                                
                                	Config value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceProgramRate, self).__init__()

                                    self.yang_name = "interface-program-rate"
                                    self.yang_parent_name = "interface-parameters"

                                    self.unit = YLeaf(YType.enumeration, "unit")

                                    self.value = YLeaf(YType.uint32, "value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("unit",
                                                    "value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceProgramRate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.unit.is_set or
                                        self.value.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.unit.yfilter != YFilter.not_set or
                                        self.value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-program-rate" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "unit" or name == "value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "unit"):
                                        self.unit = value
                                        self.unit.value_namespace = name_space
                                        self.unit.value_namespace_prefix = name_space_prefix
                                    if(value_path == "value"):
                                        self.value = value
                                        self.value.value_namespace = name_space
                                        self.value.value_namespace_prefix = name_space_prefix


                            class PortShaperRate(Entity):
                                """
                                Port Shaper Rate
                                
                                .. attribute:: unit
                                
                                	Config unit
                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                
                                .. attribute:: value
                                
                                	Config value
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.PortShaperRate, self).__init__()

                                    self.yang_name = "port-shaper-rate"
                                    self.yang_parent_name = "interface-parameters"

                                    self.unit = YLeaf(YType.enumeration, "unit")

                                    self.value = YLeaf(YType.uint32, "value")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("unit",
                                                    "value") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.PortShaperRate, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.unit.is_set or
                                        self.value.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.unit.yfilter != YFilter.not_set or
                                        self.value.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "port-shaper-rate" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.value.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "unit" or name == "value"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "unit"):
                                        self.unit = value
                                        self.unit.value_namespace = name_space
                                        self.unit.value_namespace_prefix = name_space_prefix
                                    if(value_path == "value"):
                                        self.value = value
                                        self.value.value_namespace = name_space
                                        self.value.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.interface_config_rate is not None and self.interface_config_rate.has_data()) or
                                    (self.interface_program_rate is not None and self.interface_program_rate.has_data()) or
                                    (self.port_shaper_rate is not None and self.port_shaper_rate.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.interface_config_rate is not None and self.interface_config_rate.has_operation()) or
                                    (self.interface_program_rate is not None and self.interface_program_rate.has_operation()) or
                                    (self.port_shaper_rate is not None and self.port_shaper_rate.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "interface-parameters" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "interface-config-rate"):
                                    if (self.interface_config_rate is None):
                                        self.interface_config_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceConfigRate()
                                        self.interface_config_rate.parent = self
                                        self._children_name_map["interface_config_rate"] = "interface-config-rate"
                                    return self.interface_config_rate

                                if (child_yang_name == "interface-program-rate"):
                                    if (self.interface_program_rate is None):
                                        self.interface_program_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.InterfaceProgramRate()
                                        self.interface_program_rate.parent = self
                                        self._children_name_map["interface_program_rate"] = "interface-program-rate"
                                    return self.interface_program_rate

                                if (child_yang_name == "port-shaper-rate"):
                                    if (self.port_shaper_rate is None):
                                        self.port_shaper_rate = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters.PortShaperRate()
                                        self.port_shaper_rate.parent = self
                                        self._children_name_map["port_shaper_rate"] = "port-shaper-rate"
                                    return self.port_shaper_rate

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "interface-config-rate" or name == "interface-program-rate" or name == "port-shaper-rate"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class SkywarpQosPolicyClass(Entity):
                            """
                            Skywarp QoS policy class details
                            
                            .. attribute:: qos_show_pclass_st
                            
                            	qos show pclass st
                            	**type**\: list of    :py:class:`QosShowPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass, self).__init__()

                                self.yang_name = "skywarp-qos-policy-class"
                                self.yang_parent_name = "input"

                                self.qos_show_pclass_st = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass, self).__setattr__(name, value)


                            class QosShowPclassSt(Entity):
                                """
                                qos show pclass st
                                
                                .. attribute:: class_level
                                
                                	Class level
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: class_name
                                
                                	Class name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                .. attribute:: marking
                                
                                	QoS Mark parameters
                                	**type**\:   :py:class:`Marking <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking>`
                                
                                .. attribute:: police
                                
                                	QoS Policer parameters
                                	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police>`
                                
                                .. attribute:: queue
                                
                                	QoS Queue parameters
                                	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Queue>`
                                
                                .. attribute:: shape
                                
                                	QoS EA Shaper parameters
                                	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape>`
                                
                                .. attribute:: wfq
                                
                                	QoS WFQ parameters
                                	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt, self).__init__()

                                    self.yang_name = "qos-show-pclass-st"
                                    self.yang_parent_name = "skywarp-qos-policy-class"

                                    self.class_level = YLeaf(YType.uint8, "class-level")

                                    self.class_name = YLeaf(YType.str, "class-name")

                                    self.marking = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                    self.marking.parent = self
                                    self._children_name_map["marking"] = "marking"
                                    self._children_yang_names.add("marking")

                                    self.police = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                    self.police.parent = self
                                    self._children_name_map["police"] = "police"
                                    self._children_yang_names.add("police")

                                    self.queue = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                    self.queue.parent = self
                                    self._children_name_map["queue"] = "queue"
                                    self._children_yang_names.add("queue")

                                    self.shape = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                    self.shape.parent = self
                                    self._children_name_map["shape"] = "shape"
                                    self._children_yang_names.add("shape")

                                    self.wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                    self.wfq.parent = self
                                    self._children_name_map["wfq"] = "wfq"
                                    self._children_yang_names.add("wfq")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("class_level",
                                                    "class_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt, self).__setattr__(name, value)


                                class Queue(Entity):
                                    """
                                    QoS Queue parameters
                                    
                                    .. attribute:: queue_id
                                    
                                    	Queue ID
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: queue_type
                                    
                                    	Queue Type
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__init__()

                                        self.yang_name = "queue"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.queue_id = YLeaf(YType.uint32, "queue-id")

                                        self.queue_type = YLeaf(YType.str, "queue-type")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("queue_id",
                                                        "queue_type") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Queue, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.queue_id.is_set or
                                            self.queue_type.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.queue_id.yfilter != YFilter.not_set or
                                            self.queue_type.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "queue" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.queue_id.get_name_leafdata())
                                        if (self.queue_type.is_set or self.queue_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.queue_type.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "queue-id" or name == "queue-type"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "queue-id"):
                                            self.queue_id = value
                                            self.queue_id.value_namespace = name_space
                                            self.queue_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "queue-type"):
                                            self.queue_type = value
                                            self.queue_type.value_namespace = name_space
                                            self.queue_type.value_namespace_prefix = name_space_prefix


                                class Shape(Entity):
                                    """
                                    QoS EA Shaper parameters
                                    
                                    .. attribute:: pbs
                                    
                                    	PBS in bytes
                                    	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs>`
                                    
                                    .. attribute:: pir
                                    
                                    	PIR in kbps
                                    	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape, self).__init__()

                                        self.yang_name = "shape"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.pbs = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                        self.pbs.parent = self
                                        self._children_name_map["pbs"] = "pbs"
                                        self._children_yang_names.add("pbs")

                                        self.pir = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                        self.pir.parent = self
                                        self._children_name_map["pir"] = "pir"
                                        self._children_yang_names.add("pir")


                                    class Pir(Entity):
                                        """
                                        PIR in kbps
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__init__()

                                            self.yang_name = "pir"
                                            self.yang_parent_name = "shape"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "pir" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class Pbs(Entity):
                                        """
                                        PBS in bytes
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__init__()

                                            self.yang_name = "pbs"
                                            self.yang_parent_name = "shape"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "pbs" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.pbs is not None and self.pbs.has_data()) or
                                            (self.pir is not None and self.pir.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.pbs is not None and self.pbs.has_operation()) or
                                            (self.pir is not None and self.pir.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "shape" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "pbs"):
                                            if (self.pbs is None):
                                                self.pbs = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pbs()
                                                self.pbs.parent = self
                                                self._children_name_map["pbs"] = "pbs"
                                            return self.pbs

                                        if (child_yang_name == "pir"):
                                            if (self.pir is None):
                                                self.pir = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape.Pir()
                                                self.pir.parent = self
                                                self._children_name_map["pir"] = "pir"
                                            return self.pir

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "pbs" or name == "pir"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass


                                class Wfq(Entity):
                                    """
                                    QoS WFQ parameters
                                    
                                    .. attribute:: committed_weight
                                    
                                    	Committed Weight
                                    	**type**\:   :py:class:`CommittedWeight <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight>`
                                    
                                    .. attribute:: excess_weight
                                    
                                    	Excess Weight
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: programmed_wfq
                                    
                                    	QoS Programmed WFQ parameters
                                    	**type**\:   :py:class:`ProgrammedWfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__init__()

                                        self.yang_name = "wfq"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.excess_weight = YLeaf(YType.uint16, "excess-weight")

                                        self.committed_weight = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                        self.committed_weight.parent = self
                                        self._children_name_map["committed_weight"] = "committed-weight"
                                        self._children_yang_names.add("committed-weight")

                                        self.programmed_wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                        self.programmed_wfq.parent = self
                                        self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                        self._children_yang_names.add("programmed-wfq")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("excess_weight") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq, self).__setattr__(name, value)


                                    class CommittedWeight(Entity):
                                        """
                                        Committed Weight
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__init__()

                                            self.yang_name = "committed-weight"
                                            self.yang_parent_name = "wfq"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "committed-weight" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class ProgrammedWfq(Entity):
                                        """
                                        QoS Programmed WFQ parameters
                                        
                                        .. attribute:: bandwidth
                                        
                                        	Bandwidth
                                        	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth>`
                                        
                                        .. attribute:: excess_ratio
                                        
                                        	Excess Ratio
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: sum_of_bandwidth
                                        
                                        	Sum of Bandwidth
                                        	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__init__()

                                            self.yang_name = "programmed-wfq"
                                            self.yang_parent_name = "wfq"

                                            self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                            self.bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                            self.bandwidth.parent = self
                                            self._children_name_map["bandwidth"] = "bandwidth"
                                            self._children_yang_names.add("bandwidth")

                                            self.sum_of_bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                            self.sum_of_bandwidth.parent = self
                                            self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                            self._children_yang_names.add("sum-of-bandwidth")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("excess_ratio") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq, self).__setattr__(name, value)


                                        class Bandwidth(Entity):
                                            """
                                            Bandwidth
                                            
                                            .. attribute:: unit
                                            
                                            	Config unit
                                            	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                            
                                            .. attribute:: value
                                            
                                            	Config value
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__init__()

                                                self.yang_name = "bandwidth"
                                                self.yang_parent_name = "programmed-wfq"

                                                self.unit = YLeaf(YType.enumeration, "unit")

                                                self.value = YLeaf(YType.uint32, "value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("unit",
                                                                "value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.unit.is_set or
                                                    self.value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.unit.yfilter != YFilter.not_set or
                                                    self.value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "bandwidth" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unit.get_name_leafdata())
                                                if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "unit" or name == "value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "unit"):
                                                    self.unit = value
                                                    self.unit.value_namespace = name_space
                                                    self.unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "value"):
                                                    self.value = value
                                                    self.value.value_namespace = name_space
                                                    self.value.value_namespace_prefix = name_space_prefix


                                        class SumOfBandwidth(Entity):
                                            """
                                            Sum of Bandwidth
                                            
                                            .. attribute:: unit
                                            
                                            	Config unit
                                            	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                            
                                            .. attribute:: value
                                            
                                            	Config value
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__init__()

                                                self.yang_name = "sum-of-bandwidth"
                                                self.yang_parent_name = "programmed-wfq"

                                                self.unit = YLeaf(YType.enumeration, "unit")

                                                self.value = YLeaf(YType.uint32, "value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("unit",
                                                                "value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.unit.is_set or
                                                    self.value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.unit.yfilter != YFilter.not_set or
                                                    self.value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "sum-of-bandwidth" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.unit.get_name_leafdata())
                                                if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "unit" or name == "value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "unit"):
                                                    self.unit = value
                                                    self.unit.value_namespace = name_space
                                                    self.unit.value_namespace_prefix = name_space_prefix
                                                if(value_path == "value"):
                                                    self.value = value
                                                    self.value.value_namespace = name_space
                                                    self.value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.excess_ratio.is_set or
                                                (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.excess_ratio.yfilter != YFilter.not_set or
                                                (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "programmed-wfq" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "bandwidth"):
                                                if (self.bandwidth is None):
                                                    self.bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.Bandwidth()
                                                    self.bandwidth.parent = self
                                                    self._children_name_map["bandwidth"] = "bandwidth"
                                                return self.bandwidth

                                            if (child_yang_name == "sum-of-bandwidth"):
                                                if (self.sum_of_bandwidth is None):
                                                    self.sum_of_bandwidth = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq.SumOfBandwidth()
                                                    self.sum_of_bandwidth.parent = self
                                                    self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                return self.sum_of_bandwidth

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "excess-ratio"):
                                                self.excess_ratio = value
                                                self.excess_ratio.value_namespace = name_space
                                                self.excess_ratio.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.excess_weight.is_set or
                                            (self.committed_weight is not None and self.committed_weight.has_data()) or
                                            (self.programmed_wfq is not None and self.programmed_wfq.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.excess_weight.yfilter != YFilter.not_set or
                                            (self.committed_weight is not None and self.committed_weight.has_operation()) or
                                            (self.programmed_wfq is not None and self.programmed_wfq.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "wfq" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.excess_weight.is_set or self.excess_weight.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.excess_weight.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "committed-weight"):
                                            if (self.committed_weight is None):
                                                self.committed_weight = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.CommittedWeight()
                                                self.committed_weight.parent = self
                                                self._children_name_map["committed_weight"] = "committed-weight"
                                            return self.committed_weight

                                        if (child_yang_name == "programmed-wfq"):
                                            if (self.programmed_wfq is None):
                                                self.programmed_wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq.ProgrammedWfq()
                                                self.programmed_wfq.parent = self
                                                self._children_name_map["programmed_wfq"] = "programmed-wfq"
                                            return self.programmed_wfq

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "committed-weight" or name == "programmed-wfq" or name == "excess-weight"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "excess-weight"):
                                            self.excess_weight = value
                                            self.excess_weight.value_namespace = name_space
                                            self.excess_weight.value_namespace_prefix = name_space_prefix


                                class Police(Entity):
                                    """
                                    QoS Policer parameters
                                    
                                    .. attribute:: cbs
                                    
                                    	CBS
                                    	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs>`
                                    
                                    .. attribute:: cir
                                    
                                    	CIR
                                    	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir>`
                                    
                                    .. attribute:: policer_id
                                    
                                    	policer ID
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: policer_type
                                    
                                    	Policer type
                                    	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__init__()

                                        self.yang_name = "police"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.policer_id = YLeaf(YType.uint32, "policer-id")

                                        self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                        self.cbs = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                        self.cbs.parent = self
                                        self._children_name_map["cbs"] = "cbs"
                                        self._children_yang_names.add("cbs")

                                        self.cir = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                        self.cir.parent = self
                                        self._children_name_map["cir"] = "cir"
                                        self._children_yang_names.add("cir")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("policer_id",
                                                        "policer_type") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police, self).__setattr__(name, value)


                                    class Cir(Entity):
                                        """
                                        CIR
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__init__()

                                            self.yang_name = "cir"
                                            self.yang_parent_name = "police"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "cir" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix


                                    class Cbs(Entity):
                                        """
                                        CBS
                                        
                                        .. attribute:: unit
                                        
                                        	Config unit
                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                        
                                        .. attribute:: value
                                        
                                        	Config value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__init__()

                                            self.yang_name = "cbs"
                                            self.yang_parent_name = "police"

                                            self.unit = YLeaf(YType.enumeration, "unit")

                                            self.value = YLeaf(YType.uint32, "value")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("unit",
                                                            "value") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.unit.is_set or
                                                self.value.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.unit.yfilter != YFilter.not_set or
                                                self.value.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "cbs" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.value.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "unit" or name == "value"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "unit"):
                                                self.unit = value
                                                self.unit.value_namespace = name_space
                                                self.unit.value_namespace_prefix = name_space_prefix
                                            if(value_path == "value"):
                                                self.value = value
                                                self.value.value_namespace = name_space
                                                self.value.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.policer_id.is_set or
                                            self.policer_type.is_set or
                                            (self.cbs is not None and self.cbs.has_data()) or
                                            (self.cir is not None and self.cir.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.policer_id.yfilter != YFilter.not_set or
                                            self.policer_type.yfilter != YFilter.not_set or
                                            (self.cbs is not None and self.cbs.has_operation()) or
                                            (self.cir is not None and self.cir.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "police" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.policer_id.is_set or self.policer_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policer_id.get_name_leafdata())
                                        if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policer_type.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "cbs"):
                                            if (self.cbs is None):
                                                self.cbs = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cbs()
                                                self.cbs.parent = self
                                                self._children_name_map["cbs"] = "cbs"
                                            return self.cbs

                                        if (child_yang_name == "cir"):
                                            if (self.cir is None):
                                                self.cir = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police.Cir()
                                                self.cir.parent = self
                                                self._children_name_map["cir"] = "cir"
                                            return self.cir

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "cbs" or name == "cir" or name == "policer-id" or name == "policer-type"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "policer-id"):
                                            self.policer_id = value
                                            self.policer_id.value_namespace = name_space
                                            self.policer_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "policer-type"):
                                            self.policer_type = value
                                            self.policer_type.value_namespace = name_space
                                            self.policer_type.value_namespace_prefix = name_space_prefix


                                class Marking(Entity):
                                    """
                                    QoS Mark parameters
                                    
                                    .. attribute:: mark_only
                                    
                                    	Mark Only
                                    	**type**\:   :py:class:`MarkOnly <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly>`
                                    
                                    .. attribute:: police_conform
                                    
                                    	Police conform mark
                                    	**type**\:   :py:class:`PoliceConform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform>`
                                    
                                    .. attribute:: police_exceed
                                    
                                    	Police exceed mark
                                    	**type**\:   :py:class:`PoliceExceed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking, self).__init__()

                                        self.yang_name = "marking"
                                        self.yang_parent_name = "qos-show-pclass-st"

                                        self.mark_only = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                        self.mark_only.parent = self
                                        self._children_name_map["mark_only"] = "mark-only"
                                        self._children_yang_names.add("mark-only")

                                        self.police_conform = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                        self.police_conform.parent = self
                                        self._children_name_map["police_conform"] = "police-conform"
                                        self._children_yang_names.add("police-conform")

                                        self.police_exceed = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                        self.police_exceed.parent = self
                                        self._children_name_map["police_exceed"] = "police-exceed"
                                        self._children_yang_names.add("police-exceed")


                                    class MarkOnly(Entity):
                                        """
                                        Mark Only
                                        
                                        .. attribute:: action_type
                                        
                                        	Action type
                                        	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                        
                                        .. attribute:: mark_detail
                                        
                                        	Mark value
                                        	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__init__()

                                            self.yang_name = "mark-only"
                                            self.yang_parent_name = "marking"

                                            self.action_type = YLeaf(YType.enumeration, "action-type")

                                            self.mark_detail = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly, self).__setattr__(name, value)


                                        class MarkDetail(Entity):
                                            """
                                            Mark value
                                            
                                            .. attribute:: action_opcode
                                            
                                            	Action opcode
                                            	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                            
                                            .. attribute:: mark_value
                                            
                                            	Mark value
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__init__()

                                                self.yang_name = "mark-detail"
                                                self.yang_parent_name = "mark-only"

                                                self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                self.mark_value = YLeaf(YType.uint8, "mark-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("action_opcode",
                                                                "mark_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.action_opcode.is_set or
                                                    self.mark_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.action_opcode.yfilter != YFilter.not_set or
                                                    self.mark_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "mark-detail" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "action-opcode" or name == "mark-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "action-opcode"):
                                                    self.action_opcode = value
                                                    self.action_opcode.value_namespace = name_space
                                                    self.action_opcode.value_namespace_prefix = name_space_prefix
                                                if(value_path == "mark-value"):
                                                    self.mark_value = value
                                                    self.mark_value.value_namespace = name_space
                                                    self.mark_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.mark_detail:
                                                if (c.has_data()):
                                                    return True
                                            return self.action_type.is_set

                                        def has_operation(self):
                                            for c in self.mark_detail:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action_type.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "mark-only" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "mark-detail"):
                                                for c in self.mark_detail:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly.MarkDetail()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.mark_detail.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "mark-detail" or name == "action-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action-type"):
                                                self.action_type = value
                                                self.action_type.value_namespace = name_space
                                                self.action_type.value_namespace_prefix = name_space_prefix


                                    class PoliceConform(Entity):
                                        """
                                        Police conform mark
                                        
                                        .. attribute:: action_type
                                        
                                        	Action type
                                        	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                        
                                        .. attribute:: mark_detail
                                        
                                        	Mark value
                                        	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__init__()

                                            self.yang_name = "police-conform"
                                            self.yang_parent_name = "marking"

                                            self.action_type = YLeaf(YType.enumeration, "action-type")

                                            self.mark_detail = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform, self).__setattr__(name, value)


                                        class MarkDetail(Entity):
                                            """
                                            Mark value
                                            
                                            .. attribute:: action_opcode
                                            
                                            	Action opcode
                                            	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                            
                                            .. attribute:: mark_value
                                            
                                            	Mark value
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__init__()

                                                self.yang_name = "mark-detail"
                                                self.yang_parent_name = "police-conform"

                                                self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                self.mark_value = YLeaf(YType.uint8, "mark-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("action_opcode",
                                                                "mark_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.action_opcode.is_set or
                                                    self.mark_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.action_opcode.yfilter != YFilter.not_set or
                                                    self.mark_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "mark-detail" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "action-opcode" or name == "mark-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "action-opcode"):
                                                    self.action_opcode = value
                                                    self.action_opcode.value_namespace = name_space
                                                    self.action_opcode.value_namespace_prefix = name_space_prefix
                                                if(value_path == "mark-value"):
                                                    self.mark_value = value
                                                    self.mark_value.value_namespace = name_space
                                                    self.mark_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.mark_detail:
                                                if (c.has_data()):
                                                    return True
                                            return self.action_type.is_set

                                        def has_operation(self):
                                            for c in self.mark_detail:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action_type.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "police-conform" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "mark-detail"):
                                                for c in self.mark_detail:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform.MarkDetail()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.mark_detail.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "mark-detail" or name == "action-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action-type"):
                                                self.action_type = value
                                                self.action_type.value_namespace = name_space
                                                self.action_type.value_namespace_prefix = name_space_prefix


                                    class PoliceExceed(Entity):
                                        """
                                        Police exceed mark
                                        
                                        .. attribute:: action_type
                                        
                                        	Action type
                                        	**type**\:   :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.Action>`
                                        
                                        .. attribute:: mark_detail
                                        
                                        	Mark value
                                        	**type**\: list of    :py:class:`MarkDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__init__()

                                            self.yang_name = "police-exceed"
                                            self.yang_parent_name = "marking"

                                            self.action_type = YLeaf(YType.enumeration, "action-type")

                                            self.mark_detail = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("action_type") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed, self).__setattr__(name, value)


                                        class MarkDetail(Entity):
                                            """
                                            Mark value
                                            
                                            .. attribute:: action_opcode
                                            
                                            	Action opcode
                                            	**type**\:   :py:class:`ActionOpcode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.ActionOpcode>`
                                            
                                            .. attribute:: mark_value
                                            
                                            	Mark value
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__init__()

                                                self.yang_name = "mark-detail"
                                                self.yang_parent_name = "police-exceed"

                                                self.action_opcode = YLeaf(YType.enumeration, "action-opcode")

                                                self.mark_value = YLeaf(YType.uint8, "mark-value")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("action_opcode",
                                                                "mark_value") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.action_opcode.is_set or
                                                    self.mark_value.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.action_opcode.yfilter != YFilter.not_set or
                                                    self.mark_value.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "mark-detail" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.action_opcode.is_set or self.action_opcode.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.action_opcode.get_name_leafdata())
                                                if (self.mark_value.is_set or self.mark_value.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.mark_value.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "action-opcode" or name == "mark-value"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "action-opcode"):
                                                    self.action_opcode = value
                                                    self.action_opcode.value_namespace = name_space
                                                    self.action_opcode.value_namespace_prefix = name_space_prefix
                                                if(value_path == "mark-value"):
                                                    self.mark_value = value
                                                    self.mark_value.value_namespace = name_space
                                                    self.mark_value.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.mark_detail:
                                                if (c.has_data()):
                                                    return True
                                            return self.action_type.is_set

                                        def has_operation(self):
                                            for c in self.mark_detail:
                                                if (c.has_operation()):
                                                    return True
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.action_type.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "police-exceed" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.action_type.is_set or self.action_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.action_type.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "mark-detail"):
                                                for c in self.mark_detail:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed.MarkDetail()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.mark_detail.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "mark-detail" or name == "action-type"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "action-type"):
                                                self.action_type = value
                                                self.action_type.value_namespace = name_space
                                                self.action_type.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            (self.mark_only is not None and self.mark_only.has_data()) or
                                            (self.police_conform is not None and self.police_conform.has_data()) or
                                            (self.police_exceed is not None and self.police_exceed.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.mark_only is not None and self.mark_only.has_operation()) or
                                            (self.police_conform is not None and self.police_conform.has_operation()) or
                                            (self.police_exceed is not None and self.police_exceed.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "marking" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "mark-only"):
                                            if (self.mark_only is None):
                                                self.mark_only = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.MarkOnly()
                                                self.mark_only.parent = self
                                                self._children_name_map["mark_only"] = "mark-only"
                                            return self.mark_only

                                        if (child_yang_name == "police-conform"):
                                            if (self.police_conform is None):
                                                self.police_conform = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceConform()
                                                self.police_conform.parent = self
                                                self._children_name_map["police_conform"] = "police-conform"
                                            return self.police_conform

                                        if (child_yang_name == "police-exceed"):
                                            if (self.police_exceed is None):
                                                self.police_exceed = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking.PoliceExceed()
                                                self.police_exceed.parent = self
                                                self._children_name_map["police_exceed"] = "police-exceed"
                                            return self.police_exceed

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "mark-only" or name == "police-conform" or name == "police-exceed"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (
                                        self.class_level.is_set or
                                        self.class_name.is_set or
                                        (self.marking is not None and self.marking.has_data()) or
                                        (self.police is not None and self.police.has_data()) or
                                        (self.queue is not None and self.queue.has_data()) or
                                        (self.shape is not None and self.shape.has_data()) or
                                        (self.wfq is not None and self.wfq.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.class_level.yfilter != YFilter.not_set or
                                        self.class_name.yfilter != YFilter.not_set or
                                        (self.marking is not None and self.marking.has_operation()) or
                                        (self.police is not None and self.police.has_operation()) or
                                        (self.queue is not None and self.queue.has_operation()) or
                                        (self.shape is not None and self.shape.has_operation()) or
                                        (self.wfq is not None and self.wfq.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "qos-show-pclass-st" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.class_level.get_name_leafdata())
                                    if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.class_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "marking"):
                                        if (self.marking is None):
                                            self.marking = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Marking()
                                            self.marking.parent = self
                                            self._children_name_map["marking"] = "marking"
                                        return self.marking

                                    if (child_yang_name == "police"):
                                        if (self.police is None):
                                            self.police = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                        return self.police

                                    if (child_yang_name == "queue"):
                                        if (self.queue is None):
                                            self.queue = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Queue()
                                            self.queue.parent = self
                                            self._children_name_map["queue"] = "queue"
                                        return self.queue

                                    if (child_yang_name == "shape"):
                                        if (self.shape is None):
                                            self.shape = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Shape()
                                            self.shape.parent = self
                                            self._children_name_map["shape"] = "shape"
                                        return self.shape

                                    if (child_yang_name == "wfq"):
                                        if (self.wfq is None):
                                            self.wfq = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt.Wfq()
                                            self.wfq.parent = self
                                            self._children_name_map["wfq"] = "wfq"
                                        return self.wfq

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "marking" or name == "police" or name == "queue" or name == "shape" or name == "wfq" or name == "class-level" or name == "class-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "class-level"):
                                        self.class_level = value
                                        self.class_level.value_namespace = name_space
                                        self.class_level.value_namespace_prefix = name_space_prefix
                                    if(value_path == "class-name"):
                                        self.class_name = value
                                        self.class_name.value_namespace = name_space
                                        self.class_name.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.qos_show_pclass_st:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.qos_show_pclass_st:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "skywarp-qos-policy-class" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "qos-show-pclass-st"):
                                    for c in self.qos_show_pclass_st:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass.QosShowPclassSt()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.qos_show_pclass_st.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "qos-show-pclass-st"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                (self.header is not None and self.header.has_data()) or
                                (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.header is not None and self.header.has_operation()) or
                                (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "header"):
                                if (self.header is None):
                                    self.header = PlatformQos.Nodes.Node.Interfaces.Interface.Input.Header()
                                    self.header.parent = self
                                    self._children_name_map["header"] = "header"
                                return self.header

                            if (child_yang_name == "interface-parameters"):
                                if (self.interface_parameters is None):
                                    self.interface_parameters = PlatformQos.Nodes.Node.Interfaces.Interface.Input.InterfaceParameters()
                                    self.interface_parameters.parent = self
                                    self._children_name_map["interface_parameters"] = "interface-parameters"
                                return self.interface_parameters

                            if (child_yang_name == "skywarp-qos-policy-class"):
                                if (self.skywarp_qos_policy_class is None):
                                    self.skywarp_qos_policy_class = PlatformQos.Nodes.Node.Interfaces.Interface.Input.SkywarpQosPolicyClass()
                                    self.skywarp_qos_policy_class.parent = self
                                    self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                return self.skywarp_qos_policy_class

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.interface_name.is_set or
                            (self.input is not None and self.input.has_data()) or
                            (self.output is not None and self.output.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.interface_name.yfilter != YFilter.not_set or
                            (self.input is not None and self.input.has_operation()) or
                            (self.output is not None and self.output.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.interface_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "input"):
                            if (self.input is None):
                                self.input = PlatformQos.Nodes.Node.Interfaces.Interface.Input()
                                self.input.parent = self
                                self._children_name_map["input"] = "input"
                            return self.input

                        if (child_yang_name == "output"):
                            if (self.output is None):
                                self.output = PlatformQos.Nodes.Node.Interfaces.Interface.Output()
                                self.output.parent = self
                                self._children_name_map["output"] = "output"
                            return self.output

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "input" or name == "output" or name == "interface-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "interface-name"):
                            self.interface_name = value
                            self.interface_name.value_namespace = name_space
                            self.interface_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.interface:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.interface:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "interfaces" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "interface"):
                        for c in self.interface:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PlatformQos.Nodes.Node.Interfaces.Interface()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.interface.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "interface"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.node_name.is_set or
                    (self.bundle_interfaces is not None and self.bundle_interfaces.has_data()) or
                    (self.capability is not None and self.capability.has_data()) or
                    (self.interfaces is not None and self.interfaces.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set or
                    (self.bundle_interfaces is not None and self.bundle_interfaces.has_operation()) or
                    (self.capability is not None and self.capability.has_operation()) or
                    (self.interfaces is not None and self.interfaces.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-skp-qos-oper:platform-qos/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "bundle-interfaces"):
                    if (self.bundle_interfaces is None):
                        self.bundle_interfaces = PlatformQos.Nodes.Node.BundleInterfaces()
                        self.bundle_interfaces.parent = self
                        self._children_name_map["bundle_interfaces"] = "bundle-interfaces"
                    return self.bundle_interfaces

                if (child_yang_name == "capability"):
                    if (self.capability is None):
                        self.capability = PlatformQos.Nodes.Node.Capability()
                        self.capability.parent = self
                        self._children_name_map["capability"] = "capability"
                    return self.capability

                if (child_yang_name == "interfaces"):
                    if (self.interfaces is None):
                        self.interfaces = PlatformQos.Nodes.Node.Interfaces()
                        self.interfaces.parent = self
                        self._children_name_map["interfaces"] = "interfaces"
                    return self.interfaces

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "bundle-interfaces" or name == "capability" or name == "interfaces" or name == "node-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-skp-qos-oper:platform-qos/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = PlatformQos.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.nodes is not None and self.nodes.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.nodes is not None and self.nodes.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-skp-qos-oper:platform-qos" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = PlatformQos.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "nodes"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = PlatformQos()
        return self._top_entity

class PlatformQosEa(Entity):
    """
    platform qos ea
    
    .. attribute:: nodes
    
    	List of nodes with platform specific QoS\-EA configuration
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes>`
    
    

    """

    _prefix = 'skp-qos-oper'
    _revision = '2016-02-18'

    def __init__(self):
        super(PlatformQosEa, self).__init__()
        self._top_entity = None

        self.yang_name = "platform-qos-ea"
        self.yang_parent_name = "Cisco-IOS-XR-skp-qos-oper"

        self.nodes = PlatformQosEa.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")


    class Nodes(Entity):
        """
        List of nodes with platform specific QoS\-EA
        configuration
        
        .. attribute:: node
        
        	Node with platform specific QoS\-EA configuration
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node>`
        
        

        """

        _prefix = 'skp-qos-oper'
        _revision = '2016-02-18'

        def __init__(self):
            super(PlatformQosEa.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "platform-qos-ea"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(PlatformQosEa.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(PlatformQosEa.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            Node with platform specific QoS\-EA
            configuration
            
            .. attribute:: node_name  <key>
            
            	Node name
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: bundle_interfaces
            
            	QoS\-EA list of bundle interfaces
            	**type**\:   :py:class:`BundleInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces>`
            
            .. attribute:: interfaces
            
            	QoS\-EA list of interfaces
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces>`
            
            

            """

            _prefix = 'skp-qos-oper'
            _revision = '2016-02-18'

            def __init__(self):
                super(PlatformQosEa.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.node_name = YLeaf(YType.str, "node-name")

                self.bundle_interfaces = PlatformQosEa.Nodes.Node.BundleInterfaces()
                self.bundle_interfaces.parent = self
                self._children_name_map["bundle_interfaces"] = "bundle-interfaces"
                self._children_yang_names.add("bundle-interfaces")

                self.interfaces = PlatformQosEa.Nodes.Node.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(PlatformQosEa.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(PlatformQosEa.Nodes.Node, self).__setattr__(name, value)


            class BundleInterfaces(Entity):
                """
                QoS\-EA list of bundle interfaces
                
                .. attribute:: bundle_interface
                
                	QoS\-EA interface name
                	**type**\: list of    :py:class:`BundleInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface>`
                
                

                """

                _prefix = 'skp-qos-oper'
                _revision = '2016-02-18'

                def __init__(self):
                    super(PlatformQosEa.Nodes.Node.BundleInterfaces, self).__init__()

                    self.yang_name = "bundle-interfaces"
                    self.yang_parent_name = "node"

                    self.bundle_interface = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PlatformQosEa.Nodes.Node.BundleInterfaces, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PlatformQosEa.Nodes.Node.BundleInterfaces, self).__setattr__(name, value)


                class BundleInterface(Entity):
                    """
                    QoS\-EA interface name
                    
                    .. attribute:: interface_name  <key>
                    
                    	Bundle interface name
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: member_interfaces
                    
                    	QoS\-EA list of member interfaces
                    	**type**\:   :py:class:`MemberInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces>`
                    
                    

                    """

                    _prefix = 'skp-qos-oper'
                    _revision = '2016-02-18'

                    def __init__(self):
                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface, self).__init__()

                        self.yang_name = "bundle-interface"
                        self.yang_parent_name = "bundle-interfaces"

                        self.interface_name = YLeaf(YType.str, "interface-name")

                        self.member_interfaces = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces()
                        self.member_interfaces.parent = self
                        self._children_name_map["member_interfaces"] = "member-interfaces"
                        self._children_yang_names.add("member-interfaces")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("interface_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface, self).__setattr__(name, value)


                    class MemberInterfaces(Entity):
                        """
                        QoS\-EA list of member interfaces
                        
                        .. attribute:: member_interface
                        
                        	QoS\-EA interface name
                        	**type**\: list of    :py:class:`MemberInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface>`
                        
                        

                        """

                        _prefix = 'skp-qos-oper'
                        _revision = '2016-02-18'

                        def __init__(self):
                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces, self).__init__()

                            self.yang_name = "member-interfaces"
                            self.yang_parent_name = "bundle-interface"

                            self.member_interface = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces, self).__setattr__(name, value)


                        class MemberInterface(Entity):
                            """
                            QoS\-EA interface name
                            
                            .. attribute:: interface_name  <key>
                            
                            	Memeber interface
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: bundle_input
                            
                            	QoS\-EA policy direction input
                            	**type**\:   :py:class:`BundleInput <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput>`
                            
                            .. attribute:: bundle_output
                            
                            	QoS\-EA policy direction output
                            	**type**\:   :py:class:`BundleOutput <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface, self).__init__()

                                self.yang_name = "member-interface"
                                self.yang_parent_name = "member-interfaces"

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.bundle_input = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput()
                                self.bundle_input.parent = self
                                self._children_name_map["bundle_input"] = "bundle-input"
                                self._children_yang_names.add("bundle-input")

                                self.bundle_output = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput()
                                self.bundle_output.parent = self
                                self._children_name_map["bundle_output"] = "bundle-output"
                                self._children_yang_names.add("bundle-output")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("interface_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface, self).__setattr__(name, value)


                            class BundleOutput(Entity):
                                """
                                QoS\-EA policy direction output
                                
                                .. attribute:: details
                                
                                	QoS\-EA policy details
                                	**type**\:   :py:class:`Details <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput, self).__init__()

                                    self.yang_name = "bundle-output"
                                    self.yang_parent_name = "member-interface"

                                    self.details = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details()
                                    self.details.parent = self
                                    self._children_name_map["details"] = "details"
                                    self._children_yang_names.add("details")


                                class Details(Entity):
                                    """
                                    QoS\-EA policy details
                                    
                                    .. attribute:: header
                                    
                                    	QoS EA policy header
                                    	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.Header>`
                                    
                                    .. attribute:: interface_parameters
                                    
                                    	QoS EA Interface Parameters
                                    	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.InterfaceParameters>`
                                    
                                    .. attribute:: skywarp_qos_policy_class
                                    
                                    	Skywarp QoS EA policy class details
                                    	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details, self).__init__()

                                        self.yang_name = "details"
                                        self.yang_parent_name = "bundle-output"

                                        self.header = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.Header()
                                        self.header.parent = self
                                        self._children_name_map["header"] = "header"
                                        self._children_yang_names.add("header")

                                        self.interface_parameters = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.InterfaceParameters()
                                        self.interface_parameters.parent = self
                                        self._children_name_map["interface_parameters"] = "interface-parameters"
                                        self._children_yang_names.add("interface-parameters")

                                        self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass()
                                        self.skywarp_qos_policy_class.parent = self
                                        self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                        self._children_yang_names.add("skywarp-qos-policy-class")


                                    class Header(Entity):
                                        """
                                        QoS EA policy header
                                        
                                        .. attribute:: classes
                                        
                                        	Number of classes
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: direction
                                        
                                        	Direction
                                        	**type**\:  str
                                        
                                        	**length:** 0..11
                                        
                                        .. attribute:: interface_name
                                        
                                        	Interface Name
                                        	**type**\:  str
                                        
                                        	**length:** 0..101
                                        
                                        .. attribute:: policy_name
                                        
                                        	Policy name
                                        	**type**\:  str
                                        
                                        	**length:** 0..65
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.Header, self).__init__()

                                            self.yang_name = "header"
                                            self.yang_parent_name = "details"

                                            self.classes = YLeaf(YType.uint16, "classes")

                                            self.direction = YLeaf(YType.str, "direction")

                                            self.interface_name = YLeaf(YType.str, "interface-name")

                                            self.policy_name = YLeaf(YType.str, "policy-name")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("classes",
                                                            "direction",
                                                            "interface_name",
                                                            "policy_name") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.Header, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.Header, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.classes.is_set or
                                                self.direction.is_set or
                                                self.interface_name.is_set or
                                                self.policy_name.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.classes.yfilter != YFilter.not_set or
                                                self.direction.yfilter != YFilter.not_set or
                                                self.interface_name.yfilter != YFilter.not_set or
                                                self.policy_name.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "header" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.classes.get_name_leafdata())
                                            if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.direction.get_name_leafdata())
                                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                                            if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.policy_name.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "classes"):
                                                self.classes = value
                                                self.classes.value_namespace = name_space
                                                self.classes.value_namespace_prefix = name_space_prefix
                                            if(value_path == "direction"):
                                                self.direction = value
                                                self.direction.value_namespace = name_space
                                                self.direction.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-name"):
                                                self.interface_name = value
                                                self.interface_name.value_namespace = name_space
                                                self.interface_name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "policy-name"):
                                                self.policy_name = value
                                                self.policy_name.value_namespace = name_space
                                                self.policy_name.value_namespace_prefix = name_space_prefix


                                    class InterfaceParameters(Entity):
                                        """
                                        QoS EA Interface Parameters
                                        
                                        .. attribute:: bundle_id
                                        
                                        	Bundle Interface ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: hierarchical_depth
                                        
                                        	Max Hierarchial Depth
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: interface_handle
                                        
                                        	Interface Handle
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        .. attribute:: interface_rate
                                        
                                        	Interface Programmed Rate
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: interface_type
                                        
                                        	Interface Type
                                        	**type**\:  str
                                        
                                        	**length:** 0..101
                                        
                                        .. attribute:: policy_map_id
                                        
                                        	Policy Map ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: policy_name
                                        
                                        	Policy name
                                        	**type**\:  str
                                        
                                        	**length:** 0..65
                                        
                                        .. attribute:: port
                                        
                                        	Local Port
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: port_shaper_rate
                                        
                                        	Port Shaper Rate
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: qos_interface_handle
                                        
                                        	QoS Interface handle
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: uidb_index
                                        
                                        	UIDB Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: under_line_interface_handle
                                        
                                        	UnderLineInterface Handle
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.InterfaceParameters, self).__init__()

                                            self.yang_name = "interface-parameters"
                                            self.yang_parent_name = "details"

                                            self.bundle_id = YLeaf(YType.uint16, "bundle-id")

                                            self.hierarchical_depth = YLeaf(YType.uint8, "hierarchical-depth")

                                            self.interface_handle = YLeaf(YType.str, "interface-handle")

                                            self.interface_rate = YLeaf(YType.uint32, "interface-rate")

                                            self.interface_type = YLeaf(YType.str, "interface-type")

                                            self.policy_map_id = YLeaf(YType.uint16, "policy-map-id")

                                            self.policy_name = YLeaf(YType.str, "policy-name")

                                            self.port = YLeaf(YType.uint32, "port")

                                            self.port_shaper_rate = YLeaf(YType.uint32, "port-shaper-rate")

                                            self.qos_interface_handle = YLeaf(YType.uint64, "qos-interface-handle")

                                            self.uidb_index = YLeaf(YType.uint16, "uidb-index")

                                            self.under_line_interface_handle = YLeaf(YType.str, "under-line-interface-handle")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("bundle_id",
                                                            "hierarchical_depth",
                                                            "interface_handle",
                                                            "interface_rate",
                                                            "interface_type",
                                                            "policy_map_id",
                                                            "policy_name",
                                                            "port",
                                                            "port_shaper_rate",
                                                            "qos_interface_handle",
                                                            "uidb_index",
                                                            "under_line_interface_handle") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.InterfaceParameters, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.InterfaceParameters, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.bundle_id.is_set or
                                                self.hierarchical_depth.is_set or
                                                self.interface_handle.is_set or
                                                self.interface_rate.is_set or
                                                self.interface_type.is_set or
                                                self.policy_map_id.is_set or
                                                self.policy_name.is_set or
                                                self.port.is_set or
                                                self.port_shaper_rate.is_set or
                                                self.qos_interface_handle.is_set or
                                                self.uidb_index.is_set or
                                                self.under_line_interface_handle.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.bundle_id.yfilter != YFilter.not_set or
                                                self.hierarchical_depth.yfilter != YFilter.not_set or
                                                self.interface_handle.yfilter != YFilter.not_set or
                                                self.interface_rate.yfilter != YFilter.not_set or
                                                self.interface_type.yfilter != YFilter.not_set or
                                                self.policy_map_id.yfilter != YFilter.not_set or
                                                self.policy_name.yfilter != YFilter.not_set or
                                                self.port.yfilter != YFilter.not_set or
                                                self.port_shaper_rate.yfilter != YFilter.not_set or
                                                self.qos_interface_handle.yfilter != YFilter.not_set or
                                                self.uidb_index.yfilter != YFilter.not_set or
                                                self.under_line_interface_handle.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "interface-parameters" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.bundle_id.is_set or self.bundle_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.bundle_id.get_name_leafdata())
                                            if (self.hierarchical_depth.is_set or self.hierarchical_depth.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.hierarchical_depth.get_name_leafdata())
                                            if (self.interface_handle.is_set or self.interface_handle.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_handle.get_name_leafdata())
                                            if (self.interface_rate.is_set or self.interface_rate.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_rate.get_name_leafdata())
                                            if (self.interface_type.is_set or self.interface_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_type.get_name_leafdata())
                                            if (self.policy_map_id.is_set or self.policy_map_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.policy_map_id.get_name_leafdata())
                                            if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.policy_name.get_name_leafdata())
                                            if (self.port.is_set or self.port.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.port.get_name_leafdata())
                                            if (self.port_shaper_rate.is_set or self.port_shaper_rate.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.port_shaper_rate.get_name_leafdata())
                                            if (self.qos_interface_handle.is_set or self.qos_interface_handle.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.qos_interface_handle.get_name_leafdata())
                                            if (self.uidb_index.is_set or self.uidb_index.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.uidb_index.get_name_leafdata())
                                            if (self.under_line_interface_handle.is_set or self.under_line_interface_handle.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.under_line_interface_handle.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "bundle-id" or name == "hierarchical-depth" or name == "interface-handle" or name == "interface-rate" or name == "interface-type" or name == "policy-map-id" or name == "policy-name" or name == "port" or name == "port-shaper-rate" or name == "qos-interface-handle" or name == "uidb-index" or name == "under-line-interface-handle"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "bundle-id"):
                                                self.bundle_id = value
                                                self.bundle_id.value_namespace = name_space
                                                self.bundle_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "hierarchical-depth"):
                                                self.hierarchical_depth = value
                                                self.hierarchical_depth.value_namespace = name_space
                                                self.hierarchical_depth.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-handle"):
                                                self.interface_handle = value
                                                self.interface_handle.value_namespace = name_space
                                                self.interface_handle.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-rate"):
                                                self.interface_rate = value
                                                self.interface_rate.value_namespace = name_space
                                                self.interface_rate.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-type"):
                                                self.interface_type = value
                                                self.interface_type.value_namespace = name_space
                                                self.interface_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "policy-map-id"):
                                                self.policy_map_id = value
                                                self.policy_map_id.value_namespace = name_space
                                                self.policy_map_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "policy-name"):
                                                self.policy_name = value
                                                self.policy_name.value_namespace = name_space
                                                self.policy_name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "port"):
                                                self.port = value
                                                self.port.value_namespace = name_space
                                                self.port.value_namespace_prefix = name_space_prefix
                                            if(value_path == "port-shaper-rate"):
                                                self.port_shaper_rate = value
                                                self.port_shaper_rate.value_namespace = name_space
                                                self.port_shaper_rate.value_namespace_prefix = name_space_prefix
                                            if(value_path == "qos-interface-handle"):
                                                self.qos_interface_handle = value
                                                self.qos_interface_handle.value_namespace = name_space
                                                self.qos_interface_handle.value_namespace_prefix = name_space_prefix
                                            if(value_path == "uidb-index"):
                                                self.uidb_index = value
                                                self.uidb_index.value_namespace = name_space
                                                self.uidb_index.value_namespace_prefix = name_space_prefix
                                            if(value_path == "under-line-interface-handle"):
                                                self.under_line_interface_handle = value
                                                self.under_line_interface_handle.value_namespace = name_space
                                                self.under_line_interface_handle.value_namespace_prefix = name_space_prefix


                                    class SkywarpQosPolicyClass(Entity):
                                        """
                                        Skywarp QoS EA policy class details
                                        
                                        .. attribute:: qos_show_ea_pclass_st
                                        
                                        	qos show ea pclass st
                                        	**type**\: list of    :py:class:`QosShowEaPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass, self).__init__()

                                            self.yang_name = "skywarp-qos-policy-class"
                                            self.yang_parent_name = "details"

                                            self.qos_show_ea_pclass_st = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)


                                        class QosShowEaPclassSt(Entity):
                                            """
                                            qos show ea pclass st
                                            
                                            .. attribute:: class_level
                                            
                                            	Class level
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: class_name
                                            
                                            	Class name
                                            	**type**\:  str
                                            
                                            	**length:** 0..65
                                            
                                            .. attribute:: config
                                            
                                            	QoS EA Class Configuration
                                            	**type**\:   :py:class:`Config <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config>`
                                            
                                            .. attribute:: index
                                            
                                            	Class Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: node_flags
                                            
                                            	Node Flags
                                            	**type**\:  str
                                            
                                            	**length:** 0..101
                                            
                                            .. attribute:: policy_name
                                            
                                            	Policy name
                                            	**type**\:  str
                                            
                                            	**length:** 0..65
                                            
                                            .. attribute:: result
                                            
                                            	QoS EA Class Result
                                            	**type**\:   :py:class:`Result <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result>`
                                            
                                            .. attribute:: stats_flags
                                            
                                            	Statistical Flags
                                            	**type**\:  str
                                            
                                            	**length:** 0..101
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__init__()

                                                self.yang_name = "qos-show-ea-pclass-st"
                                                self.yang_parent_name = "skywarp-qos-policy-class"

                                                self.class_level = YLeaf(YType.uint8, "class-level")

                                                self.class_name = YLeaf(YType.str, "class-name")

                                                self.index = YLeaf(YType.uint16, "index")

                                                self.node_flags = YLeaf(YType.str, "node-flags")

                                                self.policy_name = YLeaf(YType.str, "policy-name")

                                                self.stats_flags = YLeaf(YType.str, "stats-flags")

                                                self.config = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                                self.config.parent = self
                                                self._children_name_map["config"] = "config"
                                                self._children_yang_names.add("config")

                                                self.result = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                                self.result.parent = self
                                                self._children_name_map["result"] = "result"
                                                self._children_yang_names.add("result")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("class_level",
                                                                "class_name",
                                                                "index",
                                                                "node_flags",
                                                                "policy_name",
                                                                "stats_flags") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)


                                            class Config(Entity):
                                                """
                                                QoS EA Class Configuration
                                                
                                                .. attribute:: node_config
                                                
                                                	Node Config
                                                	**type**\:  str
                                                
                                                	**length:** 0..101
                                                
                                                .. attribute:: police
                                                
                                                	QoS EA Policer parameters
                                                	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police>`
                                                
                                                .. attribute:: shape
                                                
                                                	QoS EA Shaper parameters
                                                	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape>`
                                                
                                                .. attribute:: wfq
                                                
                                                	QoS EA WFQ parameters
                                                	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__init__()

                                                    self.yang_name = "config"
                                                    self.yang_parent_name = "qos-show-ea-pclass-st"

                                                    self.node_config = YLeaf(YType.str, "node-config")

                                                    self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                    self._children_yang_names.add("police")

                                                    self.shape = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                                    self.shape.parent = self
                                                    self._children_name_map["shape"] = "shape"
                                                    self._children_yang_names.add("shape")

                                                    self.wfq = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                                    self.wfq.parent = self
                                                    self._children_name_map["wfq"] = "wfq"
                                                    self._children_yang_names.add("wfq")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("node_config") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)


                                                class Police(Entity):
                                                    """
                                                    QoS EA Policer parameters
                                                    
                                                    .. attribute:: cbs
                                                    
                                                    	CBS
                                                    	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs>`
                                                    
                                                    .. attribute:: cir
                                                    
                                                    	CIR
                                                    	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir>`
                                                    
                                                    .. attribute:: color_aware
                                                    
                                                    	Color Aware
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: policer_type
                                                    
                                                    	Policer type
                                                    	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__init__()

                                                        self.yang_name = "police"
                                                        self.yang_parent_name = "config"

                                                        self.color_aware = YLeaf(YType.boolean, "color-aware")

                                                        self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                                        self.cbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                        self.cbs.parent = self
                                                        self._children_name_map["cbs"] = "cbs"
                                                        self._children_yang_names.add("cbs")

                                                        self.cir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                        self.cir.parent = self
                                                        self._children_name_map["cir"] = "cir"
                                                        self._children_yang_names.add("cir")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("color_aware",
                                                                        "policer_type") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)


                                                    class Cir(Entity):
                                                        """
                                                        CIR
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__init__()

                                                            self.yang_name = "cir"
                                                            self.yang_parent_name = "police"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "cir" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix


                                                    class Cbs(Entity):
                                                        """
                                                        CBS
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__init__()

                                                            self.yang_name = "cbs"
                                                            self.yang_parent_name = "police"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "cbs" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.color_aware.is_set or
                                                            self.policer_type.is_set or
                                                            (self.cbs is not None and self.cbs.has_data()) or
                                                            (self.cir is not None and self.cir.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.color_aware.yfilter != YFilter.not_set or
                                                            self.policer_type.yfilter != YFilter.not_set or
                                                            (self.cbs is not None and self.cbs.has_operation()) or
                                                            (self.cir is not None and self.cir.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "police" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.color_aware.is_set or self.color_aware.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.color_aware.get_name_leafdata())
                                                        if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.policer_type.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "cbs"):
                                                            if (self.cbs is None):
                                                                self.cbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                                self.cbs.parent = self
                                                                self._children_name_map["cbs"] = "cbs"
                                                            return self.cbs

                                                        if (child_yang_name == "cir"):
                                                            if (self.cir is None):
                                                                self.cir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                                self.cir.parent = self
                                                                self._children_name_map["cir"] = "cir"
                                                            return self.cir

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "cbs" or name == "cir" or name == "color-aware" or name == "policer-type"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "color-aware"):
                                                            self.color_aware = value
                                                            self.color_aware.value_namespace = name_space
                                                            self.color_aware.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "policer-type"):
                                                            self.policer_type = value
                                                            self.policer_type.value_namespace = name_space
                                                            self.policer_type.value_namespace_prefix = name_space_prefix


                                                class Shape(Entity):
                                                    """
                                                    QoS EA Shaper parameters
                                                    
                                                    .. attribute:: pbs
                                                    
                                                    	PBS in bytes
                                                    	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs>`
                                                    
                                                    .. attribute:: pir
                                                    
                                                    	PIR in kbps
                                                    	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape, self).__init__()

                                                        self.yang_name = "shape"
                                                        self.yang_parent_name = "config"

                                                        self.pbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                        self.pbs.parent = self
                                                        self._children_name_map["pbs"] = "pbs"
                                                        self._children_yang_names.add("pbs")

                                                        self.pir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                        self.pir.parent = self
                                                        self._children_name_map["pir"] = "pir"
                                                        self._children_yang_names.add("pir")


                                                    class Pir(Entity):
                                                        """
                                                        PIR in kbps
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__init__()

                                                            self.yang_name = "pir"
                                                            self.yang_parent_name = "shape"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "pir" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix


                                                    class Pbs(Entity):
                                                        """
                                                        PBS in bytes
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__init__()

                                                            self.yang_name = "pbs"
                                                            self.yang_parent_name = "shape"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "pbs" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            (self.pbs is not None and self.pbs.has_data()) or
                                                            (self.pir is not None and self.pir.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            (self.pbs is not None and self.pbs.has_operation()) or
                                                            (self.pir is not None and self.pir.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "shape" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "pbs"):
                                                            if (self.pbs is None):
                                                                self.pbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                                self.pbs.parent = self
                                                                self._children_name_map["pbs"] = "pbs"
                                                            return self.pbs

                                                        if (child_yang_name == "pir"):
                                                            if (self.pir is None):
                                                                self.pir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                                self.pir.parent = self
                                                                self._children_name_map["pir"] = "pir"
                                                            return self.pir

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "pbs" or name == "pir"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass


                                                class Wfq(Entity):
                                                    """
                                                    QoS EA WFQ parameters
                                                    
                                                    .. attribute:: bandwidth
                                                    
                                                    	Bandwidth
                                                    	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth>`
                                                    
                                                    .. attribute:: excess_ratio
                                                    
                                                    	Excess Ratio
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..65535
                                                    
                                                    .. attribute:: sum_of_bandwidth
                                                    
                                                    	Sum of Bandwidth
                                                    	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__init__()

                                                        self.yang_name = "wfq"
                                                        self.yang_parent_name = "config"

                                                        self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                                        self.bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                        self.bandwidth.parent = self
                                                        self._children_name_map["bandwidth"] = "bandwidth"
                                                        self._children_yang_names.add("bandwidth")

                                                        self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                        self.sum_of_bandwidth.parent = self
                                                        self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                        self._children_yang_names.add("sum-of-bandwidth")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("excess_ratio") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)


                                                    class Bandwidth(Entity):
                                                        """
                                                        Bandwidth
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__init__()

                                                            self.yang_name = "bandwidth"
                                                            self.yang_parent_name = "wfq"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "bandwidth" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix


                                                    class SumOfBandwidth(Entity):
                                                        """
                                                        Sum of Bandwidth
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__init__()

                                                            self.yang_name = "sum-of-bandwidth"
                                                            self.yang_parent_name = "wfq"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "sum-of-bandwidth" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.excess_ratio.is_set or
                                                            (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                            (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.excess_ratio.yfilter != YFilter.not_set or
                                                            (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                            (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "wfq" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "bandwidth"):
                                                            if (self.bandwidth is None):
                                                                self.bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                                self.bandwidth.parent = self
                                                                self._children_name_map["bandwidth"] = "bandwidth"
                                                            return self.bandwidth

                                                        if (child_yang_name == "sum-of-bandwidth"):
                                                            if (self.sum_of_bandwidth is None):
                                                                self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                                self.sum_of_bandwidth.parent = self
                                                                self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                            return self.sum_of_bandwidth

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "excess-ratio"):
                                                            self.excess_ratio = value
                                                            self.excess_ratio.value_namespace = name_space
                                                            self.excess_ratio.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.node_config.is_set or
                                                        (self.police is not None and self.police.has_data()) or
                                                        (self.shape is not None and self.shape.has_data()) or
                                                        (self.wfq is not None and self.wfq.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.node_config.yfilter != YFilter.not_set or
                                                        (self.police is not None and self.police.has_operation()) or
                                                        (self.shape is not None and self.shape.has_operation()) or
                                                        (self.wfq is not None and self.wfq.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "config" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.node_config.is_set or self.node_config.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.node_config.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "police"):
                                                        if (self.police is None):
                                                            self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                                            self.police.parent = self
                                                            self._children_name_map["police"] = "police"
                                                        return self.police

                                                    if (child_yang_name == "shape"):
                                                        if (self.shape is None):
                                                            self.shape = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                                            self.shape.parent = self
                                                            self._children_name_map["shape"] = "shape"
                                                        return self.shape

                                                    if (child_yang_name == "wfq"):
                                                        if (self.wfq is None):
                                                            self.wfq = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                                            self.wfq.parent = self
                                                            self._children_name_map["wfq"] = "wfq"
                                                        return self.wfq

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "police" or name == "shape" or name == "wfq" or name == "node-config"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "node-config"):
                                                        self.node_config = value
                                                        self.node_config.value_namespace = name_space
                                                        self.node_config.value_namespace_prefix = name_space_prefix


                                            class Result(Entity):
                                                """
                                                QoS EA Class Result
                                                
                                                .. attribute:: police
                                                
                                                	QoS EA Policer Result
                                                	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police>`
                                                
                                                .. attribute:: queue
                                                
                                                	QoS EA Queue Result
                                                	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue>`
                                                
                                                .. attribute:: stats_id
                                                
                                                	Stats ID
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__init__()

                                                    self.yang_name = "result"
                                                    self.yang_parent_name = "qos-show-ea-pclass-st"

                                                    self.stats_id = YLeaf(YType.uint32, "stats-id")

                                                    self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                    self._children_yang_names.add("police")

                                                    self.queue = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                                    self.queue.parent = self
                                                    self._children_name_map["queue"] = "queue"
                                                    self._children_yang_names.add("queue")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("stats_id") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)


                                                class Queue(Entity):
                                                    """
                                                    QoS EA Queue Result
                                                    
                                                    .. attribute:: commit_tx
                                                    
                                                    	Commit Tx
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: drop
                                                    
                                                    	Drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: excess_tx
                                                    
                                                    	Excess Tx
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: queue_id
                                                    
                                                    	Queue ID
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__init__()

                                                        self.yang_name = "queue"
                                                        self.yang_parent_name = "result"

                                                        self.commit_tx = YLeaf(YType.uint32, "commit-tx")

                                                        self.drop = YLeaf(YType.uint32, "drop")

                                                        self.excess_tx = YLeaf(YType.uint32, "excess-tx")

                                                        self.queue_id = YLeaf(YType.uint32, "queue-id")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("commit_tx",
                                                                        "drop",
                                                                        "excess_tx",
                                                                        "queue_id") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.commit_tx.is_set or
                                                            self.drop.is_set or
                                                            self.excess_tx.is_set or
                                                            self.queue_id.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.commit_tx.yfilter != YFilter.not_set or
                                                            self.drop.yfilter != YFilter.not_set or
                                                            self.excess_tx.yfilter != YFilter.not_set or
                                                            self.queue_id.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "queue" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.commit_tx.is_set or self.commit_tx.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.commit_tx.get_name_leafdata())
                                                        if (self.drop.is_set or self.drop.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.drop.get_name_leafdata())
                                                        if (self.excess_tx.is_set or self.excess_tx.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.excess_tx.get_name_leafdata())
                                                        if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.queue_id.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "commit-tx" or name == "drop" or name == "excess-tx" or name == "queue-id"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "commit-tx"):
                                                            self.commit_tx = value
                                                            self.commit_tx.value_namespace = name_space
                                                            self.commit_tx.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "drop"):
                                                            self.drop = value
                                                            self.drop.value_namespace = name_space
                                                            self.drop.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "excess-tx"):
                                                            self.excess_tx = value
                                                            self.excess_tx.value_namespace = name_space
                                                            self.excess_tx.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "queue-id"):
                                                            self.queue_id = value
                                                            self.queue_id.value_namespace = name_space
                                                            self.queue_id.value_namespace_prefix = name_space_prefix


                                                class Police(Entity):
                                                    """
                                                    QoS EA Policer Result
                                                    
                                                    .. attribute:: conform
                                                    
                                                    	Conform Rate
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: exceed
                                                    
                                                    	Exceed Rate
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: token_bucket_id
                                                    
                                                    	Token Bucket ID
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: violate
                                                    
                                                    	Violate Rate
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__init__()

                                                        self.yang_name = "police"
                                                        self.yang_parent_name = "result"

                                                        self.conform = YLeaf(YType.uint32, "conform")

                                                        self.exceed = YLeaf(YType.uint32, "exceed")

                                                        self.token_bucket_id = YLeaf(YType.uint32, "token-bucket-id")

                                                        self.violate = YLeaf(YType.uint32, "violate")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("conform",
                                                                        "exceed",
                                                                        "token_bucket_id",
                                                                        "violate") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.conform.is_set or
                                                            self.exceed.is_set or
                                                            self.token_bucket_id.is_set or
                                                            self.violate.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.conform.yfilter != YFilter.not_set or
                                                            self.exceed.yfilter != YFilter.not_set or
                                                            self.token_bucket_id.yfilter != YFilter.not_set or
                                                            self.violate.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "police" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.conform.is_set or self.conform.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.conform.get_name_leafdata())
                                                        if (self.exceed.is_set or self.exceed.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.exceed.get_name_leafdata())
                                                        if (self.token_bucket_id.is_set or self.token_bucket_id.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.token_bucket_id.get_name_leafdata())
                                                        if (self.violate.is_set or self.violate.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.violate.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "conform" or name == "exceed" or name == "token-bucket-id" or name == "violate"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "conform"):
                                                            self.conform = value
                                                            self.conform.value_namespace = name_space
                                                            self.conform.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "exceed"):
                                                            self.exceed = value
                                                            self.exceed.value_namespace = name_space
                                                            self.exceed.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "token-bucket-id"):
                                                            self.token_bucket_id = value
                                                            self.token_bucket_id.value_namespace = name_space
                                                            self.token_bucket_id.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "violate"):
                                                            self.violate = value
                                                            self.violate.value_namespace = name_space
                                                            self.violate.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.stats_id.is_set or
                                                        (self.police is not None and self.police.has_data()) or
                                                        (self.queue is not None and self.queue.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.stats_id.yfilter != YFilter.not_set or
                                                        (self.police is not None and self.police.has_operation()) or
                                                        (self.queue is not None and self.queue.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "result" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.stats_id.is_set or self.stats_id.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.stats_id.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "police"):
                                                        if (self.police is None):
                                                            self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                                            self.police.parent = self
                                                            self._children_name_map["police"] = "police"
                                                        return self.police

                                                    if (child_yang_name == "queue"):
                                                        if (self.queue is None):
                                                            self.queue = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                                            self.queue.parent = self
                                                            self._children_name_map["queue"] = "queue"
                                                        return self.queue

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "police" or name == "queue" or name == "stats-id"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "stats-id"):
                                                        self.stats_id = value
                                                        self.stats_id.value_namespace = name_space
                                                        self.stats_id.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.class_level.is_set or
                                                    self.class_name.is_set or
                                                    self.index.is_set or
                                                    self.node_flags.is_set or
                                                    self.policy_name.is_set or
                                                    self.stats_flags.is_set or
                                                    (self.config is not None and self.config.has_data()) or
                                                    (self.result is not None and self.result.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.class_level.yfilter != YFilter.not_set or
                                                    self.class_name.yfilter != YFilter.not_set or
                                                    self.index.yfilter != YFilter.not_set or
                                                    self.node_flags.yfilter != YFilter.not_set or
                                                    self.policy_name.yfilter != YFilter.not_set or
                                                    self.stats_flags.yfilter != YFilter.not_set or
                                                    (self.config is not None and self.config.has_operation()) or
                                                    (self.result is not None and self.result.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "qos-show-ea-pclass-st" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.class_level.get_name_leafdata())
                                                if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.class_name.get_name_leafdata())
                                                if (self.index.is_set or self.index.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.index.get_name_leafdata())
                                                if (self.node_flags.is_set or self.node_flags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.node_flags.get_name_leafdata())
                                                if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policy_name.get_name_leafdata())
                                                if (self.stats_flags.is_set or self.stats_flags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.stats_flags.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "config"):
                                                    if (self.config is None):
                                                        self.config = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                                        self.config.parent = self
                                                        self._children_name_map["config"] = "config"
                                                    return self.config

                                                if (child_yang_name == "result"):
                                                    if (self.result is None):
                                                        self.result = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                                        self.result.parent = self
                                                        self._children_name_map["result"] = "result"
                                                    return self.result

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "config" or name == "result" or name == "class-level" or name == "class-name" or name == "index" or name == "node-flags" or name == "policy-name" or name == "stats-flags"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "class-level"):
                                                    self.class_level = value
                                                    self.class_level.value_namespace = name_space
                                                    self.class_level.value_namespace_prefix = name_space_prefix
                                                if(value_path == "class-name"):
                                                    self.class_name = value
                                                    self.class_name.value_namespace = name_space
                                                    self.class_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "index"):
                                                    self.index = value
                                                    self.index.value_namespace = name_space
                                                    self.index.value_namespace_prefix = name_space_prefix
                                                if(value_path == "node-flags"):
                                                    self.node_flags = value
                                                    self.node_flags.value_namespace = name_space
                                                    self.node_flags.value_namespace_prefix = name_space_prefix
                                                if(value_path == "policy-name"):
                                                    self.policy_name = value
                                                    self.policy_name.value_namespace = name_space
                                                    self.policy_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "stats-flags"):
                                                    self.stats_flags = value
                                                    self.stats_flags.value_namespace = name_space
                                                    self.stats_flags.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.qos_show_ea_pclass_st:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.qos_show_ea_pclass_st:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "skywarp-qos-policy-class" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "qos-show-ea-pclass-st"):
                                                for c in self.qos_show_ea_pclass_st:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.qos_show_ea_pclass_st.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "qos-show-ea-pclass-st"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            (self.header is not None and self.header.has_data()) or
                                            (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                            (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.header is not None and self.header.has_operation()) or
                                            (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                            (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "details" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "header"):
                                            if (self.header is None):
                                                self.header = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.Header()
                                                self.header.parent = self
                                                self._children_name_map["header"] = "header"
                                            return self.header

                                        if (child_yang_name == "interface-parameters"):
                                            if (self.interface_parameters is None):
                                                self.interface_parameters = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.InterfaceParameters()
                                                self.interface_parameters.parent = self
                                                self._children_name_map["interface_parameters"] = "interface-parameters"
                                            return self.interface_parameters

                                        if (child_yang_name == "skywarp-qos-policy-class"):
                                            if (self.skywarp_qos_policy_class is None):
                                                self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details.SkywarpQosPolicyClass()
                                                self.skywarp_qos_policy_class.parent = self
                                                self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                            return self.skywarp_qos_policy_class

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (self.details is not None and self.details.has_data())

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.details is not None and self.details.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bundle-output" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "details"):
                                        if (self.details is None):
                                            self.details = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput.Details()
                                            self.details.parent = self
                                            self._children_name_map["details"] = "details"
                                        return self.details

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "details"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class BundleInput(Entity):
                                """
                                QoS\-EA policy direction input
                                
                                .. attribute:: details
                                
                                	QoS\-EA policy details
                                	**type**\:   :py:class:`Details <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput, self).__init__()

                                    self.yang_name = "bundle-input"
                                    self.yang_parent_name = "member-interface"

                                    self.details = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details()
                                    self.details.parent = self
                                    self._children_name_map["details"] = "details"
                                    self._children_yang_names.add("details")


                                class Details(Entity):
                                    """
                                    QoS\-EA policy details
                                    
                                    .. attribute:: header
                                    
                                    	QoS EA policy header
                                    	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.Header>`
                                    
                                    .. attribute:: interface_parameters
                                    
                                    	QoS EA Interface Parameters
                                    	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.InterfaceParameters>`
                                    
                                    .. attribute:: skywarp_qos_policy_class
                                    
                                    	Skywarp QoS EA policy class details
                                    	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass>`
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details, self).__init__()

                                        self.yang_name = "details"
                                        self.yang_parent_name = "bundle-input"

                                        self.header = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.Header()
                                        self.header.parent = self
                                        self._children_name_map["header"] = "header"
                                        self._children_yang_names.add("header")

                                        self.interface_parameters = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.InterfaceParameters()
                                        self.interface_parameters.parent = self
                                        self._children_name_map["interface_parameters"] = "interface-parameters"
                                        self._children_yang_names.add("interface-parameters")

                                        self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass()
                                        self.skywarp_qos_policy_class.parent = self
                                        self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                        self._children_yang_names.add("skywarp-qos-policy-class")


                                    class Header(Entity):
                                        """
                                        QoS EA policy header
                                        
                                        .. attribute:: classes
                                        
                                        	Number of classes
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: direction
                                        
                                        	Direction
                                        	**type**\:  str
                                        
                                        	**length:** 0..11
                                        
                                        .. attribute:: interface_name
                                        
                                        	Interface Name
                                        	**type**\:  str
                                        
                                        	**length:** 0..101
                                        
                                        .. attribute:: policy_name
                                        
                                        	Policy name
                                        	**type**\:  str
                                        
                                        	**length:** 0..65
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.Header, self).__init__()

                                            self.yang_name = "header"
                                            self.yang_parent_name = "details"

                                            self.classes = YLeaf(YType.uint16, "classes")

                                            self.direction = YLeaf(YType.str, "direction")

                                            self.interface_name = YLeaf(YType.str, "interface-name")

                                            self.policy_name = YLeaf(YType.str, "policy-name")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("classes",
                                                            "direction",
                                                            "interface_name",
                                                            "policy_name") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.Header, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.Header, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.classes.is_set or
                                                self.direction.is_set or
                                                self.interface_name.is_set or
                                                self.policy_name.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.classes.yfilter != YFilter.not_set or
                                                self.direction.yfilter != YFilter.not_set or
                                                self.interface_name.yfilter != YFilter.not_set or
                                                self.policy_name.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "header" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.classes.get_name_leafdata())
                                            if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.direction.get_name_leafdata())
                                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                                            if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.policy_name.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "classes"):
                                                self.classes = value
                                                self.classes.value_namespace = name_space
                                                self.classes.value_namespace_prefix = name_space_prefix
                                            if(value_path == "direction"):
                                                self.direction = value
                                                self.direction.value_namespace = name_space
                                                self.direction.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-name"):
                                                self.interface_name = value
                                                self.interface_name.value_namespace = name_space
                                                self.interface_name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "policy-name"):
                                                self.policy_name = value
                                                self.policy_name.value_namespace = name_space
                                                self.policy_name.value_namespace_prefix = name_space_prefix


                                    class InterfaceParameters(Entity):
                                        """
                                        QoS EA Interface Parameters
                                        
                                        .. attribute:: bundle_id
                                        
                                        	Bundle Interface ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: hierarchical_depth
                                        
                                        	Max Hierarchial Depth
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: interface_handle
                                        
                                        	Interface Handle
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        .. attribute:: interface_rate
                                        
                                        	Interface Programmed Rate
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: interface_type
                                        
                                        	Interface Type
                                        	**type**\:  str
                                        
                                        	**length:** 0..101
                                        
                                        .. attribute:: policy_map_id
                                        
                                        	Policy Map ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: policy_name
                                        
                                        	Policy name
                                        	**type**\:  str
                                        
                                        	**length:** 0..65
                                        
                                        .. attribute:: port
                                        
                                        	Local Port
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: port_shaper_rate
                                        
                                        	Port Shaper Rate
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: qos_interface_handle
                                        
                                        	QoS Interface handle
                                        	**type**\:  int
                                        
                                        	**range:** 0..18446744073709551615
                                        
                                        .. attribute:: uidb_index
                                        
                                        	UIDB Index
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: under_line_interface_handle
                                        
                                        	UnderLineInterface Handle
                                        	**type**\:  str
                                        
                                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.InterfaceParameters, self).__init__()

                                            self.yang_name = "interface-parameters"
                                            self.yang_parent_name = "details"

                                            self.bundle_id = YLeaf(YType.uint16, "bundle-id")

                                            self.hierarchical_depth = YLeaf(YType.uint8, "hierarchical-depth")

                                            self.interface_handle = YLeaf(YType.str, "interface-handle")

                                            self.interface_rate = YLeaf(YType.uint32, "interface-rate")

                                            self.interface_type = YLeaf(YType.str, "interface-type")

                                            self.policy_map_id = YLeaf(YType.uint16, "policy-map-id")

                                            self.policy_name = YLeaf(YType.str, "policy-name")

                                            self.port = YLeaf(YType.uint32, "port")

                                            self.port_shaper_rate = YLeaf(YType.uint32, "port-shaper-rate")

                                            self.qos_interface_handle = YLeaf(YType.uint64, "qos-interface-handle")

                                            self.uidb_index = YLeaf(YType.uint16, "uidb-index")

                                            self.under_line_interface_handle = YLeaf(YType.str, "under-line-interface-handle")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("bundle_id",
                                                            "hierarchical_depth",
                                                            "interface_handle",
                                                            "interface_rate",
                                                            "interface_type",
                                                            "policy_map_id",
                                                            "policy_name",
                                                            "port",
                                                            "port_shaper_rate",
                                                            "qos_interface_handle",
                                                            "uidb_index",
                                                            "under_line_interface_handle") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.InterfaceParameters, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.InterfaceParameters, self).__setattr__(name, value)

                                        def has_data(self):
                                            return (
                                                self.bundle_id.is_set or
                                                self.hierarchical_depth.is_set or
                                                self.interface_handle.is_set or
                                                self.interface_rate.is_set or
                                                self.interface_type.is_set or
                                                self.policy_map_id.is_set or
                                                self.policy_name.is_set or
                                                self.port.is_set or
                                                self.port_shaper_rate.is_set or
                                                self.qos_interface_handle.is_set or
                                                self.uidb_index.is_set or
                                                self.under_line_interface_handle.is_set)

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.bundle_id.yfilter != YFilter.not_set or
                                                self.hierarchical_depth.yfilter != YFilter.not_set or
                                                self.interface_handle.yfilter != YFilter.not_set or
                                                self.interface_rate.yfilter != YFilter.not_set or
                                                self.interface_type.yfilter != YFilter.not_set or
                                                self.policy_map_id.yfilter != YFilter.not_set or
                                                self.policy_name.yfilter != YFilter.not_set or
                                                self.port.yfilter != YFilter.not_set or
                                                self.port_shaper_rate.yfilter != YFilter.not_set or
                                                self.qos_interface_handle.yfilter != YFilter.not_set or
                                                self.uidb_index.yfilter != YFilter.not_set or
                                                self.under_line_interface_handle.yfilter != YFilter.not_set)

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "interface-parameters" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.bundle_id.is_set or self.bundle_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.bundle_id.get_name_leafdata())
                                            if (self.hierarchical_depth.is_set or self.hierarchical_depth.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.hierarchical_depth.get_name_leafdata())
                                            if (self.interface_handle.is_set or self.interface_handle.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_handle.get_name_leafdata())
                                            if (self.interface_rate.is_set or self.interface_rate.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_rate.get_name_leafdata())
                                            if (self.interface_type.is_set or self.interface_type.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.interface_type.get_name_leafdata())
                                            if (self.policy_map_id.is_set or self.policy_map_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.policy_map_id.get_name_leafdata())
                                            if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.policy_name.get_name_leafdata())
                                            if (self.port.is_set or self.port.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.port.get_name_leafdata())
                                            if (self.port_shaper_rate.is_set or self.port_shaper_rate.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.port_shaper_rate.get_name_leafdata())
                                            if (self.qos_interface_handle.is_set or self.qos_interface_handle.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.qos_interface_handle.get_name_leafdata())
                                            if (self.uidb_index.is_set or self.uidb_index.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.uidb_index.get_name_leafdata())
                                            if (self.under_line_interface_handle.is_set or self.under_line_interface_handle.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.under_line_interface_handle.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "bundle-id" or name == "hierarchical-depth" or name == "interface-handle" or name == "interface-rate" or name == "interface-type" or name == "policy-map-id" or name == "policy-name" or name == "port" or name == "port-shaper-rate" or name == "qos-interface-handle" or name == "uidb-index" or name == "under-line-interface-handle"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "bundle-id"):
                                                self.bundle_id = value
                                                self.bundle_id.value_namespace = name_space
                                                self.bundle_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "hierarchical-depth"):
                                                self.hierarchical_depth = value
                                                self.hierarchical_depth.value_namespace = name_space
                                                self.hierarchical_depth.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-handle"):
                                                self.interface_handle = value
                                                self.interface_handle.value_namespace = name_space
                                                self.interface_handle.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-rate"):
                                                self.interface_rate = value
                                                self.interface_rate.value_namespace = name_space
                                                self.interface_rate.value_namespace_prefix = name_space_prefix
                                            if(value_path == "interface-type"):
                                                self.interface_type = value
                                                self.interface_type.value_namespace = name_space
                                                self.interface_type.value_namespace_prefix = name_space_prefix
                                            if(value_path == "policy-map-id"):
                                                self.policy_map_id = value
                                                self.policy_map_id.value_namespace = name_space
                                                self.policy_map_id.value_namespace_prefix = name_space_prefix
                                            if(value_path == "policy-name"):
                                                self.policy_name = value
                                                self.policy_name.value_namespace = name_space
                                                self.policy_name.value_namespace_prefix = name_space_prefix
                                            if(value_path == "port"):
                                                self.port = value
                                                self.port.value_namespace = name_space
                                                self.port.value_namespace_prefix = name_space_prefix
                                            if(value_path == "port-shaper-rate"):
                                                self.port_shaper_rate = value
                                                self.port_shaper_rate.value_namespace = name_space
                                                self.port_shaper_rate.value_namespace_prefix = name_space_prefix
                                            if(value_path == "qos-interface-handle"):
                                                self.qos_interface_handle = value
                                                self.qos_interface_handle.value_namespace = name_space
                                                self.qos_interface_handle.value_namespace_prefix = name_space_prefix
                                            if(value_path == "uidb-index"):
                                                self.uidb_index = value
                                                self.uidb_index.value_namespace = name_space
                                                self.uidb_index.value_namespace_prefix = name_space_prefix
                                            if(value_path == "under-line-interface-handle"):
                                                self.under_line_interface_handle = value
                                                self.under_line_interface_handle.value_namespace = name_space
                                                self.under_line_interface_handle.value_namespace_prefix = name_space_prefix


                                    class SkywarpQosPolicyClass(Entity):
                                        """
                                        Skywarp QoS EA policy class details
                                        
                                        .. attribute:: qos_show_ea_pclass_st
                                        
                                        	qos show ea pclass st
                                        	**type**\: list of    :py:class:`QosShowEaPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass, self).__init__()

                                            self.yang_name = "skywarp-qos-policy-class"
                                            self.yang_parent_name = "details"

                                            self.qos_show_ea_pclass_st = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)


                                        class QosShowEaPclassSt(Entity):
                                            """
                                            qos show ea pclass st
                                            
                                            .. attribute:: class_level
                                            
                                            	Class level
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: class_name
                                            
                                            	Class name
                                            	**type**\:  str
                                            
                                            	**length:** 0..65
                                            
                                            .. attribute:: config
                                            
                                            	QoS EA Class Configuration
                                            	**type**\:   :py:class:`Config <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config>`
                                            
                                            .. attribute:: index
                                            
                                            	Class Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: node_flags
                                            
                                            	Node Flags
                                            	**type**\:  str
                                            
                                            	**length:** 0..101
                                            
                                            .. attribute:: policy_name
                                            
                                            	Policy name
                                            	**type**\:  str
                                            
                                            	**length:** 0..65
                                            
                                            .. attribute:: result
                                            
                                            	QoS EA Class Result
                                            	**type**\:   :py:class:`Result <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result>`
                                            
                                            .. attribute:: stats_flags
                                            
                                            	Statistical Flags
                                            	**type**\:  str
                                            
                                            	**length:** 0..101
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__init__()

                                                self.yang_name = "qos-show-ea-pclass-st"
                                                self.yang_parent_name = "skywarp-qos-policy-class"

                                                self.class_level = YLeaf(YType.uint8, "class-level")

                                                self.class_name = YLeaf(YType.str, "class-name")

                                                self.index = YLeaf(YType.uint16, "index")

                                                self.node_flags = YLeaf(YType.str, "node-flags")

                                                self.policy_name = YLeaf(YType.str, "policy-name")

                                                self.stats_flags = YLeaf(YType.str, "stats-flags")

                                                self.config = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                                self.config.parent = self
                                                self._children_name_map["config"] = "config"
                                                self._children_yang_names.add("config")

                                                self.result = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                                self.result.parent = self
                                                self._children_name_map["result"] = "result"
                                                self._children_yang_names.add("result")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("class_level",
                                                                "class_name",
                                                                "index",
                                                                "node_flags",
                                                                "policy_name",
                                                                "stats_flags") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)


                                            class Config(Entity):
                                                """
                                                QoS EA Class Configuration
                                                
                                                .. attribute:: node_config
                                                
                                                	Node Config
                                                	**type**\:  str
                                                
                                                	**length:** 0..101
                                                
                                                .. attribute:: police
                                                
                                                	QoS EA Policer parameters
                                                	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police>`
                                                
                                                .. attribute:: shape
                                                
                                                	QoS EA Shaper parameters
                                                	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape>`
                                                
                                                .. attribute:: wfq
                                                
                                                	QoS EA WFQ parameters
                                                	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq>`
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__init__()

                                                    self.yang_name = "config"
                                                    self.yang_parent_name = "qos-show-ea-pclass-st"

                                                    self.node_config = YLeaf(YType.str, "node-config")

                                                    self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                    self._children_yang_names.add("police")

                                                    self.shape = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                                    self.shape.parent = self
                                                    self._children_name_map["shape"] = "shape"
                                                    self._children_yang_names.add("shape")

                                                    self.wfq = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                                    self.wfq.parent = self
                                                    self._children_name_map["wfq"] = "wfq"
                                                    self._children_yang_names.add("wfq")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("node_config") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)


                                                class Police(Entity):
                                                    """
                                                    QoS EA Policer parameters
                                                    
                                                    .. attribute:: cbs
                                                    
                                                    	CBS
                                                    	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs>`
                                                    
                                                    .. attribute:: cir
                                                    
                                                    	CIR
                                                    	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir>`
                                                    
                                                    .. attribute:: color_aware
                                                    
                                                    	Color Aware
                                                    	**type**\:  bool
                                                    
                                                    .. attribute:: policer_type
                                                    
                                                    	Policer type
                                                    	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__init__()

                                                        self.yang_name = "police"
                                                        self.yang_parent_name = "config"

                                                        self.color_aware = YLeaf(YType.boolean, "color-aware")

                                                        self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                                        self.cbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                        self.cbs.parent = self
                                                        self._children_name_map["cbs"] = "cbs"
                                                        self._children_yang_names.add("cbs")

                                                        self.cir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                        self.cir.parent = self
                                                        self._children_name_map["cir"] = "cir"
                                                        self._children_yang_names.add("cir")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("color_aware",
                                                                        "policer_type") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)


                                                    class Cir(Entity):
                                                        """
                                                        CIR
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__init__()

                                                            self.yang_name = "cir"
                                                            self.yang_parent_name = "police"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "cir" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix


                                                    class Cbs(Entity):
                                                        """
                                                        CBS
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__init__()

                                                            self.yang_name = "cbs"
                                                            self.yang_parent_name = "police"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "cbs" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.color_aware.is_set or
                                                            self.policer_type.is_set or
                                                            (self.cbs is not None and self.cbs.has_data()) or
                                                            (self.cir is not None and self.cir.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.color_aware.yfilter != YFilter.not_set or
                                                            self.policer_type.yfilter != YFilter.not_set or
                                                            (self.cbs is not None and self.cbs.has_operation()) or
                                                            (self.cir is not None and self.cir.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "police" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.color_aware.is_set or self.color_aware.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.color_aware.get_name_leafdata())
                                                        if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.policer_type.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "cbs"):
                                                            if (self.cbs is None):
                                                                self.cbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                                self.cbs.parent = self
                                                                self._children_name_map["cbs"] = "cbs"
                                                            return self.cbs

                                                        if (child_yang_name == "cir"):
                                                            if (self.cir is None):
                                                                self.cir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                                self.cir.parent = self
                                                                self._children_name_map["cir"] = "cir"
                                                            return self.cir

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "cbs" or name == "cir" or name == "color-aware" or name == "policer-type"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "color-aware"):
                                                            self.color_aware = value
                                                            self.color_aware.value_namespace = name_space
                                                            self.color_aware.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "policer-type"):
                                                            self.policer_type = value
                                                            self.policer_type.value_namespace = name_space
                                                            self.policer_type.value_namespace_prefix = name_space_prefix


                                                class Shape(Entity):
                                                    """
                                                    QoS EA Shaper parameters
                                                    
                                                    .. attribute:: pbs
                                                    
                                                    	PBS in bytes
                                                    	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs>`
                                                    
                                                    .. attribute:: pir
                                                    
                                                    	PIR in kbps
                                                    	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape, self).__init__()

                                                        self.yang_name = "shape"
                                                        self.yang_parent_name = "config"

                                                        self.pbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                        self.pbs.parent = self
                                                        self._children_name_map["pbs"] = "pbs"
                                                        self._children_yang_names.add("pbs")

                                                        self.pir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                        self.pir.parent = self
                                                        self._children_name_map["pir"] = "pir"
                                                        self._children_yang_names.add("pir")


                                                    class Pir(Entity):
                                                        """
                                                        PIR in kbps
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__init__()

                                                            self.yang_name = "pir"
                                                            self.yang_parent_name = "shape"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "pir" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix


                                                    class Pbs(Entity):
                                                        """
                                                        PBS in bytes
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__init__()

                                                            self.yang_name = "pbs"
                                                            self.yang_parent_name = "shape"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "pbs" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            (self.pbs is not None and self.pbs.has_data()) or
                                                            (self.pir is not None and self.pir.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            (self.pbs is not None and self.pbs.has_operation()) or
                                                            (self.pir is not None and self.pir.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "shape" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "pbs"):
                                                            if (self.pbs is None):
                                                                self.pbs = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                                self.pbs.parent = self
                                                                self._children_name_map["pbs"] = "pbs"
                                                            return self.pbs

                                                        if (child_yang_name == "pir"):
                                                            if (self.pir is None):
                                                                self.pir = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                                self.pir.parent = self
                                                                self._children_name_map["pir"] = "pir"
                                                            return self.pir

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "pbs" or name == "pir"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        pass


                                                class Wfq(Entity):
                                                    """
                                                    QoS EA WFQ parameters
                                                    
                                                    .. attribute:: bandwidth
                                                    
                                                    	Bandwidth
                                                    	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth>`
                                                    
                                                    .. attribute:: excess_ratio
                                                    
                                                    	Excess Ratio
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..65535
                                                    
                                                    .. attribute:: sum_of_bandwidth
                                                    
                                                    	Sum of Bandwidth
                                                    	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth>`
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__init__()

                                                        self.yang_name = "wfq"
                                                        self.yang_parent_name = "config"

                                                        self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                                        self.bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                        self.bandwidth.parent = self
                                                        self._children_name_map["bandwidth"] = "bandwidth"
                                                        self._children_yang_names.add("bandwidth")

                                                        self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                        self.sum_of_bandwidth.parent = self
                                                        self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                        self._children_yang_names.add("sum-of-bandwidth")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("excess_ratio") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)


                                                    class Bandwidth(Entity):
                                                        """
                                                        Bandwidth
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__init__()

                                                            self.yang_name = "bandwidth"
                                                            self.yang_parent_name = "wfq"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "bandwidth" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix


                                                    class SumOfBandwidth(Entity):
                                                        """
                                                        Sum of Bandwidth
                                                        
                                                        .. attribute:: unit
                                                        
                                                        	Config unit
                                                        	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                        
                                                        .. attribute:: value
                                                        
                                                        	Config value
                                                        	**type**\:  int
                                                        
                                                        	**range:** 0..4294967295
                                                        
                                                        

                                                        """

                                                        _prefix = 'skp-qos-oper'
                                                        _revision = '2016-02-18'

                                                        def __init__(self):
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__init__()

                                                            self.yang_name = "sum-of-bandwidth"
                                                            self.yang_parent_name = "wfq"

                                                            self.unit = YLeaf(YType.enumeration, "unit")

                                                            self.value = YLeaf(YType.uint32, "value")

                                                        def __setattr__(self, name, value):
                                                            self._check_monkey_patching_error(name, value)
                                                            with _handle_type_error():
                                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                        "Please use list append or extend method."
                                                                                        .format(value))
                                                                if isinstance(value, Enum.YLeaf):
                                                                    value = value.name
                                                                if name in ("unit",
                                                                            "value") and name in self.__dict__:
                                                                    if isinstance(value, YLeaf):
                                                                        self.__dict__[name].set(value.get())
                                                                    elif isinstance(value, YLeafList):
                                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)
                                                                    else:
                                                                        self.__dict__[name].set(value)
                                                                else:
                                                                    if hasattr(value, "parent") and name != "parent":
                                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                            value.parent = self
                                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                            value.parent = self
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)

                                                        def has_data(self):
                                                            return (
                                                                self.unit.is_set or
                                                                self.value.is_set)

                                                        def has_operation(self):
                                                            return (
                                                                self.yfilter != YFilter.not_set or
                                                                self.unit.yfilter != YFilter.not_set or
                                                                self.value.yfilter != YFilter.not_set)

                                                        def get_segment_path(self):
                                                            path_buffer = ""
                                                            path_buffer = "sum-of-bandwidth" + path_buffer

                                                            return path_buffer

                                                        def get_entity_path(self, ancestor):
                                                            path_buffer = ""
                                                            if (ancestor is None):
                                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                            else:
                                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                            leaf_name_data = LeafDataList()
                                                            if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.unit.get_name_leafdata())
                                                            if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                                leaf_name_data.append(self.value.get_name_leafdata())

                                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                                            return entity_path

                                                        def get_child_by_name(self, child_yang_name, segment_path):
                                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                            if child is not None:
                                                                return child

                                                            return None

                                                        def has_leaf_or_child_of_name(self, name):
                                                            if(name == "unit" or name == "value"):
                                                                return True
                                                            return False

                                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                                            if(value_path == "unit"):
                                                                self.unit = value
                                                                self.unit.value_namespace = name_space
                                                                self.unit.value_namespace_prefix = name_space_prefix
                                                            if(value_path == "value"):
                                                                self.value = value
                                                                self.value.value_namespace = name_space
                                                                self.value.value_namespace_prefix = name_space_prefix

                                                    def has_data(self):
                                                        return (
                                                            self.excess_ratio.is_set or
                                                            (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                            (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.excess_ratio.yfilter != YFilter.not_set or
                                                            (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                            (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "wfq" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        if (child_yang_name == "bandwidth"):
                                                            if (self.bandwidth is None):
                                                                self.bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                                self.bandwidth.parent = self
                                                                self._children_name_map["bandwidth"] = "bandwidth"
                                                            return self.bandwidth

                                                        if (child_yang_name == "sum-of-bandwidth"):
                                                            if (self.sum_of_bandwidth is None):
                                                                self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                                self.sum_of_bandwidth.parent = self
                                                                self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                            return self.sum_of_bandwidth

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "excess-ratio"):
                                                            self.excess_ratio = value
                                                            self.excess_ratio.value_namespace = name_space
                                                            self.excess_ratio.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.node_config.is_set or
                                                        (self.police is not None and self.police.has_data()) or
                                                        (self.shape is not None and self.shape.has_data()) or
                                                        (self.wfq is not None and self.wfq.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.node_config.yfilter != YFilter.not_set or
                                                        (self.police is not None and self.police.has_operation()) or
                                                        (self.shape is not None and self.shape.has_operation()) or
                                                        (self.wfq is not None and self.wfq.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "config" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.node_config.is_set or self.node_config.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.node_config.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "police"):
                                                        if (self.police is None):
                                                            self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                                            self.police.parent = self
                                                            self._children_name_map["police"] = "police"
                                                        return self.police

                                                    if (child_yang_name == "shape"):
                                                        if (self.shape is None):
                                                            self.shape = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                                            self.shape.parent = self
                                                            self._children_name_map["shape"] = "shape"
                                                        return self.shape

                                                    if (child_yang_name == "wfq"):
                                                        if (self.wfq is None):
                                                            self.wfq = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                                            self.wfq.parent = self
                                                            self._children_name_map["wfq"] = "wfq"
                                                        return self.wfq

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "police" or name == "shape" or name == "wfq" or name == "node-config"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "node-config"):
                                                        self.node_config = value
                                                        self.node_config.value_namespace = name_space
                                                        self.node_config.value_namespace_prefix = name_space_prefix


                                            class Result(Entity):
                                                """
                                                QoS EA Class Result
                                                
                                                .. attribute:: police
                                                
                                                	QoS EA Policer Result
                                                	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police>`
                                                
                                                .. attribute:: queue
                                                
                                                	QoS EA Queue Result
                                                	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue>`
                                                
                                                .. attribute:: stats_id
                                                
                                                	Stats ID
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__init__()

                                                    self.yang_name = "result"
                                                    self.yang_parent_name = "qos-show-ea-pclass-st"

                                                    self.stats_id = YLeaf(YType.uint32, "stats-id")

                                                    self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                    self._children_yang_names.add("police")

                                                    self.queue = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                                    self.queue.parent = self
                                                    self._children_name_map["queue"] = "queue"
                                                    self._children_yang_names.add("queue")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("stats_id") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)


                                                class Queue(Entity):
                                                    """
                                                    QoS EA Queue Result
                                                    
                                                    .. attribute:: commit_tx
                                                    
                                                    	Commit Tx
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: drop
                                                    
                                                    	Drop
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: excess_tx
                                                    
                                                    	Excess Tx
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: queue_id
                                                    
                                                    	Queue ID
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__init__()

                                                        self.yang_name = "queue"
                                                        self.yang_parent_name = "result"

                                                        self.commit_tx = YLeaf(YType.uint32, "commit-tx")

                                                        self.drop = YLeaf(YType.uint32, "drop")

                                                        self.excess_tx = YLeaf(YType.uint32, "excess-tx")

                                                        self.queue_id = YLeaf(YType.uint32, "queue-id")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("commit_tx",
                                                                        "drop",
                                                                        "excess_tx",
                                                                        "queue_id") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.commit_tx.is_set or
                                                            self.drop.is_set or
                                                            self.excess_tx.is_set or
                                                            self.queue_id.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.commit_tx.yfilter != YFilter.not_set or
                                                            self.drop.yfilter != YFilter.not_set or
                                                            self.excess_tx.yfilter != YFilter.not_set or
                                                            self.queue_id.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "queue" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.commit_tx.is_set or self.commit_tx.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.commit_tx.get_name_leafdata())
                                                        if (self.drop.is_set or self.drop.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.drop.get_name_leafdata())
                                                        if (self.excess_tx.is_set or self.excess_tx.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.excess_tx.get_name_leafdata())
                                                        if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.queue_id.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "commit-tx" or name == "drop" or name == "excess-tx" or name == "queue-id"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "commit-tx"):
                                                            self.commit_tx = value
                                                            self.commit_tx.value_namespace = name_space
                                                            self.commit_tx.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "drop"):
                                                            self.drop = value
                                                            self.drop.value_namespace = name_space
                                                            self.drop.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "excess-tx"):
                                                            self.excess_tx = value
                                                            self.excess_tx.value_namespace = name_space
                                                            self.excess_tx.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "queue-id"):
                                                            self.queue_id = value
                                                            self.queue_id.value_namespace = name_space
                                                            self.queue_id.value_namespace_prefix = name_space_prefix


                                                class Police(Entity):
                                                    """
                                                    QoS EA Policer Result
                                                    
                                                    .. attribute:: conform
                                                    
                                                    	Conform Rate
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: exceed
                                                    
                                                    	Exceed Rate
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: token_bucket_id
                                                    
                                                    	Token Bucket ID
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    .. attribute:: violate
                                                    
                                                    	Violate Rate
                                                    	**type**\:  int
                                                    
                                                    	**range:** 0..4294967295
                                                    
                                                    

                                                    """

                                                    _prefix = 'skp-qos-oper'
                                                    _revision = '2016-02-18'

                                                    def __init__(self):
                                                        super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__init__()

                                                        self.yang_name = "police"
                                                        self.yang_parent_name = "result"

                                                        self.conform = YLeaf(YType.uint32, "conform")

                                                        self.exceed = YLeaf(YType.uint32, "exceed")

                                                        self.token_bucket_id = YLeaf(YType.uint32, "token-bucket-id")

                                                        self.violate = YLeaf(YType.uint32, "violate")

                                                    def __setattr__(self, name, value):
                                                        self._check_monkey_patching_error(name, value)
                                                        with _handle_type_error():
                                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                    "Please use list append or extend method."
                                                                                    .format(value))
                                                            if isinstance(value, Enum.YLeaf):
                                                                value = value.name
                                                            if name in ("conform",
                                                                        "exceed",
                                                                        "token_bucket_id",
                                                                        "violate") and name in self.__dict__:
                                                                if isinstance(value, YLeaf):
                                                                    self.__dict__[name].set(value.get())
                                                                elif isinstance(value, YLeafList):
                                                                    super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)
                                                                else:
                                                                    self.__dict__[name].set(value)
                                                            else:
                                                                if hasattr(value, "parent") and name != "parent":
                                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                        value.parent = self
                                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                        value.parent = self
                                                                super(PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)

                                                    def has_data(self):
                                                        return (
                                                            self.conform.is_set or
                                                            self.exceed.is_set or
                                                            self.token_bucket_id.is_set or
                                                            self.violate.is_set)

                                                    def has_operation(self):
                                                        return (
                                                            self.yfilter != YFilter.not_set or
                                                            self.conform.yfilter != YFilter.not_set or
                                                            self.exceed.yfilter != YFilter.not_set or
                                                            self.token_bucket_id.yfilter != YFilter.not_set or
                                                            self.violate.yfilter != YFilter.not_set)

                                                    def get_segment_path(self):
                                                        path_buffer = ""
                                                        path_buffer = "police" + path_buffer

                                                        return path_buffer

                                                    def get_entity_path(self, ancestor):
                                                        path_buffer = ""
                                                        if (ancestor is None):
                                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                        else:
                                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                        leaf_name_data = LeafDataList()
                                                        if (self.conform.is_set or self.conform.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.conform.get_name_leafdata())
                                                        if (self.exceed.is_set or self.exceed.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.exceed.get_name_leafdata())
                                                        if (self.token_bucket_id.is_set or self.token_bucket_id.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.token_bucket_id.get_name_leafdata())
                                                        if (self.violate.is_set or self.violate.yfilter != YFilter.not_set):
                                                            leaf_name_data.append(self.violate.get_name_leafdata())

                                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                                        return entity_path

                                                    def get_child_by_name(self, child_yang_name, segment_path):
                                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                        if child is not None:
                                                            return child

                                                        return None

                                                    def has_leaf_or_child_of_name(self, name):
                                                        if(name == "conform" or name == "exceed" or name == "token-bucket-id" or name == "violate"):
                                                            return True
                                                        return False

                                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                                        if(value_path == "conform"):
                                                            self.conform = value
                                                            self.conform.value_namespace = name_space
                                                            self.conform.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "exceed"):
                                                            self.exceed = value
                                                            self.exceed.value_namespace = name_space
                                                            self.exceed.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "token-bucket-id"):
                                                            self.token_bucket_id = value
                                                            self.token_bucket_id.value_namespace = name_space
                                                            self.token_bucket_id.value_namespace_prefix = name_space_prefix
                                                        if(value_path == "violate"):
                                                            self.violate = value
                                                            self.violate.value_namespace = name_space
                                                            self.violate.value_namespace_prefix = name_space_prefix

                                                def has_data(self):
                                                    return (
                                                        self.stats_id.is_set or
                                                        (self.police is not None and self.police.has_data()) or
                                                        (self.queue is not None and self.queue.has_data()))

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.stats_id.yfilter != YFilter.not_set or
                                                        (self.police is not None and self.police.has_operation()) or
                                                        (self.queue is not None and self.queue.has_operation()))

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "result" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.stats_id.is_set or self.stats_id.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.stats_id.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    if (child_yang_name == "police"):
                                                        if (self.police is None):
                                                            self.police = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                                            self.police.parent = self
                                                            self._children_name_map["police"] = "police"
                                                        return self.police

                                                    if (child_yang_name == "queue"):
                                                        if (self.queue is None):
                                                            self.queue = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                                            self.queue.parent = self
                                                            self._children_name_map["queue"] = "queue"
                                                        return self.queue

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "police" or name == "queue" or name == "stats-id"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "stats-id"):
                                                        self.stats_id = value
                                                        self.stats_id.value_namespace = name_space
                                                        self.stats_id.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.class_level.is_set or
                                                    self.class_name.is_set or
                                                    self.index.is_set or
                                                    self.node_flags.is_set or
                                                    self.policy_name.is_set or
                                                    self.stats_flags.is_set or
                                                    (self.config is not None and self.config.has_data()) or
                                                    (self.result is not None and self.result.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.class_level.yfilter != YFilter.not_set or
                                                    self.class_name.yfilter != YFilter.not_set or
                                                    self.index.yfilter != YFilter.not_set or
                                                    self.node_flags.yfilter != YFilter.not_set or
                                                    self.policy_name.yfilter != YFilter.not_set or
                                                    self.stats_flags.yfilter != YFilter.not_set or
                                                    (self.config is not None and self.config.has_operation()) or
                                                    (self.result is not None and self.result.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "qos-show-ea-pclass-st" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.class_level.get_name_leafdata())
                                                if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.class_name.get_name_leafdata())
                                                if (self.index.is_set or self.index.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.index.get_name_leafdata())
                                                if (self.node_flags.is_set or self.node_flags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.node_flags.get_name_leafdata())
                                                if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policy_name.get_name_leafdata())
                                                if (self.stats_flags.is_set or self.stats_flags.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.stats_flags.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "config"):
                                                    if (self.config is None):
                                                        self.config = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                                        self.config.parent = self
                                                        self._children_name_map["config"] = "config"
                                                    return self.config

                                                if (child_yang_name == "result"):
                                                    if (self.result is None):
                                                        self.result = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                                        self.result.parent = self
                                                        self._children_name_map["result"] = "result"
                                                    return self.result

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "config" or name == "result" or name == "class-level" or name == "class-name" or name == "index" or name == "node-flags" or name == "policy-name" or name == "stats-flags"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "class-level"):
                                                    self.class_level = value
                                                    self.class_level.value_namespace = name_space
                                                    self.class_level.value_namespace_prefix = name_space_prefix
                                                if(value_path == "class-name"):
                                                    self.class_name = value
                                                    self.class_name.value_namespace = name_space
                                                    self.class_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "index"):
                                                    self.index = value
                                                    self.index.value_namespace = name_space
                                                    self.index.value_namespace_prefix = name_space_prefix
                                                if(value_path == "node-flags"):
                                                    self.node_flags = value
                                                    self.node_flags.value_namespace = name_space
                                                    self.node_flags.value_namespace_prefix = name_space_prefix
                                                if(value_path == "policy-name"):
                                                    self.policy_name = value
                                                    self.policy_name.value_namespace = name_space
                                                    self.policy_name.value_namespace_prefix = name_space_prefix
                                                if(value_path == "stats-flags"):
                                                    self.stats_flags = value
                                                    self.stats_flags.value_namespace = name_space
                                                    self.stats_flags.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.qos_show_ea_pclass_st:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.qos_show_ea_pclass_st:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "skywarp-qos-policy-class" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "qos-show-ea-pclass-st"):
                                                for c in self.qos_show_ea_pclass_st:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass.QosShowEaPclassSt()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.qos_show_ea_pclass_st.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "qos-show-ea-pclass-st"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            (self.header is not None and self.header.has_data()) or
                                            (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                            (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            (self.header is not None and self.header.has_operation()) or
                                            (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                            (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "details" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "header"):
                                            if (self.header is None):
                                                self.header = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.Header()
                                                self.header.parent = self
                                                self._children_name_map["header"] = "header"
                                            return self.header

                                        if (child_yang_name == "interface-parameters"):
                                            if (self.interface_parameters is None):
                                                self.interface_parameters = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.InterfaceParameters()
                                                self.interface_parameters.parent = self
                                                self._children_name_map["interface_parameters"] = "interface-parameters"
                                            return self.interface_parameters

                                        if (child_yang_name == "skywarp-qos-policy-class"):
                                            if (self.skywarp_qos_policy_class is None):
                                                self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details.SkywarpQosPolicyClass()
                                                self.skywarp_qos_policy_class.parent = self
                                                self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                            return self.skywarp_qos_policy_class

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        pass

                                def has_data(self):
                                    return (self.details is not None and self.details.has_data())

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        (self.details is not None and self.details.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "bundle-input" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "details"):
                                        if (self.details is None):
                                            self.details = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput.Details()
                                            self.details.parent = self
                                            self._children_name_map["details"] = "details"
                                        return self.details

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "details"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.interface_name.is_set or
                                    (self.bundle_input is not None and self.bundle_input.has_data()) or
                                    (self.bundle_output is not None and self.bundle_output.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    (self.bundle_input is not None and self.bundle_input.has_operation()) or
                                    (self.bundle_output is not None and self.bundle_output.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "member-interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "bundle-input"):
                                    if (self.bundle_input is None):
                                        self.bundle_input = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleInput()
                                        self.bundle_input.parent = self
                                        self._children_name_map["bundle_input"] = "bundle-input"
                                    return self.bundle_input

                                if (child_yang_name == "bundle-output"):
                                    if (self.bundle_output is None):
                                        self.bundle_output = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface.BundleOutput()
                                        self.bundle_output.parent = self
                                        self._children_name_map["bundle_output"] = "bundle-output"
                                    return self.bundle_output

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "bundle-input" or name == "bundle-output" or name == "interface-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.member_interface:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.member_interface:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "member-interfaces" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "member-interface"):
                                for c in self.member_interface:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces.MemberInterface()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.member_interface.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "member-interface"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.interface_name.is_set or
                            (self.member_interfaces is not None and self.member_interfaces.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.interface_name.yfilter != YFilter.not_set or
                            (self.member_interfaces is not None and self.member_interfaces.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "bundle-interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.interface_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "member-interfaces"):
                            if (self.member_interfaces is None):
                                self.member_interfaces = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface.MemberInterfaces()
                                self.member_interfaces.parent = self
                                self._children_name_map["member_interfaces"] = "member-interfaces"
                            return self.member_interfaces

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "member-interfaces" or name == "interface-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "interface-name"):
                            self.interface_name = value
                            self.interface_name.value_namespace = name_space
                            self.interface_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.bundle_interface:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.bundle_interface:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "bundle-interfaces" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "bundle-interface"):
                        for c in self.bundle_interface:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PlatformQosEa.Nodes.Node.BundleInterfaces.BundleInterface()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.bundle_interface.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "bundle-interface"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Interfaces(Entity):
                """
                QoS\-EA list of interfaces
                
                .. attribute:: interface
                
                	QoS\-EA interface name
                	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface>`
                
                

                """

                _prefix = 'skp-qos-oper'
                _revision = '2016-02-18'

                def __init__(self):
                    super(PlatformQosEa.Nodes.Node.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "node"

                    self.interface = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(PlatformQosEa.Nodes.Node.Interfaces, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(PlatformQosEa.Nodes.Node.Interfaces, self).__setattr__(name, value)


                class Interface(Entity):
                    """
                    QoS\-EA interface name
                    
                    .. attribute:: interface_name  <key>
                    
                    	The name of the interface
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: input
                    
                    	QoS\-EA policy direction ingress
                    	**type**\:   :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input>`
                    
                    .. attribute:: output
                    
                    	QoS\-EA policy direction egress
                    	**type**\:   :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output>`
                    
                    

                    """

                    _prefix = 'skp-qos-oper'
                    _revision = '2016-02-18'

                    def __init__(self):
                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface, self).__init__()

                        self.yang_name = "interface"
                        self.yang_parent_name = "interfaces"

                        self.interface_name = YLeaf(YType.str, "interface-name")

                        self.input = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input()
                        self.input.parent = self
                        self._children_name_map["input"] = "input"
                        self._children_yang_names.add("input")

                        self.output = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output()
                        self.output.parent = self
                        self._children_name_map["output"] = "output"
                        self._children_yang_names.add("output")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("interface_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface, self).__setattr__(name, value)


                    class Output(Entity):
                        """
                        QoS\-EA policy direction egress
                        
                        .. attribute:: details
                        
                        	QoS\-EA policy details
                        	**type**\:   :py:class:`Details <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details>`
                        
                        

                        """

                        _prefix = 'skp-qos-oper'
                        _revision = '2016-02-18'

                        def __init__(self):
                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output, self).__init__()

                            self.yang_name = "output"
                            self.yang_parent_name = "interface"

                            self.details = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details()
                            self.details.parent = self
                            self._children_name_map["details"] = "details"
                            self._children_yang_names.add("details")


                        class Details(Entity):
                            """
                            QoS\-EA policy details
                            
                            .. attribute:: header
                            
                            	QoS EA policy header
                            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.Header>`
                            
                            .. attribute:: interface_parameters
                            
                            	QoS EA Interface Parameters
                            	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.InterfaceParameters>`
                            
                            .. attribute:: skywarp_qos_policy_class
                            
                            	Skywarp QoS EA policy class details
                            	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details, self).__init__()

                                self.yang_name = "details"
                                self.yang_parent_name = "output"

                                self.header = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.Header()
                                self.header.parent = self
                                self._children_name_map["header"] = "header"
                                self._children_yang_names.add("header")

                                self.interface_parameters = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.InterfaceParameters()
                                self.interface_parameters.parent = self
                                self._children_name_map["interface_parameters"] = "interface-parameters"
                                self._children_yang_names.add("interface-parameters")

                                self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass()
                                self.skywarp_qos_policy_class.parent = self
                                self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                self._children_yang_names.add("skywarp-qos-policy-class")


                            class Header(Entity):
                                """
                                QoS EA policy header
                                
                                .. attribute:: classes
                                
                                	Number of classes
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: direction
                                
                                	Direction
                                	**type**\:  str
                                
                                	**length:** 0..11
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                	**length:** 0..101
                                
                                .. attribute:: policy_name
                                
                                	Policy name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.Header, self).__init__()

                                    self.yang_name = "header"
                                    self.yang_parent_name = "details"

                                    self.classes = YLeaf(YType.uint16, "classes")

                                    self.direction = YLeaf(YType.str, "direction")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.policy_name = YLeaf(YType.str, "policy-name")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("classes",
                                                    "direction",
                                                    "interface_name",
                                                    "policy_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.Header, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.Header, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.classes.is_set or
                                        self.direction.is_set or
                                        self.interface_name.is_set or
                                        self.policy_name.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.classes.yfilter != YFilter.not_set or
                                        self.direction.yfilter != YFilter.not_set or
                                        self.interface_name.yfilter != YFilter.not_set or
                                        self.policy_name.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "header" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.classes.get_name_leafdata())
                                    if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.direction.get_name_leafdata())
                                    if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_name.get_name_leafdata())
                                    if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "classes"):
                                        self.classes = value
                                        self.classes.value_namespace = name_space
                                        self.classes.value_namespace_prefix = name_space_prefix
                                    if(value_path == "direction"):
                                        self.direction = value
                                        self.direction.value_namespace = name_space
                                        self.direction.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-name"):
                                        self.interface_name = value
                                        self.interface_name.value_namespace = name_space
                                        self.interface_name.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-name"):
                                        self.policy_name = value
                                        self.policy_name.value_namespace = name_space
                                        self.policy_name.value_namespace_prefix = name_space_prefix


                            class InterfaceParameters(Entity):
                                """
                                QoS EA Interface Parameters
                                
                                .. attribute:: bundle_id
                                
                                	Bundle Interface ID
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hierarchical_depth
                                
                                	Max Hierarchial Depth
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: interface_handle
                                
                                	Interface Handle
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: interface_rate
                                
                                	Interface Programmed Rate
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: interface_type
                                
                                	Interface Type
                                	**type**\:  str
                                
                                	**length:** 0..101
                                
                                .. attribute:: policy_map_id
                                
                                	Policy Map ID
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: policy_name
                                
                                	Policy name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                .. attribute:: port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: port_shaper_rate
                                
                                	Port Shaper Rate
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: qos_interface_handle
                                
                                	QoS Interface handle
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: uidb_index
                                
                                	UIDB Index
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: under_line_interface_handle
                                
                                	UnderLineInterface Handle
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.InterfaceParameters, self).__init__()

                                    self.yang_name = "interface-parameters"
                                    self.yang_parent_name = "details"

                                    self.bundle_id = YLeaf(YType.uint16, "bundle-id")

                                    self.hierarchical_depth = YLeaf(YType.uint8, "hierarchical-depth")

                                    self.interface_handle = YLeaf(YType.str, "interface-handle")

                                    self.interface_rate = YLeaf(YType.uint32, "interface-rate")

                                    self.interface_type = YLeaf(YType.str, "interface-type")

                                    self.policy_map_id = YLeaf(YType.uint16, "policy-map-id")

                                    self.policy_name = YLeaf(YType.str, "policy-name")

                                    self.port = YLeaf(YType.uint32, "port")

                                    self.port_shaper_rate = YLeaf(YType.uint32, "port-shaper-rate")

                                    self.qos_interface_handle = YLeaf(YType.uint64, "qos-interface-handle")

                                    self.uidb_index = YLeaf(YType.uint16, "uidb-index")

                                    self.under_line_interface_handle = YLeaf(YType.str, "under-line-interface-handle")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("bundle_id",
                                                    "hierarchical_depth",
                                                    "interface_handle",
                                                    "interface_rate",
                                                    "interface_type",
                                                    "policy_map_id",
                                                    "policy_name",
                                                    "port",
                                                    "port_shaper_rate",
                                                    "qos_interface_handle",
                                                    "uidb_index",
                                                    "under_line_interface_handle") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.InterfaceParameters, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.InterfaceParameters, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.bundle_id.is_set or
                                        self.hierarchical_depth.is_set or
                                        self.interface_handle.is_set or
                                        self.interface_rate.is_set or
                                        self.interface_type.is_set or
                                        self.policy_map_id.is_set or
                                        self.policy_name.is_set or
                                        self.port.is_set or
                                        self.port_shaper_rate.is_set or
                                        self.qos_interface_handle.is_set or
                                        self.uidb_index.is_set or
                                        self.under_line_interface_handle.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.bundle_id.yfilter != YFilter.not_set or
                                        self.hierarchical_depth.yfilter != YFilter.not_set or
                                        self.interface_handle.yfilter != YFilter.not_set or
                                        self.interface_rate.yfilter != YFilter.not_set or
                                        self.interface_type.yfilter != YFilter.not_set or
                                        self.policy_map_id.yfilter != YFilter.not_set or
                                        self.policy_name.yfilter != YFilter.not_set or
                                        self.port.yfilter != YFilter.not_set or
                                        self.port_shaper_rate.yfilter != YFilter.not_set or
                                        self.qos_interface_handle.yfilter != YFilter.not_set or
                                        self.uidb_index.yfilter != YFilter.not_set or
                                        self.under_line_interface_handle.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-parameters" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.bundle_id.is_set or self.bundle_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.bundle_id.get_name_leafdata())
                                    if (self.hierarchical_depth.is_set or self.hierarchical_depth.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.hierarchical_depth.get_name_leafdata())
                                    if (self.interface_handle.is_set or self.interface_handle.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_handle.get_name_leafdata())
                                    if (self.interface_rate.is_set or self.interface_rate.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_rate.get_name_leafdata())
                                    if (self.interface_type.is_set or self.interface_type.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_type.get_name_leafdata())
                                    if (self.policy_map_id.is_set or self.policy_map_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_map_id.get_name_leafdata())
                                    if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_name.get_name_leafdata())
                                    if (self.port.is_set or self.port.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.port.get_name_leafdata())
                                    if (self.port_shaper_rate.is_set or self.port_shaper_rate.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.port_shaper_rate.get_name_leafdata())
                                    if (self.qos_interface_handle.is_set or self.qos_interface_handle.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.qos_interface_handle.get_name_leafdata())
                                    if (self.uidb_index.is_set or self.uidb_index.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.uidb_index.get_name_leafdata())
                                    if (self.under_line_interface_handle.is_set or self.under_line_interface_handle.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.under_line_interface_handle.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "bundle-id" or name == "hierarchical-depth" or name == "interface-handle" or name == "interface-rate" or name == "interface-type" or name == "policy-map-id" or name == "policy-name" or name == "port" or name == "port-shaper-rate" or name == "qos-interface-handle" or name == "uidb-index" or name == "under-line-interface-handle"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "bundle-id"):
                                        self.bundle_id = value
                                        self.bundle_id.value_namespace = name_space
                                        self.bundle_id.value_namespace_prefix = name_space_prefix
                                    if(value_path == "hierarchical-depth"):
                                        self.hierarchical_depth = value
                                        self.hierarchical_depth.value_namespace = name_space
                                        self.hierarchical_depth.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-handle"):
                                        self.interface_handle = value
                                        self.interface_handle.value_namespace = name_space
                                        self.interface_handle.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-rate"):
                                        self.interface_rate = value
                                        self.interface_rate.value_namespace = name_space
                                        self.interface_rate.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-type"):
                                        self.interface_type = value
                                        self.interface_type.value_namespace = name_space
                                        self.interface_type.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-map-id"):
                                        self.policy_map_id = value
                                        self.policy_map_id.value_namespace = name_space
                                        self.policy_map_id.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-name"):
                                        self.policy_name = value
                                        self.policy_name.value_namespace = name_space
                                        self.policy_name.value_namespace_prefix = name_space_prefix
                                    if(value_path == "port"):
                                        self.port = value
                                        self.port.value_namespace = name_space
                                        self.port.value_namespace_prefix = name_space_prefix
                                    if(value_path == "port-shaper-rate"):
                                        self.port_shaper_rate = value
                                        self.port_shaper_rate.value_namespace = name_space
                                        self.port_shaper_rate.value_namespace_prefix = name_space_prefix
                                    if(value_path == "qos-interface-handle"):
                                        self.qos_interface_handle = value
                                        self.qos_interface_handle.value_namespace = name_space
                                        self.qos_interface_handle.value_namespace_prefix = name_space_prefix
                                    if(value_path == "uidb-index"):
                                        self.uidb_index = value
                                        self.uidb_index.value_namespace = name_space
                                        self.uidb_index.value_namespace_prefix = name_space_prefix
                                    if(value_path == "under-line-interface-handle"):
                                        self.under_line_interface_handle = value
                                        self.under_line_interface_handle.value_namespace = name_space
                                        self.under_line_interface_handle.value_namespace_prefix = name_space_prefix


                            class SkywarpQosPolicyClass(Entity):
                                """
                                Skywarp QoS EA policy class details
                                
                                .. attribute:: qos_show_ea_pclass_st
                                
                                	qos show ea pclass st
                                	**type**\: list of    :py:class:`QosShowEaPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass, self).__init__()

                                    self.yang_name = "skywarp-qos-policy-class"
                                    self.yang_parent_name = "details"

                                    self.qos_show_ea_pclass_st = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)


                                class QosShowEaPclassSt(Entity):
                                    """
                                    qos show ea pclass st
                                    
                                    .. attribute:: class_level
                                    
                                    	Class level
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: class_name
                                    
                                    	Class name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    .. attribute:: config
                                    
                                    	QoS EA Class Configuration
                                    	**type**\:   :py:class:`Config <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config>`
                                    
                                    .. attribute:: index
                                    
                                    	Class Index
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: node_flags
                                    
                                    	Node Flags
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    .. attribute:: policy_name
                                    
                                    	Policy name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    .. attribute:: result
                                    
                                    	QoS EA Class Result
                                    	**type**\:   :py:class:`Result <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result>`
                                    
                                    .. attribute:: stats_flags
                                    
                                    	Statistical Flags
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__init__()

                                        self.yang_name = "qos-show-ea-pclass-st"
                                        self.yang_parent_name = "skywarp-qos-policy-class"

                                        self.class_level = YLeaf(YType.uint8, "class-level")

                                        self.class_name = YLeaf(YType.str, "class-name")

                                        self.index = YLeaf(YType.uint16, "index")

                                        self.node_flags = YLeaf(YType.str, "node-flags")

                                        self.policy_name = YLeaf(YType.str, "policy-name")

                                        self.stats_flags = YLeaf(YType.str, "stats-flags")

                                        self.config = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                        self.config.parent = self
                                        self._children_name_map["config"] = "config"
                                        self._children_yang_names.add("config")

                                        self.result = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                        self.result.parent = self
                                        self._children_name_map["result"] = "result"
                                        self._children_yang_names.add("result")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("class_level",
                                                        "class_name",
                                                        "index",
                                                        "node_flags",
                                                        "policy_name",
                                                        "stats_flags") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)


                                    class Config(Entity):
                                        """
                                        QoS EA Class Configuration
                                        
                                        .. attribute:: node_config
                                        
                                        	Node Config
                                        	**type**\:  str
                                        
                                        	**length:** 0..101
                                        
                                        .. attribute:: police
                                        
                                        	QoS EA Policer parameters
                                        	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police>`
                                        
                                        .. attribute:: shape
                                        
                                        	QoS EA Shaper parameters
                                        	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape>`
                                        
                                        .. attribute:: wfq
                                        
                                        	QoS EA WFQ parameters
                                        	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__init__()

                                            self.yang_name = "config"
                                            self.yang_parent_name = "qos-show-ea-pclass-st"

                                            self.node_config = YLeaf(YType.str, "node-config")

                                            self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                            self._children_yang_names.add("police")

                                            self.shape = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                            self.shape.parent = self
                                            self._children_name_map["shape"] = "shape"
                                            self._children_yang_names.add("shape")

                                            self.wfq = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                            self.wfq.parent = self
                                            self._children_name_map["wfq"] = "wfq"
                                            self._children_yang_names.add("wfq")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("node_config") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)


                                        class Police(Entity):
                                            """
                                            QoS EA Policer parameters
                                            
                                            .. attribute:: cbs
                                            
                                            	CBS
                                            	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs>`
                                            
                                            .. attribute:: cir
                                            
                                            	CIR
                                            	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir>`
                                            
                                            .. attribute:: color_aware
                                            
                                            	Color Aware
                                            	**type**\:  bool
                                            
                                            .. attribute:: policer_type
                                            
                                            	Policer type
                                            	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__init__()

                                                self.yang_name = "police"
                                                self.yang_parent_name = "config"

                                                self.color_aware = YLeaf(YType.boolean, "color-aware")

                                                self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                                self.cbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                self.cbs.parent = self
                                                self._children_name_map["cbs"] = "cbs"
                                                self._children_yang_names.add("cbs")

                                                self.cir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                self.cir.parent = self
                                                self._children_name_map["cir"] = "cir"
                                                self._children_yang_names.add("cir")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("color_aware",
                                                                "policer_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)


                                            class Cir(Entity):
                                                """
                                                CIR
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__init__()

                                                    self.yang_name = "cir"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Cbs(Entity):
                                                """
                                                CBS
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__init__()

                                                    self.yang_name = "cbs"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.color_aware.is_set or
                                                    self.policer_type.is_set or
                                                    (self.cbs is not None and self.cbs.has_data()) or
                                                    (self.cir is not None and self.cir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.color_aware.yfilter != YFilter.not_set or
                                                    self.policer_type.yfilter != YFilter.not_set or
                                                    (self.cbs is not None and self.cbs.has_operation()) or
                                                    (self.cir is not None and self.cir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "police" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.color_aware.is_set or self.color_aware.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.color_aware.get_name_leafdata())
                                                if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policer_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "cbs"):
                                                    if (self.cbs is None):
                                                        self.cbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                        self.cbs.parent = self
                                                        self._children_name_map["cbs"] = "cbs"
                                                    return self.cbs

                                                if (child_yang_name == "cir"):
                                                    if (self.cir is None):
                                                        self.cir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                        self.cir.parent = self
                                                        self._children_name_map["cir"] = "cir"
                                                    return self.cir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "cbs" or name == "cir" or name == "color-aware" or name == "policer-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "color-aware"):
                                                    self.color_aware = value
                                                    self.color_aware.value_namespace = name_space
                                                    self.color_aware.value_namespace_prefix = name_space_prefix
                                                if(value_path == "policer-type"):
                                                    self.policer_type = value
                                                    self.policer_type.value_namespace = name_space
                                                    self.policer_type.value_namespace_prefix = name_space_prefix


                                        class Shape(Entity):
                                            """
                                            QoS EA Shaper parameters
                                            
                                            .. attribute:: pbs
                                            
                                            	PBS in bytes
                                            	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs>`
                                            
                                            .. attribute:: pir
                                            
                                            	PIR in kbps
                                            	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape, self).__init__()

                                                self.yang_name = "shape"
                                                self.yang_parent_name = "config"

                                                self.pbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                self.pbs.parent = self
                                                self._children_name_map["pbs"] = "pbs"
                                                self._children_yang_names.add("pbs")

                                                self.pir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                self.pir.parent = self
                                                self._children_name_map["pir"] = "pir"
                                                self._children_yang_names.add("pir")


                                            class Pir(Entity):
                                                """
                                                PIR in kbps
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__init__()

                                                    self.yang_name = "pir"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Pbs(Entity):
                                                """
                                                PBS in bytes
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__init__()

                                                    self.yang_name = "pbs"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.pbs is not None and self.pbs.has_data()) or
                                                    (self.pir is not None and self.pir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.pbs is not None and self.pbs.has_operation()) or
                                                    (self.pir is not None and self.pir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "shape" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "pbs"):
                                                    if (self.pbs is None):
                                                        self.pbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                        self.pbs.parent = self
                                                        self._children_name_map["pbs"] = "pbs"
                                                    return self.pbs

                                                if (child_yang_name == "pir"):
                                                    if (self.pir is None):
                                                        self.pir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                        self.pir.parent = self
                                                        self._children_name_map["pir"] = "pir"
                                                    return self.pir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "pbs" or name == "pir"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class Wfq(Entity):
                                            """
                                            QoS EA WFQ parameters
                                            
                                            .. attribute:: bandwidth
                                            
                                            	Bandwidth
                                            	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth>`
                                            
                                            .. attribute:: excess_ratio
                                            
                                            	Excess Ratio
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: sum_of_bandwidth
                                            
                                            	Sum of Bandwidth
                                            	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__init__()

                                                self.yang_name = "wfq"
                                                self.yang_parent_name = "config"

                                                self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                                self.bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                self.bandwidth.parent = self
                                                self._children_name_map["bandwidth"] = "bandwidth"
                                                self._children_yang_names.add("bandwidth")

                                                self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                self.sum_of_bandwidth.parent = self
                                                self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                self._children_yang_names.add("sum-of-bandwidth")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("excess_ratio") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)


                                            class Bandwidth(Entity):
                                                """
                                                Bandwidth
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__init__()

                                                    self.yang_name = "bandwidth"
                                                    self.yang_parent_name = "wfq"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "bandwidth" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class SumOfBandwidth(Entity):
                                                """
                                                Sum of Bandwidth
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__init__()

                                                    self.yang_name = "sum-of-bandwidth"
                                                    self.yang_parent_name = "wfq"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "sum-of-bandwidth" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.excess_ratio.is_set or
                                                    (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                    (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.excess_ratio.yfilter != YFilter.not_set or
                                                    (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                    (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "wfq" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "bandwidth"):
                                                    if (self.bandwidth is None):
                                                        self.bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                        self.bandwidth.parent = self
                                                        self._children_name_map["bandwidth"] = "bandwidth"
                                                    return self.bandwidth

                                                if (child_yang_name == "sum-of-bandwidth"):
                                                    if (self.sum_of_bandwidth is None):
                                                        self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                        self.sum_of_bandwidth.parent = self
                                                        self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                    return self.sum_of_bandwidth

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "excess-ratio"):
                                                    self.excess_ratio = value
                                                    self.excess_ratio.value_namespace = name_space
                                                    self.excess_ratio.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.node_config.is_set or
                                                (self.police is not None and self.police.has_data()) or
                                                (self.shape is not None and self.shape.has_data()) or
                                                (self.wfq is not None and self.wfq.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.node_config.yfilter != YFilter.not_set or
                                                (self.police is not None and self.police.has_operation()) or
                                                (self.shape is not None and self.shape.has_operation()) or
                                                (self.wfq is not None and self.wfq.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "config" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.node_config.is_set or self.node_config.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.node_config.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "police"):
                                                if (self.police is None):
                                                    self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                return self.police

                                            if (child_yang_name == "shape"):
                                                if (self.shape is None):
                                                    self.shape = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                                    self.shape.parent = self
                                                    self._children_name_map["shape"] = "shape"
                                                return self.shape

                                            if (child_yang_name == "wfq"):
                                                if (self.wfq is None):
                                                    self.wfq = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                                    self.wfq.parent = self
                                                    self._children_name_map["wfq"] = "wfq"
                                                return self.wfq

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "police" or name == "shape" or name == "wfq" or name == "node-config"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "node-config"):
                                                self.node_config = value
                                                self.node_config.value_namespace = name_space
                                                self.node_config.value_namespace_prefix = name_space_prefix


                                    class Result(Entity):
                                        """
                                        QoS EA Class Result
                                        
                                        .. attribute:: police
                                        
                                        	QoS EA Policer Result
                                        	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police>`
                                        
                                        .. attribute:: queue
                                        
                                        	QoS EA Queue Result
                                        	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue>`
                                        
                                        .. attribute:: stats_id
                                        
                                        	Stats ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__init__()

                                            self.yang_name = "result"
                                            self.yang_parent_name = "qos-show-ea-pclass-st"

                                            self.stats_id = YLeaf(YType.uint32, "stats-id")

                                            self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                            self._children_yang_names.add("police")

                                            self.queue = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                            self.queue.parent = self
                                            self._children_name_map["queue"] = "queue"
                                            self._children_yang_names.add("queue")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("stats_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)


                                        class Queue(Entity):
                                            """
                                            QoS EA Queue Result
                                            
                                            .. attribute:: commit_tx
                                            
                                            	Commit Tx
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: drop
                                            
                                            	Drop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: excess_tx
                                            
                                            	Excess Tx
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: queue_id
                                            
                                            	Queue ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__init__()

                                                self.yang_name = "queue"
                                                self.yang_parent_name = "result"

                                                self.commit_tx = YLeaf(YType.uint32, "commit-tx")

                                                self.drop = YLeaf(YType.uint32, "drop")

                                                self.excess_tx = YLeaf(YType.uint32, "excess-tx")

                                                self.queue_id = YLeaf(YType.uint32, "queue-id")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("commit_tx",
                                                                "drop",
                                                                "excess_tx",
                                                                "queue_id") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.commit_tx.is_set or
                                                    self.drop.is_set or
                                                    self.excess_tx.is_set or
                                                    self.queue_id.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.commit_tx.yfilter != YFilter.not_set or
                                                    self.drop.yfilter != YFilter.not_set or
                                                    self.excess_tx.yfilter != YFilter.not_set or
                                                    self.queue_id.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "queue" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.commit_tx.is_set or self.commit_tx.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.commit_tx.get_name_leafdata())
                                                if (self.drop.is_set or self.drop.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.drop.get_name_leafdata())
                                                if (self.excess_tx.is_set or self.excess_tx.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.excess_tx.get_name_leafdata())
                                                if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.queue_id.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "commit-tx" or name == "drop" or name == "excess-tx" or name == "queue-id"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "commit-tx"):
                                                    self.commit_tx = value
                                                    self.commit_tx.value_namespace = name_space
                                                    self.commit_tx.value_namespace_prefix = name_space_prefix
                                                if(value_path == "drop"):
                                                    self.drop = value
                                                    self.drop.value_namespace = name_space
                                                    self.drop.value_namespace_prefix = name_space_prefix
                                                if(value_path == "excess-tx"):
                                                    self.excess_tx = value
                                                    self.excess_tx.value_namespace = name_space
                                                    self.excess_tx.value_namespace_prefix = name_space_prefix
                                                if(value_path == "queue-id"):
                                                    self.queue_id = value
                                                    self.queue_id.value_namespace = name_space
                                                    self.queue_id.value_namespace_prefix = name_space_prefix


                                        class Police(Entity):
                                            """
                                            QoS EA Policer Result
                                            
                                            .. attribute:: conform
                                            
                                            	Conform Rate
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: exceed
                                            
                                            	Exceed Rate
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: token_bucket_id
                                            
                                            	Token Bucket ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: violate
                                            
                                            	Violate Rate
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__init__()

                                                self.yang_name = "police"
                                                self.yang_parent_name = "result"

                                                self.conform = YLeaf(YType.uint32, "conform")

                                                self.exceed = YLeaf(YType.uint32, "exceed")

                                                self.token_bucket_id = YLeaf(YType.uint32, "token-bucket-id")

                                                self.violate = YLeaf(YType.uint32, "violate")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("conform",
                                                                "exceed",
                                                                "token_bucket_id",
                                                                "violate") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.conform.is_set or
                                                    self.exceed.is_set or
                                                    self.token_bucket_id.is_set or
                                                    self.violate.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.conform.yfilter != YFilter.not_set or
                                                    self.exceed.yfilter != YFilter.not_set or
                                                    self.token_bucket_id.yfilter != YFilter.not_set or
                                                    self.violate.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "police" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.conform.is_set or self.conform.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.conform.get_name_leafdata())
                                                if (self.exceed.is_set or self.exceed.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.exceed.get_name_leafdata())
                                                if (self.token_bucket_id.is_set or self.token_bucket_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.token_bucket_id.get_name_leafdata())
                                                if (self.violate.is_set or self.violate.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.violate.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "conform" or name == "exceed" or name == "token-bucket-id" or name == "violate"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "conform"):
                                                    self.conform = value
                                                    self.conform.value_namespace = name_space
                                                    self.conform.value_namespace_prefix = name_space_prefix
                                                if(value_path == "exceed"):
                                                    self.exceed = value
                                                    self.exceed.value_namespace = name_space
                                                    self.exceed.value_namespace_prefix = name_space_prefix
                                                if(value_path == "token-bucket-id"):
                                                    self.token_bucket_id = value
                                                    self.token_bucket_id.value_namespace = name_space
                                                    self.token_bucket_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "violate"):
                                                    self.violate = value
                                                    self.violate.value_namespace = name_space
                                                    self.violate.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.stats_id.is_set or
                                                (self.police is not None and self.police.has_data()) or
                                                (self.queue is not None and self.queue.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.stats_id.yfilter != YFilter.not_set or
                                                (self.police is not None and self.police.has_operation()) or
                                                (self.queue is not None and self.queue.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "result" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.stats_id.is_set or self.stats_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.stats_id.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "police"):
                                                if (self.police is None):
                                                    self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                return self.police

                                            if (child_yang_name == "queue"):
                                                if (self.queue is None):
                                                    self.queue = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                                    self.queue.parent = self
                                                    self._children_name_map["queue"] = "queue"
                                                return self.queue

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "police" or name == "queue" or name == "stats-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "stats-id"):
                                                self.stats_id = value
                                                self.stats_id.value_namespace = name_space
                                                self.stats_id.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.class_level.is_set or
                                            self.class_name.is_set or
                                            self.index.is_set or
                                            self.node_flags.is_set or
                                            self.policy_name.is_set or
                                            self.stats_flags.is_set or
                                            (self.config is not None and self.config.has_data()) or
                                            (self.result is not None and self.result.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.class_level.yfilter != YFilter.not_set or
                                            self.class_name.yfilter != YFilter.not_set or
                                            self.index.yfilter != YFilter.not_set or
                                            self.node_flags.yfilter != YFilter.not_set or
                                            self.policy_name.yfilter != YFilter.not_set or
                                            self.stats_flags.yfilter != YFilter.not_set or
                                            (self.config is not None and self.config.has_operation()) or
                                            (self.result is not None and self.result.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "qos-show-ea-pclass-st" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.class_level.get_name_leafdata())
                                        if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.class_name.get_name_leafdata())
                                        if (self.index.is_set or self.index.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.index.get_name_leafdata())
                                        if (self.node_flags.is_set or self.node_flags.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_flags.get_name_leafdata())
                                        if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policy_name.get_name_leafdata())
                                        if (self.stats_flags.is_set or self.stats_flags.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.stats_flags.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "config"):
                                            if (self.config is None):
                                                self.config = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                                self.config.parent = self
                                                self._children_name_map["config"] = "config"
                                            return self.config

                                        if (child_yang_name == "result"):
                                            if (self.result is None):
                                                self.result = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                                self.result.parent = self
                                                self._children_name_map["result"] = "result"
                                            return self.result

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "config" or name == "result" or name == "class-level" or name == "class-name" or name == "index" or name == "node-flags" or name == "policy-name" or name == "stats-flags"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "class-level"):
                                            self.class_level = value
                                            self.class_level.value_namespace = name_space
                                            self.class_level.value_namespace_prefix = name_space_prefix
                                        if(value_path == "class-name"):
                                            self.class_name = value
                                            self.class_name.value_namespace = name_space
                                            self.class_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "index"):
                                            self.index = value
                                            self.index.value_namespace = name_space
                                            self.index.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-flags"):
                                            self.node_flags = value
                                            self.node_flags.value_namespace = name_space
                                            self.node_flags.value_namespace_prefix = name_space_prefix
                                        if(value_path == "policy-name"):
                                            self.policy_name = value
                                            self.policy_name.value_namespace = name_space
                                            self.policy_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "stats-flags"):
                                            self.stats_flags = value
                                            self.stats_flags.value_namespace = name_space
                                            self.stats_flags.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.qos_show_ea_pclass_st:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.qos_show_ea_pclass_st:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "skywarp-qos-policy-class" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "qos-show-ea-pclass-st"):
                                        for c in self.qos_show_ea_pclass_st:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass.QosShowEaPclassSt()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.qos_show_ea_pclass_st.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "qos-show-ea-pclass-st"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    (self.header is not None and self.header.has_data()) or
                                    (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                    (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.header is not None and self.header.has_operation()) or
                                    (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                    (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "details" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "header"):
                                    if (self.header is None):
                                        self.header = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.Header()
                                        self.header.parent = self
                                        self._children_name_map["header"] = "header"
                                    return self.header

                                if (child_yang_name == "interface-parameters"):
                                    if (self.interface_parameters is None):
                                        self.interface_parameters = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.InterfaceParameters()
                                        self.interface_parameters.parent = self
                                        self._children_name_map["interface_parameters"] = "interface-parameters"
                                    return self.interface_parameters

                                if (child_yang_name == "skywarp-qos-policy-class"):
                                    if (self.skywarp_qos_policy_class is None):
                                        self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details.SkywarpQosPolicyClass()
                                        self.skywarp_qos_policy_class.parent = self
                                        self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                    return self.skywarp_qos_policy_class

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (self.details is not None and self.details.has_data())

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.details is not None and self.details.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "output" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "details"):
                                if (self.details is None):
                                    self.details = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output.Details()
                                    self.details.parent = self
                                    self._children_name_map["details"] = "details"
                                return self.details

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "details"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Input(Entity):
                        """
                        QoS\-EA policy direction ingress
                        
                        .. attribute:: details
                        
                        	QoS\-EA policy details
                        	**type**\:   :py:class:`Details <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details>`
                        
                        

                        """

                        _prefix = 'skp-qos-oper'
                        _revision = '2016-02-18'

                        def __init__(self):
                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input, self).__init__()

                            self.yang_name = "input"
                            self.yang_parent_name = "interface"

                            self.details = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details()
                            self.details.parent = self
                            self._children_name_map["details"] = "details"
                            self._children_yang_names.add("details")


                        class Details(Entity):
                            """
                            QoS\-EA policy details
                            
                            .. attribute:: header
                            
                            	QoS EA policy header
                            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.Header>`
                            
                            .. attribute:: interface_parameters
                            
                            	QoS EA Interface Parameters
                            	**type**\:   :py:class:`InterfaceParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.InterfaceParameters>`
                            
                            .. attribute:: skywarp_qos_policy_class
                            
                            	Skywarp QoS EA policy class details
                            	**type**\:   :py:class:`SkywarpQosPolicyClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass>`
                            
                            

                            """

                            _prefix = 'skp-qos-oper'
                            _revision = '2016-02-18'

                            def __init__(self):
                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details, self).__init__()

                                self.yang_name = "details"
                                self.yang_parent_name = "input"

                                self.header = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.Header()
                                self.header.parent = self
                                self._children_name_map["header"] = "header"
                                self._children_yang_names.add("header")

                                self.interface_parameters = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.InterfaceParameters()
                                self.interface_parameters.parent = self
                                self._children_name_map["interface_parameters"] = "interface-parameters"
                                self._children_yang_names.add("interface-parameters")

                                self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass()
                                self.skywarp_qos_policy_class.parent = self
                                self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                self._children_yang_names.add("skywarp-qos-policy-class")


                            class Header(Entity):
                                """
                                QoS EA policy header
                                
                                .. attribute:: classes
                                
                                	Number of classes
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: direction
                                
                                	Direction
                                	**type**\:  str
                                
                                	**length:** 0..11
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                	**length:** 0..101
                                
                                .. attribute:: policy_name
                                
                                	Policy name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.Header, self).__init__()

                                    self.yang_name = "header"
                                    self.yang_parent_name = "details"

                                    self.classes = YLeaf(YType.uint16, "classes")

                                    self.direction = YLeaf(YType.str, "direction")

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.policy_name = YLeaf(YType.str, "policy-name")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("classes",
                                                    "direction",
                                                    "interface_name",
                                                    "policy_name") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.Header, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.Header, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.classes.is_set or
                                        self.direction.is_set or
                                        self.interface_name.is_set or
                                        self.policy_name.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.classes.yfilter != YFilter.not_set or
                                        self.direction.yfilter != YFilter.not_set or
                                        self.interface_name.yfilter != YFilter.not_set or
                                        self.policy_name.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "header" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.classes.is_set or self.classes.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.classes.get_name_leafdata())
                                    if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.direction.get_name_leafdata())
                                    if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_name.get_name_leafdata())
                                    if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_name.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "classes" or name == "direction" or name == "interface-name" or name == "policy-name"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "classes"):
                                        self.classes = value
                                        self.classes.value_namespace = name_space
                                        self.classes.value_namespace_prefix = name_space_prefix
                                    if(value_path == "direction"):
                                        self.direction = value
                                        self.direction.value_namespace = name_space
                                        self.direction.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-name"):
                                        self.interface_name = value
                                        self.interface_name.value_namespace = name_space
                                        self.interface_name.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-name"):
                                        self.policy_name = value
                                        self.policy_name.value_namespace = name_space
                                        self.policy_name.value_namespace_prefix = name_space_prefix


                            class InterfaceParameters(Entity):
                                """
                                QoS EA Interface Parameters
                                
                                .. attribute:: bundle_id
                                
                                	Bundle Interface ID
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hierarchical_depth
                                
                                	Max Hierarchial Depth
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: interface_handle
                                
                                	Interface Handle
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: interface_rate
                                
                                	Interface Programmed Rate
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: interface_type
                                
                                	Interface Type
                                	**type**\:  str
                                
                                	**length:** 0..101
                                
                                .. attribute:: policy_map_id
                                
                                	Policy Map ID
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: policy_name
                                
                                	Policy name
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                .. attribute:: port
                                
                                	Local Port
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: port_shaper_rate
                                
                                	Port Shaper Rate
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: qos_interface_handle
                                
                                	QoS Interface handle
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: uidb_index
                                
                                	UIDB Index
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: under_line_interface_handle
                                
                                	UnderLineInterface Handle
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.InterfaceParameters, self).__init__()

                                    self.yang_name = "interface-parameters"
                                    self.yang_parent_name = "details"

                                    self.bundle_id = YLeaf(YType.uint16, "bundle-id")

                                    self.hierarchical_depth = YLeaf(YType.uint8, "hierarchical-depth")

                                    self.interface_handle = YLeaf(YType.str, "interface-handle")

                                    self.interface_rate = YLeaf(YType.uint32, "interface-rate")

                                    self.interface_type = YLeaf(YType.str, "interface-type")

                                    self.policy_map_id = YLeaf(YType.uint16, "policy-map-id")

                                    self.policy_name = YLeaf(YType.str, "policy-name")

                                    self.port = YLeaf(YType.uint32, "port")

                                    self.port_shaper_rate = YLeaf(YType.uint32, "port-shaper-rate")

                                    self.qos_interface_handle = YLeaf(YType.uint64, "qos-interface-handle")

                                    self.uidb_index = YLeaf(YType.uint16, "uidb-index")

                                    self.under_line_interface_handle = YLeaf(YType.str, "under-line-interface-handle")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("bundle_id",
                                                    "hierarchical_depth",
                                                    "interface_handle",
                                                    "interface_rate",
                                                    "interface_type",
                                                    "policy_map_id",
                                                    "policy_name",
                                                    "port",
                                                    "port_shaper_rate",
                                                    "qos_interface_handle",
                                                    "uidb_index",
                                                    "under_line_interface_handle") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.InterfaceParameters, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.InterfaceParameters, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.bundle_id.is_set or
                                        self.hierarchical_depth.is_set or
                                        self.interface_handle.is_set or
                                        self.interface_rate.is_set or
                                        self.interface_type.is_set or
                                        self.policy_map_id.is_set or
                                        self.policy_name.is_set or
                                        self.port.is_set or
                                        self.port_shaper_rate.is_set or
                                        self.qos_interface_handle.is_set or
                                        self.uidb_index.is_set or
                                        self.under_line_interface_handle.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.bundle_id.yfilter != YFilter.not_set or
                                        self.hierarchical_depth.yfilter != YFilter.not_set or
                                        self.interface_handle.yfilter != YFilter.not_set or
                                        self.interface_rate.yfilter != YFilter.not_set or
                                        self.interface_type.yfilter != YFilter.not_set or
                                        self.policy_map_id.yfilter != YFilter.not_set or
                                        self.policy_name.yfilter != YFilter.not_set or
                                        self.port.yfilter != YFilter.not_set or
                                        self.port_shaper_rate.yfilter != YFilter.not_set or
                                        self.qos_interface_handle.yfilter != YFilter.not_set or
                                        self.uidb_index.yfilter != YFilter.not_set or
                                        self.under_line_interface_handle.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-parameters" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.bundle_id.is_set or self.bundle_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.bundle_id.get_name_leafdata())
                                    if (self.hierarchical_depth.is_set or self.hierarchical_depth.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.hierarchical_depth.get_name_leafdata())
                                    if (self.interface_handle.is_set or self.interface_handle.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_handle.get_name_leafdata())
                                    if (self.interface_rate.is_set or self.interface_rate.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_rate.get_name_leafdata())
                                    if (self.interface_type.is_set or self.interface_type.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.interface_type.get_name_leafdata())
                                    if (self.policy_map_id.is_set or self.policy_map_id.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_map_id.get_name_leafdata())
                                    if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.policy_name.get_name_leafdata())
                                    if (self.port.is_set or self.port.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.port.get_name_leafdata())
                                    if (self.port_shaper_rate.is_set or self.port_shaper_rate.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.port_shaper_rate.get_name_leafdata())
                                    if (self.qos_interface_handle.is_set or self.qos_interface_handle.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.qos_interface_handle.get_name_leafdata())
                                    if (self.uidb_index.is_set or self.uidb_index.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.uidb_index.get_name_leafdata())
                                    if (self.under_line_interface_handle.is_set or self.under_line_interface_handle.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.under_line_interface_handle.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "bundle-id" or name == "hierarchical-depth" or name == "interface-handle" or name == "interface-rate" or name == "interface-type" or name == "policy-map-id" or name == "policy-name" or name == "port" or name == "port-shaper-rate" or name == "qos-interface-handle" or name == "uidb-index" or name == "under-line-interface-handle"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "bundle-id"):
                                        self.bundle_id = value
                                        self.bundle_id.value_namespace = name_space
                                        self.bundle_id.value_namespace_prefix = name_space_prefix
                                    if(value_path == "hierarchical-depth"):
                                        self.hierarchical_depth = value
                                        self.hierarchical_depth.value_namespace = name_space
                                        self.hierarchical_depth.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-handle"):
                                        self.interface_handle = value
                                        self.interface_handle.value_namespace = name_space
                                        self.interface_handle.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-rate"):
                                        self.interface_rate = value
                                        self.interface_rate.value_namespace = name_space
                                        self.interface_rate.value_namespace_prefix = name_space_prefix
                                    if(value_path == "interface-type"):
                                        self.interface_type = value
                                        self.interface_type.value_namespace = name_space
                                        self.interface_type.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-map-id"):
                                        self.policy_map_id = value
                                        self.policy_map_id.value_namespace = name_space
                                        self.policy_map_id.value_namespace_prefix = name_space_prefix
                                    if(value_path == "policy-name"):
                                        self.policy_name = value
                                        self.policy_name.value_namespace = name_space
                                        self.policy_name.value_namespace_prefix = name_space_prefix
                                    if(value_path == "port"):
                                        self.port = value
                                        self.port.value_namespace = name_space
                                        self.port.value_namespace_prefix = name_space_prefix
                                    if(value_path == "port-shaper-rate"):
                                        self.port_shaper_rate = value
                                        self.port_shaper_rate.value_namespace = name_space
                                        self.port_shaper_rate.value_namespace_prefix = name_space_prefix
                                    if(value_path == "qos-interface-handle"):
                                        self.qos_interface_handle = value
                                        self.qos_interface_handle.value_namespace = name_space
                                        self.qos_interface_handle.value_namespace_prefix = name_space_prefix
                                    if(value_path == "uidb-index"):
                                        self.uidb_index = value
                                        self.uidb_index.value_namespace = name_space
                                        self.uidb_index.value_namespace_prefix = name_space_prefix
                                    if(value_path == "under-line-interface-handle"):
                                        self.under_line_interface_handle = value
                                        self.under_line_interface_handle.value_namespace = name_space
                                        self.under_line_interface_handle.value_namespace_prefix = name_space_prefix


                            class SkywarpQosPolicyClass(Entity):
                                """
                                Skywarp QoS EA policy class details
                                
                                .. attribute:: qos_show_ea_pclass_st
                                
                                	qos show ea pclass st
                                	**type**\: list of    :py:class:`QosShowEaPclassSt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt>`
                                
                                

                                """

                                _prefix = 'skp-qos-oper'
                                _revision = '2016-02-18'

                                def __init__(self):
                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass, self).__init__()

                                    self.yang_name = "skywarp-qos-policy-class"
                                    self.yang_parent_name = "details"

                                    self.qos_show_ea_pclass_st = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass, self).__setattr__(name, value)


                                class QosShowEaPclassSt(Entity):
                                    """
                                    qos show ea pclass st
                                    
                                    .. attribute:: class_level
                                    
                                    	Class level
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: class_name
                                    
                                    	Class name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    .. attribute:: config
                                    
                                    	QoS EA Class Configuration
                                    	**type**\:   :py:class:`Config <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config>`
                                    
                                    .. attribute:: index
                                    
                                    	Class Index
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: node_flags
                                    
                                    	Node Flags
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    .. attribute:: policy_name
                                    
                                    	Policy name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    .. attribute:: result
                                    
                                    	QoS EA Class Result
                                    	**type**\:   :py:class:`Result <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result>`
                                    
                                    .. attribute:: stats_flags
                                    
                                    	Statistical Flags
                                    	**type**\:  str
                                    
                                    	**length:** 0..101
                                    
                                    

                                    """

                                    _prefix = 'skp-qos-oper'
                                    _revision = '2016-02-18'

                                    def __init__(self):
                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__init__()

                                        self.yang_name = "qos-show-ea-pclass-st"
                                        self.yang_parent_name = "skywarp-qos-policy-class"

                                        self.class_level = YLeaf(YType.uint8, "class-level")

                                        self.class_name = YLeaf(YType.str, "class-name")

                                        self.index = YLeaf(YType.uint16, "index")

                                        self.node_flags = YLeaf(YType.str, "node-flags")

                                        self.policy_name = YLeaf(YType.str, "policy-name")

                                        self.stats_flags = YLeaf(YType.str, "stats-flags")

                                        self.config = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                        self.config.parent = self
                                        self._children_name_map["config"] = "config"
                                        self._children_yang_names.add("config")

                                        self.result = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                        self.result.parent = self
                                        self._children_name_map["result"] = "result"
                                        self._children_yang_names.add("result")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("class_level",
                                                        "class_name",
                                                        "index",
                                                        "node_flags",
                                                        "policy_name",
                                                        "stats_flags") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt, self).__setattr__(name, value)


                                    class Config(Entity):
                                        """
                                        QoS EA Class Configuration
                                        
                                        .. attribute:: node_config
                                        
                                        	Node Config
                                        	**type**\:  str
                                        
                                        	**length:** 0..101
                                        
                                        .. attribute:: police
                                        
                                        	QoS EA Policer parameters
                                        	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police>`
                                        
                                        .. attribute:: shape
                                        
                                        	QoS EA Shaper parameters
                                        	**type**\:   :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape>`
                                        
                                        .. attribute:: wfq
                                        
                                        	QoS EA WFQ parameters
                                        	**type**\:   :py:class:`Wfq <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq>`
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__init__()

                                            self.yang_name = "config"
                                            self.yang_parent_name = "qos-show-ea-pclass-st"

                                            self.node_config = YLeaf(YType.str, "node-config")

                                            self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                            self._children_yang_names.add("police")

                                            self.shape = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                            self.shape.parent = self
                                            self._children_name_map["shape"] = "shape"
                                            self._children_yang_names.add("shape")

                                            self.wfq = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                            self.wfq.parent = self
                                            self._children_name_map["wfq"] = "wfq"
                                            self._children_yang_names.add("wfq")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("node_config") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config, self).__setattr__(name, value)


                                        class Police(Entity):
                                            """
                                            QoS EA Policer parameters
                                            
                                            .. attribute:: cbs
                                            
                                            	CBS
                                            	**type**\:   :py:class:`Cbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs>`
                                            
                                            .. attribute:: cir
                                            
                                            	CIR
                                            	**type**\:   :py:class:`Cir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir>`
                                            
                                            .. attribute:: color_aware
                                            
                                            	Color Aware
                                            	**type**\:  bool
                                            
                                            .. attribute:: policer_type
                                            
                                            	Policer type
                                            	**type**\:   :py:class:`TbAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.TbAlgorithm>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__init__()

                                                self.yang_name = "police"
                                                self.yang_parent_name = "config"

                                                self.color_aware = YLeaf(YType.boolean, "color-aware")

                                                self.policer_type = YLeaf(YType.enumeration, "policer-type")

                                                self.cbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                self.cbs.parent = self
                                                self._children_name_map["cbs"] = "cbs"
                                                self._children_yang_names.add("cbs")

                                                self.cir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                self.cir.parent = self
                                                self._children_name_map["cir"] = "cir"
                                                self._children_yang_names.add("cir")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("color_aware",
                                                                "policer_type") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police, self).__setattr__(name, value)


                                            class Cir(Entity):
                                                """
                                                CIR
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__init__()

                                                    self.yang_name = "cir"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Cbs(Entity):
                                                """
                                                CBS
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__init__()

                                                    self.yang_name = "cbs"
                                                    self.yang_parent_name = "police"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "cbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.color_aware.is_set or
                                                    self.policer_type.is_set or
                                                    (self.cbs is not None and self.cbs.has_data()) or
                                                    (self.cir is not None and self.cir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.color_aware.yfilter != YFilter.not_set or
                                                    self.policer_type.yfilter != YFilter.not_set or
                                                    (self.cbs is not None and self.cbs.has_operation()) or
                                                    (self.cir is not None and self.cir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "police" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.color_aware.is_set or self.color_aware.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.color_aware.get_name_leafdata())
                                                if (self.policer_type.is_set or self.policer_type.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.policer_type.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "cbs"):
                                                    if (self.cbs is None):
                                                        self.cbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cbs()
                                                        self.cbs.parent = self
                                                        self._children_name_map["cbs"] = "cbs"
                                                    return self.cbs

                                                if (child_yang_name == "cir"):
                                                    if (self.cir is None):
                                                        self.cir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police.Cir()
                                                        self.cir.parent = self
                                                        self._children_name_map["cir"] = "cir"
                                                    return self.cir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "cbs" or name == "cir" or name == "color-aware" or name == "policer-type"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "color-aware"):
                                                    self.color_aware = value
                                                    self.color_aware.value_namespace = name_space
                                                    self.color_aware.value_namespace_prefix = name_space_prefix
                                                if(value_path == "policer-type"):
                                                    self.policer_type = value
                                                    self.policer_type.value_namespace = name_space
                                                    self.policer_type.value_namespace_prefix = name_space_prefix


                                        class Shape(Entity):
                                            """
                                            QoS EA Shaper parameters
                                            
                                            .. attribute:: pbs
                                            
                                            	PBS in bytes
                                            	**type**\:   :py:class:`Pbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs>`
                                            
                                            .. attribute:: pir
                                            
                                            	PIR in kbps
                                            	**type**\:   :py:class:`Pir <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape, self).__init__()

                                                self.yang_name = "shape"
                                                self.yang_parent_name = "config"

                                                self.pbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                self.pbs.parent = self
                                                self._children_name_map["pbs"] = "pbs"
                                                self._children_yang_names.add("pbs")

                                                self.pir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                self.pir.parent = self
                                                self._children_name_map["pir"] = "pir"
                                                self._children_yang_names.add("pir")


                                            class Pir(Entity):
                                                """
                                                PIR in kbps
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__init__()

                                                    self.yang_name = "pir"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pir" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class Pbs(Entity):
                                                """
                                                PBS in bytes
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__init__()

                                                    self.yang_name = "pbs"
                                                    self.yang_parent_name = "shape"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "pbs" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    (self.pbs is not None and self.pbs.has_data()) or
                                                    (self.pir is not None and self.pir.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    (self.pbs is not None and self.pbs.has_operation()) or
                                                    (self.pir is not None and self.pir.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "shape" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "pbs"):
                                                    if (self.pbs is None):
                                                        self.pbs = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pbs()
                                                        self.pbs.parent = self
                                                        self._children_name_map["pbs"] = "pbs"
                                                    return self.pbs

                                                if (child_yang_name == "pir"):
                                                    if (self.pir is None):
                                                        self.pir = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape.Pir()
                                                        self.pir.parent = self
                                                        self._children_name_map["pir"] = "pir"
                                                    return self.pir

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "pbs" or name == "pir"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                pass


                                        class Wfq(Entity):
                                            """
                                            QoS EA WFQ parameters
                                            
                                            .. attribute:: bandwidth
                                            
                                            	Bandwidth
                                            	**type**\:   :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth>`
                                            
                                            .. attribute:: excess_ratio
                                            
                                            	Excess Ratio
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: sum_of_bandwidth
                                            
                                            	Sum of Bandwidth
                                            	**type**\:   :py:class:`SumOfBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth>`
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__init__()

                                                self.yang_name = "wfq"
                                                self.yang_parent_name = "config"

                                                self.excess_ratio = YLeaf(YType.uint16, "excess-ratio")

                                                self.bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                self.bandwidth.parent = self
                                                self._children_name_map["bandwidth"] = "bandwidth"
                                                self._children_yang_names.add("bandwidth")

                                                self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                self.sum_of_bandwidth.parent = self
                                                self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                self._children_yang_names.add("sum-of-bandwidth")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("excess_ratio") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq, self).__setattr__(name, value)


                                            class Bandwidth(Entity):
                                                """
                                                Bandwidth
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__init__()

                                                    self.yang_name = "bandwidth"
                                                    self.yang_parent_name = "wfq"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "bandwidth" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix


                                            class SumOfBandwidth(Entity):
                                                """
                                                Sum of Bandwidth
                                                
                                                .. attribute:: unit
                                                
                                                	Config unit
                                                	**type**\:   :py:class:`QosUnit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.QosUnit>`
                                                
                                                .. attribute:: value
                                                
                                                	Config value
                                                	**type**\:  int
                                                
                                                	**range:** 0..4294967295
                                                
                                                

                                                """

                                                _prefix = 'skp-qos-oper'
                                                _revision = '2016-02-18'

                                                def __init__(self):
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__init__()

                                                    self.yang_name = "sum-of-bandwidth"
                                                    self.yang_parent_name = "wfq"

                                                    self.unit = YLeaf(YType.enumeration, "unit")

                                                    self.value = YLeaf(YType.uint32, "value")

                                                def __setattr__(self, name, value):
                                                    self._check_monkey_patching_error(name, value)
                                                    with _handle_type_error():
                                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                                "Please use list append or extend method."
                                                                                .format(value))
                                                        if isinstance(value, Enum.YLeaf):
                                                            value = value.name
                                                        if name in ("unit",
                                                                    "value") and name in self.__dict__:
                                                            if isinstance(value, YLeaf):
                                                                self.__dict__[name].set(value.get())
                                                            elif isinstance(value, YLeafList):
                                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)
                                                            else:
                                                                self.__dict__[name].set(value)
                                                        else:
                                                            if hasattr(value, "parent") and name != "parent":
                                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                    value.parent = self
                                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                    value.parent = self
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth, self).__setattr__(name, value)

                                                def has_data(self):
                                                    return (
                                                        self.unit.is_set or
                                                        self.value.is_set)

                                                def has_operation(self):
                                                    return (
                                                        self.yfilter != YFilter.not_set or
                                                        self.unit.yfilter != YFilter.not_set or
                                                        self.value.yfilter != YFilter.not_set)

                                                def get_segment_path(self):
                                                    path_buffer = ""
                                                    path_buffer = "sum-of-bandwidth" + path_buffer

                                                    return path_buffer

                                                def get_entity_path(self, ancestor):
                                                    path_buffer = ""
                                                    if (ancestor is None):
                                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                    else:
                                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                    leaf_name_data = LeafDataList()
                                                    if (self.unit.is_set or self.unit.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.unit.get_name_leafdata())
                                                    if (self.value.is_set or self.value.yfilter != YFilter.not_set):
                                                        leaf_name_data.append(self.value.get_name_leafdata())

                                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                                    return entity_path

                                                def get_child_by_name(self, child_yang_name, segment_path):
                                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                    if child is not None:
                                                        return child

                                                    return None

                                                def has_leaf_or_child_of_name(self, name):
                                                    if(name == "unit" or name == "value"):
                                                        return True
                                                    return False

                                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                                    if(value_path == "unit"):
                                                        self.unit = value
                                                        self.unit.value_namespace = name_space
                                                        self.unit.value_namespace_prefix = name_space_prefix
                                                    if(value_path == "value"):
                                                        self.value = value
                                                        self.value.value_namespace = name_space
                                                        self.value.value_namespace_prefix = name_space_prefix

                                            def has_data(self):
                                                return (
                                                    self.excess_ratio.is_set or
                                                    (self.bandwidth is not None and self.bandwidth.has_data()) or
                                                    (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_data()))

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.excess_ratio.yfilter != YFilter.not_set or
                                                    (self.bandwidth is not None and self.bandwidth.has_operation()) or
                                                    (self.sum_of_bandwidth is not None and self.sum_of_bandwidth.has_operation()))

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "wfq" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.excess_ratio.is_set or self.excess_ratio.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.excess_ratio.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                if (child_yang_name == "bandwidth"):
                                                    if (self.bandwidth is None):
                                                        self.bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.Bandwidth()
                                                        self.bandwidth.parent = self
                                                        self._children_name_map["bandwidth"] = "bandwidth"
                                                    return self.bandwidth

                                                if (child_yang_name == "sum-of-bandwidth"):
                                                    if (self.sum_of_bandwidth is None):
                                                        self.sum_of_bandwidth = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq.SumOfBandwidth()
                                                        self.sum_of_bandwidth.parent = self
                                                        self._children_name_map["sum_of_bandwidth"] = "sum-of-bandwidth"
                                                    return self.sum_of_bandwidth

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "bandwidth" or name == "sum-of-bandwidth" or name == "excess-ratio"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "excess-ratio"):
                                                    self.excess_ratio = value
                                                    self.excess_ratio.value_namespace = name_space
                                                    self.excess_ratio.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.node_config.is_set or
                                                (self.police is not None and self.police.has_data()) or
                                                (self.shape is not None and self.shape.has_data()) or
                                                (self.wfq is not None and self.wfq.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.node_config.yfilter != YFilter.not_set or
                                                (self.police is not None and self.police.has_operation()) or
                                                (self.shape is not None and self.shape.has_operation()) or
                                                (self.wfq is not None and self.wfq.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "config" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.node_config.is_set or self.node_config.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.node_config.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "police"):
                                                if (self.police is None):
                                                    self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                return self.police

                                            if (child_yang_name == "shape"):
                                                if (self.shape is None):
                                                    self.shape = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Shape()
                                                    self.shape.parent = self
                                                    self._children_name_map["shape"] = "shape"
                                                return self.shape

                                            if (child_yang_name == "wfq"):
                                                if (self.wfq is None):
                                                    self.wfq = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config.Wfq()
                                                    self.wfq.parent = self
                                                    self._children_name_map["wfq"] = "wfq"
                                                return self.wfq

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "police" or name == "shape" or name == "wfq" or name == "node-config"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "node-config"):
                                                self.node_config = value
                                                self.node_config.value_namespace = name_space
                                                self.node_config.value_namespace_prefix = name_space_prefix


                                    class Result(Entity):
                                        """
                                        QoS EA Class Result
                                        
                                        .. attribute:: police
                                        
                                        	QoS EA Policer Result
                                        	**type**\:   :py:class:`Police <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police>`
                                        
                                        .. attribute:: queue
                                        
                                        	QoS EA Queue Result
                                        	**type**\:   :py:class:`Queue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_skp_qos_oper.PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue>`
                                        
                                        .. attribute:: stats_id
                                        
                                        	Stats ID
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'skp-qos-oper'
                                        _revision = '2016-02-18'

                                        def __init__(self):
                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__init__()

                                            self.yang_name = "result"
                                            self.yang_parent_name = "qos-show-ea-pclass-st"

                                            self.stats_id = YLeaf(YType.uint32, "stats-id")

                                            self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                            self.police.parent = self
                                            self._children_name_map["police"] = "police"
                                            self._children_yang_names.add("police")

                                            self.queue = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                            self.queue.parent = self
                                            self._children_name_map["queue"] = "queue"
                                            self._children_yang_names.add("queue")

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in ("stats_id") and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result, self).__setattr__(name, value)


                                        class Queue(Entity):
                                            """
                                            QoS EA Queue Result
                                            
                                            .. attribute:: commit_tx
                                            
                                            	Commit Tx
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: drop
                                            
                                            	Drop
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: excess_tx
                                            
                                            	Excess Tx
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: queue_id
                                            
                                            	Queue ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__init__()

                                                self.yang_name = "queue"
                                                self.yang_parent_name = "result"

                                                self.commit_tx = YLeaf(YType.uint32, "commit-tx")

                                                self.drop = YLeaf(YType.uint32, "drop")

                                                self.excess_tx = YLeaf(YType.uint32, "excess-tx")

                                                self.queue_id = YLeaf(YType.uint32, "queue-id")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("commit_tx",
                                                                "drop",
                                                                "excess_tx",
                                                                "queue_id") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.commit_tx.is_set or
                                                    self.drop.is_set or
                                                    self.excess_tx.is_set or
                                                    self.queue_id.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.commit_tx.yfilter != YFilter.not_set or
                                                    self.drop.yfilter != YFilter.not_set or
                                                    self.excess_tx.yfilter != YFilter.not_set or
                                                    self.queue_id.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "queue" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.commit_tx.is_set or self.commit_tx.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.commit_tx.get_name_leafdata())
                                                if (self.drop.is_set or self.drop.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.drop.get_name_leafdata())
                                                if (self.excess_tx.is_set or self.excess_tx.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.excess_tx.get_name_leafdata())
                                                if (self.queue_id.is_set or self.queue_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.queue_id.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "commit-tx" or name == "drop" or name == "excess-tx" or name == "queue-id"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "commit-tx"):
                                                    self.commit_tx = value
                                                    self.commit_tx.value_namespace = name_space
                                                    self.commit_tx.value_namespace_prefix = name_space_prefix
                                                if(value_path == "drop"):
                                                    self.drop = value
                                                    self.drop.value_namespace = name_space
                                                    self.drop.value_namespace_prefix = name_space_prefix
                                                if(value_path == "excess-tx"):
                                                    self.excess_tx = value
                                                    self.excess_tx.value_namespace = name_space
                                                    self.excess_tx.value_namespace_prefix = name_space_prefix
                                                if(value_path == "queue-id"):
                                                    self.queue_id = value
                                                    self.queue_id.value_namespace = name_space
                                                    self.queue_id.value_namespace_prefix = name_space_prefix


                                        class Police(Entity):
                                            """
                                            QoS EA Policer Result
                                            
                                            .. attribute:: conform
                                            
                                            	Conform Rate
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: exceed
                                            
                                            	Exceed Rate
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: token_bucket_id
                                            
                                            	Token Bucket ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: violate
                                            
                                            	Violate Rate
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'skp-qos-oper'
                                            _revision = '2016-02-18'

                                            def __init__(self):
                                                super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__init__()

                                                self.yang_name = "police"
                                                self.yang_parent_name = "result"

                                                self.conform = YLeaf(YType.uint32, "conform")

                                                self.exceed = YLeaf(YType.uint32, "exceed")

                                                self.token_bucket_id = YLeaf(YType.uint32, "token-bucket-id")

                                                self.violate = YLeaf(YType.uint32, "violate")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("conform",
                                                                "exceed",
                                                                "token_bucket_id",
                                                                "violate") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.conform.is_set or
                                                    self.exceed.is_set or
                                                    self.token_bucket_id.is_set or
                                                    self.violate.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.conform.yfilter != YFilter.not_set or
                                                    self.exceed.yfilter != YFilter.not_set or
                                                    self.token_bucket_id.yfilter != YFilter.not_set or
                                                    self.violate.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "police" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.conform.is_set or self.conform.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.conform.get_name_leafdata())
                                                if (self.exceed.is_set or self.exceed.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.exceed.get_name_leafdata())
                                                if (self.token_bucket_id.is_set or self.token_bucket_id.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.token_bucket_id.get_name_leafdata())
                                                if (self.violate.is_set or self.violate.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.violate.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "conform" or name == "exceed" or name == "token-bucket-id" or name == "violate"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "conform"):
                                                    self.conform = value
                                                    self.conform.value_namespace = name_space
                                                    self.conform.value_namespace_prefix = name_space_prefix
                                                if(value_path == "exceed"):
                                                    self.exceed = value
                                                    self.exceed.value_namespace = name_space
                                                    self.exceed.value_namespace_prefix = name_space_prefix
                                                if(value_path == "token-bucket-id"):
                                                    self.token_bucket_id = value
                                                    self.token_bucket_id.value_namespace = name_space
                                                    self.token_bucket_id.value_namespace_prefix = name_space_prefix
                                                if(value_path == "violate"):
                                                    self.violate = value
                                                    self.violate.value_namespace = name_space
                                                    self.violate.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            return (
                                                self.stats_id.is_set or
                                                (self.police is not None and self.police.has_data()) or
                                                (self.queue is not None and self.queue.has_data()))

                                        def has_operation(self):
                                            return (
                                                self.yfilter != YFilter.not_set or
                                                self.stats_id.yfilter != YFilter.not_set or
                                                (self.police is not None and self.police.has_operation()) or
                                                (self.queue is not None and self.queue.has_operation()))

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "result" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()
                                            if (self.stats_id.is_set or self.stats_id.yfilter != YFilter.not_set):
                                                leaf_name_data.append(self.stats_id.get_name_leafdata())

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "police"):
                                                if (self.police is None):
                                                    self.police = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Police()
                                                    self.police.parent = self
                                                    self._children_name_map["police"] = "police"
                                                return self.police

                                            if (child_yang_name == "queue"):
                                                if (self.queue is None):
                                                    self.queue = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result.Queue()
                                                    self.queue.parent = self
                                                    self._children_name_map["queue"] = "queue"
                                                return self.queue

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "police" or name == "queue" or name == "stats-id"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            if(value_path == "stats-id"):
                                                self.stats_id = value
                                                self.stats_id.value_namespace = name_space
                                                self.stats_id.value_namespace_prefix = name_space_prefix

                                    def has_data(self):
                                        return (
                                            self.class_level.is_set or
                                            self.class_name.is_set or
                                            self.index.is_set or
                                            self.node_flags.is_set or
                                            self.policy_name.is_set or
                                            self.stats_flags.is_set or
                                            (self.config is not None and self.config.has_data()) or
                                            (self.result is not None and self.result.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.class_level.yfilter != YFilter.not_set or
                                            self.class_name.yfilter != YFilter.not_set or
                                            self.index.yfilter != YFilter.not_set or
                                            self.node_flags.yfilter != YFilter.not_set or
                                            self.policy_name.yfilter != YFilter.not_set or
                                            self.stats_flags.yfilter != YFilter.not_set or
                                            (self.config is not None and self.config.has_operation()) or
                                            (self.result is not None and self.result.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "qos-show-ea-pclass-st" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.class_level.is_set or self.class_level.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.class_level.get_name_leafdata())
                                        if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.class_name.get_name_leafdata())
                                        if (self.index.is_set or self.index.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.index.get_name_leafdata())
                                        if (self.node_flags.is_set or self.node_flags.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.node_flags.get_name_leafdata())
                                        if (self.policy_name.is_set or self.policy_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.policy_name.get_name_leafdata())
                                        if (self.stats_flags.is_set or self.stats_flags.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.stats_flags.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "config"):
                                            if (self.config is None):
                                                self.config = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Config()
                                                self.config.parent = self
                                                self._children_name_map["config"] = "config"
                                            return self.config

                                        if (child_yang_name == "result"):
                                            if (self.result is None):
                                                self.result = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt.Result()
                                                self.result.parent = self
                                                self._children_name_map["result"] = "result"
                                            return self.result

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "config" or name == "result" or name == "class-level" or name == "class-name" or name == "index" or name == "node-flags" or name == "policy-name" or name == "stats-flags"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "class-level"):
                                            self.class_level = value
                                            self.class_level.value_namespace = name_space
                                            self.class_level.value_namespace_prefix = name_space_prefix
                                        if(value_path == "class-name"):
                                            self.class_name = value
                                            self.class_name.value_namespace = name_space
                                            self.class_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "index"):
                                            self.index = value
                                            self.index.value_namespace = name_space
                                            self.index.value_namespace_prefix = name_space_prefix
                                        if(value_path == "node-flags"):
                                            self.node_flags = value
                                            self.node_flags.value_namespace = name_space
                                            self.node_flags.value_namespace_prefix = name_space_prefix
                                        if(value_path == "policy-name"):
                                            self.policy_name = value
                                            self.policy_name.value_namespace = name_space
                                            self.policy_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "stats-flags"):
                                            self.stats_flags = value
                                            self.stats_flags.value_namespace = name_space
                                            self.stats_flags.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.qos_show_ea_pclass_st:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.qos_show_ea_pclass_st:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "skywarp-qos-policy-class" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "qos-show-ea-pclass-st"):
                                        for c in self.qos_show_ea_pclass_st:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass.QosShowEaPclassSt()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.qos_show_ea_pclass_st.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "qos-show-ea-pclass-st"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    (self.header is not None and self.header.has_data()) or
                                    (self.interface_parameters is not None and self.interface_parameters.has_data()) or
                                    (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.header is not None and self.header.has_operation()) or
                                    (self.interface_parameters is not None and self.interface_parameters.has_operation()) or
                                    (self.skywarp_qos_policy_class is not None and self.skywarp_qos_policy_class.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "details" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "header"):
                                    if (self.header is None):
                                        self.header = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.Header()
                                        self.header.parent = self
                                        self._children_name_map["header"] = "header"
                                    return self.header

                                if (child_yang_name == "interface-parameters"):
                                    if (self.interface_parameters is None):
                                        self.interface_parameters = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.InterfaceParameters()
                                        self.interface_parameters.parent = self
                                        self._children_name_map["interface_parameters"] = "interface-parameters"
                                    return self.interface_parameters

                                if (child_yang_name == "skywarp-qos-policy-class"):
                                    if (self.skywarp_qos_policy_class is None):
                                        self.skywarp_qos_policy_class = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details.SkywarpQosPolicyClass()
                                        self.skywarp_qos_policy_class.parent = self
                                        self._children_name_map["skywarp_qos_policy_class"] = "skywarp-qos-policy-class"
                                    return self.skywarp_qos_policy_class

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "header" or name == "interface-parameters" or name == "skywarp-qos-policy-class"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (self.details is not None and self.details.has_data())

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                (self.details is not None and self.details.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "input" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "details"):
                                if (self.details is None):
                                    self.details = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input.Details()
                                    self.details.parent = self
                                    self._children_name_map["details"] = "details"
                                return self.details

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "details"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.interface_name.is_set or
                            (self.input is not None and self.input.has_data()) or
                            (self.output is not None and self.output.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.interface_name.yfilter != YFilter.not_set or
                            (self.input is not None and self.input.has_operation()) or
                            (self.output is not None and self.output.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.interface_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "input"):
                            if (self.input is None):
                                self.input = PlatformQosEa.Nodes.Node.Interfaces.Interface.Input()
                                self.input.parent = self
                                self._children_name_map["input"] = "input"
                            return self.input

                        if (child_yang_name == "output"):
                            if (self.output is None):
                                self.output = PlatformQosEa.Nodes.Node.Interfaces.Interface.Output()
                                self.output.parent = self
                                self._children_name_map["output"] = "output"
                            return self.output

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "input" or name == "output" or name == "interface-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "interface-name"):
                            self.interface_name = value
                            self.interface_name.value_namespace = name_space
                            self.interface_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.interface:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.interface:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "interfaces" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "interface"):
                        for c in self.interface:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = PlatformQosEa.Nodes.Node.Interfaces.Interface()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.interface.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "interface"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.node_name.is_set or
                    (self.bundle_interfaces is not None and self.bundle_interfaces.has_data()) or
                    (self.interfaces is not None and self.interfaces.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set or
                    (self.bundle_interfaces is not None and self.bundle_interfaces.has_operation()) or
                    (self.interfaces is not None and self.interfaces.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-skp-qos-oper:platform-qos-ea/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "bundle-interfaces"):
                    if (self.bundle_interfaces is None):
                        self.bundle_interfaces = PlatformQosEa.Nodes.Node.BundleInterfaces()
                        self.bundle_interfaces.parent = self
                        self._children_name_map["bundle_interfaces"] = "bundle-interfaces"
                    return self.bundle_interfaces

                if (child_yang_name == "interfaces"):
                    if (self.interfaces is None):
                        self.interfaces = PlatformQosEa.Nodes.Node.Interfaces()
                        self.interfaces.parent = self
                        self._children_name_map["interfaces"] = "interfaces"
                    return self.interfaces

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "bundle-interfaces" or name == "interfaces" or name == "node-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-skp-qos-oper:platform-qos-ea/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = PlatformQosEa.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (self.nodes is not None and self.nodes.has_data())

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.nodes is not None and self.nodes.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-skp-qos-oper:platform-qos-ea" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = PlatformQosEa.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "nodes"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = PlatformQosEa()
        return self._top_entity

