""" Cisco_IOS_XR_ipv4_bgp_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv4\-bgp package configuration.

This module contains definitions
for the following management objects\:
  asn\-format\: Autonomous system number format
  bgp\: bgp
  bmp\-server\-all\: bmp server all
  bmp\-servers\: bmp servers

This YANG module augments the
  Cisco\-IOS\-XR\-infra\-rsi\-cfg,
  Cisco\-IOS\-XR\-snmp\-agent\-cfg
modules with configuration data.

Copyright (c) 2013\-2018 by Cisco Systems, Inc.
All rights reserved.

"""
import sys
from collections import OrderedDict

from ydk.types import Entity as _Entity_
from ydk.types import EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class BgpAdvRt(Enum):
    """
    BgpAdvRt (Enum Class)

    Bgp adv rt

    .. data:: bgp_regular_rt = 0

    	Regular RT type

    .. data:: bgp_stitching_rt = 1

    	Stitching RT type

    """

    bgp_regular_rt = Enum.YLeaf(0, "bgp-regular-rt")

    bgp_stitching_rt = Enum.YLeaf(1, "bgp-stitching-rt")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAdvRt']


class BgpAfEncapsulation(Enum):
    """
    BgpAfEncapsulation (Enum Class)

    Bgp af encapsulation

    .. data:: vx_lan = 1

    	VxLAN encapsulation type

    """

    vx_lan = Enum.YLeaf(1, "vx-lan")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAfEncapsulation']


class BgpAigpCfg(Enum):
    """
    BgpAigpCfg (Enum Class)

    Bgp aigp cfg

    .. data:: enable = 1

    	Enable AIGP

    .. data:: disable = 2

    	Disable AIGP

    """

    enable = Enum.YLeaf(1, "enable")

    disable = Enum.YLeaf(2, "disable")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAigpCfg']


class BgpAigpCfgPoi(Enum):
    """
    BgpAigpCfgPoi (Enum Class)

    Bgp aigp cfg poi

    .. data:: pre_best_path = 1

    	AIGP Pre-bestpath POI

    .. data:: igp_cost = 2

    	AIGP igp-cost POI

    """

    pre_best_path = Enum.YLeaf(1, "pre-best-path")

    igp_cost = Enum.YLeaf(2, "igp-cost")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAigpCfgPoi']


class BgpAsn(Enum):
    """
    BgpAsn (Enum Class)

    Bgp asn

    .. data:: as_plain = 1

    	AS plain format

    .. data:: asdot = 2

    	AS dot format

    """

    as_plain = Enum.YLeaf(1, "as-plain")

    asdot = Enum.YLeaf(2, "asdot")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAsn']


class BgpBfdEnableMode(Enum):
    """
    BgpBfdEnableMode (Enum Class)

    Bgp bfd enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Default BFD behavior

    .. data:: strict = 2

    	Strict Mode - Hold down adj until BFD session

    	up

    """

    disable = Enum.YLeaf(0, "disable")

    default = Enum.YLeaf(1, "default")

    strict = Enum.YLeaf(2, "strict")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpBfdEnableMode']


class BgpClusterId(Enum):
    """
    BgpClusterId (Enum Class)

    Bgp cluster id

    .. data:: number = 1

    	Number

    .. data:: ipv4_address = 2

    	IPv4 Address

    """

    number = Enum.YLeaf(1, "number")

    ipv4_address = Enum.YLeaf(2, "ipv4-address")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpClusterId']


class BgpEbgpSendDmzEnableMode(Enum):
    """
    BgpEbgpSendDmzEnableMode (Enum Class)

    Bgp ebgp send dmz enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Send dmz link bandwidth value to

    	ebgp neighbor

    .. data:: cumulative = 2

    	Strict Mode - Send cumulative dmz link

    	bandwidth value to ebgp neighbor

    """

    disable = Enum.YLeaf(0, "disable")

    default = Enum.YLeaf(1, "default")

    cumulative = Enum.YLeaf(2, "cumulative")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpEbgpSendDmzEnableMode']


class BgpFlowspecValidationCfg(Enum):
    """
    BgpFlowspecValidationCfg (Enum Class)

    Bgp flowspec validation cfg

    .. data:: enable = 1

    	Enable Flowspec validation

    .. data:: disable = 2

    	Disable Flowspec validation

    .. data:: redirect_nexhop_disable = 3

    	Disable Flowspec redirect nexthop validation

    """

    enable = Enum.YLeaf(1, "enable")

    disable = Enum.YLeaf(2, "disable")

    redirect_nexhop_disable = Enum.YLeaf(3, "redirect-nexhop-disable")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpFlowspecValidationCfg']


class BgpGlobalRouteDistinguisher(Enum):
    """
    BgpGlobalRouteDistinguisher (Enum Class)

    Bgp global route distinguisher

    .. data:: as_ = 2

    	AS format RD

    .. data:: four_byte_as = 3

    	4-byte AS format RD

    .. data:: ipv4_address = 4

    	IPv4 address format RD

    """

    as_ = Enum.YLeaf(2, "as")

    four_byte_as = Enum.YLeaf(3, "four-byte-as")

    ipv4_address = Enum.YLeaf(4, "ipv4-address")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpGlobalRouteDistinguisher']


class BgpMvpnSfsSelect(Enum):
    """
    BgpMvpnSfsSelect (Enum Class)

    Bgp mvpn sfs select

    .. data:: all_paths = 1

    	Select all paths as single forwarder PE

    .. data:: highest_ip_address = 2

    	Select PE with highest address as single

    	forwarder PE

    """

    all_paths = Enum.YLeaf(1, "all-paths")

    highest_ip_address = Enum.YLeaf(2, "highest-ip-address")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpMvpnSfsSelect']


class BgpNbrgr(Enum):
    """
    BgpNbrgr (Enum Class)

    Bgp nbrgr

    .. data:: true = 0

    	NBR has enabled Graceful Restart capability

    .. data:: false = 1

    	NBR has disabled Graceful Restart capability

    """

    true = Enum.YLeaf(0, "true")

    false = Enum.YLeaf(1, "false")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpNbrgr']


class BgpOrf(Enum):
    """
    BgpOrf (Enum Class)

    Bgp orf

    .. data:: none = 0

    	No capability to send or receive

    .. data:: receive = 1

    	Receive ORF capability

    .. data:: send = 2

    	Send ORF capability

    .. data:: both = 3

    	Send and receive ORF capability

    """

    none = Enum.YLeaf(0, "none")

    receive = Enum.YLeaf(1, "receive")

    send = Enum.YLeaf(2, "send")

    both = Enum.YLeaf(3, "both")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpOrf']


class BgpReorgOpt(Enum):
    """
    BgpReorgOpt (Enum Class)

    Bgp reorg opt

    .. data:: bgp_cfg_adv = 1

    	Advertise translated routes

    .. data:: bgp_cfg_adv_reorg = 2

    	Advertise Reorig routes

    .. data:: bgp_cfg_adv_disable = 3

    	Disable adv of routes

    .. data:: bgp_cfg_adv_local = 4

    	Advertise local routes

    .. data:: bgp_cfg_adv_def_vrf_imp_disable = 5

    	Disable adv of Def VRF Imported routes

    .. data:: bgp_cfg_adv_vrf_re_imp_disable = 6

    	Disable adv of VRF ReImported routes

    .. data:: bgp_cfg_adv_vrf_evpn_re_imp_disable = 7

    	Disable adv of VRF EVPN extranet Imported

    	routes

    """

    bgp_cfg_adv = Enum.YLeaf(1, "bgp-cfg-adv")

    bgp_cfg_adv_reorg = Enum.YLeaf(2, "bgp-cfg-adv-reorg")

    bgp_cfg_adv_disable = Enum.YLeaf(3, "bgp-cfg-adv-disable")

    bgp_cfg_adv_local = Enum.YLeaf(4, "bgp-cfg-adv-local")

    bgp_cfg_adv_def_vrf_imp_disable = Enum.YLeaf(5, "bgp-cfg-adv-def-vrf-imp-disable")

    bgp_cfg_adv_vrf_re_imp_disable = Enum.YLeaf(6, "bgp-cfg-adv-vrf-re-imp-disable")

    bgp_cfg_adv_vrf_evpn_re_imp_disable = Enum.YLeaf(7, "bgp-cfg-adv-vrf-evpn-re-imp-disable")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpReorgOpt']


class BgpRnhInstallFormat(Enum):
    """
    BgpRnhInstallFormat (Enum Class)

    Bgp rnh install format

    .. data:: ext_comm = 0

    	Install RNH as opaque and extcomm

    .. data:: ext_comm_only = 1

    	Install RNH as extcomm only

    """

    ext_comm = Enum.YLeaf(0, "ext-comm")

    ext_comm_only = Enum.YLeaf(1, "ext-comm-only")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpRnhInstallFormat']


class BgpRouteDistinguisher(Enum):
    """
    BgpRouteDistinguisher (Enum Class)

    Bgp route distinguisher

    .. data:: auto = 1

    	Automatically assigned

    .. data:: as_ = 2

    	AS format RD

    .. data:: four_byte_as = 3

    	4-byte AS format RD

    .. data:: ipv4_address = 4

    	IPv4 address format RD

    """

    auto = Enum.YLeaf(1, "auto")

    as_ = Enum.YLeaf(2, "as")

    four_byte_as = Enum.YLeaf(3, "four-byte-as")

    ipv4_address = Enum.YLeaf(4, "ipv4-address")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpRouteDistinguisher']


class BgpRpkiBinssrc(Enum):
    """
    BgpRpkiBinssrc (Enum Class)

    Bgp rpki binssrc

    .. data:: interface = 0

    	Bind Source Interface

    """

    interface = Enum.YLeaf(0, "interface")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpRpkiBinssrc']


class BgpRpkiTransport(Enum):
    """
    BgpRpkiTransport (Enum Class)

    Bgp rpki transport

    .. data:: tcp = 0

    	TCP Transport

    .. data:: ssh = 1

    	SSH Transport

    """

    tcp = Enum.YLeaf(0, "tcp")

    ssh = Enum.YLeaf(1, "ssh")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpRpkiTransport']


class BgpSendMcastAttrCfg(Enum):
    """
    BgpSendMcastAttrCfg (Enum Class)

    Bgp send mcast attr cfg

    .. data:: enable = 1

    	Enable SendMcastAttr

    .. data:: disable = 2

    	Disable SendMcastAttr

    """

    enable = Enum.YLeaf(1, "enable")

    disable = Enum.YLeaf(2, "disable")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpSendMcastAttrCfg']


class BgpSignal(Enum):
    """
    BgpSignal (Enum Class)

    Bgp signal

    .. data:: bgp_disable = 1

    	Signalling BGP disable

    .. data:: ldp_disable = 2

    	Signalling LDP disable

    """

    bgp_disable = Enum.YLeaf(1, "bgp-disable")

    ldp_disable = Enum.YLeaf(2, "ldp-disable")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpSignal']


class BgpSiteOfOrigin(Enum):
    """
    BgpSiteOfOrigin (Enum Class)

    Bgp site of origin

    .. data:: as_ = 0

    	AS format SoO

    .. data:: ipv4_address = 1

    	IPv4 address format SoO

    .. data:: four_byte_as = 2

    	4-byte AS format SoO

    """

    as_ = Enum.YLeaf(0, "as")

    ipv4_address = Enum.YLeaf(1, "ipv4-address")

    four_byte_as = Enum.YLeaf(2, "four-byte-as")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpSiteOfOrigin']


class BgpTcpMode(Enum):
    """
    BgpTcpMode (Enum Class)

    Bgp tcp mode

    .. data:: either = 0

    	Either active or passive mode

    .. data:: active_only = 1

    	Active mode only

    .. data:: passive_only = 2

    	Passive mode only

    """

    either = Enum.YLeaf(0, "either")

    active_only = Enum.YLeaf(1, "active-only")

    passive_only = Enum.YLeaf(2, "passive-only")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpTcpMode']


class BgpVrfRouteTarget(Enum):
    """
    BgpVrfRouteTarget (Enum Class)

    Bgp vrf route target

    .. data:: as_ = 0

    	AS format RT

    .. data:: ipv4_address = 1

    	IPv4 address format RT

    .. data:: four_byte_as = 2

    	4-byte AS format RT

    """

    as_ = Enum.YLeaf(0, "as")

    ipv4_address = Enum.YLeaf(1, "ipv4-address")

    four_byte_as = Enum.YLeaf(2, "four-byte-as")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpVrfRouteTarget']


class BmpPolicySelect(Enum):
    """
    BmpPolicySelect (Enum Class)

    Bmp policy select

    .. data:: post_policy = 2

    	Pickup routes after policy application

    """

    post_policy = Enum.YLeaf(2, "post-policy")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BmpPolicySelect']


class BmpRouteDirection(Enum):
    """
    BmpRouteDirection (Enum Class)

    Bmp route direction

    .. data:: inbound = 1

    	Pickup routes at inbound direction from peer

    """

    inbound = Enum.YLeaf(1, "inbound")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BmpRouteDirection']



class Bgp(_Entity_):
    """
    bgp
    
    .. attribute:: instance
    
    	BGP instance configuration commands
    	**type**\: list of  		 :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance>`
    
    

    """

    _prefix = 'ipv4-bgp-cfg'
    _revision = '2018-06-15'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(Bgp, self).__init__()
        self._top_entity = None

        self.yang_name = "bgp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("instance", ("instance", Bgp.Instance))])
        self._leafs = OrderedDict()

        self.instance = YList(self)
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-cfg:bgp"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(Bgp, [], name, value)


    class Instance(_Entity_):
        """
        BGP instance configuration commands
        
        .. attribute:: instance_name  (key)
        
        	Instance Name. For Default instance use \- default
        	**type**\: str
        
        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
        
        .. attribute:: instance_as
        
        	Autonomous system
        	**type**\: list of  		 :py:class:`InstanceAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs>`
        
        

        """

        _prefix = 'ipv4-bgp-cfg'
        _revision = '2018-06-15'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(Bgp.Instance, self).__init__()

            self.yang_name = "instance"
            self.yang_parent_name = "bgp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = ['instance_name']
            self._child_classes = OrderedDict([("instance-as", ("instance_as", Bgp.Instance.InstanceAs))])
            self._leafs = OrderedDict([
                ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
            ])
            self.instance_name = None

            self.instance_as = YList(self)
            self._segment_path = lambda: "instance" + "[instance-name='" + str(self.instance_name) + "']"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(Bgp.Instance, ['instance_name'], name, value)


        class InstanceAs(_Entity_):
            """
            Autonomous system
            
            .. attribute:: as_  (key)
            
            	Higher 16 bits of 4\-byte Autonomous system number
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: four_byte_as
            
            	4\-byte Autonomous system
            	**type**\: list of  		 :py:class:`FourByteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs>`
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2018-06-15'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Bgp.Instance.InstanceAs, self).__init__()

                self.yang_name = "instance-as"
                self.yang_parent_name = "instance"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = ['as_']
                self._child_classes = OrderedDict([("four-byte-as", ("four_byte_as", Bgp.Instance.InstanceAs.FourByteAs))])
                self._leafs = OrderedDict([
                    ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                ])
                self.as_ = None

                self.four_byte_as = YList(self)
                self._segment_path = lambda: "instance-as" + "[as='" + str(self.as_) + "']"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Bgp.Instance.InstanceAs, ['as_'], name, value)


            class FourByteAs(_Entity_):
                """
                4\-byte Autonomous system
                
                .. attribute:: as_  (key)
                
                	2\-byte or 4\-byte Autonomous system number
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: vrfs
                
                	VRF config
                	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs>`
                
                .. attribute:: default_vrf
                
                	Global default config
                	**type**\:  :py:class:`DefaultVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf>`
                
                .. attribute:: bgp_running
                
                	Enable BGP. Deletion of this object causes deletion of all the objects under FourByteAS associated with this object
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'ipv4-bgp-cfg'
                _revision = '2018-06-15'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Bgp.Instance.InstanceAs.FourByteAs, self).__init__()

                    self.yang_name = "four-byte-as"
                    self.yang_parent_name = "instance-as"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['as_']
                    self._child_classes = OrderedDict([("vrfs", ("vrfs", Bgp.Instance.InstanceAs.FourByteAs.Vrfs)), ("default-vrf", ("default_vrf", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf))])
                    self._leafs = OrderedDict([
                        ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                        ('bgp_running', (YLeaf(YType.empty, 'bgp-running'), ['Empty'])),
                    ])
                    self.as_ = None
                    self.bgp_running = None

                    self.vrfs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"

                    self.default_vrf = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf()
                    self.default_vrf.parent = self
                    self._children_name_map["default_vrf"] = "default-vrf"
                    self._segment_path = lambda: "four-byte-as" + "[as='" + str(self.as_) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs, ['as_', 'bgp_running'], name, value)


                class Vrfs(_Entity_):
                    """
                    VRF config
                    
                    .. attribute:: vrf
                    
                    	VRF config
                    	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-cfg'
                    _revision = '2018-06-15'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "four-byte-as"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("vrf", ("vrf", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf))])
                        self._leafs = OrderedDict()

                        self.vrf = YList(self)
                        self._segment_path = lambda: "vrfs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs, [], name, value)


                    class Vrf(_Entity_):
                        """
                        VRF config
                        
                        .. attribute:: vrf_name  (key)
                        
                        	VRF name
                        	**type**\: str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: vrf_global
                        
                        	VRF attribute config
                        	**type**\:  :py:class:`VrfGlobal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal>`
                        
                        .. attribute:: vrf_neighbors
                        
                        	BGP VRF peer
                        	**type**\:  :py:class:`VrfNeighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-cfg'
                        _revision = '2018-06-15'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['vrf_name']
                            self._child_classes = OrderedDict([("vrf-global", ("vrf_global", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal)), ("vrf-neighbors", ("vrf_neighbors", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors))])
                            self._leafs = OrderedDict([
                                ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                            ])
                            self.vrf_name = None

                            self.vrf_global = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal()
                            self.vrf_global.parent = self
                            self._children_name_map["vrf_global"] = "vrf-global"

                            self.vrf_neighbors = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors()
                            self.vrf_neighbors.parent = self
                            self._children_name_map["vrf_neighbors"] = "vrf-neighbors"
                            self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf, ['vrf_name'], name, value)


                        class VrfGlobal(_Entity_):
                            """
                            VRF attribute config
                            
                            .. attribute:: route_distinguisher
                            
                            	Route distinguisher
                            	**type**\:  :py:class:`RouteDistinguisher <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher>`
                            
                            .. attribute:: vrf_global_afs
                            
                            	Global VRF\-specific configuration
                            	**type**\:  :py:class:`VrfGlobalAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs>`
                            
                            .. attribute:: exists
                            
                            	Create this VRF. Deletion of this object causes deletion of all the objects under VRF associated with this object
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: router_id
                            
                            	Configure Router\-id
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**default value**\: 0.0.0.0
                            
                            .. attribute:: disable_enforce_first_as
                            
                            	Disable enforce the first AS for EBGP routes
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_cost_community
                            
                            	Change default route selection criteria to ignore cost community comparison
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_aigp_ignore
                            
                            	Change default route selection criteria to ignore AIGP unless both paths whichare compared have AIGP attribute
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_as_path_length
                            
                            	Change default route selection criteria to ignore AS path length
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: igp_redist_internal
                            
                            	Allow redistribution of iBGP into IGPs (dangerous)
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: multi_path_as_path_ignore_onwards
                            
                            	Change default multi\-route selection criteria to ignore everything onwards as\-path check
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: disable_fast_external_fallover
                            
                            	Disable immediate reset session if a link to a directly connected external peer goes down
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: unsafe_ebgp_policy
                            
                            	If eBGP neighbor is configured without a route\-policy,the routes from that neighbor are not accepted by default.This knob overrides the default behavior. When configured,routes from the eBGP neighbors with no policy are accepted
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: default_metric
                            
                            	Default redistributed metric
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: default_info_originate
                            
                            	Control distribution of default information
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: rpki_origin_as_validity_signal_ibgp
                            
                            	RPKI origin\-AS validity signal ibgp
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: rpki_bestpath_use_origin_as_validity
                            
                            	RPKI bestpath use origin\-AS validity
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_confederation_paths
                            
                            	Change default route selection criteria and allow the comparing of MED among confederation paths
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_as_multipath_relax
                            
                            	Change default multi\-route selection criteria to relax as\-path checking \- only require same aspath length
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: mpls_activated_interfaces
                            
                            	Configure list of MPLS activated interfaces
                            	**type**\:  :py:class:`MplsActivatedInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces>`
                            
                            .. attribute:: disable_auto_soft_reset
                            
                            	Disable automatic soft peer reset on policy reconfiguration
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: disable_msg_log
                            
                            	Disable inbound and outbound messagelogging for all neighbors under the vrf
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: global_timers
                            
                            	Adjust routing timers
                            	**type**\:  :py:class:`GlobalTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers>`
                            
                            .. attribute:: best_path_igp_metric_ignore
                            
                            	Change default route selection criteria to ignore IGP Metric 
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: next_hop_res_allow_default
                            
                            	Enable path resolution for nexthops using default route
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: next_hop_mpls_fwd_ibgp
                            
                            	Enable mpls forwarding path for ibgp learnt nexthops
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: bfd
                            
                            	BFD configuration
                            	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd>`
                            
                            .. attribute:: disable_neighbor_logging
                            
                            	Disable neighbor change logging
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: send_socket_buffer_sizes
                            
                            	set socket parameters
                            	**type**\:  :py:class:`SendSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes>`
                            
                            .. attribute:: best_path_med_always
                            
                            	Change default route selection criteria and allow comparing of MED from different neighbors
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: receive_socket_buffer_sizes
                            
                            	Set socket and BGP receive buffer sizes
                            	**type**\:  :py:class:`ReceiveSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes>`
                            
                            .. attribute:: best_path_router_id
                            
                            	Change default route selection criteria and compare router\-id for identical EBGP paths
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_med_missing
                            
                            	Treat missing MED as the least preferred one
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: local_preference
                            
                            	Configure default local preference
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 100
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal, self).__init__()

                                self.yang_name = "vrf-global"
                                self.yang_parent_name = "vrf"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("route-distinguisher", ("route_distinguisher", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher)), ("vrf-global-afs", ("vrf_global_afs", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs)), ("mpls-activated-interfaces", ("mpls_activated_interfaces", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces)), ("global-timers", ("global_timers", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers)), ("bfd", ("bfd", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd)), ("send-socket-buffer-sizes", ("send_socket_buffer_sizes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes)), ("receive-socket-buffer-sizes", ("receive_socket_buffer_sizes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes))])
                                self._leafs = OrderedDict([
                                    ('exists', (YLeaf(YType.empty, 'exists'), ['Empty'])),
                                    ('router_id', (YLeaf(YType.str, 'router-id'), ['str'])),
                                    ('disable_enforce_first_as', (YLeaf(YType.empty, 'disable-enforce-first-as'), ['Empty'])),
                                    ('best_path_cost_community', (YLeaf(YType.empty, 'best-path-cost-community'), ['Empty'])),
                                    ('best_path_aigp_ignore', (YLeaf(YType.empty, 'best-path-aigp-ignore'), ['Empty'])),
                                    ('best_path_as_path_length', (YLeaf(YType.empty, 'best-path-as-path-length'), ['Empty'])),
                                    ('igp_redist_internal', (YLeaf(YType.empty, 'igp-redist-internal'), ['Empty'])),
                                    ('multi_path_as_path_ignore_onwards', (YLeaf(YType.empty, 'multi-path-as-path-ignore-onwards'), ['Empty'])),
                                    ('disable_fast_external_fallover', (YLeaf(YType.empty, 'disable-fast-external-fallover'), ['Empty'])),
                                    ('unsafe_ebgp_policy', (YLeaf(YType.empty, 'unsafe-ebgp-policy'), ['Empty'])),
                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                    ('default_info_originate', (YLeaf(YType.empty, 'default-info-originate'), ['Empty'])),
                                    ('rpki_origin_as_validity_signal_ibgp', (YLeaf(YType.empty, 'rpki-origin-as-validity-signal-ibgp'), ['Empty'])),
                                    ('rpki_bestpath_use_origin_as_validity', (YLeaf(YType.empty, 'rpki-bestpath-use-origin-as-validity'), ['Empty'])),
                                    ('best_path_confederation_paths', (YLeaf(YType.empty, 'best-path-confederation-paths'), ['Empty'])),
                                    ('best_path_as_multipath_relax', (YLeaf(YType.empty, 'best-path-as-multipath-relax'), ['Empty'])),
                                    ('disable_auto_soft_reset', (YLeaf(YType.empty, 'disable-auto-soft-reset'), ['Empty'])),
                                    ('disable_msg_log', (YLeaf(YType.empty, 'disable-msg-log'), ['Empty'])),
                                    ('best_path_igp_metric_ignore', (YLeaf(YType.empty, 'best-path-igp-metric-ignore'), ['Empty'])),
                                    ('next_hop_res_allow_default', (YLeaf(YType.empty, 'next-hop-res-allow-default'), ['Empty'])),
                                    ('next_hop_mpls_fwd_ibgp', (YLeaf(YType.empty, 'next-hop-mpls-fwd-ibgp'), ['Empty'])),
                                    ('disable_neighbor_logging', (YLeaf(YType.empty, 'disable-neighbor-logging'), ['Empty'])),
                                    ('best_path_med_always', (YLeaf(YType.empty, 'best-path-med-always'), ['Empty'])),
                                    ('best_path_router_id', (YLeaf(YType.empty, 'best-path-router-id'), ['Empty'])),
                                    ('best_path_med_missing', (YLeaf(YType.empty, 'best-path-med-missing'), ['Empty'])),
                                    ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                                ])
                                self.exists = None
                                self.router_id = None
                                self.disable_enforce_first_as = None
                                self.best_path_cost_community = None
                                self.best_path_aigp_ignore = None
                                self.best_path_as_path_length = None
                                self.igp_redist_internal = None
                                self.multi_path_as_path_ignore_onwards = None
                                self.disable_fast_external_fallover = None
                                self.unsafe_ebgp_policy = None
                                self.default_metric = None
                                self.default_info_originate = None
                                self.rpki_origin_as_validity_signal_ibgp = None
                                self.rpki_bestpath_use_origin_as_validity = None
                                self.best_path_confederation_paths = None
                                self.best_path_as_multipath_relax = None
                                self.disable_auto_soft_reset = None
                                self.disable_msg_log = None
                                self.best_path_igp_metric_ignore = None
                                self.next_hop_res_allow_default = None
                                self.next_hop_mpls_fwd_ibgp = None
                                self.disable_neighbor_logging = None
                                self.best_path_med_always = None
                                self.best_path_router_id = None
                                self.best_path_med_missing = None
                                self.local_preference = None

                                self.route_distinguisher = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher()
                                self.route_distinguisher.parent = self
                                self._children_name_map["route_distinguisher"] = "route-distinguisher"

                                self.vrf_global_afs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs()
                                self.vrf_global_afs.parent = self
                                self._children_name_map["vrf_global_afs"] = "vrf-global-afs"

                                self.mpls_activated_interfaces = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces()
                                self.mpls_activated_interfaces.parent = self
                                self._children_name_map["mpls_activated_interfaces"] = "mpls-activated-interfaces"

                                self.global_timers = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers()
                                self.global_timers.parent = self
                                self._children_name_map["global_timers"] = "global-timers"

                                self.bfd = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd()
                                self.bfd.parent = self
                                self._children_name_map["bfd"] = "bfd"

                                self.send_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes()
                                self.send_socket_buffer_sizes.parent = self
                                self._children_name_map["send_socket_buffer_sizes"] = "send-socket-buffer-sizes"

                                self.receive_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes()
                                self.receive_socket_buffer_sizes.parent = self
                                self._children_name_map["receive_socket_buffer_sizes"] = "receive-socket-buffer-sizes"
                                self._segment_path = lambda: "vrf-global"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal, ['exists', 'router_id', 'disable_enforce_first_as', 'best_path_cost_community', 'best_path_aigp_ignore', 'best_path_as_path_length', 'igp_redist_internal', 'multi_path_as_path_ignore_onwards', 'disable_fast_external_fallover', 'unsafe_ebgp_policy', 'default_metric', 'default_info_originate', 'rpki_origin_as_validity_signal_ibgp', 'rpki_bestpath_use_origin_as_validity', 'best_path_confederation_paths', 'best_path_as_multipath_relax', 'disable_auto_soft_reset', 'disable_msg_log', 'best_path_igp_metric_ignore', 'next_hop_res_allow_default', 'next_hop_mpls_fwd_ibgp', 'disable_neighbor_logging', 'best_path_med_always', 'best_path_router_id', 'best_path_med_missing', 'local_preference'], name, value)


                            class RouteDistinguisher(_Entity_):
                                """
                                Route distinguisher
                                
                                .. attribute:: type
                                
                                	Type of RD
                                	**type**\:  :py:class:`BgpRouteDistinguisher <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpRouteDistinguisher>`
                                
                                .. attribute:: as_xx
                                
                                	AS number
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: as_
                                
                                	AS number
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: as_index
                                
                                	ASN Index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: address_index
                                
                                	IP address index
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher, self).__init__()

                                    self.yang_name = "route-distinguisher"
                                    self.yang_parent_name = "vrf-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpRouteDistinguisher', '')])),
                                        ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                        ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                                        ('as_index', (YLeaf(YType.uint32, 'as-index'), ['int'])),
                                        ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                        ('address_index', (YLeaf(YType.uint32, 'address-index'), ['int'])),
                                    ])
                                    self.type = None
                                    self.as_xx = None
                                    self.as_ = None
                                    self.as_index = None
                                    self.address = None
                                    self.address_index = None
                                    self._segment_path = lambda: "route-distinguisher"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher, ['type', 'as_xx', 'as_', 'as_index', 'address', 'address_index'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher']['meta_info']


                            class VrfGlobalAfs(_Entity_):
                                """
                                Global VRF\-specific configuration
                                
                                .. attribute:: vrf_global_af
                                
                                	Global VRF AF\-specific configuration
                                	**type**\: list of  		 :py:class:`VrfGlobalAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs, self).__init__()

                                    self.yang_name = "vrf-global-afs"
                                    self.yang_parent_name = "vrf-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("vrf-global-af", ("vrf_global_af", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf))])
                                    self._leafs = OrderedDict()

                                    self.vrf_global_af = YList(self)
                                    self._segment_path = lambda: "vrf-global-afs"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs, [], name, value)


                                class VrfGlobalAf(_Entity_):
                                    """
                                    Global VRF AF\-specific configuration
                                    
                                    .. attribute:: af_name  (key)
                                    
                                    	Address family
                                    	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                    
                                    .. attribute:: mvpn
                                    
                                    	MVPN configurations
                                    	**type**\:  :py:class:`Mvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn>`
                                    
                                    .. attribute:: ebgp
                                    
                                    	Use eBGP multipaths
                                    	**type**\:  :py:class:`Ebgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ebgp>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: eibgp
                                    
                                    	Use eiBGP multipaths
                                    	**type**\:  :py:class:`Eibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Eibgp>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: ibgp
                                    
                                    	Use iBGP multipaths
                                    	**type**\:  :py:class:`Ibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ibgp>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: rt_download
                                    
                                    	Route\-Target download configuration
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: allow_vpn_default_originate
                                    
                                    	TRUE to send default orig route to VPN neighborFALSE to not send default originate route 
                                    	**type**\: bool
                                    
                                    .. attribute:: rpki_origin_as_validation_enable
                                    
                                    	RPKI origin\-AS validation enable
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: aggregate_addresses
                                    
                                    	Configure BGP aggregate entries
                                    	**type**\:  :py:class:`AggregateAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses>`
                                    
                                    .. attribute:: dynamic_med_interval
                                    
                                    	Update generation delay (in minutes) after a MED change
                                    	**type**\: int
                                    
                                    	**range:** 0..10
                                    
                                    	**units**\: minute
                                    
                                    	**default value**\: 10
                                    
                                    .. attribute:: optimal_route_reflector_groups
                                    
                                    	Table of multiple ORR groups
                                    	**type**\:  :py:class:`OptimalRouteReflectorGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups>`
                                    
                                    .. attribute:: dampening
                                    
                                    	Enable route\-flap dampening
                                    	**type**\:  :py:class:`Dampening <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Dampening>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: enable
                                    
                                    	Enable the address family. Deletion of this object causes deletion of all the objects under GlobalAF/VRFGlobalAF associated with this object 
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: rip_routes
                                    
                                    	Redistribute RIP routes
                                    	**type**\:  :py:class:`RipRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.RipRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: lisp_routes
                                    
                                    	Redistribute lisp routes
                                    	**type**\:  :py:class:`LispRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LispRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: static_routes
                                    
                                    	Redistribute static routes
                                    	**type**\:  :py:class:`StaticRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.StaticRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: distance
                                    
                                    	Define an administrative distance
                                    	**type**\:  :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: table_policy
                                    
                                    	Configure policy for installation of routes to RIB
                                    	**type**\: str
                                    
                                    .. attribute:: application_routes
                                    
                                    	Redistribute information for Application routes
                                    	**type**\:  :py:class:`ApplicationRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes>`
                                    
                                    .. attribute:: attribute_download
                                    
                                    	Attribute download configuration
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: label_mode
                                    
                                    	BGP 6PE/MPLS\-VPN label allocation mode
                                    	**type**\:  :py:class:`LabelMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: eigrp_routes
                                    
                                    	Redistribute information for EIGRP routes
                                    	**type**\:  :py:class:`EigrpRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes>`
                                    
                                    .. attribute:: best_external
                                    
                                    	TRUE to enable BE FALSE to disable BE inheritance from a parent
                                    	**type**\: bool
                                    
                                    .. attribute:: sourced_networks
                                    
                                    	Specify a network to announce via BGP
                                    	**type**\:  :py:class:`SourcedNetworks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks>`
                                    
                                    .. attribute:: rpki_origin_as_validity_signal_ibgp
                                    
                                    	RPKI origin\-AS validity signal ibgp
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: connected_routes
                                    
                                    	Redistribute connected routes
                                    	**type**\:  :py:class:`ConnectedRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ConnectedRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: additional_paths_receive
                                    
                                    	Advertise additional paths Receive capability
                                    	**type**\:  :py:class:`BgpAfAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAfAdditionalPathsCfg>`
                                    
                                    .. attribute:: permanent_network
                                    
                                    	Route policy for permanent networks
                                    	**type**\: str
                                    
                                    .. attribute:: rpki_bestpath_use_origin_as_validity
                                    
                                    	RPKI bestpath use origin\-AS validity
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: allocate_label
                                    
                                    	Label allocation policy
                                    	**type**\:  :py:class:`AllocateLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: additional_paths_selection
                                    
                                    	Configure additional paths selection
                                    	**type**\:  :py:class:`AdditionalPathsSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection>`
                                    
                                    .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                    
                                    	RPKI bestpath origin\-AS allow invalid
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: next_hop_resolution_prefix_length_minimum
                                    
                                    	Minimum prefix\-length for nexthop resolution
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    	**default value**\: 0
                                    
                                    .. attribute:: reset_weight_on_import
                                    
                                    	TRUE to reset weight on import. FALSE to not reset and to prevent inheritance from a parent
                                    	**type**\: bool
                                    
                                    .. attribute:: ospf_routes
                                    
                                    	Redistribute information for OSPF routes
                                    	**type**\:  :py:class:`OspfRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes>`
                                    
                                    .. attribute:: additional_paths_send
                                    
                                    	Advertise additional paths Send capability
                                    	**type**\:  :py:class:`BgpAfAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAfAdditionalPathsCfg>`
                                    
                                    .. attribute:: advertise_local_labeled_route_safi_unicast
                                    
                                    	Enable/disable advertisement of routes with local\-label via Unicast SAFI
                                    	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                    
                                    .. attribute:: mobile_routes
                                    
                                    	Redistribute mobile routes
                                    	**type**\:  :py:class:`MobileRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.MobileRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: disable_as_path_loop_check
                                    
                                    	Disable outbound AS Path loop check
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: subscriber_routes
                                    
                                    	Redistribute subscriber routes
                                    	**type**\:  :py:class:`SubscriberRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SubscriberRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: segment_routing
                                    
                                    	Segment\-routing Configurations
                                    	**type**\:  :py:class:`SegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf, self).__init__()

                                        self.yang_name = "vrf-global-af"
                                        self.yang_parent_name = "vrf-global-afs"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['af_name']
                                        self._child_classes = OrderedDict([("mvpn", ("mvpn", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn)), ("ebgp", ("ebgp", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ebgp)), ("eibgp", ("eibgp", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Eibgp)), ("ibgp", ("ibgp", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ibgp)), ("aggregate-addresses", ("aggregate_addresses", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses)), ("optimal-route-reflector-groups", ("optimal_route_reflector_groups", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups)), ("dampening", ("dampening", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Dampening)), ("rip-routes", ("rip_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.RipRoutes)), ("lisp-routes", ("lisp_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LispRoutes)), ("static-routes", ("static_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.StaticRoutes)), ("distance", ("distance", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance)), ("application-routes", ("application_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes)), ("label-mode", ("label_mode", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode)), ("eigrp-routes", ("eigrp_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes)), ("sourced-networks", ("sourced_networks", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks)), ("connected-routes", ("connected_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ConnectedRoutes)), ("allocate-label", ("allocate_label", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel)), ("additional-paths-selection", ("additional_paths_selection", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection)), ("ospf-routes", ("ospf_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes)), ("mobile-routes", ("mobile_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.MobileRoutes)), ("subscriber-routes", ("subscriber_routes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SubscriberRoutes)), ("segment-routing", ("segment_routing", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting))])
                                        self._leafs = OrderedDict([
                                            ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                            ('rt_download', (YLeaf(YType.empty, 'rt-download'), ['Empty'])),
                                            ('allow_vpn_default_originate', (YLeaf(YType.boolean, 'allow-vpn-default-originate'), ['bool'])),
                                            ('rpki_origin_as_validation_enable', (YLeaf(YType.empty, 'rpki-origin-as-validation-enable'), ['Empty'])),
                                            ('dynamic_med_interval', (YLeaf(YType.uint32, 'dynamic-med-interval'), ['int'])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('table_policy', (YLeaf(YType.str, 'table-policy'), ['str'])),
                                            ('attribute_download', (YLeaf(YType.empty, 'attribute-download'), ['Empty'])),
                                            ('best_external', (YLeaf(YType.boolean, 'best-external'), ['bool'])),
                                            ('rpki_origin_as_validity_signal_ibgp', (YLeaf(YType.empty, 'rpki-origin-as-validity-signal-ibgp'), ['Empty'])),
                                            ('additional_paths_receive', (YLeaf(YType.enumeration, 'additional-paths-receive'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAfAdditionalPathsCfg', '')])),
                                            ('permanent_network', (YLeaf(YType.str, 'permanent-network'), ['str'])),
                                            ('rpki_bestpath_use_origin_as_validity', (YLeaf(YType.empty, 'rpki-bestpath-use-origin-as-validity'), ['Empty'])),
                                            ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                            ('next_hop_resolution_prefix_length_minimum', (YLeaf(YType.uint32, 'next-hop-resolution-prefix-length-minimum'), ['int'])),
                                            ('reset_weight_on_import', (YLeaf(YType.boolean, 'reset-weight-on-import'), ['bool'])),
                                            ('additional_paths_send', (YLeaf(YType.enumeration, 'additional-paths-send'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAfAdditionalPathsCfg', '')])),
                                            ('advertise_local_labeled_route_safi_unicast', (YLeaf(YType.enumeration, 'advertise-local-labeled-route-safi-unicast'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                            ('disable_as_path_loop_check', (YLeaf(YType.empty, 'disable-as-path-loop-check'), ['Empty'])),
                                        ])
                                        self.af_name = None
                                        self.rt_download = None
                                        self.allow_vpn_default_originate = None
                                        self.rpki_origin_as_validation_enable = None
                                        self.dynamic_med_interval = None
                                        self.enable = None
                                        self.table_policy = None
                                        self.attribute_download = None
                                        self.best_external = None
                                        self.rpki_origin_as_validity_signal_ibgp = None
                                        self.additional_paths_receive = None
                                        self.permanent_network = None
                                        self.rpki_bestpath_use_origin_as_validity = None
                                        self.rpki_bestpath_origin_as_allow_invalid = None
                                        self.next_hop_resolution_prefix_length_minimum = None
                                        self.reset_weight_on_import = None
                                        self.additional_paths_send = None
                                        self.advertise_local_labeled_route_safi_unicast = None
                                        self.disable_as_path_loop_check = None

                                        self.mvpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn()
                                        self.mvpn.parent = self
                                        self._children_name_map["mvpn"] = "mvpn"

                                        self.ebgp = None
                                        self._children_name_map["ebgp"] = "ebgp"

                                        self.eibgp = None
                                        self._children_name_map["eibgp"] = "eibgp"

                                        self.ibgp = None
                                        self._children_name_map["ibgp"] = "ibgp"

                                        self.aggregate_addresses = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses()
                                        self.aggregate_addresses.parent = self
                                        self._children_name_map["aggregate_addresses"] = "aggregate-addresses"

                                        self.optimal_route_reflector_groups = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups()
                                        self.optimal_route_reflector_groups.parent = self
                                        self._children_name_map["optimal_route_reflector_groups"] = "optimal-route-reflector-groups"

                                        self.dampening = None
                                        self._children_name_map["dampening"] = "dampening"

                                        self.rip_routes = None
                                        self._children_name_map["rip_routes"] = "rip-routes"

                                        self.lisp_routes = None
                                        self._children_name_map["lisp_routes"] = "lisp-routes"

                                        self.static_routes = None
                                        self._children_name_map["static_routes"] = "static-routes"

                                        self.distance = None
                                        self._children_name_map["distance"] = "distance"

                                        self.application_routes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes()
                                        self.application_routes.parent = self
                                        self._children_name_map["application_routes"] = "application-routes"

                                        self.label_mode = None
                                        self._children_name_map["label_mode"] = "label-mode"

                                        self.eigrp_routes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes()
                                        self.eigrp_routes.parent = self
                                        self._children_name_map["eigrp_routes"] = "eigrp-routes"

                                        self.sourced_networks = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks()
                                        self.sourced_networks.parent = self
                                        self._children_name_map["sourced_networks"] = "sourced-networks"

                                        self.connected_routes = None
                                        self._children_name_map["connected_routes"] = "connected-routes"

                                        self.allocate_label = None
                                        self._children_name_map["allocate_label"] = "allocate-label"

                                        self.additional_paths_selection = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection()
                                        self.additional_paths_selection.parent = self
                                        self._children_name_map["additional_paths_selection"] = "additional-paths-selection"

                                        self.ospf_routes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes()
                                        self.ospf_routes.parent = self
                                        self._children_name_map["ospf_routes"] = "ospf-routes"

                                        self.mobile_routes = None
                                        self._children_name_map["mobile_routes"] = "mobile-routes"

                                        self.subscriber_routes = None
                                        self._children_name_map["subscriber_routes"] = "subscriber-routes"

                                        self.segment_routing = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting()
                                        self.segment_routing.parent = self
                                        self._children_name_map["segment_routing"] = "segment-routing"
                                        self._segment_path = lambda: "vrf-global-af" + "[af-name='" + str(self.af_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf, ['af_name', 'rt_download', 'allow_vpn_default_originate', 'rpki_origin_as_validation_enable', 'dynamic_med_interval', 'enable', 'table_policy', 'attribute_download', 'best_external', 'rpki_origin_as_validity_signal_ibgp', 'additional_paths_receive', 'permanent_network', 'rpki_bestpath_use_origin_as_validity', 'rpki_bestpath_origin_as_allow_invalid', 'next_hop_resolution_prefix_length_minimum', 'reset_weight_on_import', 'additional_paths_send', 'advertise_local_labeled_route_safi_unicast', 'disable_as_path_loop_check'], name, value)


                                    class Mvpn(_Entity_):
                                        """
                                        MVPN configurations
                                        
                                        .. attribute:: single_forwarder_selection
                                        
                                        	Select MVPN single forwarder selection
                                        	**type**\:  :py:class:`BgpMvpnSfsSelect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpMvpnSfsSelect>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn, self).__init__()

                                            self.yang_name = "mvpn"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('single_forwarder_selection', (YLeaf(YType.enumeration, 'single-forwarder-selection'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpMvpnSfsSelect', '')])),
                                            ])
                                            self.single_forwarder_selection = None
                                            self._segment_path = lambda: "mvpn"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn, ['single_forwarder_selection'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn']['meta_info']


                                    class Ebgp(_Entity_):
                                        """
                                        Use eBGP multipaths
                                        
                                        .. attribute:: paths_value
                                        
                                        	Number of paths
                                        	**type**\: int
                                        
                                        	**range:** 2..32
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: unequal_cost
                                        
                                        	UNUSED
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: selective
                                        
                                        	Allow multipaths only from marked neighbors
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: order_by_igp_metric
                                        
                                        	Order candidate multipaths by IGP metric
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ebgp, self).__init__()

                                            self.yang_name = "ebgp"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('paths_value', (YLeaf(YType.uint32, 'paths-value'), ['int'])),
                                                ('unequal_cost', (YLeaf(YType.boolean, 'unequal-cost'), ['bool'])),
                                                ('selective', (YLeaf(YType.boolean, 'selective'), ['bool'])),
                                                ('order_by_igp_metric', (YLeaf(YType.boolean, 'order-by-igp-metric'), ['bool'])),
                                            ])
                                            self.paths_value = None
                                            self.unequal_cost = None
                                            self.selective = None
                                            self.order_by_igp_metric = None
                                            self._segment_path = lambda: "ebgp"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ebgp, ['paths_value', 'unequal_cost', 'selective', 'order_by_igp_metric'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ebgp']['meta_info']


                                    class Eibgp(_Entity_):
                                        """
                                        Use eiBGP multipaths
                                        
                                        .. attribute:: paths_value
                                        
                                        	Number of paths
                                        	**type**\: int
                                        
                                        	**range:** 2..32
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: unequal_cost
                                        
                                        	UNUSED
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: selective
                                        
                                        	Allow multipaths only from marked neighbors
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: order_by_igp_metric
                                        
                                        	Order candidate multipaths by IGP metric
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Eibgp, self).__init__()

                                            self.yang_name = "eibgp"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('paths_value', (YLeaf(YType.uint32, 'paths-value'), ['int'])),
                                                ('unequal_cost', (YLeaf(YType.boolean, 'unequal-cost'), ['bool'])),
                                                ('selective', (YLeaf(YType.boolean, 'selective'), ['bool'])),
                                                ('order_by_igp_metric', (YLeaf(YType.boolean, 'order-by-igp-metric'), ['bool'])),
                                            ])
                                            self.paths_value = None
                                            self.unequal_cost = None
                                            self.selective = None
                                            self.order_by_igp_metric = None
                                            self._segment_path = lambda: "eibgp"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Eibgp, ['paths_value', 'unequal_cost', 'selective', 'order_by_igp_metric'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Eibgp']['meta_info']


                                    class Ibgp(_Entity_):
                                        """
                                        Use iBGP multipaths
                                        
                                        .. attribute:: paths_value
                                        
                                        	Number of paths
                                        	**type**\: int
                                        
                                        	**range:** 2..32
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: unequal_cost
                                        
                                        	Allow multipaths to have different IGP metrics
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: selective
                                        
                                        	Allow multipaths only from marked neighbors
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: order_by_igp_metric
                                        
                                        	Order candidate multipaths by IGP metric
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ibgp, self).__init__()

                                            self.yang_name = "ibgp"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('paths_value', (YLeaf(YType.uint32, 'paths-value'), ['int'])),
                                                ('unequal_cost', (YLeaf(YType.boolean, 'unequal-cost'), ['bool'])),
                                                ('selective', (YLeaf(YType.boolean, 'selective'), ['bool'])),
                                                ('order_by_igp_metric', (YLeaf(YType.boolean, 'order-by-igp-metric'), ['bool'])),
                                            ])
                                            self.paths_value = None
                                            self.unequal_cost = None
                                            self.selective = None
                                            self.order_by_igp_metric = None
                                            self._segment_path = lambda: "ibgp"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ibgp, ['paths_value', 'unequal_cost', 'selective', 'order_by_igp_metric'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ibgp']['meta_info']


                                    class AggregateAddresses(_Entity_):
                                        """
                                        Configure BGP aggregate entries
                                        
                                        .. attribute:: aggregate_address
                                        
                                        	Aggregate address configuration
                                        	**type**\: list of  		 :py:class:`AggregateAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses.AggregateAddress>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses, self).__init__()

                                            self.yang_name = "aggregate-addresses"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("aggregate-address", ("aggregate_address", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses.AggregateAddress))])
                                            self._leafs = OrderedDict()

                                            self.aggregate_address = YList(self)
                                            self._segment_path = lambda: "aggregate-addresses"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses, [], name, value)


                                        class AggregateAddress(_Entity_):
                                            """
                                            Aggregate address configuration
                                            
                                            .. attribute:: aggregate_addr  (key)
                                            
                                            	Aggregate in prefix/length format (address part)
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: aggregate_prefix  (key)
                                            
                                            	Aggregate in prefix/length format (prefix part)
                                            	**type**\: int
                                            
                                            	**range:** 0..128
                                            
                                            .. attribute:: generate_set_info
                                            
                                            	TRUE to generate AS set path information, FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: generate_confederation_set_info
                                            
                                            	TRUE to generate AS confederation set path information, FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: summary_only
                                            
                                            	TRUE to filter more specific routes from updates, FALSEotherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy on which to condition advertisement, suppression, and attributes
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses.AggregateAddress, self).__init__()

                                                self.yang_name = "aggregate-address"
                                                self.yang_parent_name = "aggregate-addresses"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['aggregate_addr','aggregate_prefix']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('aggregate_addr', (YLeaf(YType.str, 'aggregate-addr'), ['str','str'])),
                                                    ('aggregate_prefix', (YLeaf(YType.uint16, 'aggregate-prefix'), ['int'])),
                                                    ('generate_set_info', (YLeaf(YType.boolean, 'generate-set-info'), ['bool'])),
                                                    ('generate_confederation_set_info', (YLeaf(YType.boolean, 'generate-confederation-set-info'), ['bool'])),
                                                    ('summary_only', (YLeaf(YType.boolean, 'summary-only'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.aggregate_addr = None
                                                self.aggregate_prefix = None
                                                self.generate_set_info = None
                                                self.generate_confederation_set_info = None
                                                self.summary_only = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "aggregate-address" + "[aggregate-addr='" + str(self.aggregate_addr) + "']" + "[aggregate-prefix='" + str(self.aggregate_prefix) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses.AggregateAddress, ['aggregate_addr', 'aggregate_prefix', 'generate_set_info', 'generate_confederation_set_info', 'summary_only', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses.AggregateAddress']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses']['meta_info']


                                    class OptimalRouteReflectorGroups(_Entity_):
                                        """
                                        Table of multiple ORR groups
                                        
                                        .. attribute:: optimal_route_reflector_group
                                        
                                        	Optimal Route Reffelctor group. Each such group is equivalent to an IGP area
                                        	**type**\: list of  		 :py:class:`OptimalRouteReflectorGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups, self).__init__()

                                            self.yang_name = "optimal-route-reflector-groups"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("optimal-route-reflector-group", ("optimal_route_reflector_group", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup))])
                                            self._leafs = OrderedDict()

                                            self.optimal_route_reflector_group = YList(self)
                                            self._segment_path = lambda: "optimal-route-reflector-groups"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups, [], name, value)


                                        class OptimalRouteReflectorGroup(_Entity_):
                                            """
                                            Optimal Route Reffelctor group. Each such group
                                            is equivalent to an IGP area
                                            
                                            .. attribute:: group_name  (key)
                                            
                                            	Name of the ORR group
                                            	**type**\: str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: primary_root_address
                                            
                                            	Primary Root for the ORR group
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: secondary_root_address
                                            
                                            	Secondary Root for the ORR group
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: tertiary_root_address
                                            
                                            	Tertiary Root for the ORR group
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup, self).__init__()

                                                self.yang_name = "optimal-route-reflector-group"
                                                self.yang_parent_name = "optimal-route-reflector-groups"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['group_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('group_name', (YLeaf(YType.str, 'group-name'), ['str'])),
                                                    ('primary_root_address', (YLeaf(YType.str, 'primary-root-address'), ['str','str'])),
                                                    ('secondary_root_address', (YLeaf(YType.str, 'secondary-root-address'), ['str','str'])),
                                                    ('tertiary_root_address', (YLeaf(YType.str, 'tertiary-root-address'), ['str','str'])),
                                                ])
                                                self.group_name = None
                                                self.primary_root_address = None
                                                self.secondary_root_address = None
                                                self.tertiary_root_address = None
                                                self._segment_path = lambda: "optimal-route-reflector-group" + "[group-name='" + str(self.group_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup, ['group_name', 'primary_root_address', 'secondary_root_address', 'tertiary_root_address'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OptimalRouteReflectorGroups']['meta_info']


                                    class Dampening(_Entity_):
                                        """
                                        Enable route\-flap dampening
                                        
                                        .. attribute:: half_life
                                        
                                        	Half\-life time for the penalty (minutes)
                                        	**type**\: int
                                        
                                        	**range:** 1..45
                                        
                                        	**units**\: minute
                                        
                                        .. attribute:: reuse_threshold
                                        
                                        	Value to start reusing a route
                                        	**type**\: int
                                        
                                        	**range:** 1..20000
                                        
                                        .. attribute:: suppress_threshold
                                        
                                        	Value to start suppressing a route
                                        	**type**\: int
                                        
                                        	**range:** 1..20000
                                        
                                        .. attribute:: suppress_time
                                        
                                        	Maximum duration to suppress a stable route (seconds)
                                        	**type**\: int
                                        
                                        	**range:** 1..255
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy to specify criteria for dampening. This cannot be specified if any other parameters are specified
                                        	**type**\: str
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Dampening, self).__init__()

                                            self.yang_name = "dampening"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('half_life', (YLeaf(YType.uint32, 'half-life'), ['int'])),
                                                ('reuse_threshold', (YLeaf(YType.uint32, 'reuse-threshold'), ['int'])),
                                                ('suppress_threshold', (YLeaf(YType.uint32, 'suppress-threshold'), ['int'])),
                                                ('suppress_time', (YLeaf(YType.uint32, 'suppress-time'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ])
                                            self.half_life = None
                                            self.reuse_threshold = None
                                            self.suppress_threshold = None
                                            self.suppress_time = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "dampening"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Dampening, ['half_life', 'reuse_threshold', 'suppress_threshold', 'suppress_time', 'route_policy_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Dampening']['meta_info']


                                    class RipRoutes(_Entity_):
                                        """
                                        Redistribute RIP routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.RipRoutes, self).__init__()

                                            self.yang_name = "rip-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                            ])
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.not_used = None
                                            self._segment_path = lambda: "rip-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.RipRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.RipRoutes']['meta_info']


                                    class LispRoutes(_Entity_):
                                        """
                                        Redistribute lisp routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LispRoutes, self).__init__()

                                            self.yang_name = "lisp-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ])
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "lisp-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LispRoutes, ['default_metric', 'route_policy_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LispRoutes']['meta_info']


                                    class StaticRoutes(_Entity_):
                                        """
                                        Redistribute static routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.StaticRoutes, self).__init__()

                                            self.yang_name = "static-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                            ])
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.not_used = None
                                            self._segment_path = lambda: "static-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.StaticRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.StaticRoutes']['meta_info']


                                    class Distance(_Entity_):
                                        """
                                        Define an administrative distance
                                        
                                        .. attribute:: external_routes
                                        
                                        	Distance for routes external to the AS
                                        	**type**\: int
                                        
                                        	**range:** 1..255
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: internal_routes
                                        
                                        	Distance for routes internal to the AS
                                        	**type**\: int
                                        
                                        	**range:** 1..255
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: local_routes
                                        
                                        	Distance for local routes
                                        	**type**\: int
                                        
                                        	**range:** 1..255
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance, self).__init__()

                                            self.yang_name = "distance"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('external_routes', (YLeaf(YType.uint32, 'external-routes'), ['int'])),
                                                ('internal_routes', (YLeaf(YType.uint32, 'internal-routes'), ['int'])),
                                                ('local_routes', (YLeaf(YType.uint32, 'local-routes'), ['int'])),
                                            ])
                                            self.external_routes = None
                                            self.internal_routes = None
                                            self.local_routes = None
                                            self._segment_path = lambda: "distance"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance, ['external_routes', 'internal_routes', 'local_routes'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance']['meta_info']


                                    class ApplicationRoutes(_Entity_):
                                        """
                                        Redistribute information for Application routes.
                                        
                                        .. attribute:: application_route
                                        
                                        	Redistribute application routes
                                        	**type**\: list of  		 :py:class:`ApplicationRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes.ApplicationRoute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes, self).__init__()

                                            self.yang_name = "application-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("application-route", ("application_route", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes.ApplicationRoute))])
                                            self._leafs = OrderedDict()

                                            self.application_route = YList(self)
                                            self._segment_path = lambda: "application-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes, [], name, value)


                                        class ApplicationRoute(_Entity_):
                                            """
                                            Redistribute application routes
                                            
                                            .. attribute:: instance_name  (key)
                                            
                                            	OnePK application name
                                            	**type**\: str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: default_metric
                                            
                                            	Default metric
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name
                                            	**type**\: str
                                            
                                            .. attribute:: not_used
                                            
                                            	Not used
                                            	**type**\: int
                                            
                                            	**range:** 0..127
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes.ApplicationRoute, self).__init__()

                                                self.yang_name = "application-route"
                                                self.yang_parent_name = "application-routes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['instance_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
                                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                    ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                                ])
                                                self.instance_name = None
                                                self.default_metric = None
                                                self.route_policy_name = None
                                                self.not_used = None
                                                self._segment_path = lambda: "application-route" + "[instance-name='" + str(self.instance_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes.ApplicationRoute, ['instance_name', 'default_metric', 'route_policy_name', 'not_used'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes.ApplicationRoute']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ApplicationRoutes']['meta_info']


                                    class LabelMode(_Entity_):
                                        """
                                        BGP 6PE/MPLS\-VPN label allocation mode
                                        
                                        .. attribute:: label_allocation_mode
                                        
                                        	Label allocation mode\: per\-ce  Set per CE label mode, per\-vrf Set per VRF label mode, per\-prefix Set per Prefix label mode (for MPLS\-VPN only)
                                        	**type**\: str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Label mode route policy name
                                        	**type**\: str
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode, self).__init__()

                                            self.yang_name = "label-mode"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('label_allocation_mode', (YLeaf(YType.str, 'label-allocation-mode'), ['str'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ])
                                            self.label_allocation_mode = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "label-mode"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode, ['label_allocation_mode', 'route_policy_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode']['meta_info']


                                    class EigrpRoutes(_Entity_):
                                        """
                                        Redistribute information for EIGRP routes.
                                        
                                        .. attribute:: eigrp_route
                                        
                                        	Redistribute EIGRP routes
                                        	**type**\: list of  		 :py:class:`EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes.EigrpRoute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes, self).__init__()

                                            self.yang_name = "eigrp-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("eigrp-route", ("eigrp_route", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes.EigrpRoute))])
                                            self._leafs = OrderedDict()

                                            self.eigrp_route = YList(self)
                                            self._segment_path = lambda: "eigrp-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes, [], name, value)


                                        class EigrpRoute(_Entity_):
                                            """
                                            Redistribute EIGRP routes
                                            
                                            .. attribute:: instance_name  (key)
                                            
                                            	EIGRP router tag
                                            	**type**\: str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: default_metric
                                            
                                            	Default metric
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name
                                            	**type**\: str
                                            
                                            .. attribute:: redist_type
                                            
                                            	Redistribution type\: 01 for internal routes, 02 for external routes, Logical combinations permitted
                                            	**type**\: str
                                            
                                            	**pattern:** [0\-9a\-fA\-F]{1,8}
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes.EigrpRoute, self).__init__()

                                                self.yang_name = "eigrp-route"
                                                self.yang_parent_name = "eigrp-routes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['instance_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
                                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                    ('redist_type', (YLeaf(YType.str, 'redist-type'), ['str'])),
                                                ])
                                                self.instance_name = None
                                                self.default_metric = None
                                                self.route_policy_name = None
                                                self.redist_type = None
                                                self._segment_path = lambda: "eigrp-route" + "[instance-name='" + str(self.instance_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes.EigrpRoute, ['instance_name', 'default_metric', 'route_policy_name', 'redist_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes.EigrpRoute']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes']['meta_info']


                                    class SourcedNetworks(_Entity_):
                                        """
                                        Specify a network to announce via BGP
                                        
                                        .. attribute:: sourced_network
                                        
                                        	Sourced network configuration
                                        	**type**\: list of  		 :py:class:`SourcedNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks.SourcedNetwork>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks, self).__init__()

                                            self.yang_name = "sourced-networks"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("sourced-network", ("sourced_network", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks.SourcedNetwork))])
                                            self._leafs = OrderedDict()

                                            self.sourced_network = YList(self)
                                            self._segment_path = lambda: "sourced-networks"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks, [], name, value)


                                        class SourcedNetwork(_Entity_):
                                            """
                                            Sourced network configuration
                                            
                                            .. attribute:: network_addr  (key)
                                            
                                            	Network in prefix/length format (address part)
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: network_prefix  (key)
                                            
                                            	Network in prefix/length format (prefix part)
                                            	**type**\: int
                                            
                                            	**range:** 0..128
                                            
                                            .. attribute:: backdoor
                                            
                                            	Specify a BGP backdoor route, default is FALSE
                                            	**type**\: bool
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks.SourcedNetwork, self).__init__()

                                                self.yang_name = "sourced-network"
                                                self.yang_parent_name = "sourced-networks"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['network_addr','network_prefix']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('network_addr', (YLeaf(YType.str, 'network-addr'), ['str','str'])),
                                                    ('network_prefix', (YLeaf(YType.uint16, 'network-prefix'), ['int'])),
                                                    ('backdoor', (YLeaf(YType.boolean, 'backdoor'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.network_addr = None
                                                self.network_prefix = None
                                                self.backdoor = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "sourced-network" + "[network-addr='" + str(self.network_addr) + "']" + "[network-prefix='" + str(self.network_prefix) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks.SourcedNetwork, ['network_addr', 'network_prefix', 'backdoor', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks.SourcedNetwork']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks']['meta_info']


                                    class ConnectedRoutes(_Entity_):
                                        """
                                        Redistribute connected routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ConnectedRoutes, self).__init__()

                                            self.yang_name = "connected-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                            ])
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.not_used = None
                                            self._segment_path = lambda: "connected-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ConnectedRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ConnectedRoutes']['meta_info']


                                    class AllocateLabel(_Entity_):
                                        """
                                        Label allocation policy
                                        
                                        .. attribute:: all
                                        
                                        	Whether all nets should be labeled, default is FALSE
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: un_labeled_path
                                        
                                        	Allocate label for unlabeled paths too
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel, self).__init__()

                                            self.yang_name = "allocate-label"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('all', (YLeaf(YType.boolean, 'all'), ['bool'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('un_labeled_path', (YLeaf(YType.boolean, 'un-labeled-path'), ['bool'])),
                                            ])
                                            self.all = None
                                            self.route_policy_name = None
                                            self.un_labeled_path = None
                                            self._segment_path = lambda: "allocate-label"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel, ['all', 'route_policy_name', 'un_labeled_path'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel']['meta_info']


                                    class AdditionalPathsSelection(_Entity_):
                                        """
                                        Configure additional paths selection
                                        
                                        .. attribute:: selection
                                        
                                        	Enable/disable selection 
                                        	**type**\:  :py:class:`BgpAfAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAfAdditionalPathsCfg>`
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy for selection
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection, self).__init__()

                                            self.yang_name = "additional-paths-selection"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('selection', (YLeaf(YType.enumeration, 'selection'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAfAdditionalPathsCfg', '')])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ])
                                            self.selection = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "additional-paths-selection"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection, ['selection', 'route_policy_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection']['meta_info']


                                    class OspfRoutes(_Entity_):
                                        """
                                        Redistribute information for OSPF routes.
                                        
                                        .. attribute:: ospf_route
                                        
                                        	Redistribute OSPF routes
                                        	**type**\: list of  		 :py:class:`OspfRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes.OspfRoute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes, self).__init__()

                                            self.yang_name = "ospf-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("ospf-route", ("ospf_route", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes.OspfRoute))])
                                            self._leafs = OrderedDict()

                                            self.ospf_route = YList(self)
                                            self._segment_path = lambda: "ospf-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes, [], name, value)


                                        class OspfRoute(_Entity_):
                                            """
                                            Redistribute OSPF routes
                                            
                                            .. attribute:: instance_name  (key)
                                            
                                            	OSPF router tag
                                            	**type**\: str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: default_metric
                                            
                                            	Default metric
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name
                                            	**type**\: str
                                            
                                            .. attribute:: redist_type
                                            
                                            	Redistribution type\: 01 for internal routes, 02 for external routes of type 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1, 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA external routes.  Logical combinations permitted
                                            	**type**\: str
                                            
                                            	**pattern:** [0\-9a\-fA\-F]{1,8}
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes.OspfRoute, self).__init__()

                                                self.yang_name = "ospf-route"
                                                self.yang_parent_name = "ospf-routes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['instance_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
                                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                    ('redist_type', (YLeaf(YType.str, 'redist-type'), ['str'])),
                                                ])
                                                self.instance_name = None
                                                self.default_metric = None
                                                self.route_policy_name = None
                                                self.redist_type = None
                                                self._segment_path = lambda: "ospf-route" + "[instance-name='" + str(self.instance_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes.OspfRoute, ['instance_name', 'default_metric', 'route_policy_name', 'redist_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes.OspfRoute']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes']['meta_info']


                                    class MobileRoutes(_Entity_):
                                        """
                                        Redistribute mobile routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.MobileRoutes, self).__init__()

                                            self.yang_name = "mobile-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                            ])
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.not_used = None
                                            self._segment_path = lambda: "mobile-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.MobileRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.MobileRoutes']['meta_info']


                                    class SubscriberRoutes(_Entity_):
                                        """
                                        Redistribute subscriber routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SubscriberRoutes, self).__init__()

                                            self.yang_name = "subscriber-routes"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                            ])
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.not_used = None
                                            self._segment_path = lambda: "subscriber-routes"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SubscriberRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SubscriberRoutes']['meta_info']


                                    class SegmentRouting(_Entity_):
                                        """
                                        Segment\-routing Configurations
                                        
                                        .. attribute:: srv6
                                        
                                        	SRv6 Configurations
                                        	**type**\:  :py:class:`Srv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting.Srv6>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting, self).__init__()

                                            self.yang_name = "segment-routing"
                                            self.yang_parent_name = "vrf-global-af"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("srv6", ("srv6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting.Srv6))])
                                            self._leafs = OrderedDict()

                                            self.srv6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting.Srv6()
                                            self.srv6.parent = self
                                            self._children_name_map["srv6"] = "srv6"
                                            self._segment_path = lambda: "segment-routing"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting, [], name, value)


                                        class Srv6(_Entity_):
                                            """
                                            SRv6 Configurations
                                            
                                            .. attribute:: enable
                                            
                                            	Enable SRv6 configuration submode
                                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                            
                                            .. attribute:: srv6sid_allocation_mode
                                            
                                            	SID allocation mode\: per\-ce  Set per CE SID mode,per\-vrf Set per VRF SID mode
                                            	**type**\: str
                                            
                                            .. attribute:: locator_name
                                            
                                            	Configure Locator name for SID allocation
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting.Srv6, self).__init__()

                                                self.yang_name = "srv6"
                                                self.yang_parent_name = "segment-routing"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                                    ('srv6sid_allocation_mode', (YLeaf(YType.str, 'srv6sid-allocation-mode'), ['str'])),
                                                    ('locator_name', (YLeaf(YType.str, 'locator-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.srv6sid_allocation_mode = None
                                                self.locator_name = None
                                                self._segment_path = lambda: "srv6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting.Srv6, ['enable', 'srv6sid_allocation_mode', 'locator_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting.Srv6']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SegmentRouting']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs']['meta_info']


                            class MplsActivatedInterfaces(_Entity_):
                                """
                                Configure list of MPLS activated interfaces
                                
                                .. attribute:: mpls_activated_interface
                                
                                	Configure a MPLS activated interface
                                	**type**\: list of  		 :py:class:`MplsActivatedInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces.MplsActivatedInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces, self).__init__()

                                    self.yang_name = "mpls-activated-interfaces"
                                    self.yang_parent_name = "vrf-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("mpls-activated-interface", ("mpls_activated_interface", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces.MplsActivatedInterface))])
                                    self._leafs = OrderedDict()

                                    self.mpls_activated_interface = YList(self)
                                    self._segment_path = lambda: "mpls-activated-interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces, [], name, value)


                                class MplsActivatedInterface(_Entity_):
                                    """
                                    Configure a MPLS activated interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface Name
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces.MplsActivatedInterface, self).__init__()

                                        self.yang_name = "mpls-activated-interface"
                                        self.yang_parent_name = "mpls-activated-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "mpls-activated-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces.MplsActivatedInterface, ['interface_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces.MplsActivatedInterface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces']['meta_info']


                            class GlobalTimers(_Entity_):
                                """
                                Adjust routing timers.
                                
                                .. attribute:: keepalive
                                
                                	Keepalive interval (seconds)
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 60
                                
                                .. attribute:: hold_time
                                
                                	Hold time (seconds).  Specify 0 to disable keepalives/hold time
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 180
                                
                                .. attribute:: min_accept_hold_time
                                
                                	Minimum acceptable hold time (seconds). Specify 0 to disable keepalives/hold time
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 3
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers, self).__init__()

                                    self.yang_name = "global-timers"
                                    self.yang_parent_name = "vrf-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('keepalive', (YLeaf(YType.uint32, 'keepalive'), ['int'])),
                                        ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                        ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                    ])
                                    self.keepalive = None
                                    self.hold_time = None
                                    self.min_accept_hold_time = None
                                    self._segment_path = lambda: "global-timers"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers, ['keepalive', 'hold_time', 'min_accept_hold_time'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers']['meta_info']


                            class Bfd(_Entity_):
                                """
                                BFD configuration
                                
                                .. attribute:: detection_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 2..16
                                
                                .. attribute:: interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd, self).__init__()

                                    self.yang_name = "bfd"
                                    self.yang_parent_name = "vrf-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                        ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                    ])
                                    self.detection_multiplier = None
                                    self.interval = None
                                    self._segment_path = lambda: "bfd"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd, ['detection_multiplier', 'interval'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd']['meta_info']


                            class SendSocketBufferSizes(_Entity_):
                                """
                                set socket parameters
                                
                                .. attribute:: socket_send_size
                                
                                	Send socket buffer size in bytes
                                	**type**\: int
                                
                                	**range:** 4096..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 24576
                                
                                .. attribute:: bgp_send_size
                                
                                	BGP Write buffer size in bytes
                                	**type**\: int
                                
                                	**range:** 4096..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 4096
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes, self).__init__()

                                    self.yang_name = "send-socket-buffer-sizes"
                                    self.yang_parent_name = "vrf-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                        ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                    ])
                                    self.socket_send_size = None
                                    self.bgp_send_size = None
                                    self._segment_path = lambda: "send-socket-buffer-sizes"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes, ['socket_send_size', 'bgp_send_size'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes']['meta_info']


                            class ReceiveSocketBufferSizes(_Entity_):
                                """
                                Set socket and BGP receive buffer sizes
                                
                                .. attribute:: socket_receive_size
                                
                                	Receive socket buffer size in bytes
                                	**type**\: int
                                
                                	**range:** 512..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 32768
                                
                                .. attribute:: bgp_receive_size
                                
                                	BGP Read buffer size in bytes
                                	**type**\: int
                                
                                	**range:** 512..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 4096
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes, self).__init__()

                                    self.yang_name = "receive-socket-buffer-sizes"
                                    self.yang_parent_name = "vrf-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                        ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                    ])
                                    self.socket_receive_size = None
                                    self.bgp_receive_size = None
                                    self._segment_path = lambda: "receive-socket-buffer-sizes"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes, ['socket_receive_size', 'bgp_receive_size'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal']['meta_info']


                        class VrfNeighbors(_Entity_):
                            """
                            BGP VRF peer
                            
                            .. attribute:: vrf_neighbor
                            
                            	A particular VRF peer
                            	**type**\: list of  		 :py:class:`VrfNeighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor>`
                            
                            .. attribute:: vrf_neighbor_prefix_length
                            
                            	A particular VRF peer
                            	**type**\: list of  		 :py:class:`VrfNeighborPrefixLength <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors, self).__init__()

                                self.yang_name = "vrf-neighbors"
                                self.yang_parent_name = "vrf"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("vrf-neighbor", ("vrf_neighbor", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor)), ("vrf-neighbor-prefix-length", ("vrf_neighbor_prefix_length", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength))])
                                self._leafs = OrderedDict()

                                self.vrf_neighbor = YList(self)
                                self.vrf_neighbor_prefix_length = YList(self)
                                self._segment_path = lambda: "vrf-neighbors"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors, [], name, value)


                            class VrfNeighbor(_Entity_):
                                """
                                A particular VRF peer
                                
                                .. attribute:: neighbor_address  (key)
                                
                                	Neighbor address
                                	**type**\: union of the below types:
                                
                                		**type**\: str
                                
                                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                		**type**\: str
                                
                                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: vrf_neighbor_afs
                                
                                	Address family type of a VRF neighbor
                                	**type**\:  :py:class:`VrfNeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs>`
                                
                                .. attribute:: local_address_sub_net
                                
                                	Local Address subnet of routing updates
                                	**type**\:  :py:class:`LocalAddressSubNet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddressSubNet>`
                                
                                .. attribute:: internal_vpn_client_ibgp_ce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\: bool
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:  :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress>`
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:  :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates>`
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:  :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\: str
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:  :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs>`
                                
                                .. attribute:: merge_safi1_and4_inbound_updates
                                
                                	TRUE to merge updates FALSE to not merge updates and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:  :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs>`
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\: bool
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\: str
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\: str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:  :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:  :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:  :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  :py:class:`BgpNbrgr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpNbrgr>`
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\: bool
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\: int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:  :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss>`
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:  :py:class:`BgpTcpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpMode>`
                                
                                	**default value**\: either
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:  :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos>`
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:  :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering>`
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpEbgpSendDmzEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableMode>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:  :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut>`
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\: int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: ao_keychain
                                
                                	Set or disable AO based authentication
                                	**type**\:  :py:class:`AoKeychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AoKeychain>`
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:  :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize>`
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:  :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpBfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableMode>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:  :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers>`
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\: str
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:  :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain>`
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\: bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability. FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:  :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor, self).__init__()

                                    self.yang_name = "vrf-neighbor"
                                    self.yang_parent_name = "vrf-neighbors"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['neighbor_address']
                                    self._child_classes = OrderedDict([("vrf-neighbor-afs", ("vrf_neighbor_afs", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs)), ("local-address-sub-net", ("local_address_sub_net", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddressSubNet)), ("local-address", ("local_address", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress)), ("bmp-activates", ("bmp_activates", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates)), ("ebgp-multihop", ("ebgp_multihop", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop)), ("remote-as", ("remote_as", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs)), ("local-as", ("local_as", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs)), ("password", ("password", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password)), ("advertisement-interval", ("advertisement_interval", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AdvertisementInterval)), ("neighbor-cluster-id", ("neighbor_cluster_id", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId)), ("tcpmss", ("tcpmss", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss)), ("tos", ("tos", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos)), ("update-in-filtering", ("update_in_filtering", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering)), ("msg-log-out", ("msg_log_out", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut)), ("ao-keychain", ("ao_keychain", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AoKeychain)), ("receive-buffer-size", ("receive_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize)), ("msg-log-in", ("msg_log_in", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn)), ("send-buffer-size", ("send_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize)), ("timers", ("timers", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers)), ("keychain", ("keychain", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain)), ("graceful-maintenance", ("graceful_maintenance", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance))])
                                    self._leafs = OrderedDict([
                                        ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str','str'])),
                                        ('internal_vpn_client_ibgp_ce', (YLeaf(YType.boolean, 'internal-vpn-client-ibgp-ce'), ['bool'])),
                                        ('session_group_add_member', (YLeaf(YType.str, 'session-group-add-member'), ['str'])),
                                        ('egress_peer_engineering', (YLeaf(YType.boolean, 'egress-peer-engineering'), ['bool'])),
                                        ('merge_safi1_and4_inbound_updates', (YLeaf(YType.boolean, 'merge-safi1-and4-inbound-updates'), ['bool'])),
                                        ('neighbor_graceful_restart_stalepath_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-stalepath-time'), ['int'])),
                                        ('shutdown', (YLeaf(YType.boolean, 'shutdown'), ['bool'])),
                                        ('description', (YLeaf(YType.str, 'description'), ['str'])),
                                        ('neighbor_group_add_member', (YLeaf(YType.str, 'neighbor-group-add-member'), ['str'])),
                                        ('ebgp_recv_dmz', (YLeaf(YType.boolean, 'ebgp-recv-dmz'), ['bool'])),
                                        ('neighbor_graceful_restart', (YLeaf(YType.enumeration, 'neighbor-graceful-restart'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpNbrgr', '')])),
                                        ('enforce_first_as', (YLeaf(YType.boolean, 'enforce-first-as'), ['bool'])),
                                        ('idle_watch_time', (YLeaf(YType.uint32, 'idle-watch-time'), ['int'])),
                                        ('session_open_mode', (YLeaf(YType.enumeration, 'session-open-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpTcpMode', '')])),
                                        ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                        ('ebgp_send_dmz_enable_modes', (YLeaf(YType.enumeration, 'ebgp-send-dmz-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpEbgpSendDmzEnableMode', '')])),
                                        ('suppress_all_capabilities', (YLeaf(YType.boolean, 'suppress-all-capabilities'), ['bool'])),
                                        ('max_peers', (YLeaf(YType.uint32, 'max-peers'), ['int'])),
                                        ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                        ('additional_paths_send_capability', (YLeaf(YType.enumeration, 'additional-paths-send-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('propagate_dmz_link_bandwidth', (YLeaf(YType.boolean, 'propagate-dmz-link-bandwidth'), ['bool'])),
                                        ('bfd_enable_modes', (YLeaf(YType.enumeration, 'bfd-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpBfdEnableMode', '')])),
                                        ('ttl_security', (YLeaf(YType.boolean, 'ttl-security'), ['bool'])),
                                        ('neighbor_graceful_restart_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-time'), ['int'])),
                                        ('bfd_multiplier', (YLeaf(YType.uint32, 'bfd-multiplier'), ['int'])),
                                        ('bfd_minimum_interval', (YLeaf(YType.uint32, 'bfd-minimum-interval'), ['int'])),
                                        ('remote_as_list', (YLeaf(YType.str, 'remote-as-list'), ['str'])),
                                        ('additional_paths_receive_capability', (YLeaf(YType.enumeration, 'additional-paths-receive-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('ignore_connected_check_ebgp', (YLeaf(YType.boolean, 'ignore-connected-check-ebgp'), ['bool'])),
                                        ('suppress_four_byte_as_capability', (YLeaf(YType.boolean, 'suppress-four-byte-as-capability'), ['bool'])),
                                        ('update_source_interface', (YLeaf(YType.str, 'update-source-interface'), ['str'])),
                                    ])
                                    self.neighbor_address = None
                                    self.internal_vpn_client_ibgp_ce = None
                                    self.session_group_add_member = None
                                    self.egress_peer_engineering = None
                                    self.merge_safi1_and4_inbound_updates = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.shutdown = None
                                    self.description = None
                                    self.neighbor_group_add_member = None
                                    self.ebgp_recv_dmz = None
                                    self.neighbor_graceful_restart = None
                                    self.enforce_first_as = None
                                    self.idle_watch_time = None
                                    self.session_open_mode = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.suppress_all_capabilities = None
                                    self.max_peers = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.additional_paths_send_capability = None
                                    self.propagate_dmz_link_bandwidth = None
                                    self.bfd_enable_modes = None
                                    self.ttl_security = None
                                    self.neighbor_graceful_restart_time = None
                                    self.bfd_multiplier = None
                                    self.bfd_minimum_interval = None
                                    self.remote_as_list = None
                                    self.additional_paths_receive_capability = None
                                    self.ignore_connected_check_ebgp = None
                                    self.suppress_four_byte_as_capability = None
                                    self.update_source_interface = None

                                    self.vrf_neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs()
                                    self.vrf_neighbor_afs.parent = self
                                    self._children_name_map["vrf_neighbor_afs"] = "vrf-neighbor-afs"

                                    self.local_address_sub_net = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddressSubNet()
                                    self.local_address_sub_net.parent = self
                                    self._children_name_map["local_address_sub_net"] = "local-address-sub-net"

                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress()
                                    self.local_address.parent = self
                                    self._children_name_map["local_address"] = "local-address"

                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self._children_name_map["bmp_activates"] = "bmp-activates"

                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self._children_name_map["ebgp_multihop"] = "ebgp-multihop"

                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs()
                                    self.remote_as.parent = self
                                    self._children_name_map["remote_as"] = "remote-as"

                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs()
                                    self.local_as.parent = self
                                    self._children_name_map["local_as"] = "local-as"

                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password()
                                    self.password.parent = self
                                    self._children_name_map["password"] = "password"

                                    self.advertisement_interval = None
                                    self._children_name_map["advertisement_interval"] = "advertisement-interval"

                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self._children_name_map["neighbor_cluster_id"] = "neighbor-cluster-id"

                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss()
                                    self.tcpmss.parent = self
                                    self._children_name_map["tcpmss"] = "tcpmss"

                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos()
                                    self.tos.parent = self
                                    self._children_name_map["tos"] = "tos"

                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self._children_name_map["update_in_filtering"] = "update-in-filtering"

                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self._children_name_map["msg_log_out"] = "msg-log-out"

                                    self.ao_keychain = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AoKeychain()
                                    self.ao_keychain.parent = self
                                    self._children_name_map["ao_keychain"] = "ao-keychain"

                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self._children_name_map["receive_buffer_size"] = "receive-buffer-size"

                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self._children_name_map["msg_log_in"] = "msg-log-in"

                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self._children_name_map["send_buffer_size"] = "send-buffer-size"

                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers()
                                    self.timers.parent = self
                                    self._children_name_map["timers"] = "timers"

                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain()
                                    self.keychain.parent = self
                                    self._children_name_map["keychain"] = "keychain"

                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self._children_name_map["graceful_maintenance"] = "graceful-maintenance"
                                    self._segment_path = lambda: "vrf-neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor, ['neighbor_address', 'internal_vpn_client_ibgp_ce', 'session_group_add_member', 'egress_peer_engineering', 'merge_safi1_and4_inbound_updates', 'neighbor_graceful_restart_stalepath_time', 'shutdown', 'description', 'neighbor_group_add_member', 'ebgp_recv_dmz', 'neighbor_graceful_restart', 'enforce_first_as', 'idle_watch_time', 'session_open_mode', 'rpki_origin_as_validation_disable', 'ebgp_send_dmz_enable_modes', 'suppress_all_capabilities', 'max_peers', 'rpki_bestpath_origin_as_allow_invalid', 'additional_paths_send_capability', 'propagate_dmz_link_bandwidth', 'bfd_enable_modes', 'ttl_security', 'neighbor_graceful_restart_time', 'bfd_multiplier', 'bfd_minimum_interval', 'remote_as_list', 'additional_paths_receive_capability', 'ignore_connected_check_ebgp', 'suppress_four_byte_as_capability', 'update_source_interface'], name, value)


                                class VrfNeighborAfs(_Entity_):
                                    """
                                    Address family type of a VRF neighbor
                                    
                                    .. attribute:: vrf_neighbor_af
                                    
                                    	Address family type of a VRF neighbor
                                    	**type**\: list of  		 :py:class:`VrfNeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs, self).__init__()

                                        self.yang_name = "vrf-neighbor-afs"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("vrf-neighbor-af", ("vrf_neighbor_af", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf))])
                                        self._leafs = OrderedDict()

                                        self.vrf_neighbor_af = YList(self)
                                        self._segment_path = lambda: "vrf-neighbor-afs"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs, [], name, value)


                                    class VrfNeighborAf(_Entity_):
                                        """
                                        Address family type of a VRF neighbor
                                        
                                        .. attribute:: af_name  (key)
                                        
                                        	BGP neighbor address family
                                        	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group. FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT. FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:  :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity>`
                                        
                                        .. attribute:: cluster_id_allow_equal
                                        
                                        	TRUE to disable cluster\-id check for first id in the cluster\-id\-list. FALSE to enable check for all cluster\-ids in the list
                                        	**type**\: bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:  :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:  :py:class:`BgpFlowspecValidationCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfg>`
                                        
                                        .. attribute:: advertise_l2vpn_evpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn>`
                                        
                                        .. attribute:: advertise_local_l2vpn_evpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn>`
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:  :py:class:`BgpAfEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulation>`
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: enforce_multiple_labels
                                        
                                        	TRUE to enforce multiple labels support
                                        	**type**\: bool
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\: bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:  :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:  :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin>`
                                        
                                        .. attribute:: update_out_orig_loop_chk_disable
                                        
                                        	Enable/disable Originator loop check for this neighbor\-group/af\-group
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\: int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:  :py:class:`BgpOrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrf>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client. FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:  :py:class:`Import <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import>`
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:  :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:  :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\: bool
                                        
                                        .. attribute:: optimal_route_reflection_group
                                        
                                        	Name of the ORR group this neighbor is going to be part of
                                        	**type**\: str
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf, self).__init__()

                                            self.yang_name = "vrf-neighbor-af"
                                            self.yang_parent_name = "vrf-neighbor-afs"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['af_name']
                                            self._child_classes = OrderedDict([("aigp-cost-community", ("aigp_cost_community", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity)), ("advertise-def-imp-disable-v6", ("advertise_def_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6)), ("advertise-disable", ("advertise_disable", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable)), ("maximum-prefixes", ("maximum_prefixes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes)), ("advertise-bridge-domain-imp-disable-v6", ("advertise_bridge_domain_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6)), ("remove-private-as-entire-as-path-inbound", ("remove_private_as_entire_as_path_inbound", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound)), ("advertise-def-imp-disable-v4", ("advertise_def_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4)), ("advertise-bridge-domain-imp-disable-v4", ("advertise_bridge_domain_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4)), ("advertise-l2vpn-evpn", ("advertise_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn)), ("advertise-local-l2vpn-evpn", ("advertise_local_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn)), ("neighbor-af-long-lived-graceful-restart-stale-time", ("neighbor_af_long_lived_graceful_restart_stale_time", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime)), ("site-of-origin", ("site_of_origin", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin)), ("advertise-v6", ("advertise_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6)), ("advertise-local-v6", ("advertise_local_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6)), ("import", ("import_", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import)), ("default-originate", ("default_originate", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate)), ("soft-reconfiguration", ("soft_reconfiguration", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration)), ("advertise-vrf-imp-disable-v6", ("advertise_vrf_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6)), ("advertise-v4", ("advertise_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4)), ("advertise-local-v4", ("advertise_local_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4)), ("remove-private-as-entire-as-path", ("remove_private_as_entire_as_path", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath)), ("advertise-vrf-imp-disable-v4", ("advertise_vrf_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4))])
                                            self._leafs = OrderedDict([
                                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                ('neighbor_af_long_lived_graceful_restart_capable', (YLeaf(YType.boolean, 'neighbor-af-long-lived-graceful-restart-capable'), ['bool'])),
                                                ('send_ext_community_ebgp', (YLeaf(YType.boolean, 'send-ext-community-ebgp'), ['bool'])),
                                                ('accept_route_legacy_rt', (YLeaf(YType.boolean, 'accept-route-legacy-rt'), ['bool'])),
                                                ('cluster_id_allow_equal', (YLeaf(YType.boolean, 'cluster-id-allow-equal'), ['bool'])),
                                                ('send_community_ebgp', (YLeaf(YType.boolean, 'send-community-ebgp'), ['bool'])),
                                                ('next_hop_unchanged', (YLeaf(YType.boolean, 'next-hop-unchanged'), ['bool'])),
                                                ('advertise_local_labeled_route', (YLeaf(YType.enumeration, 'advertise-local-labeled-route'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                                ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                                ('flowspec_validation', (YLeaf(YType.enumeration, 'flowspec-validation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpFlowspecValidationCfg', '')])),
                                                ('encapsulation_type', (YLeaf(YType.enumeration, 'encapsulation-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAfEncapsulation', '')])),
                                                ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                                ('enforce_multiple_labels', (YLeaf(YType.boolean, 'enforce-multiple-labels'), ['bool'])),
                                                ('as_override', (YLeaf(YType.boolean, 'as-override'), ['bool'])),
                                                ('multipath', (YLeaf(YType.empty, 'multipath'), ['Empty'])),
                                                ('send_community_ebgp_graceful_shutdown', (YLeaf(YType.boolean, 'send-community-ebgp-graceful-shutdown'), ['bool'])),
                                                ('activate', (YLeaf(YType.empty, 'activate'), ['Empty'])),
                                                ('prefix_orf_policy', (YLeaf(YType.str, 'prefix-orf-policy'), ['str'])),
                                                ('update_out_orig_loop_chk_disable', (YLeaf(YType.empty, 'update-out-orig-loop-chk-disable'), ['Empty'])),
                                                ('aigp', (YLeaf(YType.enumeration, 'aigp'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('aigp_send_med', (YLeaf(YType.enumeration, 'aigp-send-med'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('allow_as_in', (YLeaf(YType.uint32, 'allow-as-in'), ['int'])),
                                                ('advertise_orf', (YLeaf(YType.enumeration, 'advertise-orf'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpOrf', '')])),
                                                ('route_reflector_client', (YLeaf(YType.boolean, 'route-reflector-client'), ['bool'])),
                                                ('next_hop_self', (YLeaf(YType.boolean, 'next-hop-self'), ['bool'])),
                                                ('route_policy_in', (YLeaf(YType.str, 'route-policy-in'), ['str'])),
                                                ('default_weight', (YLeaf(YType.uint32, 'default-weight'), ['int'])),
                                                ('af_group', (YLeaf(YType.str, 'af-group'), ['str'])),
                                                ('next_hop_unchanged_multipath', (YLeaf(YType.boolean, 'next-hop-unchanged-multipath'), ['bool'])),
                                                ('optimal_route_reflection_group', (YLeaf(YType.str, 'optimal-route-reflection-group'), ['str'])),
                                                ('accept_own', (YLeaf(YType.boolean, 'accept-own'), ['bool'])),
                                                ('route_policy_out', (YLeaf(YType.str, 'route-policy-out'), ['str'])),
                                                ('advertise_permanent_network', (YLeaf(YType.empty, 'advertise-permanent-network'), ['Empty'])),
                                            ])
                                            self.af_name = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.send_ext_community_ebgp = None
                                            self.accept_route_legacy_rt = None
                                            self.cluster_id_allow_equal = None
                                            self.send_community_ebgp = None
                                            self.next_hop_unchanged = None
                                            self.advertise_local_labeled_route = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.flowspec_validation = None
                                            self.encapsulation_type = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.enforce_multiple_labels = None
                                            self.as_override = None
                                            self.multipath = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.activate = None
                                            self.prefix_orf_policy = None
                                            self.update_out_orig_loop_chk_disable = None
                                            self.aigp = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.advertise_orf = None
                                            self.route_reflector_client = None
                                            self.next_hop_self = None
                                            self.route_policy_in = None
                                            self.default_weight = None
                                            self.af_group = None
                                            self.next_hop_unchanged_multipath = None
                                            self.optimal_route_reflection_group = None
                                            self.accept_own = None
                                            self.route_policy_out = None
                                            self.advertise_permanent_network = None

                                            self.aigp_cost_community = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity()
                                            self.aigp_cost_community.parent = self
                                            self._children_name_map["aigp_cost_community"] = "aigp-cost-community"

                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v6"] = "advertise-def-imp-disable-v6"

                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self._children_name_map["advertise_disable"] = "advertise-disable"

                                            self.maximum_prefixes = None
                                            self._children_name_map["maximum_prefixes"] = "maximum-prefixes"

                                            self.advertise_bridge_domain_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6()
                                            self.advertise_bridge_domain_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v6"] = "advertise-bridge-domain-imp-disable-v6"

                                            self.remove_private_as_entire_as_path_inbound = None
                                            self._children_name_map["remove_private_as_entire_as_path_inbound"] = "remove-private-as-entire-as-path-inbound"

                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v4"] = "advertise-def-imp-disable-v4"

                                            self.advertise_bridge_domain_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4()
                                            self.advertise_bridge_domain_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v4"] = "advertise-bridge-domain-imp-disable-v4"

                                            self.advertise_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn()
                                            self.advertise_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_l2vpn_evpn"] = "advertise-l2vpn-evpn"

                                            self.advertise_local_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn()
                                            self.advertise_local_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_local_l2vpn_evpn"] = "advertise-local-l2vpn-evpn"

                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self._children_name_map["neighbor_af_long_lived_graceful_restart_stale_time"] = "neighbor-af-long-lived-graceful-restart-stale-time"

                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self._children_name_map["site_of_origin"] = "site-of-origin"

                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self._children_name_map["advertise_v6"] = "advertise-v6"

                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self._children_name_map["advertise_local_v6"] = "advertise-local-v6"

                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import()
                                            self.import_.parent = self
                                            self._children_name_map["import_"] = "import"

                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self._children_name_map["default_originate"] = "default-originate"

                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self
                                            self._children_name_map["soft_reconfiguration"] = "soft-reconfiguration"

                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v6"] = "advertise-vrf-imp-disable-v6"

                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self._children_name_map["advertise_v4"] = "advertise-v4"

                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self._children_name_map["advertise_local_v4"] = "advertise-local-v4"

                                            self.remove_private_as_entire_as_path = None
                                            self._children_name_map["remove_private_as_entire_as_path"] = "remove-private-as-entire-as-path"

                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v4"] = "advertise-vrf-imp-disable-v4"
                                            self._segment_path = lambda: "vrf-neighbor-af" + "[af-name='" + str(self.af_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf, ['af_name', 'neighbor_af_long_lived_graceful_restart_capable', 'send_ext_community_ebgp', 'accept_route_legacy_rt', 'cluster_id_allow_equal', 'send_community_ebgp', 'next_hop_unchanged', 'advertise_local_labeled_route', 'rpki_origin_as_validation_disable', 'flowspec_validation', 'encapsulation_type', 'rpki_bestpath_origin_as_allow_invalid', 'enforce_multiple_labels', 'as_override', 'multipath', 'send_community_ebgp_graceful_shutdown', 'activate', 'prefix_orf_policy', 'update_out_orig_loop_chk_disable', 'aigp', 'aigp_send_med', 'allow_as_in', 'advertise_orf', 'route_reflector_client', 'next_hop_self', 'route_policy_in', 'default_weight', 'af_group', 'next_hop_unchanged_multipath', 'optimal_route_reflection_group', 'accept_own', 'route_policy_out', 'advertise_permanent_network'], name, value)


                                        class AigpCostCommunity(_Entity_):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:  :py:class:`BgpAigpCfgPoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoi>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity, self).__init__()

                                                self.yang_name = "aigp-cost-community"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('cost_community_id', (YLeaf(YType.uint32, 'cost-community-id'), ['int'])),
                                                    ('transitive', (YLeaf(YType.boolean, 'transitive'), ['bool'])),
                                                    ('cost_community_poi_type', (YLeaf(YType.enumeration, 'cost-community-poi-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfgPoi', '')])),
                                                ])
                                                self.enable = None
                                                self.cost_community_id = None
                                                self.transitive = None
                                                self.cost_community_poi_type = None
                                                self._segment_path = lambda: "aigp-cost-community"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity, ['enable', 'cost_community_id', 'transitive', 'cost_community_poi_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(_Entity_):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable, self).__init__()

                                                self.yang_name = "advertise-disable"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-disable"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(_Entity_):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\: int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes, self).__init__()

                                                self.yang_name = "maximum-prefixes"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('prefix_limit', (YLeaf(YType.uint32, 'prefix-limit'), ['int'])),
                                                    ('warning_percentage', (YLeaf(YType.uint32, 'warning-percentage'), ['int'])),
                                                    ('warning_only', (YLeaf(YType.boolean, 'warning-only'), ['bool'])),
                                                    ('restart_time', (YLeaf(YType.uint32, 'restart-time'), ['int'])),
                                                    ('discard_extra_paths', (YLeaf(YType.boolean, 'discard-extra-paths'), ['bool'])),
                                                ])
                                                self.prefix_limit = None
                                                self.warning_percentage = None
                                                self.warning_only = None
                                                self.restart_time = None
                                                self.discard_extra_paths = None
                                                self._segment_path = lambda: "maximum-prefixes"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes, ['prefix_limit', 'warning_percentage', 'warning_only', 'restart_time', 'discard_extra_paths'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(_Entity_):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path-inbound"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path-inbound"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4']['meta_info']


                                        class AdvertiseL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-l2vpn-evpn"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn']['meta_info']


                                        class AdvertiseLocalL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-local-l2vpn-evpn"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(_Entity_):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, self).__init__()

                                                self.yang_name = "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('stale_time_send', (YLeaf(YType.uint32, 'stale-time-send'), ['int'])),
                                                    ('stale_time_accept', (YLeaf(YType.uint32, 'stale-time-accept'), ['int'])),
                                                ])
                                                self.stale_time_send = None
                                                self.stale_time_accept = None
                                                self._segment_path = lambda: "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, ['stale_time_send', 'stale_time_accept'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(_Entity_):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:  :py:class:`BgpSiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOrigin>`
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin, self).__init__()

                                                self.yang_name = "site-of-origin"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSiteOfOrigin', '')])),
                                                    ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                                    ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                                                    ('as_index', (YLeaf(YType.uint32, 'as-index'), ['int'])),
                                                    ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                                    ('address_index', (YLeaf(YType.uint32, 'address-index'), ['int'])),
                                                ])
                                                self.type = None
                                                self.as_xx = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.address = None
                                                self.address_index = None
                                                self._segment_path = lambda: "site-of-origin"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin, ['type', 'as_xx', 'as_', 'as_index', 'address', 'address_index'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6, self).__init__()

                                                self.yang_name = "advertise-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6, self).__init__()

                                                self.yang_name = "advertise-local-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import(_Entity_):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import, self).__init__()

                                                self.yang_name = "import"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('import_stitching', (YLeaf(YType.boolean, 'import-stitching'), ['bool'])),
                                                    ('import_reoriginate', (YLeaf(YType.boolean, 'import-reoriginate'), ['bool'])),
                                                    ('import_reoriginate_stitching', (YLeaf(YType.boolean, 'import-reoriginate-stitching'), ['bool'])),
                                                ])
                                                self.import_stitching = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self._segment_path = lambda: "import"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import, ['import_stitching', 'import_reoriginate', 'import_reoriginate_stitching'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import']['meta_info']


                                        class DefaultOriginate(_Entity_):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate, self).__init__()

                                                self.yang_name = "default-originate"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "default-originate"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate, ['enable', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(_Entity_):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration, self).__init__()

                                                self.yang_name = "soft-reconfiguration"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('inbound_soft', (YLeaf(YType.boolean, 'inbound-soft'), ['bool'])),
                                                    ('soft_always', (YLeaf(YType.boolean, 'soft-always'), ['bool'])),
                                                ])
                                                self.inbound_soft = None
                                                self.soft_always = None
                                                self._segment_path = lambda: "soft-reconfiguration"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration, ['inbound_soft', 'soft_always'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4, self).__init__()

                                                self.yang_name = "advertise-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4, self).__init__()

                                                self.yang_name = "advertise-local-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(_Entity_):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs']['meta_info']


                                class LocalAddressSubNet(_Entity_):
                                    """
                                    Local Address subnet of routing updates
                                    
                                    .. attribute:: local_addresss_subnet
                                    
                                    	local address subnet ip address 
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_len
                                    
                                    	prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddressSubNet, self).__init__()

                                        self.yang_name = "local-address-sub-net"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_addresss_subnet', (YLeaf(YType.str, 'local-addresss-subnet'), ['str','str'])),
                                            ('prefix_len', (YLeaf(YType.uint32, 'prefix-len'), ['int'])),
                                        ])
                                        self.local_addresss_subnet = None
                                        self.prefix_len = None
                                        self._segment_path = lambda: "local-address-sub-net"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddressSubNet, ['local_addresss_subnet', 'prefix_len'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddressSubNet']['meta_info']


                                class LocalAddress(_Entity_):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\: bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress, self).__init__()

                                        self.yang_name = "local-address"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_address_disable', (YLeaf(YType.boolean, 'local-address-disable'), ['bool'])),
                                            ('local_ip_address', (YLeaf(YType.str, 'local-ip-address'), ['str','str'])),
                                        ])
                                        self.local_address_disable = None
                                        self.local_ip_address = None
                                        self._segment_path = lambda: "local-address"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress, ['local_address_disable', 'local_ip_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress']['meta_info']


                                class BmpActivates(_Entity_):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of  		 :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates, self).__init__()

                                        self.yang_name = "bmp-activates"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("bmp-activate", ("bmp_activate", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates.BmpActivate))])
                                        self._leafs = OrderedDict()

                                        self.bmp_activate = YList(self)
                                        self._segment_path = lambda: "bmp-activates"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates, [], name, value)


                                    class BmpActivate(_Entity_):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  (key)
                                        
                                        	BMP Server ID
                                        	**type**\: int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates.BmpActivate, self).__init__()

                                            self.yang_name = "bmp-activate"
                                            self.yang_parent_name = "bmp-activates"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['server_id']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('server_id', (YLeaf(YType.uint32, 'server-id'), ['int'])),
                                            ])
                                            self.server_id = None
                                            self._segment_path = lambda: "bmp-activate" + "[server-id='" + str(self.server_id) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates.BmpActivate, ['server_id'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates.BmpActivate']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates']['meta_info']


                                class EbgpMultihop(_Entity_):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop, self).__init__()

                                        self.yang_name = "ebgp-multihop"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('max_hop_count', (YLeaf(YType.uint32, 'max-hop-count'), ['int'])),
                                            ('mpls_deactivation', (YLeaf(YType.boolean, 'mpls-deactivation'), ['bool'])),
                                        ])
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None
                                        self._segment_path = lambda: "ebgp-multihop"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop, ['max_hop_count', 'mpls_deactivation'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop']['meta_info']


                                class RemoteAs(_Entity_):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs, self).__init__()

                                        self.yang_name = "remote-as"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self._segment_path = lambda: "remote-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs, ['as_xx', 'as_yy'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs']['meta_info']


                                class LocalAs(_Entity_):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs, self).__init__()

                                        self.yang_name = "local-as"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ('no_prepend', (YLeaf(YType.empty, 'no-prepend'), ['Empty'])),
                                            ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                                            ('replace_as', (YLeaf(YType.empty, 'replace-as'), ['Empty'])),
                                            ('dual_as', (YLeaf(YType.empty, 'dual-as'), ['Empty'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.no_prepend = None
                                        self.disable = None
                                        self.replace_as = None
                                        self.dual_as = None
                                        self._segment_path = lambda: "local-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs, ['as_xx', 'as_yy', 'no_prepend', 'disable', 'replace_as', 'dual_as'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs']['meta_info']


                                class Password(_Entity_):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\: bool
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password, self).__init__()

                                        self.yang_name = "password"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('password_disable', (YLeaf(YType.boolean, 'password-disable'), ['bool'])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.password_disable = None
                                        self.password = None
                                        self._segment_path = lambda: "password"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password, ['password_disable', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password']['meta_info']


                                class AdvertisementInterval(_Entity_):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\: int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AdvertisementInterval, self).__init__()

                                        self.yang_name = "advertisement-interval"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                                            ('minimum_interval_msecs', (YLeaf(YType.uint32, 'minimum-interval-msecs'), ['int'])),
                                        ])
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None
                                        self._segment_path = lambda: "advertisement-interval"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AdvertisementInterval, ['minimum_interval', 'minimum_interval_msecs'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(_Entity_):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967295
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId, self).__init__()

                                        self.yang_name = "neighbor-cluster-id"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                            ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str'])),
                                        ])
                                        self.cluster_id_number = None
                                        self.cluster_id_address = None
                                        self._segment_path = lambda: "neighbor-cluster-id"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId, ['cluster_id_number', 'cluster_id_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId']['meta_info']


                                class Tcpmss(_Entity_):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\: bool
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\: int
                                    
                                    	**range:** 68..10000
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss, self).__init__()

                                        self.yang_name = "tcpmss"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tcpmss_disable', (YLeaf(YType.boolean, 'tcpmss-disable'), ['bool'])),
                                            ('mss', (YLeaf(YType.uint32, 'mss'), ['int'])),
                                        ])
                                        self.tcpmss_disable = None
                                        self.mss = None
                                        self._segment_path = lambda: "tcpmss"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss, ['tcpmss_disable', 'mss'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss']['meta_info']


                                class Tos(_Entity_):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:  :py:class:`BgpTos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTos>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: union of the below types:
                                    
                                    		**type**\:  :py:class:`BgpPrecedenceDscp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscp>`
                                    
                                    		**type**\: int
                                    
                                    			**range:** 0..63
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos, self).__init__()

                                        self.yang_name = "tos"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpTos', '')])),
                                            ('value', (YLeaf(YType.str, 'value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpPrecedenceDscp', ''),'int'])),
                                        ])
                                        self.type = None
                                        self.value = None
                                        self._segment_path = lambda: "tos"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos, ['type', 'value'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos']['meta_info']


                                class UpdateInFiltering(_Entity_):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:  :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\: str
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering, self).__init__()

                                        self.yang_name = "update-in-filtering"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("update-in-filtering-message-buffers", ("update_in_filtering_message_buffers", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('update_in_filtering_attribute_filter_group', (YLeaf(YType.str, 'update-in-filtering-attribute-filter-group'), ['str'])),
                                            ('update_in_filtering_syslog_disable', (YLeaf(YType.empty, 'update-in-filtering-syslog-disable'), ['Empty'])),
                                        ])
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_syslog_disable = None

                                        self.update_in_filtering_message_buffers = None
                                        self._children_name_map["update_in_filtering_message_buffers"] = "update-in-filtering-message-buffers"
                                        self._segment_path = lambda: "update-in-filtering"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering, ['enable', 'update_in_filtering_attribute_filter_group', 'update_in_filtering_syslog_disable'], name, value)


                                    class UpdateInFilteringMessageBuffers(_Entity_):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\: int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\: bool
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers, self).__init__()

                                            self.yang_name = "update-in-filtering-message-buffers"
                                            self.yang_parent_name = "update-in-filtering"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('number_of_buffers', (YLeaf(YType.uint32, 'number-of-buffers'), ['int'])),
                                                ('non_circular_buffer', (YLeaf(YType.boolean, 'non-circular-buffer'), ['bool'])),
                                            ])
                                            self.number_of_buffers = None
                                            self.non_circular_buffer = None
                                            self._segment_path = lambda: "update-in-filtering-message-buffers"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers, ['number_of_buffers', 'non_circular_buffer'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering']['meta_info']


                                class MsgLogOut(_Entity_):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut, self).__init__()

                                        self.yang_name = "msg-log-out"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-out"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut']['meta_info']


                                class AoKeychain(_Entity_):
                                    """
                                    Set or disable AO based authentication
                                    
                                    .. attribute:: ao_keychain_disable
                                    
                                    	TRUE to prevent this entity from having AO keychain based authentication even if the parent has one.FALSE to enable AO keychain based authentication
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_keychain_name
                                    
                                    	Name of the AO keychain associated with this neighbor
                                    	**type**\: str
                                    
                                    .. attribute:: ao_include_tcp_options
                                    
                                    	Include TCP options header with AO
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_accept_mismatch_connection
                                    
                                    	Accept new connections even though AO mismatched
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AoKeychain, self).__init__()

                                        self.yang_name = "ao-keychain"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('ao_keychain_disable', (YLeaf(YType.boolean, 'ao-keychain-disable'), ['bool'])),
                                            ('ao_keychain_name', (YLeaf(YType.str, 'ao-keychain-name'), ['str'])),
                                            ('ao_include_tcp_options', (YLeaf(YType.boolean, 'ao-include-tcp-options'), ['bool'])),
                                            ('ao_accept_mismatch_connection', (YLeaf(YType.boolean, 'ao-accept-mismatch-connection'), ['bool'])),
                                        ])
                                        self.ao_keychain_disable = None
                                        self.ao_keychain_name = None
                                        self.ao_include_tcp_options = None
                                        self.ao_accept_mismatch_connection = None
                                        self._segment_path = lambda: "ao-keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AoKeychain, ['ao_keychain_disable', 'ao_keychain_name', 'ao_include_tcp_options', 'ao_accept_mismatch_connection'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AoKeychain']['meta_info']


                                class ReceiveBufferSize(_Entity_):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize, self).__init__()

                                        self.yang_name = "receive-buffer-size"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                            ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                        ])
                                        self.socket_receive_size = None
                                        self.bgp_receive_size = None
                                        self._segment_path = lambda: "receive-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize, ['socket_receive_size', 'bgp_receive_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(_Entity_):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn, self).__init__()

                                        self.yang_name = "msg-log-in"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn']['meta_info']


                                class SendBufferSize(_Entity_):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize, self).__init__()

                                        self.yang_name = "send-buffer-size"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                            ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                        ])
                                        self.socket_send_size = None
                                        self.bgp_send_size = None
                                        self._segment_path = lambda: "send-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize, ['socket_send_size', 'bgp_send_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize']['meta_info']


                                class Timers(_Entity_):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers, self).__init__()

                                        self.yang_name = "timers"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keepalive_interval', (YLeaf(YType.uint32, 'keepalive-interval'), ['int'])),
                                            ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                            ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                        ])
                                        self.keepalive_interval = None
                                        self.hold_time = None
                                        self.min_accept_hold_time = None
                                        self._segment_path = lambda: "timers"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers, ['keepalive_interval', 'hold_time', 'min_accept_hold_time'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers']['meta_info']


                                class Keychain(_Entity_):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\: bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain, self).__init__()

                                        self.yang_name = "keychain"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keychain_disable', (YLeaf(YType.boolean, 'keychain-disable'), ['bool'])),
                                            ('keychain_name', (YLeaf(YType.str, 'keychain-name'), ['str'])),
                                        ])
                                        self.keychain_disable = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain, ['keychain_disable', 'keychain_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain']['meta_info']


                                class GracefulMaintenance(_Entity_):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:  :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:  :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance, self).__init__()

                                        self.yang_name = "graceful-maintenance"
                                        self.yang_parent_name = "vrf-neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("graceful-maintenance-local-preference", ("graceful_maintenance_local_preference", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference)), ("graceful-maintenance-as-prepends", ("graceful_maintenance_as_prepends", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('graceful_maintenance_activate', (YLeaf(YType.boolean, 'graceful-maintenance-activate'), ['bool'])),
                                        ])
                                        self.enable = None
                                        self.graceful_maintenance_activate = None

                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self
                                        self._children_name_map["graceful_maintenance_local_preference"] = "graceful-maintenance-local-preference"

                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self._children_name_map["graceful_maintenance_as_prepends"] = "graceful-maintenance-as-prepends"
                                        self._segment_path = lambda: "graceful-maintenance"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance, ['enable', 'graceful_maintenance_activate'], name, value)


                                    class GracefulMaintenanceLocalPreference(_Entity_):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference, self).__init__()

                                            self.yang_name = "graceful-maintenance-local-preference"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_loc_pref_disable', (YLeaf(YType.boolean, 'gshut-loc-pref-disable'), ['bool'])),
                                                ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                                            ])
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None
                                            self._segment_path = lambda: "graceful-maintenance-local-preference"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference, ['gshut_loc_pref_disable', 'local_preference'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(_Entity_):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\: int
                                        
                                        	**range:** 0..6
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends, self).__init__()

                                            self.yang_name = "graceful-maintenance-as-prepends"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_prepends_disable', (YLeaf(YType.boolean, 'gshut-prepends-disable'), ['bool'])),
                                                ('as_prepends', (YLeaf(YType.uint32, 'as-prepends'), ['int'])),
                                            ])
                                            self.gshut_prepends_disable = None
                                            self.as_prepends = None
                                            self._segment_path = lambda: "graceful-maintenance-as-prepends"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends, ['gshut_prepends_disable', 'as_prepends'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor']['meta_info']


                            class VrfNeighborPrefixLength(_Entity_):
                                """
                                A particular VRF peer
                                
                                .. attribute:: prefix_length  (key)
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..127
                                
                                .. attribute:: neighbor_address  (key)
                                
                                	Neighbor address
                                	**type**\: union of the below types:
                                
                                		**type**\: str
                                
                                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                		**type**\: str
                                
                                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: vrf_neighbor_afs
                                
                                	Address family type of a VRF neighbor
                                	**type**\:  :py:class:`VrfNeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs>`
                                
                                .. attribute:: local_address_sub_net
                                
                                	Local Address subnet of routing updates
                                	**type**\:  :py:class:`LocalAddressSubNet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddressSubNet>`
                                
                                .. attribute:: internal_vpn_client_ibgp_ce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\: bool
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:  :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress>`
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:  :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates>`
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:  :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\: str
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:  :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs>`
                                
                                .. attribute:: merge_safi1_and4_inbound_updates
                                
                                	TRUE to merge updates FALSE to not merge updates and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:  :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs>`
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\: bool
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\: str
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\: str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:  :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:  :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:  :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  :py:class:`BgpNbrgr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpNbrgr>`
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\: bool
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\: int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:  :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss>`
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:  :py:class:`BgpTcpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpMode>`
                                
                                	**default value**\: either
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:  :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos>`
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:  :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering>`
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpEbgpSendDmzEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableMode>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:  :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut>`
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\: int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: ao_keychain
                                
                                	Set or disable AO based authentication
                                	**type**\:  :py:class:`AoKeychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AoKeychain>`
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:  :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize>`
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:  :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpBfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableMode>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:  :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers>`
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\: str
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:  :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain>`
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\: bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability. FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:  :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength, self).__init__()

                                    self.yang_name = "vrf-neighbor-prefix-length"
                                    self.yang_parent_name = "vrf-neighbors"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['prefix_length','neighbor_address']
                                    self._child_classes = OrderedDict([("vrf-neighbor-afs", ("vrf_neighbor_afs", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs)), ("local-address-sub-net", ("local_address_sub_net", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddressSubNet)), ("local-address", ("local_address", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress)), ("bmp-activates", ("bmp_activates", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates)), ("ebgp-multihop", ("ebgp_multihop", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop)), ("remote-as", ("remote_as", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs)), ("local-as", ("local_as", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs)), ("password", ("password", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password)), ("advertisement-interval", ("advertisement_interval", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AdvertisementInterval)), ("neighbor-cluster-id", ("neighbor_cluster_id", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId)), ("tcpmss", ("tcpmss", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss)), ("tos", ("tos", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos)), ("update-in-filtering", ("update_in_filtering", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering)), ("msg-log-out", ("msg_log_out", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut)), ("ao-keychain", ("ao_keychain", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AoKeychain)), ("receive-buffer-size", ("receive_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize)), ("msg-log-in", ("msg_log_in", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn)), ("send-buffer-size", ("send_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize)), ("timers", ("timers", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers)), ("keychain", ("keychain", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain)), ("graceful-maintenance", ("graceful_maintenance", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance))])
                                    self._leafs = OrderedDict([
                                        ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                        ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str','str'])),
                                        ('internal_vpn_client_ibgp_ce', (YLeaf(YType.boolean, 'internal-vpn-client-ibgp-ce'), ['bool'])),
                                        ('session_group_add_member', (YLeaf(YType.str, 'session-group-add-member'), ['str'])),
                                        ('egress_peer_engineering', (YLeaf(YType.boolean, 'egress-peer-engineering'), ['bool'])),
                                        ('merge_safi1_and4_inbound_updates', (YLeaf(YType.boolean, 'merge-safi1-and4-inbound-updates'), ['bool'])),
                                        ('neighbor_graceful_restart_stalepath_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-stalepath-time'), ['int'])),
                                        ('shutdown', (YLeaf(YType.boolean, 'shutdown'), ['bool'])),
                                        ('description', (YLeaf(YType.str, 'description'), ['str'])),
                                        ('neighbor_group_add_member', (YLeaf(YType.str, 'neighbor-group-add-member'), ['str'])),
                                        ('ebgp_recv_dmz', (YLeaf(YType.boolean, 'ebgp-recv-dmz'), ['bool'])),
                                        ('neighbor_graceful_restart', (YLeaf(YType.enumeration, 'neighbor-graceful-restart'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpNbrgr', '')])),
                                        ('enforce_first_as', (YLeaf(YType.boolean, 'enforce-first-as'), ['bool'])),
                                        ('idle_watch_time', (YLeaf(YType.uint32, 'idle-watch-time'), ['int'])),
                                        ('session_open_mode', (YLeaf(YType.enumeration, 'session-open-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpTcpMode', '')])),
                                        ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                        ('ebgp_send_dmz_enable_modes', (YLeaf(YType.enumeration, 'ebgp-send-dmz-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpEbgpSendDmzEnableMode', '')])),
                                        ('suppress_all_capabilities', (YLeaf(YType.boolean, 'suppress-all-capabilities'), ['bool'])),
                                        ('max_peers', (YLeaf(YType.uint32, 'max-peers'), ['int'])),
                                        ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                        ('additional_paths_send_capability', (YLeaf(YType.enumeration, 'additional-paths-send-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('propagate_dmz_link_bandwidth', (YLeaf(YType.boolean, 'propagate-dmz-link-bandwidth'), ['bool'])),
                                        ('bfd_enable_modes', (YLeaf(YType.enumeration, 'bfd-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpBfdEnableMode', '')])),
                                        ('ttl_security', (YLeaf(YType.boolean, 'ttl-security'), ['bool'])),
                                        ('neighbor_graceful_restart_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-time'), ['int'])),
                                        ('bfd_multiplier', (YLeaf(YType.uint32, 'bfd-multiplier'), ['int'])),
                                        ('bfd_minimum_interval', (YLeaf(YType.uint32, 'bfd-minimum-interval'), ['int'])),
                                        ('remote_as_list', (YLeaf(YType.str, 'remote-as-list'), ['str'])),
                                        ('additional_paths_receive_capability', (YLeaf(YType.enumeration, 'additional-paths-receive-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('ignore_connected_check_ebgp', (YLeaf(YType.boolean, 'ignore-connected-check-ebgp'), ['bool'])),
                                        ('suppress_four_byte_as_capability', (YLeaf(YType.boolean, 'suppress-four-byte-as-capability'), ['bool'])),
                                        ('update_source_interface', (YLeaf(YType.str, 'update-source-interface'), ['str'])),
                                    ])
                                    self.prefix_length = None
                                    self.neighbor_address = None
                                    self.internal_vpn_client_ibgp_ce = None
                                    self.session_group_add_member = None
                                    self.egress_peer_engineering = None
                                    self.merge_safi1_and4_inbound_updates = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.shutdown = None
                                    self.description = None
                                    self.neighbor_group_add_member = None
                                    self.ebgp_recv_dmz = None
                                    self.neighbor_graceful_restart = None
                                    self.enforce_first_as = None
                                    self.idle_watch_time = None
                                    self.session_open_mode = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.suppress_all_capabilities = None
                                    self.max_peers = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.additional_paths_send_capability = None
                                    self.propagate_dmz_link_bandwidth = None
                                    self.bfd_enable_modes = None
                                    self.ttl_security = None
                                    self.neighbor_graceful_restart_time = None
                                    self.bfd_multiplier = None
                                    self.bfd_minimum_interval = None
                                    self.remote_as_list = None
                                    self.additional_paths_receive_capability = None
                                    self.ignore_connected_check_ebgp = None
                                    self.suppress_four_byte_as_capability = None
                                    self.update_source_interface = None

                                    self.vrf_neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs()
                                    self.vrf_neighbor_afs.parent = self
                                    self._children_name_map["vrf_neighbor_afs"] = "vrf-neighbor-afs"

                                    self.local_address_sub_net = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddressSubNet()
                                    self.local_address_sub_net.parent = self
                                    self._children_name_map["local_address_sub_net"] = "local-address-sub-net"

                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress()
                                    self.local_address.parent = self
                                    self._children_name_map["local_address"] = "local-address"

                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self._children_name_map["bmp_activates"] = "bmp-activates"

                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self._children_name_map["ebgp_multihop"] = "ebgp-multihop"

                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs()
                                    self.remote_as.parent = self
                                    self._children_name_map["remote_as"] = "remote-as"

                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs()
                                    self.local_as.parent = self
                                    self._children_name_map["local_as"] = "local-as"

                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password()
                                    self.password.parent = self
                                    self._children_name_map["password"] = "password"

                                    self.advertisement_interval = None
                                    self._children_name_map["advertisement_interval"] = "advertisement-interval"

                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self._children_name_map["neighbor_cluster_id"] = "neighbor-cluster-id"

                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss()
                                    self.tcpmss.parent = self
                                    self._children_name_map["tcpmss"] = "tcpmss"

                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos()
                                    self.tos.parent = self
                                    self._children_name_map["tos"] = "tos"

                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self._children_name_map["update_in_filtering"] = "update-in-filtering"

                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self._children_name_map["msg_log_out"] = "msg-log-out"

                                    self.ao_keychain = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AoKeychain()
                                    self.ao_keychain.parent = self
                                    self._children_name_map["ao_keychain"] = "ao-keychain"

                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self._children_name_map["receive_buffer_size"] = "receive-buffer-size"

                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self._children_name_map["msg_log_in"] = "msg-log-in"

                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self._children_name_map["send_buffer_size"] = "send-buffer-size"

                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers()
                                    self.timers.parent = self
                                    self._children_name_map["timers"] = "timers"

                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain()
                                    self.keychain.parent = self
                                    self._children_name_map["keychain"] = "keychain"

                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self._children_name_map["graceful_maintenance"] = "graceful-maintenance"
                                    self._segment_path = lambda: "vrf-neighbor-prefix-length" + "[prefix-length='" + str(self.prefix_length) + "']" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength, ['prefix_length', 'neighbor_address', 'internal_vpn_client_ibgp_ce', 'session_group_add_member', 'egress_peer_engineering', 'merge_safi1_and4_inbound_updates', 'neighbor_graceful_restart_stalepath_time', 'shutdown', 'description', 'neighbor_group_add_member', 'ebgp_recv_dmz', 'neighbor_graceful_restart', 'enforce_first_as', 'idle_watch_time', 'session_open_mode', 'rpki_origin_as_validation_disable', 'ebgp_send_dmz_enable_modes', 'suppress_all_capabilities', 'max_peers', 'rpki_bestpath_origin_as_allow_invalid', 'additional_paths_send_capability', 'propagate_dmz_link_bandwidth', 'bfd_enable_modes', 'ttl_security', 'neighbor_graceful_restart_time', 'bfd_multiplier', 'bfd_minimum_interval', 'remote_as_list', 'additional_paths_receive_capability', 'ignore_connected_check_ebgp', 'suppress_four_byte_as_capability', 'update_source_interface'], name, value)


                                class VrfNeighborAfs(_Entity_):
                                    """
                                    Address family type of a VRF neighbor
                                    
                                    .. attribute:: vrf_neighbor_af
                                    
                                    	Address family type of a VRF neighbor
                                    	**type**\: list of  		 :py:class:`VrfNeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs, self).__init__()

                                        self.yang_name = "vrf-neighbor-afs"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("vrf-neighbor-af", ("vrf_neighbor_af", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf))])
                                        self._leafs = OrderedDict()

                                        self.vrf_neighbor_af = YList(self)
                                        self._segment_path = lambda: "vrf-neighbor-afs"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs, [], name, value)


                                    class VrfNeighborAf(_Entity_):
                                        """
                                        Address family type of a VRF neighbor
                                        
                                        .. attribute:: af_name  (key)
                                        
                                        	BGP neighbor address family
                                        	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group. FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT. FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:  :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity>`
                                        
                                        .. attribute:: cluster_id_allow_equal
                                        
                                        	TRUE to disable cluster\-id check for first id in the cluster\-id\-list. FALSE to enable check for all cluster\-ids in the list
                                        	**type**\: bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:  :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:  :py:class:`BgpFlowspecValidationCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfg>`
                                        
                                        .. attribute:: advertise_l2vpn_evpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn>`
                                        
                                        .. attribute:: advertise_local_l2vpn_evpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn>`
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:  :py:class:`BgpAfEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulation>`
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: enforce_multiple_labels
                                        
                                        	TRUE to enforce multiple labels support
                                        	**type**\: bool
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\: bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:  :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:  :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin>`
                                        
                                        .. attribute:: update_out_orig_loop_chk_disable
                                        
                                        	Enable/disable Originator loop check for this neighbor\-group/af\-group
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\: int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:  :py:class:`BgpOrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrf>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client. FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:  :py:class:`Import <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import>`
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:  :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:  :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\: bool
                                        
                                        .. attribute:: optimal_route_reflection_group
                                        
                                        	Name of the ORR group this neighbor is going to be part of
                                        	**type**\: str
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf, self).__init__()

                                            self.yang_name = "vrf-neighbor-af"
                                            self.yang_parent_name = "vrf-neighbor-afs"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['af_name']
                                            self._child_classes = OrderedDict([("aigp-cost-community", ("aigp_cost_community", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity)), ("advertise-def-imp-disable-v6", ("advertise_def_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6)), ("advertise-disable", ("advertise_disable", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable)), ("maximum-prefixes", ("maximum_prefixes", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes)), ("advertise-bridge-domain-imp-disable-v6", ("advertise_bridge_domain_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6)), ("remove-private-as-entire-as-path-inbound", ("remove_private_as_entire_as_path_inbound", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound)), ("advertise-def-imp-disable-v4", ("advertise_def_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4)), ("advertise-bridge-domain-imp-disable-v4", ("advertise_bridge_domain_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4)), ("advertise-l2vpn-evpn", ("advertise_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn)), ("advertise-local-l2vpn-evpn", ("advertise_local_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn)), ("neighbor-af-long-lived-graceful-restart-stale-time", ("neighbor_af_long_lived_graceful_restart_stale_time", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime)), ("site-of-origin", ("site_of_origin", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin)), ("advertise-v6", ("advertise_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6)), ("advertise-local-v6", ("advertise_local_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6)), ("import", ("import_", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import)), ("default-originate", ("default_originate", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate)), ("soft-reconfiguration", ("soft_reconfiguration", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration)), ("advertise-vrf-imp-disable-v6", ("advertise_vrf_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6)), ("advertise-v4", ("advertise_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4)), ("advertise-local-v4", ("advertise_local_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4)), ("remove-private-as-entire-as-path", ("remove_private_as_entire_as_path", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath)), ("advertise-vrf-imp-disable-v4", ("advertise_vrf_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4))])
                                            self._leafs = OrderedDict([
                                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                ('neighbor_af_long_lived_graceful_restart_capable', (YLeaf(YType.boolean, 'neighbor-af-long-lived-graceful-restart-capable'), ['bool'])),
                                                ('send_ext_community_ebgp', (YLeaf(YType.boolean, 'send-ext-community-ebgp'), ['bool'])),
                                                ('accept_route_legacy_rt', (YLeaf(YType.boolean, 'accept-route-legacy-rt'), ['bool'])),
                                                ('cluster_id_allow_equal', (YLeaf(YType.boolean, 'cluster-id-allow-equal'), ['bool'])),
                                                ('send_community_ebgp', (YLeaf(YType.boolean, 'send-community-ebgp'), ['bool'])),
                                                ('next_hop_unchanged', (YLeaf(YType.boolean, 'next-hop-unchanged'), ['bool'])),
                                                ('advertise_local_labeled_route', (YLeaf(YType.enumeration, 'advertise-local-labeled-route'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                                ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                                ('flowspec_validation', (YLeaf(YType.enumeration, 'flowspec-validation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpFlowspecValidationCfg', '')])),
                                                ('encapsulation_type', (YLeaf(YType.enumeration, 'encapsulation-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAfEncapsulation', '')])),
                                                ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                                ('enforce_multiple_labels', (YLeaf(YType.boolean, 'enforce-multiple-labels'), ['bool'])),
                                                ('as_override', (YLeaf(YType.boolean, 'as-override'), ['bool'])),
                                                ('multipath', (YLeaf(YType.empty, 'multipath'), ['Empty'])),
                                                ('send_community_ebgp_graceful_shutdown', (YLeaf(YType.boolean, 'send-community-ebgp-graceful-shutdown'), ['bool'])),
                                                ('activate', (YLeaf(YType.empty, 'activate'), ['Empty'])),
                                                ('prefix_orf_policy', (YLeaf(YType.str, 'prefix-orf-policy'), ['str'])),
                                                ('update_out_orig_loop_chk_disable', (YLeaf(YType.empty, 'update-out-orig-loop-chk-disable'), ['Empty'])),
                                                ('aigp', (YLeaf(YType.enumeration, 'aigp'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('aigp_send_med', (YLeaf(YType.enumeration, 'aigp-send-med'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('allow_as_in', (YLeaf(YType.uint32, 'allow-as-in'), ['int'])),
                                                ('advertise_orf', (YLeaf(YType.enumeration, 'advertise-orf'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpOrf', '')])),
                                                ('route_reflector_client', (YLeaf(YType.boolean, 'route-reflector-client'), ['bool'])),
                                                ('next_hop_self', (YLeaf(YType.boolean, 'next-hop-self'), ['bool'])),
                                                ('route_policy_in', (YLeaf(YType.str, 'route-policy-in'), ['str'])),
                                                ('default_weight', (YLeaf(YType.uint32, 'default-weight'), ['int'])),
                                                ('af_group', (YLeaf(YType.str, 'af-group'), ['str'])),
                                                ('next_hop_unchanged_multipath', (YLeaf(YType.boolean, 'next-hop-unchanged-multipath'), ['bool'])),
                                                ('optimal_route_reflection_group', (YLeaf(YType.str, 'optimal-route-reflection-group'), ['str'])),
                                                ('accept_own', (YLeaf(YType.boolean, 'accept-own'), ['bool'])),
                                                ('route_policy_out', (YLeaf(YType.str, 'route-policy-out'), ['str'])),
                                                ('advertise_permanent_network', (YLeaf(YType.empty, 'advertise-permanent-network'), ['Empty'])),
                                            ])
                                            self.af_name = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.send_ext_community_ebgp = None
                                            self.accept_route_legacy_rt = None
                                            self.cluster_id_allow_equal = None
                                            self.send_community_ebgp = None
                                            self.next_hop_unchanged = None
                                            self.advertise_local_labeled_route = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.flowspec_validation = None
                                            self.encapsulation_type = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.enforce_multiple_labels = None
                                            self.as_override = None
                                            self.multipath = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.activate = None
                                            self.prefix_orf_policy = None
                                            self.update_out_orig_loop_chk_disable = None
                                            self.aigp = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.advertise_orf = None
                                            self.route_reflector_client = None
                                            self.next_hop_self = None
                                            self.route_policy_in = None
                                            self.default_weight = None
                                            self.af_group = None
                                            self.next_hop_unchanged_multipath = None
                                            self.optimal_route_reflection_group = None
                                            self.accept_own = None
                                            self.route_policy_out = None
                                            self.advertise_permanent_network = None

                                            self.aigp_cost_community = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity()
                                            self.aigp_cost_community.parent = self
                                            self._children_name_map["aigp_cost_community"] = "aigp-cost-community"

                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v6"] = "advertise-def-imp-disable-v6"

                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self._children_name_map["advertise_disable"] = "advertise-disable"

                                            self.maximum_prefixes = None
                                            self._children_name_map["maximum_prefixes"] = "maximum-prefixes"

                                            self.advertise_bridge_domain_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6()
                                            self.advertise_bridge_domain_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v6"] = "advertise-bridge-domain-imp-disable-v6"

                                            self.remove_private_as_entire_as_path_inbound = None
                                            self._children_name_map["remove_private_as_entire_as_path_inbound"] = "remove-private-as-entire-as-path-inbound"

                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v4"] = "advertise-def-imp-disable-v4"

                                            self.advertise_bridge_domain_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4()
                                            self.advertise_bridge_domain_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v4"] = "advertise-bridge-domain-imp-disable-v4"

                                            self.advertise_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn()
                                            self.advertise_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_l2vpn_evpn"] = "advertise-l2vpn-evpn"

                                            self.advertise_local_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn()
                                            self.advertise_local_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_local_l2vpn_evpn"] = "advertise-local-l2vpn-evpn"

                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self._children_name_map["neighbor_af_long_lived_graceful_restart_stale_time"] = "neighbor-af-long-lived-graceful-restart-stale-time"

                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self._children_name_map["site_of_origin"] = "site-of-origin"

                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self._children_name_map["advertise_v6"] = "advertise-v6"

                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self._children_name_map["advertise_local_v6"] = "advertise-local-v6"

                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import()
                                            self.import_.parent = self
                                            self._children_name_map["import_"] = "import"

                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self._children_name_map["default_originate"] = "default-originate"

                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self
                                            self._children_name_map["soft_reconfiguration"] = "soft-reconfiguration"

                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v6"] = "advertise-vrf-imp-disable-v6"

                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self._children_name_map["advertise_v4"] = "advertise-v4"

                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self._children_name_map["advertise_local_v4"] = "advertise-local-v4"

                                            self.remove_private_as_entire_as_path = None
                                            self._children_name_map["remove_private_as_entire_as_path"] = "remove-private-as-entire-as-path"

                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v4"] = "advertise-vrf-imp-disable-v4"
                                            self._segment_path = lambda: "vrf-neighbor-af" + "[af-name='" + str(self.af_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf, ['af_name', 'neighbor_af_long_lived_graceful_restart_capable', 'send_ext_community_ebgp', 'accept_route_legacy_rt', 'cluster_id_allow_equal', 'send_community_ebgp', 'next_hop_unchanged', 'advertise_local_labeled_route', 'rpki_origin_as_validation_disable', 'flowspec_validation', 'encapsulation_type', 'rpki_bestpath_origin_as_allow_invalid', 'enforce_multiple_labels', 'as_override', 'multipath', 'send_community_ebgp_graceful_shutdown', 'activate', 'prefix_orf_policy', 'update_out_orig_loop_chk_disable', 'aigp', 'aigp_send_med', 'allow_as_in', 'advertise_orf', 'route_reflector_client', 'next_hop_self', 'route_policy_in', 'default_weight', 'af_group', 'next_hop_unchanged_multipath', 'optimal_route_reflection_group', 'accept_own', 'route_policy_out', 'advertise_permanent_network'], name, value)


                                        class AigpCostCommunity(_Entity_):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:  :py:class:`BgpAigpCfgPoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoi>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity, self).__init__()

                                                self.yang_name = "aigp-cost-community"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('cost_community_id', (YLeaf(YType.uint32, 'cost-community-id'), ['int'])),
                                                    ('transitive', (YLeaf(YType.boolean, 'transitive'), ['bool'])),
                                                    ('cost_community_poi_type', (YLeaf(YType.enumeration, 'cost-community-poi-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfgPoi', '')])),
                                                ])
                                                self.enable = None
                                                self.cost_community_id = None
                                                self.transitive = None
                                                self.cost_community_poi_type = None
                                                self._segment_path = lambda: "aigp-cost-community"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity, ['enable', 'cost_community_id', 'transitive', 'cost_community_poi_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(_Entity_):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable, self).__init__()

                                                self.yang_name = "advertise-disable"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-disable"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(_Entity_):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\: int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes, self).__init__()

                                                self.yang_name = "maximum-prefixes"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('prefix_limit', (YLeaf(YType.uint32, 'prefix-limit'), ['int'])),
                                                    ('warning_percentage', (YLeaf(YType.uint32, 'warning-percentage'), ['int'])),
                                                    ('warning_only', (YLeaf(YType.boolean, 'warning-only'), ['bool'])),
                                                    ('restart_time', (YLeaf(YType.uint32, 'restart-time'), ['int'])),
                                                    ('discard_extra_paths', (YLeaf(YType.boolean, 'discard-extra-paths'), ['bool'])),
                                                ])
                                                self.prefix_limit = None
                                                self.warning_percentage = None
                                                self.warning_only = None
                                                self.restart_time = None
                                                self.discard_extra_paths = None
                                                self._segment_path = lambda: "maximum-prefixes"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes, ['prefix_limit', 'warning_percentage', 'warning_only', 'restart_time', 'discard_extra_paths'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV6']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(_Entity_):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path-inbound"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path-inbound"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseBridgeDomainImpDisableV4']['meta_info']


                                        class AdvertiseL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-l2vpn-evpn"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2vpnEvpn']['meta_info']


                                        class AdvertiseLocalL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-local-l2vpn-evpn"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2vpnEvpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(_Entity_):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, self).__init__()

                                                self.yang_name = "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('stale_time_send', (YLeaf(YType.uint32, 'stale-time-send'), ['int'])),
                                                    ('stale_time_accept', (YLeaf(YType.uint32, 'stale-time-accept'), ['int'])),
                                                ])
                                                self.stale_time_send = None
                                                self.stale_time_accept = None
                                                self._segment_path = lambda: "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, ['stale_time_send', 'stale_time_accept'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(_Entity_):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:  :py:class:`BgpSiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOrigin>`
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin, self).__init__()

                                                self.yang_name = "site-of-origin"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSiteOfOrigin', '')])),
                                                    ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                                    ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                                                    ('as_index', (YLeaf(YType.uint32, 'as-index'), ['int'])),
                                                    ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                                    ('address_index', (YLeaf(YType.uint32, 'address-index'), ['int'])),
                                                ])
                                                self.type = None
                                                self.as_xx = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.address = None
                                                self.address_index = None
                                                self._segment_path = lambda: "site-of-origin"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin, ['type', 'as_xx', 'as_', 'as_index', 'address', 'address_index'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6, self).__init__()

                                                self.yang_name = "advertise-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6, self).__init__()

                                                self.yang_name = "advertise-local-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import(_Entity_):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import, self).__init__()

                                                self.yang_name = "import"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('import_stitching', (YLeaf(YType.boolean, 'import-stitching'), ['bool'])),
                                                    ('import_reoriginate', (YLeaf(YType.boolean, 'import-reoriginate'), ['bool'])),
                                                    ('import_reoriginate_stitching', (YLeaf(YType.boolean, 'import-reoriginate-stitching'), ['bool'])),
                                                ])
                                                self.import_stitching = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self._segment_path = lambda: "import"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import, ['import_stitching', 'import_reoriginate', 'import_reoriginate_stitching'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import']['meta_info']


                                        class DefaultOriginate(_Entity_):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate, self).__init__()

                                                self.yang_name = "default-originate"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "default-originate"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate, ['enable', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(_Entity_):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration, self).__init__()

                                                self.yang_name = "soft-reconfiguration"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('inbound_soft', (YLeaf(YType.boolean, 'inbound-soft'), ['bool'])),
                                                    ('soft_always', (YLeaf(YType.boolean, 'soft-always'), ['bool'])),
                                                ])
                                                self.inbound_soft = None
                                                self.soft_always = None
                                                self._segment_path = lambda: "soft-reconfiguration"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration, ['inbound_soft', 'soft_always'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v6"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4, self).__init__()

                                                self.yang_name = "advertise-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4, self).__init__()

                                                self.yang_name = "advertise-local-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(_Entity_):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v4"
                                                self.yang_parent_name = "vrf-neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs']['meta_info']


                                class LocalAddressSubNet(_Entity_):
                                    """
                                    Local Address subnet of routing updates
                                    
                                    .. attribute:: local_addresss_subnet
                                    
                                    	local address subnet ip address 
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_len
                                    
                                    	prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddressSubNet, self).__init__()

                                        self.yang_name = "local-address-sub-net"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_addresss_subnet', (YLeaf(YType.str, 'local-addresss-subnet'), ['str','str'])),
                                            ('prefix_len', (YLeaf(YType.uint32, 'prefix-len'), ['int'])),
                                        ])
                                        self.local_addresss_subnet = None
                                        self.prefix_len = None
                                        self._segment_path = lambda: "local-address-sub-net"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddressSubNet, ['local_addresss_subnet', 'prefix_len'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddressSubNet']['meta_info']


                                class LocalAddress(_Entity_):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\: bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress, self).__init__()

                                        self.yang_name = "local-address"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_address_disable', (YLeaf(YType.boolean, 'local-address-disable'), ['bool'])),
                                            ('local_ip_address', (YLeaf(YType.str, 'local-ip-address'), ['str','str'])),
                                        ])
                                        self.local_address_disable = None
                                        self.local_ip_address = None
                                        self._segment_path = lambda: "local-address"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress, ['local_address_disable', 'local_ip_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress']['meta_info']


                                class BmpActivates(_Entity_):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of  		 :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates, self).__init__()

                                        self.yang_name = "bmp-activates"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("bmp-activate", ("bmp_activate", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates.BmpActivate))])
                                        self._leafs = OrderedDict()

                                        self.bmp_activate = YList(self)
                                        self._segment_path = lambda: "bmp-activates"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates, [], name, value)


                                    class BmpActivate(_Entity_):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  (key)
                                        
                                        	BMP Server ID
                                        	**type**\: int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates.BmpActivate, self).__init__()

                                            self.yang_name = "bmp-activate"
                                            self.yang_parent_name = "bmp-activates"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['server_id']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('server_id', (YLeaf(YType.uint32, 'server-id'), ['int'])),
                                            ])
                                            self.server_id = None
                                            self._segment_path = lambda: "bmp-activate" + "[server-id='" + str(self.server_id) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates.BmpActivate, ['server_id'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates.BmpActivate']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates']['meta_info']


                                class EbgpMultihop(_Entity_):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop, self).__init__()

                                        self.yang_name = "ebgp-multihop"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('max_hop_count', (YLeaf(YType.uint32, 'max-hop-count'), ['int'])),
                                            ('mpls_deactivation', (YLeaf(YType.boolean, 'mpls-deactivation'), ['bool'])),
                                        ])
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None
                                        self._segment_path = lambda: "ebgp-multihop"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop, ['max_hop_count', 'mpls_deactivation'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop']['meta_info']


                                class RemoteAs(_Entity_):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs, self).__init__()

                                        self.yang_name = "remote-as"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self._segment_path = lambda: "remote-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs, ['as_xx', 'as_yy'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs']['meta_info']


                                class LocalAs(_Entity_):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs, self).__init__()

                                        self.yang_name = "local-as"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ('no_prepend', (YLeaf(YType.empty, 'no-prepend'), ['Empty'])),
                                            ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                                            ('replace_as', (YLeaf(YType.empty, 'replace-as'), ['Empty'])),
                                            ('dual_as', (YLeaf(YType.empty, 'dual-as'), ['Empty'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.no_prepend = None
                                        self.disable = None
                                        self.replace_as = None
                                        self.dual_as = None
                                        self._segment_path = lambda: "local-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs, ['as_xx', 'as_yy', 'no_prepend', 'disable', 'replace_as', 'dual_as'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs']['meta_info']


                                class Password(_Entity_):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\: bool
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password, self).__init__()

                                        self.yang_name = "password"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('password_disable', (YLeaf(YType.boolean, 'password-disable'), ['bool'])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.password_disable = None
                                        self.password = None
                                        self._segment_path = lambda: "password"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password, ['password_disable', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password']['meta_info']


                                class AdvertisementInterval(_Entity_):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\: int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AdvertisementInterval, self).__init__()

                                        self.yang_name = "advertisement-interval"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                                            ('minimum_interval_msecs', (YLeaf(YType.uint32, 'minimum-interval-msecs'), ['int'])),
                                        ])
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None
                                        self._segment_path = lambda: "advertisement-interval"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AdvertisementInterval, ['minimum_interval', 'minimum_interval_msecs'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(_Entity_):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967295
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId, self).__init__()

                                        self.yang_name = "neighbor-cluster-id"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                            ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str'])),
                                        ])
                                        self.cluster_id_number = None
                                        self.cluster_id_address = None
                                        self._segment_path = lambda: "neighbor-cluster-id"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId, ['cluster_id_number', 'cluster_id_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId']['meta_info']


                                class Tcpmss(_Entity_):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\: bool
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\: int
                                    
                                    	**range:** 68..10000
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss, self).__init__()

                                        self.yang_name = "tcpmss"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tcpmss_disable', (YLeaf(YType.boolean, 'tcpmss-disable'), ['bool'])),
                                            ('mss', (YLeaf(YType.uint32, 'mss'), ['int'])),
                                        ])
                                        self.tcpmss_disable = None
                                        self.mss = None
                                        self._segment_path = lambda: "tcpmss"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss, ['tcpmss_disable', 'mss'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss']['meta_info']


                                class Tos(_Entity_):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:  :py:class:`BgpTos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTos>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: union of the below types:
                                    
                                    		**type**\:  :py:class:`BgpPrecedenceDscp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscp>`
                                    
                                    		**type**\: int
                                    
                                    			**range:** 0..63
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos, self).__init__()

                                        self.yang_name = "tos"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpTos', '')])),
                                            ('value', (YLeaf(YType.str, 'value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpPrecedenceDscp', ''),'int'])),
                                        ])
                                        self.type = None
                                        self.value = None
                                        self._segment_path = lambda: "tos"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos, ['type', 'value'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos']['meta_info']


                                class UpdateInFiltering(_Entity_):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:  :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\: str
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering, self).__init__()

                                        self.yang_name = "update-in-filtering"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("update-in-filtering-message-buffers", ("update_in_filtering_message_buffers", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('update_in_filtering_attribute_filter_group', (YLeaf(YType.str, 'update-in-filtering-attribute-filter-group'), ['str'])),
                                            ('update_in_filtering_syslog_disable', (YLeaf(YType.empty, 'update-in-filtering-syslog-disable'), ['Empty'])),
                                        ])
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_syslog_disable = None

                                        self.update_in_filtering_message_buffers = None
                                        self._children_name_map["update_in_filtering_message_buffers"] = "update-in-filtering-message-buffers"
                                        self._segment_path = lambda: "update-in-filtering"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering, ['enable', 'update_in_filtering_attribute_filter_group', 'update_in_filtering_syslog_disable'], name, value)


                                    class UpdateInFilteringMessageBuffers(_Entity_):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\: int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\: bool
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers, self).__init__()

                                            self.yang_name = "update-in-filtering-message-buffers"
                                            self.yang_parent_name = "update-in-filtering"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('number_of_buffers', (YLeaf(YType.uint32, 'number-of-buffers'), ['int'])),
                                                ('non_circular_buffer', (YLeaf(YType.boolean, 'non-circular-buffer'), ['bool'])),
                                            ])
                                            self.number_of_buffers = None
                                            self.non_circular_buffer = None
                                            self._segment_path = lambda: "update-in-filtering-message-buffers"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers, ['number_of_buffers', 'non_circular_buffer'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering']['meta_info']


                                class MsgLogOut(_Entity_):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut, self).__init__()

                                        self.yang_name = "msg-log-out"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-out"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut']['meta_info']


                                class AoKeychain(_Entity_):
                                    """
                                    Set or disable AO based authentication
                                    
                                    .. attribute:: ao_keychain_disable
                                    
                                    	TRUE to prevent this entity from having AO keychain based authentication even if the parent has one.FALSE to enable AO keychain based authentication
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_keychain_name
                                    
                                    	Name of the AO keychain associated with this neighbor
                                    	**type**\: str
                                    
                                    .. attribute:: ao_include_tcp_options
                                    
                                    	Include TCP options header with AO
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_accept_mismatch_connection
                                    
                                    	Accept new connections even though AO mismatched
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AoKeychain, self).__init__()

                                        self.yang_name = "ao-keychain"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('ao_keychain_disable', (YLeaf(YType.boolean, 'ao-keychain-disable'), ['bool'])),
                                            ('ao_keychain_name', (YLeaf(YType.str, 'ao-keychain-name'), ['str'])),
                                            ('ao_include_tcp_options', (YLeaf(YType.boolean, 'ao-include-tcp-options'), ['bool'])),
                                            ('ao_accept_mismatch_connection', (YLeaf(YType.boolean, 'ao-accept-mismatch-connection'), ['bool'])),
                                        ])
                                        self.ao_keychain_disable = None
                                        self.ao_keychain_name = None
                                        self.ao_include_tcp_options = None
                                        self.ao_accept_mismatch_connection = None
                                        self._segment_path = lambda: "ao-keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AoKeychain, ['ao_keychain_disable', 'ao_keychain_name', 'ao_include_tcp_options', 'ao_accept_mismatch_connection'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AoKeychain']['meta_info']


                                class ReceiveBufferSize(_Entity_):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize, self).__init__()

                                        self.yang_name = "receive-buffer-size"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                            ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                        ])
                                        self.socket_receive_size = None
                                        self.bgp_receive_size = None
                                        self._segment_path = lambda: "receive-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize, ['socket_receive_size', 'bgp_receive_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(_Entity_):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn, self).__init__()

                                        self.yang_name = "msg-log-in"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn']['meta_info']


                                class SendBufferSize(_Entity_):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize, self).__init__()

                                        self.yang_name = "send-buffer-size"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                            ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                        ])
                                        self.socket_send_size = None
                                        self.bgp_send_size = None
                                        self._segment_path = lambda: "send-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize, ['socket_send_size', 'bgp_send_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize']['meta_info']


                                class Timers(_Entity_):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers, self).__init__()

                                        self.yang_name = "timers"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keepalive_interval', (YLeaf(YType.uint32, 'keepalive-interval'), ['int'])),
                                            ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                            ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                        ])
                                        self.keepalive_interval = None
                                        self.hold_time = None
                                        self.min_accept_hold_time = None
                                        self._segment_path = lambda: "timers"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers, ['keepalive_interval', 'hold_time', 'min_accept_hold_time'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers']['meta_info']


                                class Keychain(_Entity_):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\: bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain, self).__init__()

                                        self.yang_name = "keychain"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keychain_disable', (YLeaf(YType.boolean, 'keychain-disable'), ['bool'])),
                                            ('keychain_name', (YLeaf(YType.str, 'keychain-name'), ['str'])),
                                        ])
                                        self.keychain_disable = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain, ['keychain_disable', 'keychain_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain']['meta_info']


                                class GracefulMaintenance(_Entity_):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:  :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:  :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance, self).__init__()

                                        self.yang_name = "graceful-maintenance"
                                        self.yang_parent_name = "vrf-neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("graceful-maintenance-local-preference", ("graceful_maintenance_local_preference", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference)), ("graceful-maintenance-as-prepends", ("graceful_maintenance_as_prepends", Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('graceful_maintenance_activate', (YLeaf(YType.boolean, 'graceful-maintenance-activate'), ['bool'])),
                                        ])
                                        self.enable = None
                                        self.graceful_maintenance_activate = None

                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self
                                        self._children_name_map["graceful_maintenance_local_preference"] = "graceful-maintenance-local-preference"

                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self._children_name_map["graceful_maintenance_as_prepends"] = "graceful-maintenance-as-prepends"
                                        self._segment_path = lambda: "graceful-maintenance"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance, ['enable', 'graceful_maintenance_activate'], name, value)


                                    class GracefulMaintenanceLocalPreference(_Entity_):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference, self).__init__()

                                            self.yang_name = "graceful-maintenance-local-preference"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_loc_pref_disable', (YLeaf(YType.boolean, 'gshut-loc-pref-disable'), ['bool'])),
                                                ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                                            ])
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None
                                            self._segment_path = lambda: "graceful-maintenance-local-preference"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference, ['gshut_loc_pref_disable', 'local_preference'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(_Entity_):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\: int
                                        
                                        	**range:** 0..6
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends, self).__init__()

                                            self.yang_name = "graceful-maintenance-as-prepends"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_prepends_disable', (YLeaf(YType.boolean, 'gshut-prepends-disable'), ['bool'])),
                                                ('as_prepends', (YLeaf(YType.uint32, 'as-prepends'), ['int'])),
                                            ])
                                            self.gshut_prepends_disable = None
                                            self.as_prepends = None
                                            self._segment_path = lambda: "graceful-maintenance-as-prepends"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends, ['gshut_prepends_disable', 'as_prepends'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs']['meta_info']


                class DefaultVrf(_Entity_):
                    """
                    Global default config
                    
                    .. attribute:: bgp_entity
                    
                    	Neighbor, neighbor\-group, af\-group and session\-group configuration
                    	**type**\:  :py:class:`BgpEntity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity>`
                    
                    .. attribute:: global_
                    
                    	Global default config
                    	**type**\:  :py:class:`Global <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-cfg'
                    _revision = '2018-06-15'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf, self).__init__()

                        self.yang_name = "default-vrf"
                        self.yang_parent_name = "four-byte-as"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("bgp-entity", ("bgp_entity", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity)), ("global", ("global_", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global))])
                        self._leafs = OrderedDict()

                        self.bgp_entity = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity()
                        self.bgp_entity.parent = self
                        self._children_name_map["bgp_entity"] = "bgp-entity"

                        self.global_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global()
                        self.global_.parent = self
                        self._children_name_map["global_"] = "global"
                        self._segment_path = lambda: "default-vrf"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf, [], name, value)


                    class BgpEntity(_Entity_):
                        """
                        Neighbor, neighbor\-group, af\-group and
                        session\-group configuration
                        
                        .. attribute:: neighbors
                        
                        	Neighbor configuration
                        	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors>`
                        
                        .. attribute:: neighbor_groups
                        
                        	Neighbor\-group configuration
                        	**type**\:  :py:class:`NeighborGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups>`
                        
                        .. attribute:: af_groups
                        
                        	AF\-group configuration
                        	**type**\:  :py:class:`AfGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups>`
                        
                        .. attribute:: session_groups
                        
                        	Session group configuration
                        	**type**\:  :py:class:`SessionGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-cfg'
                        _revision = '2018-06-15'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity, self).__init__()

                            self.yang_name = "bgp-entity"
                            self.yang_parent_name = "default-vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("neighbors", ("neighbors", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors)), ("neighbor-groups", ("neighbor_groups", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups)), ("af-groups", ("af_groups", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups)), ("session-groups", ("session_groups", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups))])
                            self._leafs = OrderedDict()

                            self.neighbors = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors()
                            self.neighbors.parent = self
                            self._children_name_map["neighbors"] = "neighbors"

                            self.neighbor_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups()
                            self.neighbor_groups.parent = self
                            self._children_name_map["neighbor_groups"] = "neighbor-groups"

                            self.af_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups()
                            self.af_groups.parent = self
                            self._children_name_map["af_groups"] = "af-groups"

                            self.session_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups()
                            self.session_groups.parent = self
                            self._children_name_map["session_groups"] = "session-groups"
                            self._segment_path = lambda: "bgp-entity"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity, [], name, value)


                        class Neighbors(_Entity_):
                            """
                            Neighbor configuration
                            
                            .. attribute:: neighbor
                            
                            	A particular BGP peer
                            	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor>`
                            
                            .. attribute:: neighbor_prefix_length
                            
                            	A particular BGP peer
                            	**type**\: list of  		 :py:class:`NeighborPrefixLength <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors, self).__init__()

                                self.yang_name = "neighbors"
                                self.yang_parent_name = "bgp-entity"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("neighbor", ("neighbor", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor)), ("neighbor-prefix-length", ("neighbor_prefix_length", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength))])
                                self._leafs = OrderedDict()

                                self.neighbor = YList(self)
                                self.neighbor_prefix_length = YList(self)
                                self._segment_path = lambda: "neighbors"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors, [], name, value)


                            class Neighbor(_Entity_):
                                """
                                A particular BGP peer
                                
                                .. attribute:: neighbor_address  (key)
                                
                                	Neighbor address
                                	**type**\: union of the below types:
                                
                                		**type**\: str
                                
                                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                		**type**\: str
                                
                                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: neighbor_afs
                                
                                	BGP neighbor AF configuration table
                                	**type**\:  :py:class:`NeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs>`
                                
                                .. attribute:: local_address_sub_net
                                
                                	Local Address subnet of routing updates
                                	**type**\:  :py:class:`LocalAddressSubNet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddressSubNet>`
                                
                                .. attribute:: internal_vpn_client_ibgp_ce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\: bool
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:  :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress>`
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:  :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates>`
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:  :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\: str
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:  :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs>`
                                
                                .. attribute:: merge_safi1_and4_inbound_updates
                                
                                	TRUE to merge updates FALSE to not merge updates and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:  :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs>`
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\: bool
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\: str
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\: str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:  :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:  :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:  :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  :py:class:`BgpNbrgr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpNbrgr>`
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\: bool
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\: int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:  :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss>`
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:  :py:class:`BgpTcpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpMode>`
                                
                                	**default value**\: either
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:  :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos>`
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:  :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering>`
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpEbgpSendDmzEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableMode>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:  :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut>`
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\: int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: ao_keychain
                                
                                	Set or disable AO based authentication
                                	**type**\:  :py:class:`AoKeychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AoKeychain>`
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:  :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize>`
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:  :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpBfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableMode>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:  :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers>`
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\: str
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:  :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain>`
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\: bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability. FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:  :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor, self).__init__()

                                    self.yang_name = "neighbor"
                                    self.yang_parent_name = "neighbors"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['neighbor_address']
                                    self._child_classes = OrderedDict([("neighbor-afs", ("neighbor_afs", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs)), ("local-address-sub-net", ("local_address_sub_net", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddressSubNet)), ("local-address", ("local_address", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress)), ("bmp-activates", ("bmp_activates", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates)), ("ebgp-multihop", ("ebgp_multihop", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop)), ("remote-as", ("remote_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs)), ("local-as", ("local_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs)), ("password", ("password", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password)), ("advertisement-interval", ("advertisement_interval", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AdvertisementInterval)), ("neighbor-cluster-id", ("neighbor_cluster_id", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId)), ("tcpmss", ("tcpmss", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss)), ("tos", ("tos", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos)), ("update-in-filtering", ("update_in_filtering", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering)), ("msg-log-out", ("msg_log_out", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut)), ("ao-keychain", ("ao_keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AoKeychain)), ("receive-buffer-size", ("receive_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize)), ("msg-log-in", ("msg_log_in", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn)), ("send-buffer-size", ("send_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize)), ("timers", ("timers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers)), ("keychain", ("keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain)), ("graceful-maintenance", ("graceful_maintenance", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance))])
                                    self._leafs = OrderedDict([
                                        ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str','str'])),
                                        ('internal_vpn_client_ibgp_ce', (YLeaf(YType.boolean, 'internal-vpn-client-ibgp-ce'), ['bool'])),
                                        ('session_group_add_member', (YLeaf(YType.str, 'session-group-add-member'), ['str'])),
                                        ('egress_peer_engineering', (YLeaf(YType.boolean, 'egress-peer-engineering'), ['bool'])),
                                        ('merge_safi1_and4_inbound_updates', (YLeaf(YType.boolean, 'merge-safi1-and4-inbound-updates'), ['bool'])),
                                        ('neighbor_graceful_restart_stalepath_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-stalepath-time'), ['int'])),
                                        ('shutdown', (YLeaf(YType.boolean, 'shutdown'), ['bool'])),
                                        ('description', (YLeaf(YType.str, 'description'), ['str'])),
                                        ('neighbor_group_add_member', (YLeaf(YType.str, 'neighbor-group-add-member'), ['str'])),
                                        ('ebgp_recv_dmz', (YLeaf(YType.boolean, 'ebgp-recv-dmz'), ['bool'])),
                                        ('neighbor_graceful_restart', (YLeaf(YType.enumeration, 'neighbor-graceful-restart'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpNbrgr', '')])),
                                        ('enforce_first_as', (YLeaf(YType.boolean, 'enforce-first-as'), ['bool'])),
                                        ('idle_watch_time', (YLeaf(YType.uint32, 'idle-watch-time'), ['int'])),
                                        ('session_open_mode', (YLeaf(YType.enumeration, 'session-open-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpTcpMode', '')])),
                                        ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                        ('ebgp_send_dmz_enable_modes', (YLeaf(YType.enumeration, 'ebgp-send-dmz-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpEbgpSendDmzEnableMode', '')])),
                                        ('suppress_all_capabilities', (YLeaf(YType.boolean, 'suppress-all-capabilities'), ['bool'])),
                                        ('max_peers', (YLeaf(YType.uint32, 'max-peers'), ['int'])),
                                        ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                        ('additional_paths_send_capability', (YLeaf(YType.enumeration, 'additional-paths-send-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('propagate_dmz_link_bandwidth', (YLeaf(YType.boolean, 'propagate-dmz-link-bandwidth'), ['bool'])),
                                        ('bfd_enable_modes', (YLeaf(YType.enumeration, 'bfd-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpBfdEnableMode', '')])),
                                        ('ttl_security', (YLeaf(YType.boolean, 'ttl-security'), ['bool'])),
                                        ('neighbor_graceful_restart_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-time'), ['int'])),
                                        ('bfd_multiplier', (YLeaf(YType.uint32, 'bfd-multiplier'), ['int'])),
                                        ('bfd_minimum_interval', (YLeaf(YType.uint32, 'bfd-minimum-interval'), ['int'])),
                                        ('remote_as_list', (YLeaf(YType.str, 'remote-as-list'), ['str'])),
                                        ('additional_paths_receive_capability', (YLeaf(YType.enumeration, 'additional-paths-receive-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('ignore_connected_check_ebgp', (YLeaf(YType.boolean, 'ignore-connected-check-ebgp'), ['bool'])),
                                        ('suppress_four_byte_as_capability', (YLeaf(YType.boolean, 'suppress-four-byte-as-capability'), ['bool'])),
                                        ('update_source_interface', (YLeaf(YType.str, 'update-source-interface'), ['str'])),
                                    ])
                                    self.neighbor_address = None
                                    self.internal_vpn_client_ibgp_ce = None
                                    self.session_group_add_member = None
                                    self.egress_peer_engineering = None
                                    self.merge_safi1_and4_inbound_updates = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.shutdown = None
                                    self.description = None
                                    self.neighbor_group_add_member = None
                                    self.ebgp_recv_dmz = None
                                    self.neighbor_graceful_restart = None
                                    self.enforce_first_as = None
                                    self.idle_watch_time = None
                                    self.session_open_mode = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.suppress_all_capabilities = None
                                    self.max_peers = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.additional_paths_send_capability = None
                                    self.propagate_dmz_link_bandwidth = None
                                    self.bfd_enable_modes = None
                                    self.ttl_security = None
                                    self.neighbor_graceful_restart_time = None
                                    self.bfd_multiplier = None
                                    self.bfd_minimum_interval = None
                                    self.remote_as_list = None
                                    self.additional_paths_receive_capability = None
                                    self.ignore_connected_check_ebgp = None
                                    self.suppress_four_byte_as_capability = None
                                    self.update_source_interface = None

                                    self.neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs()
                                    self.neighbor_afs.parent = self
                                    self._children_name_map["neighbor_afs"] = "neighbor-afs"

                                    self.local_address_sub_net = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddressSubNet()
                                    self.local_address_sub_net.parent = self
                                    self._children_name_map["local_address_sub_net"] = "local-address-sub-net"

                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress()
                                    self.local_address.parent = self
                                    self._children_name_map["local_address"] = "local-address"

                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self._children_name_map["bmp_activates"] = "bmp-activates"

                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self._children_name_map["ebgp_multihop"] = "ebgp-multihop"

                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs()
                                    self.remote_as.parent = self
                                    self._children_name_map["remote_as"] = "remote-as"

                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs()
                                    self.local_as.parent = self
                                    self._children_name_map["local_as"] = "local-as"

                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password()
                                    self.password.parent = self
                                    self._children_name_map["password"] = "password"

                                    self.advertisement_interval = None
                                    self._children_name_map["advertisement_interval"] = "advertisement-interval"

                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self._children_name_map["neighbor_cluster_id"] = "neighbor-cluster-id"

                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss()
                                    self.tcpmss.parent = self
                                    self._children_name_map["tcpmss"] = "tcpmss"

                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos()
                                    self.tos.parent = self
                                    self._children_name_map["tos"] = "tos"

                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self._children_name_map["update_in_filtering"] = "update-in-filtering"

                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self._children_name_map["msg_log_out"] = "msg-log-out"

                                    self.ao_keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AoKeychain()
                                    self.ao_keychain.parent = self
                                    self._children_name_map["ao_keychain"] = "ao-keychain"

                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self._children_name_map["receive_buffer_size"] = "receive-buffer-size"

                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self._children_name_map["msg_log_in"] = "msg-log-in"

                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self._children_name_map["send_buffer_size"] = "send-buffer-size"

                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers()
                                    self.timers.parent = self
                                    self._children_name_map["timers"] = "timers"

                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain()
                                    self.keychain.parent = self
                                    self._children_name_map["keychain"] = "keychain"

                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self._children_name_map["graceful_maintenance"] = "graceful-maintenance"
                                    self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor, ['neighbor_address', 'internal_vpn_client_ibgp_ce', 'session_group_add_member', 'egress_peer_engineering', 'merge_safi1_and4_inbound_updates', 'neighbor_graceful_restart_stalepath_time', 'shutdown', 'description', 'neighbor_group_add_member', 'ebgp_recv_dmz', 'neighbor_graceful_restart', 'enforce_first_as', 'idle_watch_time', 'session_open_mode', 'rpki_origin_as_validation_disable', 'ebgp_send_dmz_enable_modes', 'suppress_all_capabilities', 'max_peers', 'rpki_bestpath_origin_as_allow_invalid', 'additional_paths_send_capability', 'propagate_dmz_link_bandwidth', 'bfd_enable_modes', 'ttl_security', 'neighbor_graceful_restart_time', 'bfd_multiplier', 'bfd_minimum_interval', 'remote_as_list', 'additional_paths_receive_capability', 'ignore_connected_check_ebgp', 'suppress_four_byte_as_capability', 'update_source_interface'], name, value)


                                class NeighborAfs(_Entity_):
                                    """
                                    BGP neighbor AF configuration table
                                    
                                    .. attribute:: neighbor_af
                                    
                                    	Address family type of neighbor
                                    	**type**\: list of  		 :py:class:`NeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs, self).__init__()

                                        self.yang_name = "neighbor-afs"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("neighbor-af", ("neighbor_af", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf))])
                                        self._leafs = OrderedDict()

                                        self.neighbor_af = YList(self)
                                        self._segment_path = lambda: "neighbor-afs"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs, [], name, value)


                                    class NeighborAf(_Entity_):
                                        """
                                        Address family type of neighbor
                                        
                                        .. attribute:: af_name  (key)
                                        
                                        	BGP neighbor address family
                                        	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:  :py:class:`BgpSignal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignal>`
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group. FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT. FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:  :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity>`
                                        
                                        .. attribute:: cluster_id_allow_equal
                                        
                                        	TRUE to disable cluster\-id check for first id in the cluster\-id\-list. FALSE to enable check for all cluster\-ids in the list
                                        	**type**\: bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:  :py:class:`BgpSendMcastAttrCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfg>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:  :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:  :py:class:`BgpFlowspecValidationCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfg>`
                                        
                                        .. attribute:: advertise_l2vpn_evpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn>`
                                        
                                        .. attribute:: advertise_local_l2vpn_evpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn>`
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:  :py:class:`BgpAfEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulation>`
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: enforce_multiple_labels
                                        
                                        	TRUE to enforce multiple labels support
                                        	**type**\: bool
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\: bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:  :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: update_out_orig_loop_chk_disable
                                        
                                        	Enable/disable Originator loop check for this neighbor\-group/af\-group
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\: int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:  :py:class:`BgpOrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrf>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client. FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:  :py:class:`Import <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import>`
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:  :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:  :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\: bool
                                        
                                        .. attribute:: optimal_route_reflection_group
                                        
                                        	Name of the ORR group this neighbor is going to be part of
                                        	**type**\: str
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf, self).__init__()

                                            self.yang_name = "neighbor-af"
                                            self.yang_parent_name = "neighbor-afs"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['af_name']
                                            self._child_classes = OrderedDict([("aigp-cost-community", ("aigp_cost_community", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity)), ("advertise-def-imp-disable-v6", ("advertise_def_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6)), ("advertise-disable", ("advertise_disable", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable)), ("maximum-prefixes", ("maximum_prefixes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.MaximumPrefixes)), ("advertise-bridge-domain-imp-disable-v6", ("advertise_bridge_domain_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6)), ("remove-private-as-entire-as-path-inbound", ("remove_private_as_entire_as_path_inbound", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound)), ("advertise-def-imp-disable-v4", ("advertise_def_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4)), ("advertise-bridge-domain-imp-disable-v4", ("advertise_bridge_domain_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4)), ("advertise-l2vpn-evpn", ("advertise_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn)), ("advertise-local-l2vpn-evpn", ("advertise_local_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn)), ("neighbor-af-long-lived-graceful-restart-stale-time", ("neighbor_af_long_lived_graceful_restart_stale_time", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime)), ("advertise-v6", ("advertise_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6)), ("advertise-local-v6", ("advertise_local_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6)), ("import", ("import_", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import)), ("default-originate", ("default_originate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate)), ("soft-reconfiguration", ("soft_reconfiguration", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration)), ("advertise-vrf-imp-disable-v6", ("advertise_vrf_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6)), ("advertise-v4", ("advertise_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4)), ("advertise-local-v4", ("advertise_local_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4)), ("remove-private-as-entire-as-path", ("remove_private_as_entire_as_path", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath)), ("advertise-vrf-imp-disable-v4", ("advertise_vrf_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4))])
                                            self._leafs = OrderedDict([
                                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                ('neighbor_af_long_lived_graceful_restart_capable', (YLeaf(YType.boolean, 'neighbor-af-long-lived-graceful-restart-capable'), ['bool'])),
                                                ('l2vpn_signalling', (YLeaf(YType.enumeration, 'l2vpn-signalling'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSignal', '')])),
                                                ('send_ext_community_ebgp', (YLeaf(YType.boolean, 'send-ext-community-ebgp'), ['bool'])),
                                                ('accept_route_legacy_rt', (YLeaf(YType.boolean, 'accept-route-legacy-rt'), ['bool'])),
                                                ('cluster_id_allow_equal', (YLeaf(YType.boolean, 'cluster-id-allow-equal'), ['bool'])),
                                                ('send_community_ebgp', (YLeaf(YType.boolean, 'send-community-ebgp'), ['bool'])),
                                                ('send_multicast_attr', (YLeaf(YType.enumeration, 'send-multicast-attr'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSendMcastAttrCfg', '')])),
                                                ('next_hop_unchanged', (YLeaf(YType.boolean, 'next-hop-unchanged'), ['bool'])),
                                                ('advertise_local_labeled_route', (YLeaf(YType.enumeration, 'advertise-local-labeled-route'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                                ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                                ('flowspec_validation', (YLeaf(YType.enumeration, 'flowspec-validation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpFlowspecValidationCfg', '')])),
                                                ('encapsulation_type', (YLeaf(YType.enumeration, 'encapsulation-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAfEncapsulation', '')])),
                                                ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                                ('enforce_multiple_labels', (YLeaf(YType.boolean, 'enforce-multiple-labels'), ['bool'])),
                                                ('as_override', (YLeaf(YType.boolean, 'as-override'), ['bool'])),
                                                ('multipath', (YLeaf(YType.empty, 'multipath'), ['Empty'])),
                                                ('send_community_ebgp_graceful_shutdown', (YLeaf(YType.boolean, 'send-community-ebgp-graceful-shutdown'), ['bool'])),
                                                ('activate', (YLeaf(YType.empty, 'activate'), ['Empty'])),
                                                ('prefix_orf_policy', (YLeaf(YType.str, 'prefix-orf-policy'), ['str'])),
                                                ('update_out_orig_loop_chk_disable', (YLeaf(YType.empty, 'update-out-orig-loop-chk-disable'), ['Empty'])),
                                                ('aigp', (YLeaf(YType.enumeration, 'aigp'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('aigp_send_med', (YLeaf(YType.enumeration, 'aigp-send-med'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('allow_as_in', (YLeaf(YType.uint32, 'allow-as-in'), ['int'])),
                                                ('advertise_orf', (YLeaf(YType.enumeration, 'advertise-orf'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpOrf', '')])),
                                                ('route_reflector_client', (YLeaf(YType.boolean, 'route-reflector-client'), ['bool'])),
                                                ('next_hop_self', (YLeaf(YType.boolean, 'next-hop-self'), ['bool'])),
                                                ('route_policy_in', (YLeaf(YType.str, 'route-policy-in'), ['str'])),
                                                ('default_weight', (YLeaf(YType.uint32, 'default-weight'), ['int'])),
                                                ('af_group', (YLeaf(YType.str, 'af-group'), ['str'])),
                                                ('next_hop_unchanged_multipath', (YLeaf(YType.boolean, 'next-hop-unchanged-multipath'), ['bool'])),
                                                ('optimal_route_reflection_group', (YLeaf(YType.str, 'optimal-route-reflection-group'), ['str'])),
                                                ('accept_own', (YLeaf(YType.boolean, 'accept-own'), ['bool'])),
                                                ('route_policy_out', (YLeaf(YType.str, 'route-policy-out'), ['str'])),
                                                ('advertise_permanent_network', (YLeaf(YType.empty, 'advertise-permanent-network'), ['Empty'])),
                                            ])
                                            self.af_name = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.l2vpn_signalling = None
                                            self.send_ext_community_ebgp = None
                                            self.accept_route_legacy_rt = None
                                            self.cluster_id_allow_equal = None
                                            self.send_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.next_hop_unchanged = None
                                            self.advertise_local_labeled_route = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.flowspec_validation = None
                                            self.encapsulation_type = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.enforce_multiple_labels = None
                                            self.as_override = None
                                            self.multipath = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.activate = None
                                            self.prefix_orf_policy = None
                                            self.update_out_orig_loop_chk_disable = None
                                            self.aigp = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.advertise_orf = None
                                            self.route_reflector_client = None
                                            self.next_hop_self = None
                                            self.route_policy_in = None
                                            self.default_weight = None
                                            self.af_group = None
                                            self.next_hop_unchanged_multipath = None
                                            self.optimal_route_reflection_group = None
                                            self.accept_own = None
                                            self.route_policy_out = None
                                            self.advertise_permanent_network = None

                                            self.aigp_cost_community = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity()
                                            self.aigp_cost_community.parent = self
                                            self._children_name_map["aigp_cost_community"] = "aigp-cost-community"

                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v6"] = "advertise-def-imp-disable-v6"

                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self._children_name_map["advertise_disable"] = "advertise-disable"

                                            self.maximum_prefixes = None
                                            self._children_name_map["maximum_prefixes"] = "maximum-prefixes"

                                            self.advertise_bridge_domain_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6()
                                            self.advertise_bridge_domain_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v6"] = "advertise-bridge-domain-imp-disable-v6"

                                            self.remove_private_as_entire_as_path_inbound = None
                                            self._children_name_map["remove_private_as_entire_as_path_inbound"] = "remove-private-as-entire-as-path-inbound"

                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v4"] = "advertise-def-imp-disable-v4"

                                            self.advertise_bridge_domain_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4()
                                            self.advertise_bridge_domain_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v4"] = "advertise-bridge-domain-imp-disable-v4"

                                            self.advertise_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn()
                                            self.advertise_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_l2vpn_evpn"] = "advertise-l2vpn-evpn"

                                            self.advertise_local_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn()
                                            self.advertise_local_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_local_l2vpn_evpn"] = "advertise-local-l2vpn-evpn"

                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self._children_name_map["neighbor_af_long_lived_graceful_restart_stale_time"] = "neighbor-af-long-lived-graceful-restart-stale-time"

                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self._children_name_map["advertise_v6"] = "advertise-v6"

                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self._children_name_map["advertise_local_v6"] = "advertise-local-v6"

                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import()
                                            self.import_.parent = self
                                            self._children_name_map["import_"] = "import"

                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self._children_name_map["default_originate"] = "default-originate"

                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self
                                            self._children_name_map["soft_reconfiguration"] = "soft-reconfiguration"

                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v6"] = "advertise-vrf-imp-disable-v6"

                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self._children_name_map["advertise_v4"] = "advertise-v4"

                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self._children_name_map["advertise_local_v4"] = "advertise-local-v4"

                                            self.remove_private_as_entire_as_path = None
                                            self._children_name_map["remove_private_as_entire_as_path"] = "remove-private-as-entire-as-path"

                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v4"] = "advertise-vrf-imp-disable-v4"
                                            self._segment_path = lambda: "neighbor-af" + "[af-name='" + str(self.af_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf, ['af_name', 'neighbor_af_long_lived_graceful_restart_capable', 'l2vpn_signalling', 'send_ext_community_ebgp', 'accept_route_legacy_rt', 'cluster_id_allow_equal', 'send_community_ebgp', 'send_multicast_attr', 'next_hop_unchanged', 'advertise_local_labeled_route', 'rpki_origin_as_validation_disable', 'flowspec_validation', 'encapsulation_type', 'rpki_bestpath_origin_as_allow_invalid', 'enforce_multiple_labels', 'as_override', 'multipath', 'send_community_ebgp_graceful_shutdown', 'activate', 'prefix_orf_policy', 'update_out_orig_loop_chk_disable', 'aigp', 'aigp_send_med', 'allow_as_in', 'advertise_orf', 'route_reflector_client', 'next_hop_self', 'route_policy_in', 'default_weight', 'af_group', 'next_hop_unchanged_multipath', 'optimal_route_reflection_group', 'accept_own', 'route_policy_out', 'advertise_permanent_network'], name, value)


                                        class AigpCostCommunity(_Entity_):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:  :py:class:`BgpAigpCfgPoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoi>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity, self).__init__()

                                                self.yang_name = "aigp-cost-community"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('cost_community_id', (YLeaf(YType.uint32, 'cost-community-id'), ['int'])),
                                                    ('transitive', (YLeaf(YType.boolean, 'transitive'), ['bool'])),
                                                    ('cost_community_poi_type', (YLeaf(YType.enumeration, 'cost-community-poi-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfgPoi', '')])),
                                                ])
                                                self.enable = None
                                                self.cost_community_id = None
                                                self.transitive = None
                                                self.cost_community_poi_type = None
                                                self._segment_path = lambda: "aigp-cost-community"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity, ['enable', 'cost_community_id', 'transitive', 'cost_community_poi_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(_Entity_):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable, self).__init__()

                                                self.yang_name = "advertise-disable"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-disable"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(_Entity_):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\: int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.MaximumPrefixes, self).__init__()

                                                self.yang_name = "maximum-prefixes"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('prefix_limit', (YLeaf(YType.uint32, 'prefix-limit'), ['int'])),
                                                    ('warning_percentage', (YLeaf(YType.uint32, 'warning-percentage'), ['int'])),
                                                    ('warning_only', (YLeaf(YType.boolean, 'warning-only'), ['bool'])),
                                                    ('restart_time', (YLeaf(YType.uint32, 'restart-time'), ['int'])),
                                                    ('discard_extra_paths', (YLeaf(YType.boolean, 'discard-extra-paths'), ['bool'])),
                                                ])
                                                self.prefix_limit = None
                                                self.warning_percentage = None
                                                self.warning_only = None
                                                self.restart_time = None
                                                self.discard_extra_paths = None
                                                self._segment_path = lambda: "maximum-prefixes"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.MaximumPrefixes, ['prefix_limit', 'warning_percentage', 'warning_only', 'restart_time', 'discard_extra_paths'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.MaximumPrefixes']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(_Entity_):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path-inbound"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path-inbound"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4']['meta_info']


                                        class AdvertiseL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-l2vpn-evpn"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn']['meta_info']


                                        class AdvertiseLocalL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-local-l2vpn-evpn"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(_Entity_):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, self).__init__()

                                                self.yang_name = "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('stale_time_send', (YLeaf(YType.uint32, 'stale-time-send'), ['int'])),
                                                    ('stale_time_accept', (YLeaf(YType.uint32, 'stale-time-accept'), ['int'])),
                                                ])
                                                self.stale_time_send = None
                                                self.stale_time_accept = None
                                                self._segment_path = lambda: "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, ['stale_time_send', 'stale_time_accept'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class AdvertiseV6(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6, self).__init__()

                                                self.yang_name = "advertise-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6, self).__init__()

                                                self.yang_name = "advertise-local-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import(_Entity_):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import, self).__init__()

                                                self.yang_name = "import"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('import_stitching', (YLeaf(YType.boolean, 'import-stitching'), ['bool'])),
                                                    ('import_reoriginate', (YLeaf(YType.boolean, 'import-reoriginate'), ['bool'])),
                                                    ('import_reoriginate_stitching', (YLeaf(YType.boolean, 'import-reoriginate-stitching'), ['bool'])),
                                                ])
                                                self.import_stitching = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self._segment_path = lambda: "import"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import, ['import_stitching', 'import_reoriginate', 'import_reoriginate_stitching'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import']['meta_info']


                                        class DefaultOriginate(_Entity_):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate, self).__init__()

                                                self.yang_name = "default-originate"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "default-originate"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate, ['enable', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(_Entity_):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration, self).__init__()

                                                self.yang_name = "soft-reconfiguration"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('inbound_soft', (YLeaf(YType.boolean, 'inbound-soft'), ['bool'])),
                                                    ('soft_always', (YLeaf(YType.boolean, 'soft-always'), ['bool'])),
                                                ])
                                                self.inbound_soft = None
                                                self.soft_always = None
                                                self._segment_path = lambda: "soft-reconfiguration"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration, ['inbound_soft', 'soft_always'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4, self).__init__()

                                                self.yang_name = "advertise-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4, self).__init__()

                                                self.yang_name = "advertise-local-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(_Entity_):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs']['meta_info']


                                class LocalAddressSubNet(_Entity_):
                                    """
                                    Local Address subnet of routing updates
                                    
                                    .. attribute:: local_addresss_subnet
                                    
                                    	local address subnet ip address 
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_len
                                    
                                    	prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddressSubNet, self).__init__()

                                        self.yang_name = "local-address-sub-net"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_addresss_subnet', (YLeaf(YType.str, 'local-addresss-subnet'), ['str','str'])),
                                            ('prefix_len', (YLeaf(YType.uint32, 'prefix-len'), ['int'])),
                                        ])
                                        self.local_addresss_subnet = None
                                        self.prefix_len = None
                                        self._segment_path = lambda: "local-address-sub-net"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddressSubNet, ['local_addresss_subnet', 'prefix_len'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddressSubNet']['meta_info']


                                class LocalAddress(_Entity_):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\: bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress, self).__init__()

                                        self.yang_name = "local-address"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_address_disable', (YLeaf(YType.boolean, 'local-address-disable'), ['bool'])),
                                            ('local_ip_address', (YLeaf(YType.str, 'local-ip-address'), ['str','str'])),
                                        ])
                                        self.local_address_disable = None
                                        self.local_ip_address = None
                                        self._segment_path = lambda: "local-address"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress, ['local_address_disable', 'local_ip_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress']['meta_info']


                                class BmpActivates(_Entity_):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of  		 :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates, self).__init__()

                                        self.yang_name = "bmp-activates"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("bmp-activate", ("bmp_activate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates.BmpActivate))])
                                        self._leafs = OrderedDict()

                                        self.bmp_activate = YList(self)
                                        self._segment_path = lambda: "bmp-activates"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates, [], name, value)


                                    class BmpActivate(_Entity_):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  (key)
                                        
                                        	BMP Server ID
                                        	**type**\: int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates.BmpActivate, self).__init__()

                                            self.yang_name = "bmp-activate"
                                            self.yang_parent_name = "bmp-activates"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['server_id']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('server_id', (YLeaf(YType.uint32, 'server-id'), ['int'])),
                                            ])
                                            self.server_id = None
                                            self._segment_path = lambda: "bmp-activate" + "[server-id='" + str(self.server_id) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates.BmpActivate, ['server_id'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates.BmpActivate']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates']['meta_info']


                                class EbgpMultihop(_Entity_):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop, self).__init__()

                                        self.yang_name = "ebgp-multihop"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('max_hop_count', (YLeaf(YType.uint32, 'max-hop-count'), ['int'])),
                                            ('mpls_deactivation', (YLeaf(YType.boolean, 'mpls-deactivation'), ['bool'])),
                                        ])
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None
                                        self._segment_path = lambda: "ebgp-multihop"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop, ['max_hop_count', 'mpls_deactivation'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop']['meta_info']


                                class RemoteAs(_Entity_):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs, self).__init__()

                                        self.yang_name = "remote-as"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self._segment_path = lambda: "remote-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs, ['as_xx', 'as_yy'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs']['meta_info']


                                class LocalAs(_Entity_):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs, self).__init__()

                                        self.yang_name = "local-as"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ('no_prepend', (YLeaf(YType.empty, 'no-prepend'), ['Empty'])),
                                            ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                                            ('replace_as', (YLeaf(YType.empty, 'replace-as'), ['Empty'])),
                                            ('dual_as', (YLeaf(YType.empty, 'dual-as'), ['Empty'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.no_prepend = None
                                        self.disable = None
                                        self.replace_as = None
                                        self.dual_as = None
                                        self._segment_path = lambda: "local-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs, ['as_xx', 'as_yy', 'no_prepend', 'disable', 'replace_as', 'dual_as'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs']['meta_info']


                                class Password(_Entity_):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\: bool
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password, self).__init__()

                                        self.yang_name = "password"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('password_disable', (YLeaf(YType.boolean, 'password-disable'), ['bool'])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.password_disable = None
                                        self.password = None
                                        self._segment_path = lambda: "password"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password, ['password_disable', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password']['meta_info']


                                class AdvertisementInterval(_Entity_):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\: int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AdvertisementInterval, self).__init__()

                                        self.yang_name = "advertisement-interval"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                                            ('minimum_interval_msecs', (YLeaf(YType.uint32, 'minimum-interval-msecs'), ['int'])),
                                        ])
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None
                                        self._segment_path = lambda: "advertisement-interval"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AdvertisementInterval, ['minimum_interval', 'minimum_interval_msecs'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(_Entity_):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967295
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId, self).__init__()

                                        self.yang_name = "neighbor-cluster-id"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                            ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str'])),
                                        ])
                                        self.cluster_id_number = None
                                        self.cluster_id_address = None
                                        self._segment_path = lambda: "neighbor-cluster-id"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId, ['cluster_id_number', 'cluster_id_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId']['meta_info']


                                class Tcpmss(_Entity_):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\: bool
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\: int
                                    
                                    	**range:** 68..10000
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss, self).__init__()

                                        self.yang_name = "tcpmss"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tcpmss_disable', (YLeaf(YType.boolean, 'tcpmss-disable'), ['bool'])),
                                            ('mss', (YLeaf(YType.uint32, 'mss'), ['int'])),
                                        ])
                                        self.tcpmss_disable = None
                                        self.mss = None
                                        self._segment_path = lambda: "tcpmss"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss, ['tcpmss_disable', 'mss'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss']['meta_info']


                                class Tos(_Entity_):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:  :py:class:`BgpTos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTos>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: union of the below types:
                                    
                                    		**type**\:  :py:class:`BgpPrecedenceDscp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscp>`
                                    
                                    		**type**\: int
                                    
                                    			**range:** 0..63
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos, self).__init__()

                                        self.yang_name = "tos"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpTos', '')])),
                                            ('value', (YLeaf(YType.str, 'value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpPrecedenceDscp', ''),'int'])),
                                        ])
                                        self.type = None
                                        self.value = None
                                        self._segment_path = lambda: "tos"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos, ['type', 'value'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos']['meta_info']


                                class UpdateInFiltering(_Entity_):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:  :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\: str
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering, self).__init__()

                                        self.yang_name = "update-in-filtering"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("update-in-filtering-message-buffers", ("update_in_filtering_message_buffers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('update_in_filtering_attribute_filter_group', (YLeaf(YType.str, 'update-in-filtering-attribute-filter-group'), ['str'])),
                                            ('update_in_filtering_syslog_disable', (YLeaf(YType.empty, 'update-in-filtering-syslog-disable'), ['Empty'])),
                                        ])
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_syslog_disable = None

                                        self.update_in_filtering_message_buffers = None
                                        self._children_name_map["update_in_filtering_message_buffers"] = "update-in-filtering-message-buffers"
                                        self._segment_path = lambda: "update-in-filtering"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering, ['enable', 'update_in_filtering_attribute_filter_group', 'update_in_filtering_syslog_disable'], name, value)


                                    class UpdateInFilteringMessageBuffers(_Entity_):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\: int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\: bool
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers, self).__init__()

                                            self.yang_name = "update-in-filtering-message-buffers"
                                            self.yang_parent_name = "update-in-filtering"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('number_of_buffers', (YLeaf(YType.uint32, 'number-of-buffers'), ['int'])),
                                                ('non_circular_buffer', (YLeaf(YType.boolean, 'non-circular-buffer'), ['bool'])),
                                            ])
                                            self.number_of_buffers = None
                                            self.non_circular_buffer = None
                                            self._segment_path = lambda: "update-in-filtering-message-buffers"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers, ['number_of_buffers', 'non_circular_buffer'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering']['meta_info']


                                class MsgLogOut(_Entity_):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut, self).__init__()

                                        self.yang_name = "msg-log-out"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-out"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut']['meta_info']


                                class AoKeychain(_Entity_):
                                    """
                                    Set or disable AO based authentication
                                    
                                    .. attribute:: ao_keychain_disable
                                    
                                    	TRUE to prevent this entity from having AO keychain based authentication even if the parent has one.FALSE to enable AO keychain based authentication
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_keychain_name
                                    
                                    	Name of the AO keychain associated with this neighbor
                                    	**type**\: str
                                    
                                    .. attribute:: ao_include_tcp_options
                                    
                                    	Include TCP options header with AO
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_accept_mismatch_connection
                                    
                                    	Accept new connections even though AO mismatched
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AoKeychain, self).__init__()

                                        self.yang_name = "ao-keychain"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('ao_keychain_disable', (YLeaf(YType.boolean, 'ao-keychain-disable'), ['bool'])),
                                            ('ao_keychain_name', (YLeaf(YType.str, 'ao-keychain-name'), ['str'])),
                                            ('ao_include_tcp_options', (YLeaf(YType.boolean, 'ao-include-tcp-options'), ['bool'])),
                                            ('ao_accept_mismatch_connection', (YLeaf(YType.boolean, 'ao-accept-mismatch-connection'), ['bool'])),
                                        ])
                                        self.ao_keychain_disable = None
                                        self.ao_keychain_name = None
                                        self.ao_include_tcp_options = None
                                        self.ao_accept_mismatch_connection = None
                                        self._segment_path = lambda: "ao-keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AoKeychain, ['ao_keychain_disable', 'ao_keychain_name', 'ao_include_tcp_options', 'ao_accept_mismatch_connection'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AoKeychain']['meta_info']


                                class ReceiveBufferSize(_Entity_):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize, self).__init__()

                                        self.yang_name = "receive-buffer-size"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                            ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                        ])
                                        self.socket_receive_size = None
                                        self.bgp_receive_size = None
                                        self._segment_path = lambda: "receive-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize, ['socket_receive_size', 'bgp_receive_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(_Entity_):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn, self).__init__()

                                        self.yang_name = "msg-log-in"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn']['meta_info']


                                class SendBufferSize(_Entity_):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize, self).__init__()

                                        self.yang_name = "send-buffer-size"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                            ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                        ])
                                        self.socket_send_size = None
                                        self.bgp_send_size = None
                                        self._segment_path = lambda: "send-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize, ['socket_send_size', 'bgp_send_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize']['meta_info']


                                class Timers(_Entity_):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers, self).__init__()

                                        self.yang_name = "timers"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keepalive_interval', (YLeaf(YType.uint32, 'keepalive-interval'), ['int'])),
                                            ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                            ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                        ])
                                        self.keepalive_interval = None
                                        self.hold_time = None
                                        self.min_accept_hold_time = None
                                        self._segment_path = lambda: "timers"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers, ['keepalive_interval', 'hold_time', 'min_accept_hold_time'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers']['meta_info']


                                class Keychain(_Entity_):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\: bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain, self).__init__()

                                        self.yang_name = "keychain"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keychain_disable', (YLeaf(YType.boolean, 'keychain-disable'), ['bool'])),
                                            ('keychain_name', (YLeaf(YType.str, 'keychain-name'), ['str'])),
                                        ])
                                        self.keychain_disable = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain, ['keychain_disable', 'keychain_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain']['meta_info']


                                class GracefulMaintenance(_Entity_):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:  :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:  :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance, self).__init__()

                                        self.yang_name = "graceful-maintenance"
                                        self.yang_parent_name = "neighbor"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("graceful-maintenance-local-preference", ("graceful_maintenance_local_preference", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference)), ("graceful-maintenance-as-prepends", ("graceful_maintenance_as_prepends", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('graceful_maintenance_activate', (YLeaf(YType.boolean, 'graceful-maintenance-activate'), ['bool'])),
                                        ])
                                        self.enable = None
                                        self.graceful_maintenance_activate = None

                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self
                                        self._children_name_map["graceful_maintenance_local_preference"] = "graceful-maintenance-local-preference"

                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self._children_name_map["graceful_maintenance_as_prepends"] = "graceful-maintenance-as-prepends"
                                        self._segment_path = lambda: "graceful-maintenance"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance, ['enable', 'graceful_maintenance_activate'], name, value)


                                    class GracefulMaintenanceLocalPreference(_Entity_):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference, self).__init__()

                                            self.yang_name = "graceful-maintenance-local-preference"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_loc_pref_disable', (YLeaf(YType.boolean, 'gshut-loc-pref-disable'), ['bool'])),
                                                ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                                            ])
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None
                                            self._segment_path = lambda: "graceful-maintenance-local-preference"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference, ['gshut_loc_pref_disable', 'local_preference'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(_Entity_):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\: int
                                        
                                        	**range:** 0..6
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends, self).__init__()

                                            self.yang_name = "graceful-maintenance-as-prepends"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_prepends_disable', (YLeaf(YType.boolean, 'gshut-prepends-disable'), ['bool'])),
                                                ('as_prepends', (YLeaf(YType.uint32, 'as-prepends'), ['int'])),
                                            ])
                                            self.gshut_prepends_disable = None
                                            self.as_prepends = None
                                            self._segment_path = lambda: "graceful-maintenance-as-prepends"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends, ['gshut_prepends_disable', 'as_prepends'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor']['meta_info']


                            class NeighborPrefixLength(_Entity_):
                                """
                                A particular BGP peer
                                
                                .. attribute:: prefix_length  (key)
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..127
                                
                                .. attribute:: neighbor_address  (key)
                                
                                	Neighbor address
                                	**type**\: union of the below types:
                                
                                		**type**\: str
                                
                                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                		**type**\: str
                                
                                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: neighbor_afs
                                
                                	BGP neighbor AF configuration table
                                	**type**\:  :py:class:`NeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs>`
                                
                                .. attribute:: local_address_sub_net
                                
                                	Local Address subnet of routing updates
                                	**type**\:  :py:class:`LocalAddressSubNet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddressSubNet>`
                                
                                .. attribute:: internal_vpn_client_ibgp_ce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\: bool
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:  :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress>`
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:  :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates>`
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:  :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\: str
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:  :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs>`
                                
                                .. attribute:: merge_safi1_and4_inbound_updates
                                
                                	TRUE to merge updates FALSE to not merge updates and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:  :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs>`
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\: bool
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\: str
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\: str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:  :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:  :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:  :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  :py:class:`BgpNbrgr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpNbrgr>`
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\: bool
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\: int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:  :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss>`
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:  :py:class:`BgpTcpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpMode>`
                                
                                	**default value**\: either
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:  :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos>`
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:  :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering>`
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpEbgpSendDmzEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableMode>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:  :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut>`
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\: int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: ao_keychain
                                
                                	Set or disable AO based authentication
                                	**type**\:  :py:class:`AoKeychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AoKeychain>`
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:  :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize>`
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:  :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpBfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableMode>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:  :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers>`
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\: str
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:  :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain>`
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\: bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability. FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:  :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength, self).__init__()

                                    self.yang_name = "neighbor-prefix-length"
                                    self.yang_parent_name = "neighbors"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['prefix_length','neighbor_address']
                                    self._child_classes = OrderedDict([("neighbor-afs", ("neighbor_afs", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs)), ("local-address-sub-net", ("local_address_sub_net", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddressSubNet)), ("local-address", ("local_address", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress)), ("bmp-activates", ("bmp_activates", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates)), ("ebgp-multihop", ("ebgp_multihop", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop)), ("remote-as", ("remote_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs)), ("local-as", ("local_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs)), ("password", ("password", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password)), ("advertisement-interval", ("advertisement_interval", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AdvertisementInterval)), ("neighbor-cluster-id", ("neighbor_cluster_id", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId)), ("tcpmss", ("tcpmss", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss)), ("tos", ("tos", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos)), ("update-in-filtering", ("update_in_filtering", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering)), ("msg-log-out", ("msg_log_out", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut)), ("ao-keychain", ("ao_keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AoKeychain)), ("receive-buffer-size", ("receive_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize)), ("msg-log-in", ("msg_log_in", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn)), ("send-buffer-size", ("send_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize)), ("timers", ("timers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers)), ("keychain", ("keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain)), ("graceful-maintenance", ("graceful_maintenance", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance))])
                                    self._leafs = OrderedDict([
                                        ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                        ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str','str'])),
                                        ('internal_vpn_client_ibgp_ce', (YLeaf(YType.boolean, 'internal-vpn-client-ibgp-ce'), ['bool'])),
                                        ('session_group_add_member', (YLeaf(YType.str, 'session-group-add-member'), ['str'])),
                                        ('egress_peer_engineering', (YLeaf(YType.boolean, 'egress-peer-engineering'), ['bool'])),
                                        ('merge_safi1_and4_inbound_updates', (YLeaf(YType.boolean, 'merge-safi1-and4-inbound-updates'), ['bool'])),
                                        ('neighbor_graceful_restart_stalepath_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-stalepath-time'), ['int'])),
                                        ('shutdown', (YLeaf(YType.boolean, 'shutdown'), ['bool'])),
                                        ('description', (YLeaf(YType.str, 'description'), ['str'])),
                                        ('neighbor_group_add_member', (YLeaf(YType.str, 'neighbor-group-add-member'), ['str'])),
                                        ('ebgp_recv_dmz', (YLeaf(YType.boolean, 'ebgp-recv-dmz'), ['bool'])),
                                        ('neighbor_graceful_restart', (YLeaf(YType.enumeration, 'neighbor-graceful-restart'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpNbrgr', '')])),
                                        ('enforce_first_as', (YLeaf(YType.boolean, 'enforce-first-as'), ['bool'])),
                                        ('idle_watch_time', (YLeaf(YType.uint32, 'idle-watch-time'), ['int'])),
                                        ('session_open_mode', (YLeaf(YType.enumeration, 'session-open-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpTcpMode', '')])),
                                        ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                        ('ebgp_send_dmz_enable_modes', (YLeaf(YType.enumeration, 'ebgp-send-dmz-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpEbgpSendDmzEnableMode', '')])),
                                        ('suppress_all_capabilities', (YLeaf(YType.boolean, 'suppress-all-capabilities'), ['bool'])),
                                        ('max_peers', (YLeaf(YType.uint32, 'max-peers'), ['int'])),
                                        ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                        ('additional_paths_send_capability', (YLeaf(YType.enumeration, 'additional-paths-send-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('propagate_dmz_link_bandwidth', (YLeaf(YType.boolean, 'propagate-dmz-link-bandwidth'), ['bool'])),
                                        ('bfd_enable_modes', (YLeaf(YType.enumeration, 'bfd-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpBfdEnableMode', '')])),
                                        ('ttl_security', (YLeaf(YType.boolean, 'ttl-security'), ['bool'])),
                                        ('neighbor_graceful_restart_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-time'), ['int'])),
                                        ('bfd_multiplier', (YLeaf(YType.uint32, 'bfd-multiplier'), ['int'])),
                                        ('bfd_minimum_interval', (YLeaf(YType.uint32, 'bfd-minimum-interval'), ['int'])),
                                        ('remote_as_list', (YLeaf(YType.str, 'remote-as-list'), ['str'])),
                                        ('additional_paths_receive_capability', (YLeaf(YType.enumeration, 'additional-paths-receive-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('ignore_connected_check_ebgp', (YLeaf(YType.boolean, 'ignore-connected-check-ebgp'), ['bool'])),
                                        ('suppress_four_byte_as_capability', (YLeaf(YType.boolean, 'suppress-four-byte-as-capability'), ['bool'])),
                                        ('update_source_interface', (YLeaf(YType.str, 'update-source-interface'), ['str'])),
                                    ])
                                    self.prefix_length = None
                                    self.neighbor_address = None
                                    self.internal_vpn_client_ibgp_ce = None
                                    self.session_group_add_member = None
                                    self.egress_peer_engineering = None
                                    self.merge_safi1_and4_inbound_updates = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.shutdown = None
                                    self.description = None
                                    self.neighbor_group_add_member = None
                                    self.ebgp_recv_dmz = None
                                    self.neighbor_graceful_restart = None
                                    self.enforce_first_as = None
                                    self.idle_watch_time = None
                                    self.session_open_mode = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.suppress_all_capabilities = None
                                    self.max_peers = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.additional_paths_send_capability = None
                                    self.propagate_dmz_link_bandwidth = None
                                    self.bfd_enable_modes = None
                                    self.ttl_security = None
                                    self.neighbor_graceful_restart_time = None
                                    self.bfd_multiplier = None
                                    self.bfd_minimum_interval = None
                                    self.remote_as_list = None
                                    self.additional_paths_receive_capability = None
                                    self.ignore_connected_check_ebgp = None
                                    self.suppress_four_byte_as_capability = None
                                    self.update_source_interface = None

                                    self.neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs()
                                    self.neighbor_afs.parent = self
                                    self._children_name_map["neighbor_afs"] = "neighbor-afs"

                                    self.local_address_sub_net = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddressSubNet()
                                    self.local_address_sub_net.parent = self
                                    self._children_name_map["local_address_sub_net"] = "local-address-sub-net"

                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress()
                                    self.local_address.parent = self
                                    self._children_name_map["local_address"] = "local-address"

                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self._children_name_map["bmp_activates"] = "bmp-activates"

                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self._children_name_map["ebgp_multihop"] = "ebgp-multihop"

                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs()
                                    self.remote_as.parent = self
                                    self._children_name_map["remote_as"] = "remote-as"

                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs()
                                    self.local_as.parent = self
                                    self._children_name_map["local_as"] = "local-as"

                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password()
                                    self.password.parent = self
                                    self._children_name_map["password"] = "password"

                                    self.advertisement_interval = None
                                    self._children_name_map["advertisement_interval"] = "advertisement-interval"

                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self._children_name_map["neighbor_cluster_id"] = "neighbor-cluster-id"

                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss()
                                    self.tcpmss.parent = self
                                    self._children_name_map["tcpmss"] = "tcpmss"

                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos()
                                    self.tos.parent = self
                                    self._children_name_map["tos"] = "tos"

                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self._children_name_map["update_in_filtering"] = "update-in-filtering"

                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self._children_name_map["msg_log_out"] = "msg-log-out"

                                    self.ao_keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AoKeychain()
                                    self.ao_keychain.parent = self
                                    self._children_name_map["ao_keychain"] = "ao-keychain"

                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self._children_name_map["receive_buffer_size"] = "receive-buffer-size"

                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self._children_name_map["msg_log_in"] = "msg-log-in"

                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self._children_name_map["send_buffer_size"] = "send-buffer-size"

                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers()
                                    self.timers.parent = self
                                    self._children_name_map["timers"] = "timers"

                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain()
                                    self.keychain.parent = self
                                    self._children_name_map["keychain"] = "keychain"

                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self._children_name_map["graceful_maintenance"] = "graceful-maintenance"
                                    self._segment_path = lambda: "neighbor-prefix-length" + "[prefix-length='" + str(self.prefix_length) + "']" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength, ['prefix_length', 'neighbor_address', 'internal_vpn_client_ibgp_ce', 'session_group_add_member', 'egress_peer_engineering', 'merge_safi1_and4_inbound_updates', 'neighbor_graceful_restart_stalepath_time', 'shutdown', 'description', 'neighbor_group_add_member', 'ebgp_recv_dmz', 'neighbor_graceful_restart', 'enforce_first_as', 'idle_watch_time', 'session_open_mode', 'rpki_origin_as_validation_disable', 'ebgp_send_dmz_enable_modes', 'suppress_all_capabilities', 'max_peers', 'rpki_bestpath_origin_as_allow_invalid', 'additional_paths_send_capability', 'propagate_dmz_link_bandwidth', 'bfd_enable_modes', 'ttl_security', 'neighbor_graceful_restart_time', 'bfd_multiplier', 'bfd_minimum_interval', 'remote_as_list', 'additional_paths_receive_capability', 'ignore_connected_check_ebgp', 'suppress_four_byte_as_capability', 'update_source_interface'], name, value)


                                class NeighborAfs(_Entity_):
                                    """
                                    BGP neighbor AF configuration table
                                    
                                    .. attribute:: neighbor_af
                                    
                                    	Address family type of neighbor
                                    	**type**\: list of  		 :py:class:`NeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs, self).__init__()

                                        self.yang_name = "neighbor-afs"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("neighbor-af", ("neighbor_af", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf))])
                                        self._leafs = OrderedDict()

                                        self.neighbor_af = YList(self)
                                        self._segment_path = lambda: "neighbor-afs"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs, [], name, value)


                                    class NeighborAf(_Entity_):
                                        """
                                        Address family type of neighbor
                                        
                                        .. attribute:: af_name  (key)
                                        
                                        	BGP neighbor address family
                                        	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:  :py:class:`BgpSignal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignal>`
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group. FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT. FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:  :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity>`
                                        
                                        .. attribute:: cluster_id_allow_equal
                                        
                                        	TRUE to disable cluster\-id check for first id in the cluster\-id\-list. FALSE to enable check for all cluster\-ids in the list
                                        	**type**\: bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:  :py:class:`BgpSendMcastAttrCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfg>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:  :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:  :py:class:`BgpFlowspecValidationCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfg>`
                                        
                                        .. attribute:: advertise_l2vpn_evpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn>`
                                        
                                        .. attribute:: advertise_local_l2vpn_evpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn>`
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:  :py:class:`BgpAfEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulation>`
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: enforce_multiple_labels
                                        
                                        	TRUE to enforce multiple labels support
                                        	**type**\: bool
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\: bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:  :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: update_out_orig_loop_chk_disable
                                        
                                        	Enable/disable Originator loop check for this neighbor\-group/af\-group
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\: int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:  :py:class:`BgpOrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrf>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client. FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:  :py:class:`Import <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import>`
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:  :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:  :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\: bool
                                        
                                        .. attribute:: optimal_route_reflection_group
                                        
                                        	Name of the ORR group this neighbor is going to be part of
                                        	**type**\: str
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf, self).__init__()

                                            self.yang_name = "neighbor-af"
                                            self.yang_parent_name = "neighbor-afs"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['af_name']
                                            self._child_classes = OrderedDict([("aigp-cost-community", ("aigp_cost_community", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity)), ("advertise-def-imp-disable-v6", ("advertise_def_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6)), ("advertise-disable", ("advertise_disable", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable)), ("maximum-prefixes", ("maximum_prefixes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.MaximumPrefixes)), ("advertise-bridge-domain-imp-disable-v6", ("advertise_bridge_domain_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6)), ("remove-private-as-entire-as-path-inbound", ("remove_private_as_entire_as_path_inbound", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound)), ("advertise-def-imp-disable-v4", ("advertise_def_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4)), ("advertise-bridge-domain-imp-disable-v4", ("advertise_bridge_domain_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4)), ("advertise-l2vpn-evpn", ("advertise_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn)), ("advertise-local-l2vpn-evpn", ("advertise_local_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn)), ("neighbor-af-long-lived-graceful-restart-stale-time", ("neighbor_af_long_lived_graceful_restart_stale_time", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime)), ("advertise-v6", ("advertise_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6)), ("advertise-local-v6", ("advertise_local_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6)), ("import", ("import_", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import)), ("default-originate", ("default_originate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate)), ("soft-reconfiguration", ("soft_reconfiguration", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration)), ("advertise-vrf-imp-disable-v6", ("advertise_vrf_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6)), ("advertise-v4", ("advertise_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4)), ("advertise-local-v4", ("advertise_local_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4)), ("remove-private-as-entire-as-path", ("remove_private_as_entire_as_path", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath)), ("advertise-vrf-imp-disable-v4", ("advertise_vrf_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4))])
                                            self._leafs = OrderedDict([
                                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                ('neighbor_af_long_lived_graceful_restart_capable', (YLeaf(YType.boolean, 'neighbor-af-long-lived-graceful-restart-capable'), ['bool'])),
                                                ('l2vpn_signalling', (YLeaf(YType.enumeration, 'l2vpn-signalling'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSignal', '')])),
                                                ('send_ext_community_ebgp', (YLeaf(YType.boolean, 'send-ext-community-ebgp'), ['bool'])),
                                                ('accept_route_legacy_rt', (YLeaf(YType.boolean, 'accept-route-legacy-rt'), ['bool'])),
                                                ('cluster_id_allow_equal', (YLeaf(YType.boolean, 'cluster-id-allow-equal'), ['bool'])),
                                                ('send_community_ebgp', (YLeaf(YType.boolean, 'send-community-ebgp'), ['bool'])),
                                                ('send_multicast_attr', (YLeaf(YType.enumeration, 'send-multicast-attr'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSendMcastAttrCfg', '')])),
                                                ('next_hop_unchanged', (YLeaf(YType.boolean, 'next-hop-unchanged'), ['bool'])),
                                                ('advertise_local_labeled_route', (YLeaf(YType.enumeration, 'advertise-local-labeled-route'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                                ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                                ('flowspec_validation', (YLeaf(YType.enumeration, 'flowspec-validation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpFlowspecValidationCfg', '')])),
                                                ('encapsulation_type', (YLeaf(YType.enumeration, 'encapsulation-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAfEncapsulation', '')])),
                                                ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                                ('enforce_multiple_labels', (YLeaf(YType.boolean, 'enforce-multiple-labels'), ['bool'])),
                                                ('as_override', (YLeaf(YType.boolean, 'as-override'), ['bool'])),
                                                ('multipath', (YLeaf(YType.empty, 'multipath'), ['Empty'])),
                                                ('send_community_ebgp_graceful_shutdown', (YLeaf(YType.boolean, 'send-community-ebgp-graceful-shutdown'), ['bool'])),
                                                ('activate', (YLeaf(YType.empty, 'activate'), ['Empty'])),
                                                ('prefix_orf_policy', (YLeaf(YType.str, 'prefix-orf-policy'), ['str'])),
                                                ('update_out_orig_loop_chk_disable', (YLeaf(YType.empty, 'update-out-orig-loop-chk-disable'), ['Empty'])),
                                                ('aigp', (YLeaf(YType.enumeration, 'aigp'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('aigp_send_med', (YLeaf(YType.enumeration, 'aigp-send-med'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('allow_as_in', (YLeaf(YType.uint32, 'allow-as-in'), ['int'])),
                                                ('advertise_orf', (YLeaf(YType.enumeration, 'advertise-orf'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpOrf', '')])),
                                                ('route_reflector_client', (YLeaf(YType.boolean, 'route-reflector-client'), ['bool'])),
                                                ('next_hop_self', (YLeaf(YType.boolean, 'next-hop-self'), ['bool'])),
                                                ('route_policy_in', (YLeaf(YType.str, 'route-policy-in'), ['str'])),
                                                ('default_weight', (YLeaf(YType.uint32, 'default-weight'), ['int'])),
                                                ('af_group', (YLeaf(YType.str, 'af-group'), ['str'])),
                                                ('next_hop_unchanged_multipath', (YLeaf(YType.boolean, 'next-hop-unchanged-multipath'), ['bool'])),
                                                ('optimal_route_reflection_group', (YLeaf(YType.str, 'optimal-route-reflection-group'), ['str'])),
                                                ('accept_own', (YLeaf(YType.boolean, 'accept-own'), ['bool'])),
                                                ('route_policy_out', (YLeaf(YType.str, 'route-policy-out'), ['str'])),
                                                ('advertise_permanent_network', (YLeaf(YType.empty, 'advertise-permanent-network'), ['Empty'])),
                                            ])
                                            self.af_name = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.l2vpn_signalling = None
                                            self.send_ext_community_ebgp = None
                                            self.accept_route_legacy_rt = None
                                            self.cluster_id_allow_equal = None
                                            self.send_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.next_hop_unchanged = None
                                            self.advertise_local_labeled_route = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.flowspec_validation = None
                                            self.encapsulation_type = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.enforce_multiple_labels = None
                                            self.as_override = None
                                            self.multipath = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.activate = None
                                            self.prefix_orf_policy = None
                                            self.update_out_orig_loop_chk_disable = None
                                            self.aigp = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.advertise_orf = None
                                            self.route_reflector_client = None
                                            self.next_hop_self = None
                                            self.route_policy_in = None
                                            self.default_weight = None
                                            self.af_group = None
                                            self.next_hop_unchanged_multipath = None
                                            self.optimal_route_reflection_group = None
                                            self.accept_own = None
                                            self.route_policy_out = None
                                            self.advertise_permanent_network = None

                                            self.aigp_cost_community = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity()
                                            self.aigp_cost_community.parent = self
                                            self._children_name_map["aigp_cost_community"] = "aigp-cost-community"

                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v6"] = "advertise-def-imp-disable-v6"

                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self._children_name_map["advertise_disable"] = "advertise-disable"

                                            self.maximum_prefixes = None
                                            self._children_name_map["maximum_prefixes"] = "maximum-prefixes"

                                            self.advertise_bridge_domain_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6()
                                            self.advertise_bridge_domain_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v6"] = "advertise-bridge-domain-imp-disable-v6"

                                            self.remove_private_as_entire_as_path_inbound = None
                                            self._children_name_map["remove_private_as_entire_as_path_inbound"] = "remove-private-as-entire-as-path-inbound"

                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v4"] = "advertise-def-imp-disable-v4"

                                            self.advertise_bridge_domain_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4()
                                            self.advertise_bridge_domain_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v4"] = "advertise-bridge-domain-imp-disable-v4"

                                            self.advertise_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn()
                                            self.advertise_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_l2vpn_evpn"] = "advertise-l2vpn-evpn"

                                            self.advertise_local_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn()
                                            self.advertise_local_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_local_l2vpn_evpn"] = "advertise-local-l2vpn-evpn"

                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self._children_name_map["neighbor_af_long_lived_graceful_restart_stale_time"] = "neighbor-af-long-lived-graceful-restart-stale-time"

                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self._children_name_map["advertise_v6"] = "advertise-v6"

                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self._children_name_map["advertise_local_v6"] = "advertise-local-v6"

                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import()
                                            self.import_.parent = self
                                            self._children_name_map["import_"] = "import"

                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self._children_name_map["default_originate"] = "default-originate"

                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self
                                            self._children_name_map["soft_reconfiguration"] = "soft-reconfiguration"

                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v6"] = "advertise-vrf-imp-disable-v6"

                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self._children_name_map["advertise_v4"] = "advertise-v4"

                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self._children_name_map["advertise_local_v4"] = "advertise-local-v4"

                                            self.remove_private_as_entire_as_path = None
                                            self._children_name_map["remove_private_as_entire_as_path"] = "remove-private-as-entire-as-path"

                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v4"] = "advertise-vrf-imp-disable-v4"
                                            self._segment_path = lambda: "neighbor-af" + "[af-name='" + str(self.af_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf, ['af_name', 'neighbor_af_long_lived_graceful_restart_capable', 'l2vpn_signalling', 'send_ext_community_ebgp', 'accept_route_legacy_rt', 'cluster_id_allow_equal', 'send_community_ebgp', 'send_multicast_attr', 'next_hop_unchanged', 'advertise_local_labeled_route', 'rpki_origin_as_validation_disable', 'flowspec_validation', 'encapsulation_type', 'rpki_bestpath_origin_as_allow_invalid', 'enforce_multiple_labels', 'as_override', 'multipath', 'send_community_ebgp_graceful_shutdown', 'activate', 'prefix_orf_policy', 'update_out_orig_loop_chk_disable', 'aigp', 'aigp_send_med', 'allow_as_in', 'advertise_orf', 'route_reflector_client', 'next_hop_self', 'route_policy_in', 'default_weight', 'af_group', 'next_hop_unchanged_multipath', 'optimal_route_reflection_group', 'accept_own', 'route_policy_out', 'advertise_permanent_network'], name, value)


                                        class AigpCostCommunity(_Entity_):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:  :py:class:`BgpAigpCfgPoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoi>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity, self).__init__()

                                                self.yang_name = "aigp-cost-community"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('cost_community_id', (YLeaf(YType.uint32, 'cost-community-id'), ['int'])),
                                                    ('transitive', (YLeaf(YType.boolean, 'transitive'), ['bool'])),
                                                    ('cost_community_poi_type', (YLeaf(YType.enumeration, 'cost-community-poi-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfgPoi', '')])),
                                                ])
                                                self.enable = None
                                                self.cost_community_id = None
                                                self.transitive = None
                                                self.cost_community_poi_type = None
                                                self._segment_path = lambda: "aigp-cost-community"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity, ['enable', 'cost_community_id', 'transitive', 'cost_community_poi_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(_Entity_):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable, self).__init__()

                                                self.yang_name = "advertise-disable"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-disable"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(_Entity_):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\: int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.MaximumPrefixes, self).__init__()

                                                self.yang_name = "maximum-prefixes"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('prefix_limit', (YLeaf(YType.uint32, 'prefix-limit'), ['int'])),
                                                    ('warning_percentage', (YLeaf(YType.uint32, 'warning-percentage'), ['int'])),
                                                    ('warning_only', (YLeaf(YType.boolean, 'warning-only'), ['bool'])),
                                                    ('restart_time', (YLeaf(YType.uint32, 'restart-time'), ['int'])),
                                                    ('discard_extra_paths', (YLeaf(YType.boolean, 'discard-extra-paths'), ['bool'])),
                                                ])
                                                self.prefix_limit = None
                                                self.warning_percentage = None
                                                self.warning_only = None
                                                self.restart_time = None
                                                self.discard_extra_paths = None
                                                self._segment_path = lambda: "maximum-prefixes"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.MaximumPrefixes, ['prefix_limit', 'warning_percentage', 'warning_only', 'restart_time', 'discard_extra_paths'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.MaximumPrefixes']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV6']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(_Entity_):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path-inbound"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path-inbound"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseBridgeDomainImpDisableV4']['meta_info']


                                        class AdvertiseL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-l2vpn-evpn"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2vpnEvpn']['meta_info']


                                        class AdvertiseLocalL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-local-l2vpn-evpn"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2vpnEvpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(_Entity_):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, self).__init__()

                                                self.yang_name = "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('stale_time_send', (YLeaf(YType.uint32, 'stale-time-send'), ['int'])),
                                                    ('stale_time_accept', (YLeaf(YType.uint32, 'stale-time-accept'), ['int'])),
                                                ])
                                                self.stale_time_send = None
                                                self.stale_time_accept = None
                                                self._segment_path = lambda: "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime, ['stale_time_send', 'stale_time_accept'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class AdvertiseV6(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6, self).__init__()

                                                self.yang_name = "advertise-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6, self).__init__()

                                                self.yang_name = "advertise-local-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import(_Entity_):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import, self).__init__()

                                                self.yang_name = "import"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('import_stitching', (YLeaf(YType.boolean, 'import-stitching'), ['bool'])),
                                                    ('import_reoriginate', (YLeaf(YType.boolean, 'import-reoriginate'), ['bool'])),
                                                    ('import_reoriginate_stitching', (YLeaf(YType.boolean, 'import-reoriginate-stitching'), ['bool'])),
                                                ])
                                                self.import_stitching = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self._segment_path = lambda: "import"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import, ['import_stitching', 'import_reoriginate', 'import_reoriginate_stitching'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import']['meta_info']


                                        class DefaultOriginate(_Entity_):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate, self).__init__()

                                                self.yang_name = "default-originate"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "default-originate"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate, ['enable', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(_Entity_):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration, self).__init__()

                                                self.yang_name = "soft-reconfiguration"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('inbound_soft', (YLeaf(YType.boolean, 'inbound-soft'), ['bool'])),
                                                    ('soft_always', (YLeaf(YType.boolean, 'soft-always'), ['bool'])),
                                                ])
                                                self.inbound_soft = None
                                                self.soft_always = None
                                                self._segment_path = lambda: "soft-reconfiguration"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration, ['inbound_soft', 'soft_always'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4, self).__init__()

                                                self.yang_name = "advertise-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4, self).__init__()

                                                self.yang_name = "advertise-local-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(_Entity_):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs']['meta_info']


                                class LocalAddressSubNet(_Entity_):
                                    """
                                    Local Address subnet of routing updates
                                    
                                    .. attribute:: local_addresss_subnet
                                    
                                    	local address subnet ip address 
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_len
                                    
                                    	prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddressSubNet, self).__init__()

                                        self.yang_name = "local-address-sub-net"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_addresss_subnet', (YLeaf(YType.str, 'local-addresss-subnet'), ['str','str'])),
                                            ('prefix_len', (YLeaf(YType.uint32, 'prefix-len'), ['int'])),
                                        ])
                                        self.local_addresss_subnet = None
                                        self.prefix_len = None
                                        self._segment_path = lambda: "local-address-sub-net"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddressSubNet, ['local_addresss_subnet', 'prefix_len'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddressSubNet']['meta_info']


                                class LocalAddress(_Entity_):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\: bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress, self).__init__()

                                        self.yang_name = "local-address"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_address_disable', (YLeaf(YType.boolean, 'local-address-disable'), ['bool'])),
                                            ('local_ip_address', (YLeaf(YType.str, 'local-ip-address'), ['str','str'])),
                                        ])
                                        self.local_address_disable = None
                                        self.local_ip_address = None
                                        self._segment_path = lambda: "local-address"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress, ['local_address_disable', 'local_ip_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress']['meta_info']


                                class BmpActivates(_Entity_):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of  		 :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates, self).__init__()

                                        self.yang_name = "bmp-activates"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("bmp-activate", ("bmp_activate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates.BmpActivate))])
                                        self._leafs = OrderedDict()

                                        self.bmp_activate = YList(self)
                                        self._segment_path = lambda: "bmp-activates"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates, [], name, value)


                                    class BmpActivate(_Entity_):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  (key)
                                        
                                        	BMP Server ID
                                        	**type**\: int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates.BmpActivate, self).__init__()

                                            self.yang_name = "bmp-activate"
                                            self.yang_parent_name = "bmp-activates"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['server_id']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('server_id', (YLeaf(YType.uint32, 'server-id'), ['int'])),
                                            ])
                                            self.server_id = None
                                            self._segment_path = lambda: "bmp-activate" + "[server-id='" + str(self.server_id) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates.BmpActivate, ['server_id'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates.BmpActivate']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates']['meta_info']


                                class EbgpMultihop(_Entity_):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop, self).__init__()

                                        self.yang_name = "ebgp-multihop"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('max_hop_count', (YLeaf(YType.uint32, 'max-hop-count'), ['int'])),
                                            ('mpls_deactivation', (YLeaf(YType.boolean, 'mpls-deactivation'), ['bool'])),
                                        ])
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None
                                        self._segment_path = lambda: "ebgp-multihop"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop, ['max_hop_count', 'mpls_deactivation'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop']['meta_info']


                                class RemoteAs(_Entity_):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs, self).__init__()

                                        self.yang_name = "remote-as"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self._segment_path = lambda: "remote-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs, ['as_xx', 'as_yy'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs']['meta_info']


                                class LocalAs(_Entity_):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs, self).__init__()

                                        self.yang_name = "local-as"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ('no_prepend', (YLeaf(YType.empty, 'no-prepend'), ['Empty'])),
                                            ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                                            ('replace_as', (YLeaf(YType.empty, 'replace-as'), ['Empty'])),
                                            ('dual_as', (YLeaf(YType.empty, 'dual-as'), ['Empty'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.no_prepend = None
                                        self.disable = None
                                        self.replace_as = None
                                        self.dual_as = None
                                        self._segment_path = lambda: "local-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs, ['as_xx', 'as_yy', 'no_prepend', 'disable', 'replace_as', 'dual_as'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs']['meta_info']


                                class Password(_Entity_):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\: bool
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password, self).__init__()

                                        self.yang_name = "password"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('password_disable', (YLeaf(YType.boolean, 'password-disable'), ['bool'])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.password_disable = None
                                        self.password = None
                                        self._segment_path = lambda: "password"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password, ['password_disable', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password']['meta_info']


                                class AdvertisementInterval(_Entity_):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\: int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AdvertisementInterval, self).__init__()

                                        self.yang_name = "advertisement-interval"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                                            ('minimum_interval_msecs', (YLeaf(YType.uint32, 'minimum-interval-msecs'), ['int'])),
                                        ])
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None
                                        self._segment_path = lambda: "advertisement-interval"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AdvertisementInterval, ['minimum_interval', 'minimum_interval_msecs'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(_Entity_):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967295
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId, self).__init__()

                                        self.yang_name = "neighbor-cluster-id"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                            ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str'])),
                                        ])
                                        self.cluster_id_number = None
                                        self.cluster_id_address = None
                                        self._segment_path = lambda: "neighbor-cluster-id"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId, ['cluster_id_number', 'cluster_id_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId']['meta_info']


                                class Tcpmss(_Entity_):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\: bool
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\: int
                                    
                                    	**range:** 68..10000
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss, self).__init__()

                                        self.yang_name = "tcpmss"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tcpmss_disable', (YLeaf(YType.boolean, 'tcpmss-disable'), ['bool'])),
                                            ('mss', (YLeaf(YType.uint32, 'mss'), ['int'])),
                                        ])
                                        self.tcpmss_disable = None
                                        self.mss = None
                                        self._segment_path = lambda: "tcpmss"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss, ['tcpmss_disable', 'mss'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss']['meta_info']


                                class Tos(_Entity_):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:  :py:class:`BgpTos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTos>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: union of the below types:
                                    
                                    		**type**\:  :py:class:`BgpPrecedenceDscp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscp>`
                                    
                                    		**type**\: int
                                    
                                    			**range:** 0..63
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos, self).__init__()

                                        self.yang_name = "tos"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpTos', '')])),
                                            ('value', (YLeaf(YType.str, 'value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpPrecedenceDscp', ''),'int'])),
                                        ])
                                        self.type = None
                                        self.value = None
                                        self._segment_path = lambda: "tos"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos, ['type', 'value'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos']['meta_info']


                                class UpdateInFiltering(_Entity_):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:  :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\: str
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering, self).__init__()

                                        self.yang_name = "update-in-filtering"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("update-in-filtering-message-buffers", ("update_in_filtering_message_buffers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('update_in_filtering_attribute_filter_group', (YLeaf(YType.str, 'update-in-filtering-attribute-filter-group'), ['str'])),
                                            ('update_in_filtering_syslog_disable', (YLeaf(YType.empty, 'update-in-filtering-syslog-disable'), ['Empty'])),
                                        ])
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_syslog_disable = None

                                        self.update_in_filtering_message_buffers = None
                                        self._children_name_map["update_in_filtering_message_buffers"] = "update-in-filtering-message-buffers"
                                        self._segment_path = lambda: "update-in-filtering"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering, ['enable', 'update_in_filtering_attribute_filter_group', 'update_in_filtering_syslog_disable'], name, value)


                                    class UpdateInFilteringMessageBuffers(_Entity_):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\: int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\: bool
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers, self).__init__()

                                            self.yang_name = "update-in-filtering-message-buffers"
                                            self.yang_parent_name = "update-in-filtering"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('number_of_buffers', (YLeaf(YType.uint32, 'number-of-buffers'), ['int'])),
                                                ('non_circular_buffer', (YLeaf(YType.boolean, 'non-circular-buffer'), ['bool'])),
                                            ])
                                            self.number_of_buffers = None
                                            self.non_circular_buffer = None
                                            self._segment_path = lambda: "update-in-filtering-message-buffers"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers, ['number_of_buffers', 'non_circular_buffer'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering']['meta_info']


                                class MsgLogOut(_Entity_):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut, self).__init__()

                                        self.yang_name = "msg-log-out"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-out"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut']['meta_info']


                                class AoKeychain(_Entity_):
                                    """
                                    Set or disable AO based authentication
                                    
                                    .. attribute:: ao_keychain_disable
                                    
                                    	TRUE to prevent this entity from having AO keychain based authentication even if the parent has one.FALSE to enable AO keychain based authentication
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_keychain_name
                                    
                                    	Name of the AO keychain associated with this neighbor
                                    	**type**\: str
                                    
                                    .. attribute:: ao_include_tcp_options
                                    
                                    	Include TCP options header with AO
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_accept_mismatch_connection
                                    
                                    	Accept new connections even though AO mismatched
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AoKeychain, self).__init__()

                                        self.yang_name = "ao-keychain"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('ao_keychain_disable', (YLeaf(YType.boolean, 'ao-keychain-disable'), ['bool'])),
                                            ('ao_keychain_name', (YLeaf(YType.str, 'ao-keychain-name'), ['str'])),
                                            ('ao_include_tcp_options', (YLeaf(YType.boolean, 'ao-include-tcp-options'), ['bool'])),
                                            ('ao_accept_mismatch_connection', (YLeaf(YType.boolean, 'ao-accept-mismatch-connection'), ['bool'])),
                                        ])
                                        self.ao_keychain_disable = None
                                        self.ao_keychain_name = None
                                        self.ao_include_tcp_options = None
                                        self.ao_accept_mismatch_connection = None
                                        self._segment_path = lambda: "ao-keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AoKeychain, ['ao_keychain_disable', 'ao_keychain_name', 'ao_include_tcp_options', 'ao_accept_mismatch_connection'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AoKeychain']['meta_info']


                                class ReceiveBufferSize(_Entity_):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize, self).__init__()

                                        self.yang_name = "receive-buffer-size"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                            ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                        ])
                                        self.socket_receive_size = None
                                        self.bgp_receive_size = None
                                        self._segment_path = lambda: "receive-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize, ['socket_receive_size', 'bgp_receive_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(_Entity_):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn, self).__init__()

                                        self.yang_name = "msg-log-in"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn']['meta_info']


                                class SendBufferSize(_Entity_):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize, self).__init__()

                                        self.yang_name = "send-buffer-size"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                            ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                        ])
                                        self.socket_send_size = None
                                        self.bgp_send_size = None
                                        self._segment_path = lambda: "send-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize, ['socket_send_size', 'bgp_send_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize']['meta_info']


                                class Timers(_Entity_):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers, self).__init__()

                                        self.yang_name = "timers"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keepalive_interval', (YLeaf(YType.uint32, 'keepalive-interval'), ['int'])),
                                            ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                            ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                        ])
                                        self.keepalive_interval = None
                                        self.hold_time = None
                                        self.min_accept_hold_time = None
                                        self._segment_path = lambda: "timers"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers, ['keepalive_interval', 'hold_time', 'min_accept_hold_time'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers']['meta_info']


                                class Keychain(_Entity_):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\: bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain, self).__init__()

                                        self.yang_name = "keychain"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keychain_disable', (YLeaf(YType.boolean, 'keychain-disable'), ['bool'])),
                                            ('keychain_name', (YLeaf(YType.str, 'keychain-name'), ['str'])),
                                        ])
                                        self.keychain_disable = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain, ['keychain_disable', 'keychain_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain']['meta_info']


                                class GracefulMaintenance(_Entity_):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:  :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:  :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance, self).__init__()

                                        self.yang_name = "graceful-maintenance"
                                        self.yang_parent_name = "neighbor-prefix-length"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("graceful-maintenance-local-preference", ("graceful_maintenance_local_preference", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference)), ("graceful-maintenance-as-prepends", ("graceful_maintenance_as_prepends", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('graceful_maintenance_activate', (YLeaf(YType.boolean, 'graceful-maintenance-activate'), ['bool'])),
                                        ])
                                        self.enable = None
                                        self.graceful_maintenance_activate = None

                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self
                                        self._children_name_map["graceful_maintenance_local_preference"] = "graceful-maintenance-local-preference"

                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self._children_name_map["graceful_maintenance_as_prepends"] = "graceful-maintenance-as-prepends"
                                        self._segment_path = lambda: "graceful-maintenance"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance, ['enable', 'graceful_maintenance_activate'], name, value)


                                    class GracefulMaintenanceLocalPreference(_Entity_):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference, self).__init__()

                                            self.yang_name = "graceful-maintenance-local-preference"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_loc_pref_disable', (YLeaf(YType.boolean, 'gshut-loc-pref-disable'), ['bool'])),
                                                ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                                            ])
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None
                                            self._segment_path = lambda: "graceful-maintenance-local-preference"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference, ['gshut_loc_pref_disable', 'local_preference'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(_Entity_):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\: int
                                        
                                        	**range:** 0..6
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends, self).__init__()

                                            self.yang_name = "graceful-maintenance-as-prepends"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_prepends_disable', (YLeaf(YType.boolean, 'gshut-prepends-disable'), ['bool'])),
                                                ('as_prepends', (YLeaf(YType.uint32, 'as-prepends'), ['int'])),
                                            ])
                                            self.gshut_prepends_disable = None
                                            self.as_prepends = None
                                            self._segment_path = lambda: "graceful-maintenance-as-prepends"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends, ['gshut_prepends_disable', 'as_prepends'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors']['meta_info']


                        class NeighborGroups(_Entity_):
                            """
                            Neighbor\-group configuration
                            
                            .. attribute:: neighbor_group
                            
                            	A particular BGP neighbor group
                            	**type**\: list of  		 :py:class:`NeighborGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups, self).__init__()

                                self.yang_name = "neighbor-groups"
                                self.yang_parent_name = "bgp-entity"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("neighbor-group", ("neighbor_group", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup))])
                                self._leafs = OrderedDict()

                                self.neighbor_group = YList(self)
                                self._segment_path = lambda: "neighbor-groups"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups, [], name, value)


                            class NeighborGroup(_Entity_):
                                """
                                A particular BGP neighbor group
                                
                                .. attribute:: neighbor_group_name  (key)
                                
                                	BGP neighbor group name
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: neighbor_group_afs
                                
                                	BGP neighbor\-group AF configuration table
                                	**type**\:  :py:class:`NeighborGroupAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs>`
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\: str
                                
                                .. attribute:: local_address_sub_net
                                
                                	Local Address subnet of routing updates
                                	**type**\:  :py:class:`LocalAddressSubNet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddressSubNet>`
                                
                                .. attribute:: internal_vpn_client_ibgp_ce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\: bool
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:  :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress>`
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:  :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates>`
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:  :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\: str
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:  :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs>`
                                
                                .. attribute:: merge_safi1_and4_inbound_updates
                                
                                	TRUE to merge updates FALSE to not merge updates and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:  :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs>`
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\: bool
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\: str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:  :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:  :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:  :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  :py:class:`BgpNbrgr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpNbrgr>`
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\: bool
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\: int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:  :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss>`
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:  :py:class:`BgpTcpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpMode>`
                                
                                	**default value**\: either
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:  :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos>`
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:  :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering>`
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpEbgpSendDmzEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableMode>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:  :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut>`
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\: int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: ao_keychain
                                
                                	Set or disable AO based authentication
                                	**type**\:  :py:class:`AoKeychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AoKeychain>`
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:  :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize>`
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:  :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpBfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableMode>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:  :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers>`
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\: str
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:  :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain>`
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\: bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability. FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: create
                                
                                	Create this group. Deletion of this object causes deletion of all the objects under NeighborGroup/SessionGroup associated with this object
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:  :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup, self).__init__()

                                    self.yang_name = "neighbor-group"
                                    self.yang_parent_name = "neighbor-groups"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['neighbor_group_name']
                                    self._child_classes = OrderedDict([("neighbor-group-afs", ("neighbor_group_afs", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs)), ("local-address-sub-net", ("local_address_sub_net", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddressSubNet)), ("local-address", ("local_address", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress)), ("bmp-activates", ("bmp_activates", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates)), ("ebgp-multihop", ("ebgp_multihop", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop)), ("remote-as", ("remote_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs)), ("local-as", ("local_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs)), ("password", ("password", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password)), ("advertisement-interval", ("advertisement_interval", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AdvertisementInterval)), ("neighbor-cluster-id", ("neighbor_cluster_id", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId)), ("tcpmss", ("tcpmss", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss)), ("tos", ("tos", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos)), ("update-in-filtering", ("update_in_filtering", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering)), ("msg-log-out", ("msg_log_out", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut)), ("ao-keychain", ("ao_keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AoKeychain)), ("receive-buffer-size", ("receive_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize)), ("msg-log-in", ("msg_log_in", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn)), ("send-buffer-size", ("send_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize)), ("timers", ("timers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers)), ("keychain", ("keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain)), ("graceful-maintenance", ("graceful_maintenance", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance))])
                                    self._leafs = OrderedDict([
                                        ('neighbor_group_name', (YLeaf(YType.str, 'neighbor-group-name'), ['str'])),
                                        ('neighbor_group_add_member', (YLeaf(YType.str, 'neighbor-group-add-member'), ['str'])),
                                        ('internal_vpn_client_ibgp_ce', (YLeaf(YType.boolean, 'internal-vpn-client-ibgp-ce'), ['bool'])),
                                        ('session_group_add_member', (YLeaf(YType.str, 'session-group-add-member'), ['str'])),
                                        ('egress_peer_engineering', (YLeaf(YType.boolean, 'egress-peer-engineering'), ['bool'])),
                                        ('merge_safi1_and4_inbound_updates', (YLeaf(YType.boolean, 'merge-safi1-and4-inbound-updates'), ['bool'])),
                                        ('neighbor_graceful_restart_stalepath_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-stalepath-time'), ['int'])),
                                        ('shutdown', (YLeaf(YType.boolean, 'shutdown'), ['bool'])),
                                        ('description', (YLeaf(YType.str, 'description'), ['str'])),
                                        ('ebgp_recv_dmz', (YLeaf(YType.boolean, 'ebgp-recv-dmz'), ['bool'])),
                                        ('neighbor_graceful_restart', (YLeaf(YType.enumeration, 'neighbor-graceful-restart'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpNbrgr', '')])),
                                        ('enforce_first_as', (YLeaf(YType.boolean, 'enforce-first-as'), ['bool'])),
                                        ('idle_watch_time', (YLeaf(YType.uint32, 'idle-watch-time'), ['int'])),
                                        ('session_open_mode', (YLeaf(YType.enumeration, 'session-open-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpTcpMode', '')])),
                                        ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                        ('ebgp_send_dmz_enable_modes', (YLeaf(YType.enumeration, 'ebgp-send-dmz-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpEbgpSendDmzEnableMode', '')])),
                                        ('suppress_all_capabilities', (YLeaf(YType.boolean, 'suppress-all-capabilities'), ['bool'])),
                                        ('max_peers', (YLeaf(YType.uint32, 'max-peers'), ['int'])),
                                        ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                        ('additional_paths_send_capability', (YLeaf(YType.enumeration, 'additional-paths-send-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('propagate_dmz_link_bandwidth', (YLeaf(YType.boolean, 'propagate-dmz-link-bandwidth'), ['bool'])),
                                        ('bfd_enable_modes', (YLeaf(YType.enumeration, 'bfd-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpBfdEnableMode', '')])),
                                        ('ttl_security', (YLeaf(YType.boolean, 'ttl-security'), ['bool'])),
                                        ('neighbor_graceful_restart_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-time'), ['int'])),
                                        ('bfd_multiplier', (YLeaf(YType.uint32, 'bfd-multiplier'), ['int'])),
                                        ('bfd_minimum_interval', (YLeaf(YType.uint32, 'bfd-minimum-interval'), ['int'])),
                                        ('remote_as_list', (YLeaf(YType.str, 'remote-as-list'), ['str'])),
                                        ('additional_paths_receive_capability', (YLeaf(YType.enumeration, 'additional-paths-receive-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('ignore_connected_check_ebgp', (YLeaf(YType.boolean, 'ignore-connected-check-ebgp'), ['bool'])),
                                        ('suppress_four_byte_as_capability', (YLeaf(YType.boolean, 'suppress-four-byte-as-capability'), ['bool'])),
                                        ('update_source_interface', (YLeaf(YType.str, 'update-source-interface'), ['str'])),
                                        ('create', (YLeaf(YType.empty, 'create'), ['Empty'])),
                                    ])
                                    self.neighbor_group_name = None
                                    self.neighbor_group_add_member = None
                                    self.internal_vpn_client_ibgp_ce = None
                                    self.session_group_add_member = None
                                    self.egress_peer_engineering = None
                                    self.merge_safi1_and4_inbound_updates = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.shutdown = None
                                    self.description = None
                                    self.ebgp_recv_dmz = None
                                    self.neighbor_graceful_restart = None
                                    self.enforce_first_as = None
                                    self.idle_watch_time = None
                                    self.session_open_mode = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.suppress_all_capabilities = None
                                    self.max_peers = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.additional_paths_send_capability = None
                                    self.propagate_dmz_link_bandwidth = None
                                    self.bfd_enable_modes = None
                                    self.ttl_security = None
                                    self.neighbor_graceful_restart_time = None
                                    self.bfd_multiplier = None
                                    self.bfd_minimum_interval = None
                                    self.remote_as_list = None
                                    self.additional_paths_receive_capability = None
                                    self.ignore_connected_check_ebgp = None
                                    self.suppress_four_byte_as_capability = None
                                    self.update_source_interface = None
                                    self.create = None

                                    self.neighbor_group_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs()
                                    self.neighbor_group_afs.parent = self
                                    self._children_name_map["neighbor_group_afs"] = "neighbor-group-afs"

                                    self.local_address_sub_net = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddressSubNet()
                                    self.local_address_sub_net.parent = self
                                    self._children_name_map["local_address_sub_net"] = "local-address-sub-net"

                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress()
                                    self.local_address.parent = self
                                    self._children_name_map["local_address"] = "local-address"

                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self._children_name_map["bmp_activates"] = "bmp-activates"

                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self._children_name_map["ebgp_multihop"] = "ebgp-multihop"

                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs()
                                    self.remote_as.parent = self
                                    self._children_name_map["remote_as"] = "remote-as"

                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs()
                                    self.local_as.parent = self
                                    self._children_name_map["local_as"] = "local-as"

                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password()
                                    self.password.parent = self
                                    self._children_name_map["password"] = "password"

                                    self.advertisement_interval = None
                                    self._children_name_map["advertisement_interval"] = "advertisement-interval"

                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self._children_name_map["neighbor_cluster_id"] = "neighbor-cluster-id"

                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss()
                                    self.tcpmss.parent = self
                                    self._children_name_map["tcpmss"] = "tcpmss"

                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos()
                                    self.tos.parent = self
                                    self._children_name_map["tos"] = "tos"

                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self._children_name_map["update_in_filtering"] = "update-in-filtering"

                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self._children_name_map["msg_log_out"] = "msg-log-out"

                                    self.ao_keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AoKeychain()
                                    self.ao_keychain.parent = self
                                    self._children_name_map["ao_keychain"] = "ao-keychain"

                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self._children_name_map["receive_buffer_size"] = "receive-buffer-size"

                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self._children_name_map["msg_log_in"] = "msg-log-in"

                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self._children_name_map["send_buffer_size"] = "send-buffer-size"

                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers()
                                    self.timers.parent = self
                                    self._children_name_map["timers"] = "timers"

                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain()
                                    self.keychain.parent = self
                                    self._children_name_map["keychain"] = "keychain"

                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self._children_name_map["graceful_maintenance"] = "graceful-maintenance"
                                    self._segment_path = lambda: "neighbor-group" + "[neighbor-group-name='" + str(self.neighbor_group_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup, ['neighbor_group_name', 'neighbor_group_add_member', 'internal_vpn_client_ibgp_ce', 'session_group_add_member', 'egress_peer_engineering', 'merge_safi1_and4_inbound_updates', 'neighbor_graceful_restart_stalepath_time', 'shutdown', 'description', 'ebgp_recv_dmz', 'neighbor_graceful_restart', 'enforce_first_as', 'idle_watch_time', 'session_open_mode', 'rpki_origin_as_validation_disable', 'ebgp_send_dmz_enable_modes', 'suppress_all_capabilities', 'max_peers', 'rpki_bestpath_origin_as_allow_invalid', 'additional_paths_send_capability', 'propagate_dmz_link_bandwidth', 'bfd_enable_modes', 'ttl_security', 'neighbor_graceful_restart_time', 'bfd_multiplier', 'bfd_minimum_interval', 'remote_as_list', 'additional_paths_receive_capability', 'ignore_connected_check_ebgp', 'suppress_four_byte_as_capability', 'update_source_interface', 'create'], name, value)


                                class NeighborGroupAfs(_Entity_):
                                    """
                                    BGP neighbor\-group AF configuration table
                                    
                                    .. attribute:: neighbor_group_af
                                    
                                    	Address family type of neighbor group
                                    	**type**\: list of  		 :py:class:`NeighborGroupAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs, self).__init__()

                                        self.yang_name = "neighbor-group-afs"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("neighbor-group-af", ("neighbor_group_af", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf))])
                                        self._leafs = OrderedDict()

                                        self.neighbor_group_af = YList(self)
                                        self._segment_path = lambda: "neighbor-group-afs"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs, [], name, value)


                                    class NeighborGroupAf(_Entity_):
                                        """
                                        Address family type of neighbor group
                                        
                                        .. attribute:: af_name  (key)
                                        
                                        	BGP neighbor group address family
                                        	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:  :py:class:`BgpSignal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignal>`
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group. FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT. FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:  :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity>`
                                        
                                        .. attribute:: cluster_id_allow_equal
                                        
                                        	TRUE to disable cluster\-id check for first id in the cluster\-id\-list. FALSE to enable check for all cluster\-ids in the list
                                        	**type**\: bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable>`
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:  :py:class:`BgpSendMcastAttrCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfg>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:  :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV6>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV4>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:  :py:class:`BgpFlowspecValidationCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfg>`
                                        
                                        .. attribute:: advertise_l2vpn_evpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2vpnEvpn>`
                                        
                                        .. attribute:: advertise_local_l2vpn_evpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2vpnEvpn>`
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:  :py:class:`BgpAfEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulation>`
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: enforce_multiple_labels
                                        
                                        	TRUE to enforce multiple labels support
                                        	**type**\: bool
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\: bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:  :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:  :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin>`
                                        
                                        .. attribute:: update_out_orig_loop_chk_disable
                                        
                                        	Enable/disable Originator loop check for this neighbor\-group/af\-group
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\: int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:  :py:class:`BgpOrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrf>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client. FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:  :py:class:`Import <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import>`
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:  :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:  :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4>`
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\: bool
                                        
                                        .. attribute:: optimal_route_reflection_group
                                        
                                        	Name of the ORR group this neighbor is going to be part of
                                        	**type**\: str
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf, self).__init__()

                                            self.yang_name = "neighbor-group-af"
                                            self.yang_parent_name = "neighbor-group-afs"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['af_name']
                                            self._child_classes = OrderedDict([("aigp-cost-community", ("aigp_cost_community", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity)), ("advertise-def-imp-disable-v6", ("advertise_def_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6)), ("advertise-disable", ("advertise_disable", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable)), ("maximum-prefixes", ("maximum_prefixes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.MaximumPrefixes)), ("advertise-bridge-domain-imp-disable-v6", ("advertise_bridge_domain_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV6)), ("remove-private-as-entire-as-path-inbound", ("remove_private_as_entire_as_path_inbound", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPathInbound)), ("advertise-def-imp-disable-v4", ("advertise_def_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4)), ("advertise-bridge-domain-imp-disable-v4", ("advertise_bridge_domain_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV4)), ("advertise-l2vpn-evpn", ("advertise_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2vpnEvpn)), ("advertise-local-l2vpn-evpn", ("advertise_local_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2vpnEvpn)), ("neighbor-af-long-lived-graceful-restart-stale-time", ("neighbor_af_long_lived_graceful_restart_stale_time", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime)), ("site-of-origin", ("site_of_origin", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin)), ("advertise-v6", ("advertise_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6)), ("advertise-local-v6", ("advertise_local_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6)), ("import", ("import_", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import)), ("default-originate", ("default_originate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate)), ("soft-reconfiguration", ("soft_reconfiguration", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration)), ("advertise-vrf-imp-disable-v6", ("advertise_vrf_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6)), ("advertise-v4", ("advertise_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4)), ("advertise-local-v4", ("advertise_local_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4)), ("remove-private-as-entire-as-path", ("remove_private_as_entire_as_path", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPath)), ("advertise-vrf-imp-disable-v4", ("advertise_vrf_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4))])
                                            self._leafs = OrderedDict([
                                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                ('neighbor_af_long_lived_graceful_restart_capable', (YLeaf(YType.boolean, 'neighbor-af-long-lived-graceful-restart-capable'), ['bool'])),
                                                ('l2vpn_signalling', (YLeaf(YType.enumeration, 'l2vpn-signalling'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSignal', '')])),
                                                ('send_ext_community_ebgp', (YLeaf(YType.boolean, 'send-ext-community-ebgp'), ['bool'])),
                                                ('accept_route_legacy_rt', (YLeaf(YType.boolean, 'accept-route-legacy-rt'), ['bool'])),
                                                ('cluster_id_allow_equal', (YLeaf(YType.boolean, 'cluster-id-allow-equal'), ['bool'])),
                                                ('send_community_ebgp', (YLeaf(YType.boolean, 'send-community-ebgp'), ['bool'])),
                                                ('send_multicast_attr', (YLeaf(YType.enumeration, 'send-multicast-attr'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSendMcastAttrCfg', '')])),
                                                ('next_hop_unchanged', (YLeaf(YType.boolean, 'next-hop-unchanged'), ['bool'])),
                                                ('advertise_local_labeled_route', (YLeaf(YType.enumeration, 'advertise-local-labeled-route'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                                ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                                ('flowspec_validation', (YLeaf(YType.enumeration, 'flowspec-validation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpFlowspecValidationCfg', '')])),
                                                ('encapsulation_type', (YLeaf(YType.enumeration, 'encapsulation-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAfEncapsulation', '')])),
                                                ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                                ('enforce_multiple_labels', (YLeaf(YType.boolean, 'enforce-multiple-labels'), ['bool'])),
                                                ('as_override', (YLeaf(YType.boolean, 'as-override'), ['bool'])),
                                                ('multipath', (YLeaf(YType.empty, 'multipath'), ['Empty'])),
                                                ('send_community_ebgp_graceful_shutdown', (YLeaf(YType.boolean, 'send-community-ebgp-graceful-shutdown'), ['bool'])),
                                                ('activate', (YLeaf(YType.empty, 'activate'), ['Empty'])),
                                                ('prefix_orf_policy', (YLeaf(YType.str, 'prefix-orf-policy'), ['str'])),
                                                ('update_out_orig_loop_chk_disable', (YLeaf(YType.empty, 'update-out-orig-loop-chk-disable'), ['Empty'])),
                                                ('aigp', (YLeaf(YType.enumeration, 'aigp'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('aigp_send_med', (YLeaf(YType.enumeration, 'aigp-send-med'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('allow_as_in', (YLeaf(YType.uint32, 'allow-as-in'), ['int'])),
                                                ('advertise_orf', (YLeaf(YType.enumeration, 'advertise-orf'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpOrf', '')])),
                                                ('route_reflector_client', (YLeaf(YType.boolean, 'route-reflector-client'), ['bool'])),
                                                ('next_hop_self', (YLeaf(YType.boolean, 'next-hop-self'), ['bool'])),
                                                ('route_policy_in', (YLeaf(YType.str, 'route-policy-in'), ['str'])),
                                                ('default_weight', (YLeaf(YType.uint32, 'default-weight'), ['int'])),
                                                ('af_group', (YLeaf(YType.str, 'af-group'), ['str'])),
                                                ('next_hop_unchanged_multipath', (YLeaf(YType.boolean, 'next-hop-unchanged-multipath'), ['bool'])),
                                                ('optimal_route_reflection_group', (YLeaf(YType.str, 'optimal-route-reflection-group'), ['str'])),
                                                ('accept_own', (YLeaf(YType.boolean, 'accept-own'), ['bool'])),
                                                ('route_policy_out', (YLeaf(YType.str, 'route-policy-out'), ['str'])),
                                                ('advertise_permanent_network', (YLeaf(YType.empty, 'advertise-permanent-network'), ['Empty'])),
                                            ])
                                            self.af_name = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.l2vpn_signalling = None
                                            self.send_ext_community_ebgp = None
                                            self.accept_route_legacy_rt = None
                                            self.cluster_id_allow_equal = None
                                            self.send_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.next_hop_unchanged = None
                                            self.advertise_local_labeled_route = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.flowspec_validation = None
                                            self.encapsulation_type = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.enforce_multiple_labels = None
                                            self.as_override = None
                                            self.multipath = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.activate = None
                                            self.prefix_orf_policy = None
                                            self.update_out_orig_loop_chk_disable = None
                                            self.aigp = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.advertise_orf = None
                                            self.route_reflector_client = None
                                            self.next_hop_self = None
                                            self.route_policy_in = None
                                            self.default_weight = None
                                            self.af_group = None
                                            self.next_hop_unchanged_multipath = None
                                            self.optimal_route_reflection_group = None
                                            self.accept_own = None
                                            self.route_policy_out = None
                                            self.advertise_permanent_network = None

                                            self.aigp_cost_community = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity()
                                            self.aigp_cost_community.parent = self
                                            self._children_name_map["aigp_cost_community"] = "aigp-cost-community"

                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v6"] = "advertise-def-imp-disable-v6"

                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self._children_name_map["advertise_disable"] = "advertise-disable"

                                            self.maximum_prefixes = None
                                            self._children_name_map["maximum_prefixes"] = "maximum-prefixes"

                                            self.advertise_bridge_domain_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV6()
                                            self.advertise_bridge_domain_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v6"] = "advertise-bridge-domain-imp-disable-v6"

                                            self.remove_private_as_entire_as_path_inbound = None
                                            self._children_name_map["remove_private_as_entire_as_path_inbound"] = "remove-private-as-entire-as-path-inbound"

                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v4"] = "advertise-def-imp-disable-v4"

                                            self.advertise_bridge_domain_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV4()
                                            self.advertise_bridge_domain_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v4"] = "advertise-bridge-domain-imp-disable-v4"

                                            self.advertise_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2vpnEvpn()
                                            self.advertise_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_l2vpn_evpn"] = "advertise-l2vpn-evpn"

                                            self.advertise_local_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2vpnEvpn()
                                            self.advertise_local_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_local_l2vpn_evpn"] = "advertise-local-l2vpn-evpn"

                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self._children_name_map["neighbor_af_long_lived_graceful_restart_stale_time"] = "neighbor-af-long-lived-graceful-restart-stale-time"

                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self._children_name_map["site_of_origin"] = "site-of-origin"

                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self._children_name_map["advertise_v6"] = "advertise-v6"

                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self._children_name_map["advertise_local_v6"] = "advertise-local-v6"

                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import()
                                            self.import_.parent = self
                                            self._children_name_map["import_"] = "import"

                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self._children_name_map["default_originate"] = "default-originate"

                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self
                                            self._children_name_map["soft_reconfiguration"] = "soft-reconfiguration"

                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v6"] = "advertise-vrf-imp-disable-v6"

                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self._children_name_map["advertise_v4"] = "advertise-v4"

                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self._children_name_map["advertise_local_v4"] = "advertise-local-v4"

                                            self.remove_private_as_entire_as_path = None
                                            self._children_name_map["remove_private_as_entire_as_path"] = "remove-private-as-entire-as-path"

                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v4"] = "advertise-vrf-imp-disable-v4"
                                            self._segment_path = lambda: "neighbor-group-af" + "[af-name='" + str(self.af_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf, ['af_name', 'neighbor_af_long_lived_graceful_restart_capable', 'l2vpn_signalling', 'send_ext_community_ebgp', 'accept_route_legacy_rt', 'cluster_id_allow_equal', 'send_community_ebgp', 'send_multicast_attr', 'next_hop_unchanged', 'advertise_local_labeled_route', 'rpki_origin_as_validation_disable', 'flowspec_validation', 'encapsulation_type', 'rpki_bestpath_origin_as_allow_invalid', 'enforce_multiple_labels', 'as_override', 'multipath', 'send_community_ebgp_graceful_shutdown', 'activate', 'prefix_orf_policy', 'update_out_orig_loop_chk_disable', 'aigp', 'aigp_send_med', 'allow_as_in', 'advertise_orf', 'route_reflector_client', 'next_hop_self', 'route_policy_in', 'default_weight', 'af_group', 'next_hop_unchanged_multipath', 'optimal_route_reflection_group', 'accept_own', 'route_policy_out', 'advertise_permanent_network'], name, value)


                                        class AigpCostCommunity(_Entity_):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:  :py:class:`BgpAigpCfgPoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoi>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity, self).__init__()

                                                self.yang_name = "aigp-cost-community"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('cost_community_id', (YLeaf(YType.uint32, 'cost-community-id'), ['int'])),
                                                    ('transitive', (YLeaf(YType.boolean, 'transitive'), ['bool'])),
                                                    ('cost_community_poi_type', (YLeaf(YType.enumeration, 'cost-community-poi-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfgPoi', '')])),
                                                ])
                                                self.enable = None
                                                self.cost_community_id = None
                                                self.transitive = None
                                                self.cost_community_poi_type = None
                                                self._segment_path = lambda: "aigp-cost-community"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity, ['enable', 'cost_community_id', 'transitive', 'cost_community_poi_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(_Entity_):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable, self).__init__()

                                                self.yang_name = "advertise-disable"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-disable"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(_Entity_):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\: int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.MaximumPrefixes, self).__init__()

                                                self.yang_name = "maximum-prefixes"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('prefix_limit', (YLeaf(YType.uint32, 'prefix-limit'), ['int'])),
                                                    ('warning_percentage', (YLeaf(YType.uint32, 'warning-percentage'), ['int'])),
                                                    ('warning_only', (YLeaf(YType.boolean, 'warning-only'), ['bool'])),
                                                    ('restart_time', (YLeaf(YType.uint32, 'restart-time'), ['int'])),
                                                    ('discard_extra_paths', (YLeaf(YType.boolean, 'discard-extra-paths'), ['bool'])),
                                                ])
                                                self.prefix_limit = None
                                                self.warning_percentage = None
                                                self.warning_only = None
                                                self.restart_time = None
                                                self.discard_extra_paths = None
                                                self._segment_path = lambda: "maximum-prefixes"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.MaximumPrefixes, ['prefix_limit', 'warning_percentage', 'warning_only', 'restart_time', 'discard_extra_paths'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.MaximumPrefixes']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV6']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(_Entity_):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPathInbound, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path-inbound"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path-inbound"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPathInbound, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseBridgeDomainImpDisableV4']['meta_info']


                                        class AdvertiseL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-l2vpn-evpn"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2vpnEvpn']['meta_info']


                                        class AdvertiseLocalL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-local-l2vpn-evpn"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2vpnEvpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(_Entity_):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime, self).__init__()

                                                self.yang_name = "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('stale_time_send', (YLeaf(YType.uint32, 'stale-time-send'), ['int'])),
                                                    ('stale_time_accept', (YLeaf(YType.uint32, 'stale-time-accept'), ['int'])),
                                                ])
                                                self.stale_time_send = None
                                                self.stale_time_accept = None
                                                self._segment_path = lambda: "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime, ['stale_time_send', 'stale_time_accept'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(_Entity_):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:  :py:class:`BgpSiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOrigin>`
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin, self).__init__()

                                                self.yang_name = "site-of-origin"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSiteOfOrigin', '')])),
                                                    ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                                    ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                                                    ('as_index', (YLeaf(YType.uint32, 'as-index'), ['int'])),
                                                    ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                                    ('address_index', (YLeaf(YType.uint32, 'address-index'), ['int'])),
                                                ])
                                                self.type = None
                                                self.as_xx = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.address = None
                                                self.address_index = None
                                                self._segment_path = lambda: "site-of-origin"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin, ['type', 'as_xx', 'as_', 'as_index', 'address', 'address_index'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6, self).__init__()

                                                self.yang_name = "advertise-v6"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6, self).__init__()

                                                self.yang_name = "advertise-local-v6"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6']['meta_info']


                                        class Import(_Entity_):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import, self).__init__()

                                                self.yang_name = "import"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('import_stitching', (YLeaf(YType.boolean, 'import-stitching'), ['bool'])),
                                                    ('import_reoriginate', (YLeaf(YType.boolean, 'import-reoriginate'), ['bool'])),
                                                    ('import_reoriginate_stitching', (YLeaf(YType.boolean, 'import-reoriginate-stitching'), ['bool'])),
                                                ])
                                                self.import_stitching = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self._segment_path = lambda: "import"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import, ['import_stitching', 'import_reoriginate', 'import_reoriginate_stitching'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import']['meta_info']


                                        class DefaultOriginate(_Entity_):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate, self).__init__()

                                                self.yang_name = "default-originate"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "default-originate"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate, ['enable', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(_Entity_):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration, self).__init__()

                                                self.yang_name = "soft-reconfiguration"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('inbound_soft', (YLeaf(YType.boolean, 'inbound-soft'), ['bool'])),
                                                    ('soft_always', (YLeaf(YType.boolean, 'soft-always'), ['bool'])),
                                                ])
                                                self.inbound_soft = None
                                                self.soft_always = None
                                                self._segment_path = lambda: "soft-reconfiguration"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration, ['inbound_soft', 'soft_always'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v6"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4, self).__init__()

                                                self.yang_name = "advertise-v4"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4, self).__init__()

                                                self.yang_name = "advertise-local-v4"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(_Entity_):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPath, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPath, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v4"
                                                self.yang_parent_name = "neighbor-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs']['meta_info']


                                class LocalAddressSubNet(_Entity_):
                                    """
                                    Local Address subnet of routing updates
                                    
                                    .. attribute:: local_addresss_subnet
                                    
                                    	local address subnet ip address 
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_len
                                    
                                    	prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddressSubNet, self).__init__()

                                        self.yang_name = "local-address-sub-net"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_addresss_subnet', (YLeaf(YType.str, 'local-addresss-subnet'), ['str','str'])),
                                            ('prefix_len', (YLeaf(YType.uint32, 'prefix-len'), ['int'])),
                                        ])
                                        self.local_addresss_subnet = None
                                        self.prefix_len = None
                                        self._segment_path = lambda: "local-address-sub-net"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddressSubNet, ['local_addresss_subnet', 'prefix_len'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddressSubNet']['meta_info']


                                class LocalAddress(_Entity_):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\: bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress, self).__init__()

                                        self.yang_name = "local-address"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_address_disable', (YLeaf(YType.boolean, 'local-address-disable'), ['bool'])),
                                            ('local_ip_address', (YLeaf(YType.str, 'local-ip-address'), ['str','str'])),
                                        ])
                                        self.local_address_disable = None
                                        self.local_ip_address = None
                                        self._segment_path = lambda: "local-address"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress, ['local_address_disable', 'local_ip_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress']['meta_info']


                                class BmpActivates(_Entity_):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of  		 :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates, self).__init__()

                                        self.yang_name = "bmp-activates"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("bmp-activate", ("bmp_activate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates.BmpActivate))])
                                        self._leafs = OrderedDict()

                                        self.bmp_activate = YList(self)
                                        self._segment_path = lambda: "bmp-activates"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates, [], name, value)


                                    class BmpActivate(_Entity_):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  (key)
                                        
                                        	BMP Server ID
                                        	**type**\: int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates.BmpActivate, self).__init__()

                                            self.yang_name = "bmp-activate"
                                            self.yang_parent_name = "bmp-activates"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['server_id']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('server_id', (YLeaf(YType.uint32, 'server-id'), ['int'])),
                                            ])
                                            self.server_id = None
                                            self._segment_path = lambda: "bmp-activate" + "[server-id='" + str(self.server_id) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates.BmpActivate, ['server_id'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates.BmpActivate']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates']['meta_info']


                                class EbgpMultihop(_Entity_):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop, self).__init__()

                                        self.yang_name = "ebgp-multihop"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('max_hop_count', (YLeaf(YType.uint32, 'max-hop-count'), ['int'])),
                                            ('mpls_deactivation', (YLeaf(YType.boolean, 'mpls-deactivation'), ['bool'])),
                                        ])
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None
                                        self._segment_path = lambda: "ebgp-multihop"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop, ['max_hop_count', 'mpls_deactivation'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop']['meta_info']


                                class RemoteAs(_Entity_):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs, self).__init__()

                                        self.yang_name = "remote-as"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self._segment_path = lambda: "remote-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs, ['as_xx', 'as_yy'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs']['meta_info']


                                class LocalAs(_Entity_):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs, self).__init__()

                                        self.yang_name = "local-as"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ('no_prepend', (YLeaf(YType.empty, 'no-prepend'), ['Empty'])),
                                            ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                                            ('replace_as', (YLeaf(YType.empty, 'replace-as'), ['Empty'])),
                                            ('dual_as', (YLeaf(YType.empty, 'dual-as'), ['Empty'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.no_prepend = None
                                        self.disable = None
                                        self.replace_as = None
                                        self.dual_as = None
                                        self._segment_path = lambda: "local-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs, ['as_xx', 'as_yy', 'no_prepend', 'disable', 'replace_as', 'dual_as'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs']['meta_info']


                                class Password(_Entity_):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\: bool
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password, self).__init__()

                                        self.yang_name = "password"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('password_disable', (YLeaf(YType.boolean, 'password-disable'), ['bool'])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.password_disable = None
                                        self.password = None
                                        self._segment_path = lambda: "password"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password, ['password_disable', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password']['meta_info']


                                class AdvertisementInterval(_Entity_):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\: int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AdvertisementInterval, self).__init__()

                                        self.yang_name = "advertisement-interval"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                                            ('minimum_interval_msecs', (YLeaf(YType.uint32, 'minimum-interval-msecs'), ['int'])),
                                        ])
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None
                                        self._segment_path = lambda: "advertisement-interval"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AdvertisementInterval, ['minimum_interval', 'minimum_interval_msecs'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(_Entity_):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967295
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId, self).__init__()

                                        self.yang_name = "neighbor-cluster-id"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                            ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str'])),
                                        ])
                                        self.cluster_id_number = None
                                        self.cluster_id_address = None
                                        self._segment_path = lambda: "neighbor-cluster-id"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId, ['cluster_id_number', 'cluster_id_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId']['meta_info']


                                class Tcpmss(_Entity_):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\: bool
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\: int
                                    
                                    	**range:** 68..10000
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss, self).__init__()

                                        self.yang_name = "tcpmss"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tcpmss_disable', (YLeaf(YType.boolean, 'tcpmss-disable'), ['bool'])),
                                            ('mss', (YLeaf(YType.uint32, 'mss'), ['int'])),
                                        ])
                                        self.tcpmss_disable = None
                                        self.mss = None
                                        self._segment_path = lambda: "tcpmss"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss, ['tcpmss_disable', 'mss'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss']['meta_info']


                                class Tos(_Entity_):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:  :py:class:`BgpTos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTos>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: union of the below types:
                                    
                                    		**type**\:  :py:class:`BgpPrecedenceDscp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscp>`
                                    
                                    		**type**\: int
                                    
                                    			**range:** 0..63
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos, self).__init__()

                                        self.yang_name = "tos"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpTos', '')])),
                                            ('value', (YLeaf(YType.str, 'value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpPrecedenceDscp', ''),'int'])),
                                        ])
                                        self.type = None
                                        self.value = None
                                        self._segment_path = lambda: "tos"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos, ['type', 'value'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos']['meta_info']


                                class UpdateInFiltering(_Entity_):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:  :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\: str
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering, self).__init__()

                                        self.yang_name = "update-in-filtering"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("update-in-filtering-message-buffers", ("update_in_filtering_message_buffers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('update_in_filtering_attribute_filter_group', (YLeaf(YType.str, 'update-in-filtering-attribute-filter-group'), ['str'])),
                                            ('update_in_filtering_syslog_disable', (YLeaf(YType.empty, 'update-in-filtering-syslog-disable'), ['Empty'])),
                                        ])
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_syslog_disable = None

                                        self.update_in_filtering_message_buffers = None
                                        self._children_name_map["update_in_filtering_message_buffers"] = "update-in-filtering-message-buffers"
                                        self._segment_path = lambda: "update-in-filtering"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering, ['enable', 'update_in_filtering_attribute_filter_group', 'update_in_filtering_syslog_disable'], name, value)


                                    class UpdateInFilteringMessageBuffers(_Entity_):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\: int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\: bool
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers, self).__init__()

                                            self.yang_name = "update-in-filtering-message-buffers"
                                            self.yang_parent_name = "update-in-filtering"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('number_of_buffers', (YLeaf(YType.uint32, 'number-of-buffers'), ['int'])),
                                                ('non_circular_buffer', (YLeaf(YType.boolean, 'non-circular-buffer'), ['bool'])),
                                            ])
                                            self.number_of_buffers = None
                                            self.non_circular_buffer = None
                                            self._segment_path = lambda: "update-in-filtering-message-buffers"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers, ['number_of_buffers', 'non_circular_buffer'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering']['meta_info']


                                class MsgLogOut(_Entity_):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut, self).__init__()

                                        self.yang_name = "msg-log-out"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-out"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut']['meta_info']


                                class AoKeychain(_Entity_):
                                    """
                                    Set or disable AO based authentication
                                    
                                    .. attribute:: ao_keychain_disable
                                    
                                    	TRUE to prevent this entity from having AO keychain based authentication even if the parent has one.FALSE to enable AO keychain based authentication
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_keychain_name
                                    
                                    	Name of the AO keychain associated with this neighbor
                                    	**type**\: str
                                    
                                    .. attribute:: ao_include_tcp_options
                                    
                                    	Include TCP options header with AO
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_accept_mismatch_connection
                                    
                                    	Accept new connections even though AO mismatched
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AoKeychain, self).__init__()

                                        self.yang_name = "ao-keychain"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('ao_keychain_disable', (YLeaf(YType.boolean, 'ao-keychain-disable'), ['bool'])),
                                            ('ao_keychain_name', (YLeaf(YType.str, 'ao-keychain-name'), ['str'])),
                                            ('ao_include_tcp_options', (YLeaf(YType.boolean, 'ao-include-tcp-options'), ['bool'])),
                                            ('ao_accept_mismatch_connection', (YLeaf(YType.boolean, 'ao-accept-mismatch-connection'), ['bool'])),
                                        ])
                                        self.ao_keychain_disable = None
                                        self.ao_keychain_name = None
                                        self.ao_include_tcp_options = None
                                        self.ao_accept_mismatch_connection = None
                                        self._segment_path = lambda: "ao-keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AoKeychain, ['ao_keychain_disable', 'ao_keychain_name', 'ao_include_tcp_options', 'ao_accept_mismatch_connection'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AoKeychain']['meta_info']


                                class ReceiveBufferSize(_Entity_):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize, self).__init__()

                                        self.yang_name = "receive-buffer-size"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                            ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                        ])
                                        self.socket_receive_size = None
                                        self.bgp_receive_size = None
                                        self._segment_path = lambda: "receive-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize, ['socket_receive_size', 'bgp_receive_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(_Entity_):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn, self).__init__()

                                        self.yang_name = "msg-log-in"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn']['meta_info']


                                class SendBufferSize(_Entity_):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize, self).__init__()

                                        self.yang_name = "send-buffer-size"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                            ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                        ])
                                        self.socket_send_size = None
                                        self.bgp_send_size = None
                                        self._segment_path = lambda: "send-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize, ['socket_send_size', 'bgp_send_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize']['meta_info']


                                class Timers(_Entity_):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers, self).__init__()

                                        self.yang_name = "timers"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keepalive_interval', (YLeaf(YType.uint32, 'keepalive-interval'), ['int'])),
                                            ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                            ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                        ])
                                        self.keepalive_interval = None
                                        self.hold_time = None
                                        self.min_accept_hold_time = None
                                        self._segment_path = lambda: "timers"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers, ['keepalive_interval', 'hold_time', 'min_accept_hold_time'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers']['meta_info']


                                class Keychain(_Entity_):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\: bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain, self).__init__()

                                        self.yang_name = "keychain"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keychain_disable', (YLeaf(YType.boolean, 'keychain-disable'), ['bool'])),
                                            ('keychain_name', (YLeaf(YType.str, 'keychain-name'), ['str'])),
                                        ])
                                        self.keychain_disable = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain, ['keychain_disable', 'keychain_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain']['meta_info']


                                class GracefulMaintenance(_Entity_):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:  :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:  :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance, self).__init__()

                                        self.yang_name = "graceful-maintenance"
                                        self.yang_parent_name = "neighbor-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("graceful-maintenance-local-preference", ("graceful_maintenance_local_preference", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference)), ("graceful-maintenance-as-prepends", ("graceful_maintenance_as_prepends", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('graceful_maintenance_activate', (YLeaf(YType.boolean, 'graceful-maintenance-activate'), ['bool'])),
                                        ])
                                        self.enable = None
                                        self.graceful_maintenance_activate = None

                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self
                                        self._children_name_map["graceful_maintenance_local_preference"] = "graceful-maintenance-local-preference"

                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self._children_name_map["graceful_maintenance_as_prepends"] = "graceful-maintenance-as-prepends"
                                        self._segment_path = lambda: "graceful-maintenance"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance, ['enable', 'graceful_maintenance_activate'], name, value)


                                    class GracefulMaintenanceLocalPreference(_Entity_):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference, self).__init__()

                                            self.yang_name = "graceful-maintenance-local-preference"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_loc_pref_disable', (YLeaf(YType.boolean, 'gshut-loc-pref-disable'), ['bool'])),
                                                ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                                            ])
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None
                                            self._segment_path = lambda: "graceful-maintenance-local-preference"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference, ['gshut_loc_pref_disable', 'local_preference'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(_Entity_):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\: int
                                        
                                        	**range:** 0..6
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends, self).__init__()

                                            self.yang_name = "graceful-maintenance-as-prepends"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_prepends_disable', (YLeaf(YType.boolean, 'gshut-prepends-disable'), ['bool'])),
                                                ('as_prepends', (YLeaf(YType.uint32, 'as-prepends'), ['int'])),
                                            ])
                                            self.gshut_prepends_disable = None
                                            self.as_prepends = None
                                            self._segment_path = lambda: "graceful-maintenance-as-prepends"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends, ['gshut_prepends_disable', 'as_prepends'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups']['meta_info']


                        class AfGroups(_Entity_):
                            """
                            AF\-group configuration
                            
                            .. attribute:: af_group
                            
                            	A particular BGP AF group
                            	**type**\: list of  		 :py:class:`AfGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups, self).__init__()

                                self.yang_name = "af-groups"
                                self.yang_parent_name = "bgp-entity"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("af-group", ("af_group", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup))])
                                self._leafs = OrderedDict()

                                self.af_group = YList(self)
                                self._segment_path = lambda: "af-groups"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups, [], name, value)


                            class AfGroup(_Entity_):
                                """
                                A particular BGP AF group
                                
                                .. attribute:: af_group_name  (key)
                                
                                	BGP AF group name
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: af_group_afs
                                
                                	AF group configuration table
                                	**type**\:  :py:class:`AfGroupAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup, self).__init__()

                                    self.yang_name = "af-group"
                                    self.yang_parent_name = "af-groups"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['af_group_name']
                                    self._child_classes = OrderedDict([("af-group-afs", ("af_group_afs", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs))])
                                    self._leafs = OrderedDict([
                                        ('af_group_name', (YLeaf(YType.str, 'af-group-name'), ['str'])),
                                    ])
                                    self.af_group_name = None

                                    self.af_group_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs()
                                    self.af_group_afs.parent = self
                                    self._children_name_map["af_group_afs"] = "af-group-afs"
                                    self._segment_path = lambda: "af-group" + "[af-group-name='" + str(self.af_group_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup, ['af_group_name'], name, value)


                                class AfGroupAfs(_Entity_):
                                    """
                                    AF group configuration table
                                    
                                    .. attribute:: af_group_af
                                    
                                    	Address family type of an AF group
                                    	**type**\: list of  		 :py:class:`AfGroupAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs, self).__init__()

                                        self.yang_name = "af-group-afs"
                                        self.yang_parent_name = "af-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("af-group-af", ("af_group_af", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf))])
                                        self._leafs = OrderedDict()

                                        self.af_group_af = YList(self)
                                        self._segment_path = lambda: "af-group-afs"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs, [], name, value)


                                    class AfGroupAf(_Entity_):
                                        """
                                        Address family type of an AF group
                                        
                                        .. attribute:: af_name  (key)
                                        
                                        	BGP AF group address family
                                        	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\: str
                                        
                                        .. attribute:: create
                                        
                                        	Create this address family group. Deletion of this object causes deletion of all the objects under AFGroup associated with this object
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:  :py:class:`BgpSignal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignal>`
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group. FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT. FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:  :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity>`
                                        
                                        .. attribute:: cluster_id_allow_equal
                                        
                                        	TRUE to disable cluster\-id check for first id in the cluster\-id\-list. FALSE to enable check for all cluster\-ids in the list
                                        	**type**\: bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable>`
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:  :py:class:`BgpSendMcastAttrCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfg>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:  :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV6>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:  :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_bridge_domain_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF EVPN Extranet Imported Routes
                                        	**type**\:  :py:class:`AdvertiseBridgeDomainImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV4>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:  :py:class:`BgpFlowspecValidationCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfg>`
                                        
                                        .. attribute:: advertise_l2vpn_evpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2vpnEvpn>`
                                        
                                        .. attribute:: advertise_local_l2vpn_evpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalL2vpnEvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2vpnEvpn>`
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:  :py:class:`BgpAfEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulation>`
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: enforce_multiple_labels
                                        
                                        	TRUE to enforce multiple labels support
                                        	**type**\: bool
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\: bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\: bool
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\: str
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:  :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:  :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin>`
                                        
                                        .. attribute:: update_out_orig_loop_chk_disable
                                        
                                        	Enable/disable Originator loop check for this neighbor\-group/af\-group
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:  :py:class:`BgpAigpCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfg>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\: int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:  :py:class:`BgpOrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrf>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client. FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\: bool
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:  :py:class:`Import <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import>`
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:  :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:  :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:  :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4>`
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\: bool
                                        
                                        .. attribute:: optimal_route_reflection_group
                                        
                                        	Name of the ORR group this neighbor is going to be part of
                                        	**type**\: str
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\: str
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:  :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:  :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:  :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf, self).__init__()

                                            self.yang_name = "af-group-af"
                                            self.yang_parent_name = "af-group-afs"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['af_name']
                                            self._child_classes = OrderedDict([("aigp-cost-community", ("aigp_cost_community", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity)), ("advertise-def-imp-disable-v6", ("advertise_def_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6)), ("advertise-disable", ("advertise_disable", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable)), ("maximum-prefixes", ("maximum_prefixes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.MaximumPrefixes)), ("advertise-bridge-domain-imp-disable-v6", ("advertise_bridge_domain_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV6)), ("remove-private-as-entire-as-path-inbound", ("remove_private_as_entire_as_path_inbound", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPathInbound)), ("advertise-def-imp-disable-v4", ("advertise_def_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4)), ("advertise-bridge-domain-imp-disable-v4", ("advertise_bridge_domain_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV4)), ("advertise-l2vpn-evpn", ("advertise_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2vpnEvpn)), ("advertise-local-l2vpn-evpn", ("advertise_local_l2vpn_evpn", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2vpnEvpn)), ("neighbor-af-long-lived-graceful-restart-stale-time", ("neighbor_af_long_lived_graceful_restart_stale_time", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime)), ("site-of-origin", ("site_of_origin", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin)), ("advertise-v6", ("advertise_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6)), ("advertise-local-v6", ("advertise_local_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6)), ("import", ("import_", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import)), ("default-originate", ("default_originate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate)), ("soft-reconfiguration", ("soft_reconfiguration", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration)), ("advertise-vrf-imp-disable-v6", ("advertise_vrf_imp_disable_v6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6)), ("advertise-v4", ("advertise_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4)), ("advertise-local-v4", ("advertise_local_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4)), ("remove-private-as-entire-as-path", ("remove_private_as_entire_as_path", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPath)), ("advertise-vrf-imp-disable-v4", ("advertise_vrf_imp_disable_v4", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4))])
                                            self._leafs = OrderedDict([
                                                ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                ('af_group', (YLeaf(YType.str, 'af-group'), ['str'])),
                                                ('create', (YLeaf(YType.empty, 'create'), ['Empty'])),
                                                ('neighbor_af_long_lived_graceful_restart_capable', (YLeaf(YType.boolean, 'neighbor-af-long-lived-graceful-restart-capable'), ['bool'])),
                                                ('l2vpn_signalling', (YLeaf(YType.enumeration, 'l2vpn-signalling'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSignal', '')])),
                                                ('send_ext_community_ebgp', (YLeaf(YType.boolean, 'send-ext-community-ebgp'), ['bool'])),
                                                ('accept_route_legacy_rt', (YLeaf(YType.boolean, 'accept-route-legacy-rt'), ['bool'])),
                                                ('cluster_id_allow_equal', (YLeaf(YType.boolean, 'cluster-id-allow-equal'), ['bool'])),
                                                ('send_community_ebgp', (YLeaf(YType.boolean, 'send-community-ebgp'), ['bool'])),
                                                ('send_multicast_attr', (YLeaf(YType.enumeration, 'send-multicast-attr'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSendMcastAttrCfg', '')])),
                                                ('next_hop_unchanged', (YLeaf(YType.boolean, 'next-hop-unchanged'), ['bool'])),
                                                ('advertise_local_labeled_route', (YLeaf(YType.enumeration, 'advertise-local-labeled-route'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                                ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                                ('flowspec_validation', (YLeaf(YType.enumeration, 'flowspec-validation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpFlowspecValidationCfg', '')])),
                                                ('encapsulation_type', (YLeaf(YType.enumeration, 'encapsulation-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAfEncapsulation', '')])),
                                                ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                                ('enforce_multiple_labels', (YLeaf(YType.boolean, 'enforce-multiple-labels'), ['bool'])),
                                                ('as_override', (YLeaf(YType.boolean, 'as-override'), ['bool'])),
                                                ('multipath', (YLeaf(YType.empty, 'multipath'), ['Empty'])),
                                                ('send_community_ebgp_graceful_shutdown', (YLeaf(YType.boolean, 'send-community-ebgp-graceful-shutdown'), ['bool'])),
                                                ('prefix_orf_policy', (YLeaf(YType.str, 'prefix-orf-policy'), ['str'])),
                                                ('update_out_orig_loop_chk_disable', (YLeaf(YType.empty, 'update-out-orig-loop-chk-disable'), ['Empty'])),
                                                ('aigp', (YLeaf(YType.enumeration, 'aigp'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('aigp_send_med', (YLeaf(YType.enumeration, 'aigp-send-med'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfg', '')])),
                                                ('allow_as_in', (YLeaf(YType.uint32, 'allow-as-in'), ['int'])),
                                                ('advertise_orf', (YLeaf(YType.enumeration, 'advertise-orf'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpOrf', '')])),
                                                ('route_reflector_client', (YLeaf(YType.boolean, 'route-reflector-client'), ['bool'])),
                                                ('next_hop_self', (YLeaf(YType.boolean, 'next-hop-self'), ['bool'])),
                                                ('route_policy_in', (YLeaf(YType.str, 'route-policy-in'), ['str'])),
                                                ('default_weight', (YLeaf(YType.uint32, 'default-weight'), ['int'])),
                                                ('next_hop_unchanged_multipath', (YLeaf(YType.boolean, 'next-hop-unchanged-multipath'), ['bool'])),
                                                ('optimal_route_reflection_group', (YLeaf(YType.str, 'optimal-route-reflection-group'), ['str'])),
                                                ('accept_own', (YLeaf(YType.boolean, 'accept-own'), ['bool'])),
                                                ('route_policy_out', (YLeaf(YType.str, 'route-policy-out'), ['str'])),
                                                ('advertise_permanent_network', (YLeaf(YType.empty, 'advertise-permanent-network'), ['Empty'])),
                                            ])
                                            self.af_name = None
                                            self.af_group = None
                                            self.create = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.l2vpn_signalling = None
                                            self.send_ext_community_ebgp = None
                                            self.accept_route_legacy_rt = None
                                            self.cluster_id_allow_equal = None
                                            self.send_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.next_hop_unchanged = None
                                            self.advertise_local_labeled_route = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.flowspec_validation = None
                                            self.encapsulation_type = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.enforce_multiple_labels = None
                                            self.as_override = None
                                            self.multipath = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.prefix_orf_policy = None
                                            self.update_out_orig_loop_chk_disable = None
                                            self.aigp = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.advertise_orf = None
                                            self.route_reflector_client = None
                                            self.next_hop_self = None
                                            self.route_policy_in = None
                                            self.default_weight = None
                                            self.next_hop_unchanged_multipath = None
                                            self.optimal_route_reflection_group = None
                                            self.accept_own = None
                                            self.route_policy_out = None
                                            self.advertise_permanent_network = None

                                            self.aigp_cost_community = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity()
                                            self.aigp_cost_community.parent = self
                                            self._children_name_map["aigp_cost_community"] = "aigp-cost-community"

                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v6"] = "advertise-def-imp-disable-v6"

                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self._children_name_map["advertise_disable"] = "advertise-disable"

                                            self.maximum_prefixes = None
                                            self._children_name_map["maximum_prefixes"] = "maximum-prefixes"

                                            self.advertise_bridge_domain_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV6()
                                            self.advertise_bridge_domain_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v6"] = "advertise-bridge-domain-imp-disable-v6"

                                            self.remove_private_as_entire_as_path_inbound = None
                                            self._children_name_map["remove_private_as_entire_as_path_inbound"] = "remove-private-as-entire-as-path-inbound"

                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_def_imp_disable_v4"] = "advertise-def-imp-disable-v4"

                                            self.advertise_bridge_domain_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV4()
                                            self.advertise_bridge_domain_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_bridge_domain_imp_disable_v4"] = "advertise-bridge-domain-imp-disable-v4"

                                            self.advertise_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2vpnEvpn()
                                            self.advertise_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_l2vpn_evpn"] = "advertise-l2vpn-evpn"

                                            self.advertise_local_l2vpn_evpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2vpnEvpn()
                                            self.advertise_local_l2vpn_evpn.parent = self
                                            self._children_name_map["advertise_local_l2vpn_evpn"] = "advertise-local-l2vpn-evpn"

                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self._children_name_map["neighbor_af_long_lived_graceful_restart_stale_time"] = "neighbor-af-long-lived-graceful-restart-stale-time"

                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self._children_name_map["site_of_origin"] = "site-of-origin"

                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self._children_name_map["advertise_v6"] = "advertise-v6"

                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self._children_name_map["advertise_local_v6"] = "advertise-local-v6"

                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import()
                                            self.import_.parent = self
                                            self._children_name_map["import_"] = "import"

                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self._children_name_map["default_originate"] = "default-originate"

                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self
                                            self._children_name_map["soft_reconfiguration"] = "soft-reconfiguration"

                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v6"] = "advertise-vrf-imp-disable-v6"

                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self._children_name_map["advertise_v4"] = "advertise-v4"

                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self._children_name_map["advertise_local_v4"] = "advertise-local-v4"

                                            self.remove_private_as_entire_as_path = None
                                            self._children_name_map["remove_private_as_entire_as_path"] = "remove-private-as-entire-as-path"

                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self._children_name_map["advertise_vrf_imp_disable_v4"] = "advertise-vrf-imp-disable-v4"
                                            self._segment_path = lambda: "af-group-af" + "[af-name='" + str(self.af_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf, ['af_name', 'af_group', 'create', 'neighbor_af_long_lived_graceful_restart_capable', 'l2vpn_signalling', 'send_ext_community_ebgp', 'accept_route_legacy_rt', 'cluster_id_allow_equal', 'send_community_ebgp', 'send_multicast_attr', 'next_hop_unchanged', 'advertise_local_labeled_route', 'rpki_origin_as_validation_disable', 'flowspec_validation', 'encapsulation_type', 'rpki_bestpath_origin_as_allow_invalid', 'enforce_multiple_labels', 'as_override', 'multipath', 'send_community_ebgp_graceful_shutdown', 'prefix_orf_policy', 'update_out_orig_loop_chk_disable', 'aigp', 'aigp_send_med', 'allow_as_in', 'advertise_orf', 'route_reflector_client', 'next_hop_self', 'route_policy_in', 'default_weight', 'next_hop_unchanged_multipath', 'optimal_route_reflection_group', 'accept_own', 'route_policy_out', 'advertise_permanent_network'], name, value)


                                        class AigpCostCommunity(_Entity_):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\: bool
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:  :py:class:`BgpAigpCfgPoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoi>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity, self).__init__()

                                                self.yang_name = "aigp-cost-community"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('cost_community_id', (YLeaf(YType.uint32, 'cost-community-id'), ['int'])),
                                                    ('transitive', (YLeaf(YType.boolean, 'transitive'), ['bool'])),
                                                    ('cost_community_poi_type', (YLeaf(YType.enumeration, 'cost-community-poi-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAigpCfgPoi', '')])),
                                                ])
                                                self.enable = None
                                                self.cost_community_id = None
                                                self.transitive = None
                                                self.cost_community_poi_type = None
                                                self._segment_path = lambda: "aigp-cost-community"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity, ['enable', 'cost_community_id', 'transitive', 'cost_community_poi_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v6"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(_Entity_):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable, self).__init__()

                                                self.yang_name = "advertise-disable"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-disable"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(_Entity_):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\: int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\: int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.MaximumPrefixes, self).__init__()

                                                self.yang_name = "maximum-prefixes"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('prefix_limit', (YLeaf(YType.uint32, 'prefix-limit'), ['int'])),
                                                    ('warning_percentage', (YLeaf(YType.uint32, 'warning-percentage'), ['int'])),
                                                    ('warning_only', (YLeaf(YType.boolean, 'warning-only'), ['bool'])),
                                                    ('restart_time', (YLeaf(YType.uint32, 'restart-time'), ['int'])),
                                                    ('discard_extra_paths', (YLeaf(YType.boolean, 'discard-extra-paths'), ['bool'])),
                                                ])
                                                self.prefix_limit = None
                                                self.warning_percentage = None
                                                self.warning_only = None
                                                self.restart_time = None
                                                self.discard_extra_paths = None
                                                self._segment_path = lambda: "maximum-prefixes"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.MaximumPrefixes, ['prefix_limit', 'warning_percentage', 'warning_only', 'restart_time', 'discard_extra_paths'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.MaximumPrefixes']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v6"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV6']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(_Entity_):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPathInbound, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path-inbound"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path-inbound"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPathInbound, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-def-imp-disable-v4"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-def-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseBridgeDomainImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF EVPN Extranet Imported
                                            Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-bridge-domain-imp-disable-v4"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-bridge-domain-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseBridgeDomainImpDisableV4']['meta_info']


                                        class AdvertiseL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-l2vpn-evpn"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2vpnEvpn']['meta_info']


                                        class AdvertiseLocalL2vpnEvpn(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2vpnEvpn, self).__init__()

                                                self.yang_name = "advertise-local-l2vpn-evpn"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-l2vpn-evpn"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2vpnEvpn, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2vpnEvpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(_Entity_):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime, self).__init__()

                                                self.yang_name = "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('stale_time_send', (YLeaf(YType.uint32, 'stale-time-send'), ['int'])),
                                                    ('stale_time_accept', (YLeaf(YType.uint32, 'stale-time-accept'), ['int'])),
                                                ])
                                                self.stale_time_send = None
                                                self.stale_time_accept = None
                                                self._segment_path = lambda: "neighbor-af-long-lived-graceful-restart-stale-time"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime, ['stale_time_send', 'stale_time_accept'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(_Entity_):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:  :py:class:`BgpSiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOrigin>`
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin, self).__init__()

                                                self.yang_name = "site-of-origin"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpSiteOfOrigin', '')])),
                                                    ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                                    ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                                                    ('as_index', (YLeaf(YType.uint32, 'as-index'), ['int'])),
                                                    ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                                    ('address_index', (YLeaf(YType.uint32, 'address-index'), ['int'])),
                                                ])
                                                self.type = None
                                                self.as_xx = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.address = None
                                                self.address_index = None
                                                self._segment_path = lambda: "site-of-origin"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin, ['type', 'as_xx', 'as_', 'as_index', 'address', 'address_index'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6, self).__init__()

                                                self.yang_name = "advertise-v6"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6, self).__init__()

                                                self.yang_name = "advertise-local-v6"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6']['meta_info']


                                        class Import(_Entity_):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\: bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import, self).__init__()

                                                self.yang_name = "import"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('import_stitching', (YLeaf(YType.boolean, 'import-stitching'), ['bool'])),
                                                    ('import_reoriginate', (YLeaf(YType.boolean, 'import-reoriginate'), ['bool'])),
                                                    ('import_reoriginate_stitching', (YLeaf(YType.boolean, 'import-reoriginate-stitching'), ['bool'])),
                                                ])
                                                self.import_stitching = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self._segment_path = lambda: "import"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import, ['import_stitching', 'import_reoriginate', 'import_reoriginate_stitching'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import']['meta_info']


                                        class DefaultOriginate(_Entity_):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate, self).__init__()

                                                self.yang_name = "default-originate"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.route_policy_name = None
                                                self._segment_path = lambda: "default-originate"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate, ['enable', 'route_policy_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(_Entity_):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration, self).__init__()

                                                self.yang_name = "soft-reconfiguration"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('inbound_soft', (YLeaf(YType.boolean, 'inbound-soft'), ['bool'])),
                                                    ('soft_always', (YLeaf(YType.boolean, 'soft-always'), ['bool'])),
                                                ])
                                                self.inbound_soft = None
                                                self.soft_always = None
                                                self._segment_path = lambda: "soft-reconfiguration"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration, ['inbound_soft', 'soft_always'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v6"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v6"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(_Entity_):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4, self).__init__()

                                                self.yang_name = "advertise-v4"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(_Entity_):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4, self).__init__()

                                                self.yang_name = "advertise-local-v4"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('reorg_option', (YLeaf(YType.enumeration, 'reorg-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-local-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4, ['af_name', 'reorg_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(_Entity_):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\: bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPath, self).__init__()

                                                self.yang_name = "remove-private-as-entire-as-path"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self.is_presence_container = True
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                    ('entire', (YLeaf(YType.boolean, 'entire'), ['bool'])),
                                                ])
                                                self.enable = None
                                                self.entire = None
                                                self._segment_path = lambda: "remove-private-as-entire-as-path"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPath, ['enable', 'entire'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(_Entity_):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:  :py:class:`BgpReorgOpt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOpt>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:  :py:class:`BgpAdvRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRt>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4, self).__init__()

                                                self.yang_name = "advertise-vrf-imp-disable-v4"
                                                self.yang_parent_name = "af-group-af"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                                    ('adv_option', (YLeaf(YType.enumeration, 'adv-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpReorgOpt', '')])),
                                                    ('rt_type', (YLeaf(YType.enumeration, 'rt-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpAdvRt', '')])),
                                                ])
                                                self.af_name = None
                                                self.adv_option = None
                                                self.rt_type = None
                                                self._segment_path = lambda: "advertise-vrf-imp-disable-v4"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4, ['af_name', 'adv_option', 'rt_type'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups']['meta_info']


                        class SessionGroups(_Entity_):
                            """
                            Session group configuration
                            
                            .. attribute:: session_group
                            
                            	A particular BGP session group
                            	**type**\: list of  		 :py:class:`SessionGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups, self).__init__()

                                self.yang_name = "session-groups"
                                self.yang_parent_name = "bgp-entity"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("session-group", ("session_group", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup))])
                                self._leafs = OrderedDict()

                                self.session_group = YList(self)
                                self._segment_path = lambda: "session-groups"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups, [], name, value)


                            class SessionGroup(_Entity_):
                                """
                                A particular BGP session group
                                
                                .. attribute:: session_group_name  (key)
                                
                                	BGP session group name
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\: str
                                
                                .. attribute:: local_address_sub_net
                                
                                	Local Address subnet of routing updates
                                	**type**\:  :py:class:`LocalAddressSubNet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddressSubNet>`
                                
                                .. attribute:: internal_vpn_client_ibgp_ce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\: bool
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:  :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress>`
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:  :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates>`
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:  :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop>`
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:  :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs>`
                                
                                .. attribute:: merge_safi1_and4_inbound_updates
                                
                                	TRUE to merge updates FALSE to not merge updates and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:  :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs>`
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\: bool
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\: str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:  :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:  :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:  :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  :py:class:`BgpNbrgr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpNbrgr>`
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\: bool
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\: int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:  :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss>`
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:  :py:class:`BgpTcpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpMode>`
                                
                                	**default value**\: either
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:  :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos>`
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:  :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering>`
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpEbgpSendDmzEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableMode>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:  :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut>`
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\: int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: ao_keychain
                                
                                	Set or disable AO based authentication
                                	**type**\:  :py:class:`AoKeychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AoKeychain>`
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:  :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize>`
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:  :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:  :py:class:`BgpBfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableMode>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:  :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\: int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers>`
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\: str
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:  :py:class:`BgpNbrCapAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfg>`
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:  :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain>`
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\: bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability. FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: create
                                
                                	Create this group. Deletion of this object causes deletion of all the objects under NeighborGroup/SessionGroup associated with this object
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:  :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup, self).__init__()

                                    self.yang_name = "session-group"
                                    self.yang_parent_name = "session-groups"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['session_group_name']
                                    self._child_classes = OrderedDict([("local-address-sub-net", ("local_address_sub_net", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddressSubNet)), ("local-address", ("local_address", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress)), ("bmp-activates", ("bmp_activates", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates)), ("ebgp-multihop", ("ebgp_multihop", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop)), ("remote-as", ("remote_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs)), ("local-as", ("local_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs)), ("password", ("password", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password)), ("advertisement-interval", ("advertisement_interval", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AdvertisementInterval)), ("neighbor-cluster-id", ("neighbor_cluster_id", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId)), ("tcpmss", ("tcpmss", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss)), ("tos", ("tos", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos)), ("update-in-filtering", ("update_in_filtering", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering)), ("msg-log-out", ("msg_log_out", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut)), ("ao-keychain", ("ao_keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AoKeychain)), ("receive-buffer-size", ("receive_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize)), ("msg-log-in", ("msg_log_in", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn)), ("send-buffer-size", ("send_buffer_size", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize)), ("timers", ("timers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers)), ("keychain", ("keychain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain)), ("graceful-maintenance", ("graceful_maintenance", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance))])
                                    self._leafs = OrderedDict([
                                        ('session_group_name', (YLeaf(YType.str, 'session-group-name'), ['str'])),
                                        ('session_group_add_member', (YLeaf(YType.str, 'session-group-add-member'), ['str'])),
                                        ('internal_vpn_client_ibgp_ce', (YLeaf(YType.boolean, 'internal-vpn-client-ibgp-ce'), ['bool'])),
                                        ('egress_peer_engineering', (YLeaf(YType.boolean, 'egress-peer-engineering'), ['bool'])),
                                        ('merge_safi1_and4_inbound_updates', (YLeaf(YType.boolean, 'merge-safi1-and4-inbound-updates'), ['bool'])),
                                        ('neighbor_graceful_restart_stalepath_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-stalepath-time'), ['int'])),
                                        ('shutdown', (YLeaf(YType.boolean, 'shutdown'), ['bool'])),
                                        ('description', (YLeaf(YType.str, 'description'), ['str'])),
                                        ('ebgp_recv_dmz', (YLeaf(YType.boolean, 'ebgp-recv-dmz'), ['bool'])),
                                        ('neighbor_graceful_restart', (YLeaf(YType.enumeration, 'neighbor-graceful-restart'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpNbrgr', '')])),
                                        ('enforce_first_as', (YLeaf(YType.boolean, 'enforce-first-as'), ['bool'])),
                                        ('idle_watch_time', (YLeaf(YType.uint32, 'idle-watch-time'), ['int'])),
                                        ('session_open_mode', (YLeaf(YType.enumeration, 'session-open-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpTcpMode', '')])),
                                        ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                        ('ebgp_send_dmz_enable_modes', (YLeaf(YType.enumeration, 'ebgp-send-dmz-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpEbgpSendDmzEnableMode', '')])),
                                        ('suppress_all_capabilities', (YLeaf(YType.boolean, 'suppress-all-capabilities'), ['bool'])),
                                        ('max_peers', (YLeaf(YType.uint32, 'max-peers'), ['int'])),
                                        ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                        ('additional_paths_send_capability', (YLeaf(YType.enumeration, 'additional-paths-send-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('propagate_dmz_link_bandwidth', (YLeaf(YType.boolean, 'propagate-dmz-link-bandwidth'), ['bool'])),
                                        ('bfd_enable_modes', (YLeaf(YType.enumeration, 'bfd-enable-modes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpBfdEnableMode', '')])),
                                        ('ttl_security', (YLeaf(YType.boolean, 'ttl-security'), ['bool'])),
                                        ('neighbor_graceful_restart_time', (YLeaf(YType.uint32, 'neighbor-graceful-restart-time'), ['int'])),
                                        ('bfd_multiplier', (YLeaf(YType.uint32, 'bfd-multiplier'), ['int'])),
                                        ('bfd_minimum_interval', (YLeaf(YType.uint32, 'bfd-minimum-interval'), ['int'])),
                                        ('remote_as_list', (YLeaf(YType.str, 'remote-as-list'), ['str'])),
                                        ('additional_paths_receive_capability', (YLeaf(YType.enumeration, 'additional-paths-receive-capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpNbrCapAdditionalPathsCfg', '')])),
                                        ('ignore_connected_check_ebgp', (YLeaf(YType.boolean, 'ignore-connected-check-ebgp'), ['bool'])),
                                        ('suppress_four_byte_as_capability', (YLeaf(YType.boolean, 'suppress-four-byte-as-capability'), ['bool'])),
                                        ('update_source_interface', (YLeaf(YType.str, 'update-source-interface'), ['str'])),
                                        ('create', (YLeaf(YType.empty, 'create'), ['Empty'])),
                                    ])
                                    self.session_group_name = None
                                    self.session_group_add_member = None
                                    self.internal_vpn_client_ibgp_ce = None
                                    self.egress_peer_engineering = None
                                    self.merge_safi1_and4_inbound_updates = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.shutdown = None
                                    self.description = None
                                    self.ebgp_recv_dmz = None
                                    self.neighbor_graceful_restart = None
                                    self.enforce_first_as = None
                                    self.idle_watch_time = None
                                    self.session_open_mode = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.suppress_all_capabilities = None
                                    self.max_peers = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.additional_paths_send_capability = None
                                    self.propagate_dmz_link_bandwidth = None
                                    self.bfd_enable_modes = None
                                    self.ttl_security = None
                                    self.neighbor_graceful_restart_time = None
                                    self.bfd_multiplier = None
                                    self.bfd_minimum_interval = None
                                    self.remote_as_list = None
                                    self.additional_paths_receive_capability = None
                                    self.ignore_connected_check_ebgp = None
                                    self.suppress_four_byte_as_capability = None
                                    self.update_source_interface = None
                                    self.create = None

                                    self.local_address_sub_net = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddressSubNet()
                                    self.local_address_sub_net.parent = self
                                    self._children_name_map["local_address_sub_net"] = "local-address-sub-net"

                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress()
                                    self.local_address.parent = self
                                    self._children_name_map["local_address"] = "local-address"

                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self._children_name_map["bmp_activates"] = "bmp-activates"

                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self._children_name_map["ebgp_multihop"] = "ebgp-multihop"

                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs()
                                    self.remote_as.parent = self
                                    self._children_name_map["remote_as"] = "remote-as"

                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs()
                                    self.local_as.parent = self
                                    self._children_name_map["local_as"] = "local-as"

                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password()
                                    self.password.parent = self
                                    self._children_name_map["password"] = "password"

                                    self.advertisement_interval = None
                                    self._children_name_map["advertisement_interval"] = "advertisement-interval"

                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self._children_name_map["neighbor_cluster_id"] = "neighbor-cluster-id"

                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss()
                                    self.tcpmss.parent = self
                                    self._children_name_map["tcpmss"] = "tcpmss"

                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos()
                                    self.tos.parent = self
                                    self._children_name_map["tos"] = "tos"

                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self._children_name_map["update_in_filtering"] = "update-in-filtering"

                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self._children_name_map["msg_log_out"] = "msg-log-out"

                                    self.ao_keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AoKeychain()
                                    self.ao_keychain.parent = self
                                    self._children_name_map["ao_keychain"] = "ao-keychain"

                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self._children_name_map["receive_buffer_size"] = "receive-buffer-size"

                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self._children_name_map["msg_log_in"] = "msg-log-in"

                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self._children_name_map["send_buffer_size"] = "send-buffer-size"

                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers()
                                    self.timers.parent = self
                                    self._children_name_map["timers"] = "timers"

                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain()
                                    self.keychain.parent = self
                                    self._children_name_map["keychain"] = "keychain"

                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self._children_name_map["graceful_maintenance"] = "graceful-maintenance"
                                    self._segment_path = lambda: "session-group" + "[session-group-name='" + str(self.session_group_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup, ['session_group_name', 'session_group_add_member', 'internal_vpn_client_ibgp_ce', 'egress_peer_engineering', 'merge_safi1_and4_inbound_updates', 'neighbor_graceful_restart_stalepath_time', 'shutdown', 'description', 'ebgp_recv_dmz', 'neighbor_graceful_restart', 'enforce_first_as', 'idle_watch_time', 'session_open_mode', 'rpki_origin_as_validation_disable', 'ebgp_send_dmz_enable_modes', 'suppress_all_capabilities', 'max_peers', 'rpki_bestpath_origin_as_allow_invalid', 'additional_paths_send_capability', 'propagate_dmz_link_bandwidth', 'bfd_enable_modes', 'ttl_security', 'neighbor_graceful_restart_time', 'bfd_multiplier', 'bfd_minimum_interval', 'remote_as_list', 'additional_paths_receive_capability', 'ignore_connected_check_ebgp', 'suppress_four_byte_as_capability', 'update_source_interface', 'create'], name, value)


                                class LocalAddressSubNet(_Entity_):
                                    """
                                    Local Address subnet of routing updates
                                    
                                    .. attribute:: local_addresss_subnet
                                    
                                    	local address subnet ip address 
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_len
                                    
                                    	prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddressSubNet, self).__init__()

                                        self.yang_name = "local-address-sub-net"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_addresss_subnet', (YLeaf(YType.str, 'local-addresss-subnet'), ['str','str'])),
                                            ('prefix_len', (YLeaf(YType.uint32, 'prefix-len'), ['int'])),
                                        ])
                                        self.local_addresss_subnet = None
                                        self.prefix_len = None
                                        self._segment_path = lambda: "local-address-sub-net"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddressSubNet, ['local_addresss_subnet', 'prefix_len'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddressSubNet']['meta_info']


                                class LocalAddress(_Entity_):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\: bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: union of the below types:
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    		**type**\: str
                                    
                                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress, self).__init__()

                                        self.yang_name = "local-address"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('local_address_disable', (YLeaf(YType.boolean, 'local-address-disable'), ['bool'])),
                                            ('local_ip_address', (YLeaf(YType.str, 'local-ip-address'), ['str','str'])),
                                        ])
                                        self.local_address_disable = None
                                        self.local_ip_address = None
                                        self._segment_path = lambda: "local-address"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress, ['local_address_disable', 'local_ip_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress']['meta_info']


                                class BmpActivates(_Entity_):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of  		 :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates, self).__init__()

                                        self.yang_name = "bmp-activates"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("bmp-activate", ("bmp_activate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates.BmpActivate))])
                                        self._leafs = OrderedDict()

                                        self.bmp_activate = YList(self)
                                        self._segment_path = lambda: "bmp-activates"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates, [], name, value)


                                    class BmpActivate(_Entity_):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  (key)
                                        
                                        	BMP Server ID
                                        	**type**\: int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates.BmpActivate, self).__init__()

                                            self.yang_name = "bmp-activate"
                                            self.yang_parent_name = "bmp-activates"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['server_id']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('server_id', (YLeaf(YType.uint32, 'server-id'), ['int'])),
                                            ])
                                            self.server_id = None
                                            self._segment_path = lambda: "bmp-activate" + "[server-id='" + str(self.server_id) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates.BmpActivate, ['server_id'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates.BmpActivate']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates']['meta_info']


                                class EbgpMultihop(_Entity_):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop, self).__init__()

                                        self.yang_name = "ebgp-multihop"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('max_hop_count', (YLeaf(YType.uint32, 'max-hop-count'), ['int'])),
                                            ('mpls_deactivation', (YLeaf(YType.boolean, 'mpls-deactivation'), ['bool'])),
                                        ])
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None
                                        self._segment_path = lambda: "ebgp-multihop"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop, ['max_hop_count', 'mpls_deactivation'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop']['meta_info']


                                class RemoteAs(_Entity_):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs, self).__init__()

                                        self.yang_name = "remote-as"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self._segment_path = lambda: "remote-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs, ['as_xx', 'as_yy'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs']['meta_info']


                                class LocalAs(_Entity_):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs, self).__init__()

                                        self.yang_name = "local-as"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ('no_prepend', (YLeaf(YType.empty, 'no-prepend'), ['Empty'])),
                                            ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                                            ('replace_as', (YLeaf(YType.empty, 'replace-as'), ['Empty'])),
                                            ('dual_as', (YLeaf(YType.empty, 'dual-as'), ['Empty'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.no_prepend = None
                                        self.disable = None
                                        self.replace_as = None
                                        self.dual_as = None
                                        self._segment_path = lambda: "local-as"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs, ['as_xx', 'as_yy', 'no_prepend', 'disable', 'replace_as', 'dual_as'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs']['meta_info']


                                class Password(_Entity_):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\: bool
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password, self).__init__()

                                        self.yang_name = "password"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('password_disable', (YLeaf(YType.boolean, 'password-disable'), ['bool'])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.password_disable = None
                                        self.password = None
                                        self._segment_path = lambda: "password"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password, ['password_disable', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password']['meta_info']


                                class AdvertisementInterval(_Entity_):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\: int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AdvertisementInterval, self).__init__()

                                        self.yang_name = "advertisement-interval"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                                            ('minimum_interval_msecs', (YLeaf(YType.uint32, 'minimum-interval-msecs'), ['int'])),
                                        ])
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None
                                        self._segment_path = lambda: "advertisement-interval"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AdvertisementInterval, ['minimum_interval', 'minimum_interval_msecs'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(_Entity_):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\: int
                                    
                                    	**range:** 1..4294967295
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId, self).__init__()

                                        self.yang_name = "neighbor-cluster-id"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                            ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str'])),
                                        ])
                                        self.cluster_id_number = None
                                        self.cluster_id_address = None
                                        self._segment_path = lambda: "neighbor-cluster-id"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId, ['cluster_id_number', 'cluster_id_address'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId']['meta_info']


                                class Tcpmss(_Entity_):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\: bool
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\: int
                                    
                                    	**range:** 68..10000
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss, self).__init__()

                                        self.yang_name = "tcpmss"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tcpmss_disable', (YLeaf(YType.boolean, 'tcpmss-disable'), ['bool'])),
                                            ('mss', (YLeaf(YType.uint32, 'mss'), ['int'])),
                                        ])
                                        self.tcpmss_disable = None
                                        self.mss = None
                                        self._segment_path = lambda: "tcpmss"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss, ['tcpmss_disable', 'mss'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss']['meta_info']


                                class Tos(_Entity_):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:  :py:class:`BgpTos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTos>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: union of the below types:
                                    
                                    		**type**\:  :py:class:`BgpPrecedenceDscp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscp>`
                                    
                                    		**type**\: int
                                    
                                    			**range:** 0..63
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos, self).__init__()

                                        self.yang_name = "tos"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpTos', '')])),
                                            ('value', (YLeaf(YType.str, 'value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpPrecedenceDscp', ''),'int'])),
                                        ])
                                        self.type = None
                                        self.value = None
                                        self._segment_path = lambda: "tos"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos, ['type', 'value'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos']['meta_info']


                                class UpdateInFiltering(_Entity_):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:  :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\: str
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering, self).__init__()

                                        self.yang_name = "update-in-filtering"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("update-in-filtering-message-buffers", ("update_in_filtering_message_buffers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('update_in_filtering_attribute_filter_group', (YLeaf(YType.str, 'update-in-filtering-attribute-filter-group'), ['str'])),
                                            ('update_in_filtering_syslog_disable', (YLeaf(YType.empty, 'update-in-filtering-syslog-disable'), ['Empty'])),
                                        ])
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_syslog_disable = None

                                        self.update_in_filtering_message_buffers = None
                                        self._children_name_map["update_in_filtering_message_buffers"] = "update-in-filtering-message-buffers"
                                        self._segment_path = lambda: "update-in-filtering"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering, ['enable', 'update_in_filtering_attribute_filter_group', 'update_in_filtering_syslog_disable'], name, value)


                                    class UpdateInFilteringMessageBuffers(_Entity_):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\: int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\: bool
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers, self).__init__()

                                            self.yang_name = "update-in-filtering-message-buffers"
                                            self.yang_parent_name = "update-in-filtering"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self.is_presence_container = True
                                            self._leafs = OrderedDict([
                                                ('number_of_buffers', (YLeaf(YType.uint32, 'number-of-buffers'), ['int'])),
                                                ('non_circular_buffer', (YLeaf(YType.boolean, 'non-circular-buffer'), ['bool'])),
                                            ])
                                            self.number_of_buffers = None
                                            self.non_circular_buffer = None
                                            self._segment_path = lambda: "update-in-filtering-message-buffers"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers, ['number_of_buffers', 'non_circular_buffer'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering']['meta_info']


                                class MsgLogOut(_Entity_):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut, self).__init__()

                                        self.yang_name = "msg-log-out"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-out"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut']['meta_info']


                                class AoKeychain(_Entity_):
                                    """
                                    Set or disable AO based authentication
                                    
                                    .. attribute:: ao_keychain_disable
                                    
                                    	TRUE to prevent this entity from having AO keychain based authentication even if the parent has one.FALSE to enable AO keychain based authentication
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_keychain_name
                                    
                                    	Name of the AO keychain associated with this neighbor
                                    	**type**\: str
                                    
                                    .. attribute:: ao_include_tcp_options
                                    
                                    	Include TCP options header with AO
                                    	**type**\: bool
                                    
                                    .. attribute:: ao_accept_mismatch_connection
                                    
                                    	Accept new connections even though AO mismatched
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AoKeychain, self).__init__()

                                        self.yang_name = "ao-keychain"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('ao_keychain_disable', (YLeaf(YType.boolean, 'ao-keychain-disable'), ['bool'])),
                                            ('ao_keychain_name', (YLeaf(YType.str, 'ao-keychain-name'), ['str'])),
                                            ('ao_include_tcp_options', (YLeaf(YType.boolean, 'ao-include-tcp-options'), ['bool'])),
                                            ('ao_accept_mismatch_connection', (YLeaf(YType.boolean, 'ao-accept-mismatch-connection'), ['bool'])),
                                        ])
                                        self.ao_keychain_disable = None
                                        self.ao_keychain_name = None
                                        self.ao_include_tcp_options = None
                                        self.ao_accept_mismatch_connection = None
                                        self._segment_path = lambda: "ao-keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AoKeychain, ['ao_keychain_disable', 'ao_keychain_name', 'ao_include_tcp_options', 'ao_accept_mismatch_connection'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AoKeychain']['meta_info']


                                class ReceiveBufferSize(_Entity_):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize, self).__init__()

                                        self.yang_name = "receive-buffer-size"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                            ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                        ])
                                        self.socket_receive_size = None
                                        self.bgp_receive_size = None
                                        self._segment_path = lambda: "receive-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize, ['socket_receive_size', 'bgp_receive_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(_Entity_):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\: int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\: bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn, self).__init__()

                                        self.yang_name = "msg-log-in"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('msg_buf_count', (YLeaf(YType.uint32, 'msg-buf-count'), ['int'])),
                                            ('msg_log_disable', (YLeaf(YType.boolean, 'msg-log-disable'), ['bool'])),
                                            ('msg_log_inherit_disable', (YLeaf(YType.boolean, 'msg-log-inherit-disable'), ['bool'])),
                                        ])
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None
                                        self._segment_path = lambda: "msg-log-in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn, ['msg_buf_count', 'msg_log_disable', 'msg_log_inherit_disable'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn']['meta_info']


                                class SendBufferSize(_Entity_):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\: int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize, self).__init__()

                                        self.yang_name = "send-buffer-size"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                            ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                        ])
                                        self.socket_send_size = None
                                        self.bgp_send_size = None
                                        self._segment_path = lambda: "send-buffer-size"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize, ['socket_send_size', 'bgp_send_size'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize']['meta_info']


                                class Timers(_Entity_):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers, self).__init__()

                                        self.yang_name = "timers"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keepalive_interval', (YLeaf(YType.uint32, 'keepalive-interval'), ['int'])),
                                            ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                            ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                        ])
                                        self.keepalive_interval = None
                                        self.hold_time = None
                                        self.min_accept_hold_time = None
                                        self._segment_path = lambda: "timers"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers, ['keepalive_interval', 'hold_time', 'min_accept_hold_time'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers']['meta_info']


                                class Keychain(_Entity_):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\: bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain, self).__init__()

                                        self.yang_name = "keychain"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('keychain_disable', (YLeaf(YType.boolean, 'keychain-disable'), ['bool'])),
                                            ('keychain_name', (YLeaf(YType.str, 'keychain-name'), ['str'])),
                                        ])
                                        self.keychain_disable = None
                                        self.keychain_name = None
                                        self._segment_path = lambda: "keychain"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain, ['keychain_disable', 'keychain_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain']['meta_info']


                                class GracefulMaintenance(_Entity_):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:  :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:  :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance, self).__init__()

                                        self.yang_name = "graceful-maintenance"
                                        self.yang_parent_name = "session-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("graceful-maintenance-local-preference", ("graceful_maintenance_local_preference", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference)), ("graceful-maintenance-as-prepends", ("graceful_maintenance_as_prepends", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends))])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('graceful_maintenance_activate', (YLeaf(YType.boolean, 'graceful-maintenance-activate'), ['bool'])),
                                        ])
                                        self.enable = None
                                        self.graceful_maintenance_activate = None

                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self
                                        self._children_name_map["graceful_maintenance_local_preference"] = "graceful-maintenance-local-preference"

                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self._children_name_map["graceful_maintenance_as_prepends"] = "graceful-maintenance-as-prepends"
                                        self._segment_path = lambda: "graceful-maintenance"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance, ['enable', 'graceful_maintenance_activate'], name, value)


                                    class GracefulMaintenanceLocalPreference(_Entity_):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference, self).__init__()

                                            self.yang_name = "graceful-maintenance-local-preference"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_loc_pref_disable', (YLeaf(YType.boolean, 'gshut-loc-pref-disable'), ['bool'])),
                                                ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                                            ])
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None
                                            self._segment_path = lambda: "graceful-maintenance-local-preference"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference, ['gshut_loc_pref_disable', 'local_preference'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(_Entity_):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\: int
                                        
                                        	**range:** 0..6
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends, self).__init__()

                                            self.yang_name = "graceful-maintenance-as-prepends"
                                            self.yang_parent_name = "graceful-maintenance"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('gshut_prepends_disable', (YLeaf(YType.boolean, 'gshut-prepends-disable'), ['bool'])),
                                                ('as_prepends', (YLeaf(YType.uint32, 'as-prepends'), ['int'])),
                                            ])
                                            self.gshut_prepends_disable = None
                                            self.as_prepends = None
                                            self._segment_path = lambda: "graceful-maintenance-as-prepends"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends, ['gshut_prepends_disable', 'as_prepends'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity']['meta_info']


                    class Global(_Entity_):
                        """
                        Global default config
                        
                        .. attribute:: cluster_id
                        
                        	Configure Route\-Reflector Cluster\-id
                        	**type**\:  :py:class:`ClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ClusterId>`
                        
                        .. attribute:: write_limit
                        
                        	Set write\-queue limit for each update group
                        	**type**\:  :py:class:`WriteLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.WriteLimit>`
                        
                        .. attribute:: update_delay
                        
                        	Set the max initial delay for sending updates
                        	**type**\:  :py:class:`UpdateDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.UpdateDelay>`
                        
                        .. attribute:: as_league
                        
                        	AS League
                        	**type**\:  :py:class:`AsLeague <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague>`
                        
                        .. attribute:: rpki_servers
                        
                        	RPKI server configuration
                        	**type**\:  :py:class:`RpkiServers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers>`
                        
                        .. attribute:: as_list_groups
                        
                        	AS\-list group lists
                        	**type**\:  :py:class:`AsListGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups>`
                        
                        .. attribute:: limits
                        
                        	Maximum number that can be configured
                        	**type**\:  :py:class:`Limits <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Limits>`
                        
                        .. attribute:: confederation_domain
                        
                        	Set routing domain confederation AS
                        	**type**\:  :py:class:`ConfederationDomain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationDomain>`
                        
                        .. attribute:: confederation_peer_ases
                        
                        	Define peer ASes in BGP confederation
                        	**type**\:  :py:class:`ConfederationPeerAses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses>`
                        
                        .. attribute:: attribute_filter_groups
                        
                        	Attribute\-filter groups list
                        	**type**\:  :py:class:`AttributeFilterGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups>`
                        
                        .. attribute:: segment_routing_global
                        
                        	Segment\-routing Gbl Configurations
                        	**type**\:  :py:class:`SegmentRoutingGlobal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal>`
                        
                        .. attribute:: global_afs
                        
                        	Global AF\-specific configuration
                        	**type**\:  :py:class:`GlobalAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs>`
                        
                        .. attribute:: global_graceful_maintenance_activate
                        
                        	Graceful maintenance activate configurations
                        	**type**\:  :py:class:`GlobalGracefulMaintenanceActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate>`
                        
                        .. attribute:: rpki_static_routes
                        
                        	RPKI static route configuration
                        	**type**\:  :py:class:`RpkiStaticRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes>`
                        
                        .. attribute:: graceful_restart
                        
                        	Enable graceful restart support
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_out_logging
                        
                        	Enables logging of update generation events
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: install_diversion
                        
                        	Install diversion path to RIB/CEF
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: next_hop_trigger_delay
                        
                        	Set the delay for triggering nexthop recalculations
                        	**type**\: int
                        
                        	**range:** 0..300
                        
                        	**units**\: second
                        
                        	**default value**\: 5
                        
                        .. attribute:: nsr
                        
                        	TRUE to Enable non\-stop routing supportFALSE to Disable non\-stop routing support
                        	**type**\: bool
                        
                        .. attribute:: neighbor_logging_detail
                        
                        	Include extra detail in neighbor change messages
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: mvpn
                        
                        	Connect to PIM/PIM6
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rpki_origin_as_validation_disable
                        
                        	RPKI origin\-AS validation disable
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: global_scan_time
                        
                        	Configure background scanner interval for generic scanner
                        	**type**\: int
                        
                        	**range:** 5..3600
                        
                        	**units**\: second
                        
                        	**default value**\: 60
                        
                        .. attribute:: rpki_origin_as_validation_time
                        
                        	Prefix validation time (in seconds). Range \: 5 \- 60. Specify 0 for timer off
                        	**type**\: int
                        
                        	**range:** 0..60
                        
                        	**units**\: second
                        
                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                        
                        	RPKI bestpath origin\-AS allow invalid
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: graceful_restart_purge_time
                        
                        	Time before stale routes are purged
                        	**type**\: int
                        
                        	**range:** 1..6000
                        
                        	**units**\: second
                        
                        	**default value**\: 600
                        
                        .. attribute:: enforce_ibgp_out_policy
                        
                        	Allow all attributes to be modified by outbound policy for iBGP peers
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_limit_process
                        
                        	Upper bound on update generation transient memory usage for the process
                        	**type**\: int
                        
                        	**range:** 16..2048
                        
                        	**units**\: megabyte
                        
                        	**default value**\: 512
                        
                        .. attribute:: graceful_restart_time
                        
                        	Restart time advertised to neighbors
                        	**type**\: int
                        
                        	**range:** 1..4095
                        
                        	**units**\: second
                        
                        	**default value**\: 120
                        
                        .. attribute:: update_error_handling_basic_ibgp_disable
                        
                        	Inbound update basic error\-handling for IBGP neighbors
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: read_only
                        
                        	Allow duplicate table config and disable update generation
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: graceful_restart_stalepath_time
                        
                        	Maximum time to wait for restart of GR capable peers
                        	**type**\: int
                        
                        	**range:** 1..4095
                        
                        	**units**\: second
                        
                        	**default value**\: 360
                        
                        .. attribute:: update_error_handling_extended_ebgp
                        
                        	Inbound update extended error\-handling for EBGP neighbors
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_error_handling_basic_ebgp_disable
                        
                        	Inbound update basic error\-handling for EBGP neighbors
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: graceful_reset
                        
                        	Reset gracefully if configuration change forces a peer reset
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: igp_loop_check
                        
                        	Enable AS\-path loop checking for iBGP peers
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_error_handling_extended_ibgp
                        
                        	Inbound update extended error\-handling for IBGP neighbors
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: router_id
                        
                        	Configure Router\-id
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**default value**\: 0.0.0.0
                        
                        .. attribute:: disable_enforce_first_as
                        
                        	Disable enforce the first AS for EBGP routes
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_cost_community
                        
                        	Change default route selection criteria to ignore cost community comparison
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_aigp_ignore
                        
                        	Change default route selection criteria to ignore AIGP unless both paths whichare compared have AIGP attribute
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_as_path_length
                        
                        	Change default route selection criteria to ignore AS path length
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: igp_redist_internal
                        
                        	Allow redistribution of iBGP into IGPs (dangerous)
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: multi_path_as_path_ignore_onwards
                        
                        	Change default multi\-route selection criteria to ignore everything onwards as\-path check
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: disable_fast_external_fallover
                        
                        	Disable immediate reset session if a link to a directly connected external peer goes down
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: unsafe_ebgp_policy
                        
                        	If eBGP neighbor is configured without a route\-policy,the routes from that neighbor are not accepted by default.This knob overrides the default behavior. When configured,routes from the eBGP neighbors with no policy are accepted
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: default_metric
                        
                        	Default redistributed metric
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: default_info_originate
                        
                        	Control distribution of default information
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rpki_origin_as_validity_signal_ibgp
                        
                        	RPKI origin\-AS validity signal ibgp
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rpki_bestpath_use_origin_as_validity
                        
                        	RPKI bestpath use origin\-AS validity
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_confederation_paths
                        
                        	Change default route selection criteria and allow the comparing of MED among confederation paths
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_as_multipath_relax
                        
                        	Change default multi\-route selection criteria to relax as\-path checking \- only require same aspath length
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: mpls_activated_interfaces
                        
                        	Configure list of MPLS activated interfaces
                        	**type**\:  :py:class:`MplsActivatedInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces>`
                        
                        .. attribute:: disable_auto_soft_reset
                        
                        	Disable automatic soft peer reset on policy reconfiguration
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: disable_msg_log
                        
                        	Disable inbound and outbound messagelogging for all neighbors under the vrf
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: global_timers
                        
                        	Adjust routing timers
                        	**type**\:  :py:class:`GlobalTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalTimers>`
                        
                        .. attribute:: best_path_igp_metric_ignore
                        
                        	Change default route selection criteria to ignore IGP Metric 
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: next_hop_res_allow_default
                        
                        	Enable path resolution for nexthops using default route
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: next_hop_mpls_fwd_ibgp
                        
                        	Enable mpls forwarding path for ibgp learnt nexthops
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: bfd
                        
                        	BFD configuration
                        	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Bfd>`
                        
                        .. attribute:: disable_neighbor_logging
                        
                        	Disable neighbor change logging
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: send_socket_buffer_sizes
                        
                        	set socket parameters
                        	**type**\:  :py:class:`SendSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SendSocketBufferSizes>`
                        
                        .. attribute:: best_path_med_always
                        
                        	Change default route selection criteria and allow comparing of MED from different neighbors
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: receive_socket_buffer_sizes
                        
                        	Set socket and BGP receive buffer sizes
                        	**type**\:  :py:class:`ReceiveSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ReceiveSocketBufferSizes>`
                        
                        .. attribute:: best_path_router_id
                        
                        	Change default route selection criteria and compare router\-id for identical EBGP paths
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_med_missing
                        
                        	Treat missing MED as the least preferred one
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: local_preference
                        
                        	Configure default local preference
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**default value**\: 100
                        
                        

                        """

                        _prefix = 'ipv4-bgp-cfg'
                        _revision = '2018-06-15'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global, self).__init__()

                            self.yang_name = "global"
                            self.yang_parent_name = "default-vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("cluster-id", ("cluster_id", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ClusterId)), ("write-limit", ("write_limit", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.WriteLimit)), ("update-delay", ("update_delay", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.UpdateDelay)), ("as-league", ("as_league", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague)), ("rpki-servers", ("rpki_servers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers)), ("as-list-groups", ("as_list_groups", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups)), ("limits", ("limits", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Limits)), ("confederation-domain", ("confederation_domain", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationDomain)), ("confederation-peer-ases", ("confederation_peer_ases", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses)), ("attribute-filter-groups", ("attribute_filter_groups", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups)), ("segment-routing-global", ("segment_routing_global", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal)), ("global-afs", ("global_afs", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs)), ("global-graceful-maintenance-activate", ("global_graceful_maintenance_activate", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate)), ("rpki-static-routes", ("rpki_static_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes)), ("mpls-activated-interfaces", ("mpls_activated_interfaces", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces)), ("global-timers", ("global_timers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalTimers)), ("bfd", ("bfd", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Bfd)), ("send-socket-buffer-sizes", ("send_socket_buffer_sizes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SendSocketBufferSizes)), ("receive-socket-buffer-sizes", ("receive_socket_buffer_sizes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ReceiveSocketBufferSizes))])
                            self._leafs = OrderedDict([
                                ('graceful_restart', (YLeaf(YType.empty, 'graceful-restart'), ['Empty'])),
                                ('update_out_logging', (YLeaf(YType.empty, 'update-out-logging'), ['Empty'])),
                                ('install_diversion', (YLeaf(YType.empty, 'install-diversion'), ['Empty'])),
                                ('next_hop_trigger_delay', (YLeaf(YType.uint32, 'next-hop-trigger-delay'), ['int'])),
                                ('nsr', (YLeaf(YType.boolean, 'nsr'), ['bool'])),
                                ('neighbor_logging_detail', (YLeaf(YType.empty, 'neighbor-logging-detail'), ['Empty'])),
                                ('mvpn', (YLeaf(YType.empty, 'mvpn'), ['Empty'])),
                                ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                ('global_scan_time', (YLeaf(YType.uint32, 'global-scan-time'), ['int'])),
                                ('rpki_origin_as_validation_time', (YLeaf(YType.uint32, 'rpki-origin-as-validation-time'), ['int'])),
                                ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                ('graceful_restart_purge_time', (YLeaf(YType.uint32, 'graceful-restart-purge-time'), ['int'])),
                                ('enforce_ibgp_out_policy', (YLeaf(YType.empty, 'enforce-ibgp-out-policy'), ['Empty'])),
                                ('update_limit_process', (YLeaf(YType.uint32, 'update-limit-process'), ['int'])),
                                ('graceful_restart_time', (YLeaf(YType.uint32, 'graceful-restart-time'), ['int'])),
                                ('update_error_handling_basic_ibgp_disable', (YLeaf(YType.empty, 'update-error-handling-basic-ibgp-disable'), ['Empty'])),
                                ('read_only', (YLeaf(YType.empty, 'read-only'), ['Empty'])),
                                ('graceful_restart_stalepath_time', (YLeaf(YType.uint32, 'graceful-restart-stalepath-time'), ['int'])),
                                ('update_error_handling_extended_ebgp', (YLeaf(YType.empty, 'update-error-handling-extended-ebgp'), ['Empty'])),
                                ('update_error_handling_basic_ebgp_disable', (YLeaf(YType.empty, 'update-error-handling-basic-ebgp-disable'), ['Empty'])),
                                ('graceful_reset', (YLeaf(YType.empty, 'graceful-reset'), ['Empty'])),
                                ('igp_loop_check', (YLeaf(YType.empty, 'igp-loop-check'), ['Empty'])),
                                ('update_error_handling_extended_ibgp', (YLeaf(YType.empty, 'update-error-handling-extended-ibgp'), ['Empty'])),
                                ('router_id', (YLeaf(YType.str, 'router-id'), ['str'])),
                                ('disable_enforce_first_as', (YLeaf(YType.empty, 'disable-enforce-first-as'), ['Empty'])),
                                ('best_path_cost_community', (YLeaf(YType.empty, 'best-path-cost-community'), ['Empty'])),
                                ('best_path_aigp_ignore', (YLeaf(YType.empty, 'best-path-aigp-ignore'), ['Empty'])),
                                ('best_path_as_path_length', (YLeaf(YType.empty, 'best-path-as-path-length'), ['Empty'])),
                                ('igp_redist_internal', (YLeaf(YType.empty, 'igp-redist-internal'), ['Empty'])),
                                ('multi_path_as_path_ignore_onwards', (YLeaf(YType.empty, 'multi-path-as-path-ignore-onwards'), ['Empty'])),
                                ('disable_fast_external_fallover', (YLeaf(YType.empty, 'disable-fast-external-fallover'), ['Empty'])),
                                ('unsafe_ebgp_policy', (YLeaf(YType.empty, 'unsafe-ebgp-policy'), ['Empty'])),
                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                ('default_info_originate', (YLeaf(YType.empty, 'default-info-originate'), ['Empty'])),
                                ('rpki_origin_as_validity_signal_ibgp', (YLeaf(YType.empty, 'rpki-origin-as-validity-signal-ibgp'), ['Empty'])),
                                ('rpki_bestpath_use_origin_as_validity', (YLeaf(YType.empty, 'rpki-bestpath-use-origin-as-validity'), ['Empty'])),
                                ('best_path_confederation_paths', (YLeaf(YType.empty, 'best-path-confederation-paths'), ['Empty'])),
                                ('best_path_as_multipath_relax', (YLeaf(YType.empty, 'best-path-as-multipath-relax'), ['Empty'])),
                                ('disable_auto_soft_reset', (YLeaf(YType.empty, 'disable-auto-soft-reset'), ['Empty'])),
                                ('disable_msg_log', (YLeaf(YType.empty, 'disable-msg-log'), ['Empty'])),
                                ('best_path_igp_metric_ignore', (YLeaf(YType.empty, 'best-path-igp-metric-ignore'), ['Empty'])),
                                ('next_hop_res_allow_default', (YLeaf(YType.empty, 'next-hop-res-allow-default'), ['Empty'])),
                                ('next_hop_mpls_fwd_ibgp', (YLeaf(YType.empty, 'next-hop-mpls-fwd-ibgp'), ['Empty'])),
                                ('disable_neighbor_logging', (YLeaf(YType.empty, 'disable-neighbor-logging'), ['Empty'])),
                                ('best_path_med_always', (YLeaf(YType.empty, 'best-path-med-always'), ['Empty'])),
                                ('best_path_router_id', (YLeaf(YType.empty, 'best-path-router-id'), ['Empty'])),
                                ('best_path_med_missing', (YLeaf(YType.empty, 'best-path-med-missing'), ['Empty'])),
                                ('local_preference', (YLeaf(YType.uint32, 'local-preference'), ['int'])),
                            ])
                            self.graceful_restart = None
                            self.update_out_logging = None
                            self.install_diversion = None
                            self.next_hop_trigger_delay = None
                            self.nsr = None
                            self.neighbor_logging_detail = None
                            self.mvpn = None
                            self.rpki_origin_as_validation_disable = None
                            self.global_scan_time = None
                            self.rpki_origin_as_validation_time = None
                            self.rpki_bestpath_origin_as_allow_invalid = None
                            self.graceful_restart_purge_time = None
                            self.enforce_ibgp_out_policy = None
                            self.update_limit_process = None
                            self.graceful_restart_time = None
                            self.update_error_handling_basic_ibgp_disable = None
                            self.read_only = None
                            self.graceful_restart_stalepath_time = None
                            self.update_error_handling_extended_ebgp = None
                            self.update_error_handling_basic_ebgp_disable = None
                            self.graceful_reset = None
                            self.igp_loop_check = None
                            self.update_error_handling_extended_ibgp = None
                            self.router_id = None
                            self.disable_enforce_first_as = None
                            self.best_path_cost_community = None
                            self.best_path_aigp_ignore = None
                            self.best_path_as_path_length = None
                            self.igp_redist_internal = None
                            self.multi_path_as_path_ignore_onwards = None
                            self.disable_fast_external_fallover = None
                            self.unsafe_ebgp_policy = None
                            self.default_metric = None
                            self.default_info_originate = None
                            self.rpki_origin_as_validity_signal_ibgp = None
                            self.rpki_bestpath_use_origin_as_validity = None
                            self.best_path_confederation_paths = None
                            self.best_path_as_multipath_relax = None
                            self.disable_auto_soft_reset = None
                            self.disable_msg_log = None
                            self.best_path_igp_metric_ignore = None
                            self.next_hop_res_allow_default = None
                            self.next_hop_mpls_fwd_ibgp = None
                            self.disable_neighbor_logging = None
                            self.best_path_med_always = None
                            self.best_path_router_id = None
                            self.best_path_med_missing = None
                            self.local_preference = None

                            self.cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ClusterId()
                            self.cluster_id.parent = self
                            self._children_name_map["cluster_id"] = "cluster-id"

                            self.write_limit = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.WriteLimit()
                            self.write_limit.parent = self
                            self._children_name_map["write_limit"] = "write-limit"

                            self.update_delay = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.UpdateDelay()
                            self.update_delay.parent = self
                            self._children_name_map["update_delay"] = "update-delay"

                            self.as_league = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague()
                            self.as_league.parent = self
                            self._children_name_map["as_league"] = "as-league"

                            self.rpki_servers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers()
                            self.rpki_servers.parent = self
                            self._children_name_map["rpki_servers"] = "rpki-servers"

                            self.as_list_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups()
                            self.as_list_groups.parent = self
                            self._children_name_map["as_list_groups"] = "as-list-groups"

                            self.limits = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Limits()
                            self.limits.parent = self
                            self._children_name_map["limits"] = "limits"

                            self.confederation_domain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationDomain()
                            self.confederation_domain.parent = self
                            self._children_name_map["confederation_domain"] = "confederation-domain"

                            self.confederation_peer_ases = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses()
                            self.confederation_peer_ases.parent = self
                            self._children_name_map["confederation_peer_ases"] = "confederation-peer-ases"

                            self.attribute_filter_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups()
                            self.attribute_filter_groups.parent = self
                            self._children_name_map["attribute_filter_groups"] = "attribute-filter-groups"

                            self.segment_routing_global = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal()
                            self.segment_routing_global.parent = self
                            self._children_name_map["segment_routing_global"] = "segment-routing-global"

                            self.global_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs()
                            self.global_afs.parent = self
                            self._children_name_map["global_afs"] = "global-afs"

                            self.global_graceful_maintenance_activate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate()
                            self.global_graceful_maintenance_activate.parent = self
                            self._children_name_map["global_graceful_maintenance_activate"] = "global-graceful-maintenance-activate"

                            self.rpki_static_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes()
                            self.rpki_static_routes.parent = self
                            self._children_name_map["rpki_static_routes"] = "rpki-static-routes"

                            self.mpls_activated_interfaces = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces()
                            self.mpls_activated_interfaces.parent = self
                            self._children_name_map["mpls_activated_interfaces"] = "mpls-activated-interfaces"

                            self.global_timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalTimers()
                            self.global_timers.parent = self
                            self._children_name_map["global_timers"] = "global-timers"

                            self.bfd = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Bfd()
                            self.bfd.parent = self
                            self._children_name_map["bfd"] = "bfd"

                            self.send_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SendSocketBufferSizes()
                            self.send_socket_buffer_sizes.parent = self
                            self._children_name_map["send_socket_buffer_sizes"] = "send-socket-buffer-sizes"

                            self.receive_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ReceiveSocketBufferSizes()
                            self.receive_socket_buffer_sizes.parent = self
                            self._children_name_map["receive_socket_buffer_sizes"] = "receive-socket-buffer-sizes"
                            self._segment_path = lambda: "global"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global, ['graceful_restart', 'update_out_logging', 'install_diversion', 'next_hop_trigger_delay', 'nsr', 'neighbor_logging_detail', 'mvpn', 'rpki_origin_as_validation_disable', 'global_scan_time', 'rpki_origin_as_validation_time', 'rpki_bestpath_origin_as_allow_invalid', 'graceful_restart_purge_time', 'enforce_ibgp_out_policy', 'update_limit_process', 'graceful_restart_time', 'update_error_handling_basic_ibgp_disable', 'read_only', 'graceful_restart_stalepath_time', 'update_error_handling_extended_ebgp', 'update_error_handling_basic_ebgp_disable', 'graceful_reset', 'igp_loop_check', 'update_error_handling_extended_ibgp', 'router_id', 'disable_enforce_first_as', 'best_path_cost_community', 'best_path_aigp_ignore', 'best_path_as_path_length', 'igp_redist_internal', 'multi_path_as_path_ignore_onwards', 'disable_fast_external_fallover', 'unsafe_ebgp_policy', 'default_metric', 'default_info_originate', 'rpki_origin_as_validity_signal_ibgp', 'rpki_bestpath_use_origin_as_validity', 'best_path_confederation_paths', 'best_path_as_multipath_relax', 'disable_auto_soft_reset', 'disable_msg_log', 'best_path_igp_metric_ignore', 'next_hop_res_allow_default', 'next_hop_mpls_fwd_ibgp', 'disable_neighbor_logging', 'best_path_med_always', 'best_path_router_id', 'best_path_med_missing', 'local_preference'], name, value)


                        class ClusterId(_Entity_):
                            """
                            Configure Route\-Reflector Cluster\-id
                            
                            .. attribute:: cluster_id_number
                            
                            	Route\-Reflector Cluster ID as 32 bit quantity
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: cluster_id_address
                            
                            	Route\-Reflector Cluster ID in IPV4 address format
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ClusterId, self).__init__()

                                self.yang_name = "cluster-id"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                    ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str'])),
                                ])
                                self.cluster_id_number = None
                                self.cluster_id_address = None
                                self._segment_path = lambda: "cluster-id"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ClusterId, ['cluster_id_number', 'cluster_id_address'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ClusterId']['meta_info']


                        class WriteLimit(_Entity_):
                            """
                            Set write\-queue limit for each update group
                            
                            .. attribute:: formatted_messages
                            
                            	Number of messages to be formatted per update group
                            	**type**\: int
                            
                            	**range:** 500..100000000
                            
                            	**default value**\: 50000
                            
                            .. attribute:: enqueued_messages
                            
                            	Number of messages that can be enqueued in total
                            	**type**\: int
                            
                            	**range:** 500..100000000
                            
                            	**default value**\: 250000
                            
                            .. attribute:: desynchronize
                            
                            	TRUE to enable desynchronization, FALSE otherwise
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.WriteLimit, self).__init__()

                                self.yang_name = "write-limit"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('formatted_messages', (YLeaf(YType.uint32, 'formatted-messages'), ['int'])),
                                    ('enqueued_messages', (YLeaf(YType.uint32, 'enqueued-messages'), ['int'])),
                                    ('desynchronize', (YLeaf(YType.boolean, 'desynchronize'), ['bool'])),
                                ])
                                self.formatted_messages = None
                                self.enqueued_messages = None
                                self.desynchronize = None
                                self._segment_path = lambda: "write-limit"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.WriteLimit, ['formatted_messages', 'enqueued_messages', 'desynchronize'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.WriteLimit']['meta_info']


                        class UpdateDelay(_Entity_):
                            """
                            Set the max initial delay for sending
                            updates
                            
                            .. attribute:: delay
                            
                            	Delay value (seconds)
                            	**type**\: int
                            
                            	**range:** 0..3600
                            
                            	**units**\: second
                            
                            	**default value**\: 120
                            
                            .. attribute:: always
                            
                            	Set to TRUE to disable keepalive trigger bestpath and delay is enforced
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.UpdateDelay, self).__init__()

                                self.yang_name = "update-delay"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('delay', (YLeaf(YType.uint32, 'delay'), ['int'])),
                                    ('always', (YLeaf(YType.boolean, 'always'), ['bool'])),
                                ])
                                self.delay = None
                                self.always = None
                                self._segment_path = lambda: "update-delay"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.UpdateDelay, ['delay', 'always'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.UpdateDelay']['meta_info']


                        class AsLeague(_Entity_):
                            """
                            AS League
                            
                            .. attribute:: peers
                            
                            	AS League Peers
                            	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers>`
                            
                            .. attribute:: enable
                            
                            	AS League creation
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague, self).__init__()

                                self.yang_name = "as-league"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("peers", ("peers", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers))])
                                self._leafs = OrderedDict([
                                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                ])
                                self.enable = None

                                self.peers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers()
                                self.peers.parent = self
                                self._children_name_map["peers"] = "peers"
                                self._segment_path = lambda: "as-league"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague, ['enable'], name, value)


                            class Peers(_Entity_):
                                """
                                AS League Peers
                                
                                .. attribute:: peer
                                
                                	AS League Peer AS
                                	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers.Peer>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers, self).__init__()

                                    self.yang_name = "peers"
                                    self.yang_parent_name = "as-league"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("peer", ("peer", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers.Peer))])
                                    self._leafs = OrderedDict()

                                    self.peer = YList(self)
                                    self._segment_path = lambda: "peers"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers, [], name, value)


                                class Peer(_Entity_):
                                    """
                                    AS League Peer AS
                                    
                                    .. attribute:: as_xx  (key)
                                    
                                    	xx of peer AS xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy  (key)
                                    
                                    	yy of peer AS xx.yy
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers.Peer, self).__init__()

                                        self.yang_name = "peer"
                                        self.yang_parent_name = "peers"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['as_xx','as_yy']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self._segment_path = lambda: "peer" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers.Peer, ['as_xx', 'as_yy'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers.Peer']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague.Peers']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsLeague']['meta_info']


                        class RpkiServers(_Entity_):
                            """
                            RPKI server configuration
                            
                            .. attribute:: rpki_server
                            
                            	RPKI server configuration
                            	**type**\: list of  		 :py:class:`RpkiServer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers, self).__init__()

                                self.yang_name = "rpki-servers"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("rpki-server", ("rpki_server", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer))])
                                self._leafs = OrderedDict()

                                self.rpki_server = YList(self)
                                self._segment_path = lambda: "rpki-servers"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers, [], name, value)


                            class RpkiServer(_Entity_):
                                """
                                RPKI server configuration
                                
                                .. attribute:: server  (key)
                                
                                	Server address (opaque string)
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: bindsrc
                                
                                	RPKI server transport bind source
                                	**type**\:  :py:class:`Bindsrc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Bindsrc>`
                                
                                .. attribute:: transport
                                
                                	RPKI server transport
                                	**type**\:  :py:class:`Transport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Transport>`
                                
                                .. attribute:: enable
                                
                                	RPKI server configuration
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: shutdown
                                
                                	RPKI server shutdown
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: password
                                
                                	RPKI server password
                                	**type**\: str
                                
                                .. attribute:: response_time
                                
                                	RPKI server response\-time (15\-3600 seconds)
                                	**type**\: int
                                
                                	**range:** 15..3600
                                
                                	**units**\: second
                                
                                .. attribute:: username
                                
                                	RPKI server username
                                	**type**\: str
                                
                                .. attribute:: refresh_time
                                
                                	RPKI server refresh\-time (15\-3600 seconds)
                                	**type**\: int
                                
                                	**range:** 15..3600
                                
                                	**units**\: second
                                
                                .. attribute:: purge_time
                                
                                	RPKI server purge\-time (30\-360 seconds)
                                	**type**\: int
                                
                                	**range:** 30..360
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer, self).__init__()

                                    self.yang_name = "rpki-server"
                                    self.yang_parent_name = "rpki-servers"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['server']
                                    self._child_classes = OrderedDict([("bindsrc", ("bindsrc", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Bindsrc)), ("transport", ("transport", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Transport))])
                                    self._leafs = OrderedDict([
                                        ('server', (YLeaf(YType.str, 'server'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('shutdown', (YLeaf(YType.empty, 'shutdown'), ['Empty'])),
                                        ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ('response_time', (YLeaf(YType.uint32, 'response-time'), ['int'])),
                                        ('username', (YLeaf(YType.str, 'username'), ['str'])),
                                        ('refresh_time', (YLeaf(YType.uint32, 'refresh-time'), ['int'])),
                                        ('purge_time', (YLeaf(YType.uint32, 'purge-time'), ['int'])),
                                    ])
                                    self.server = None
                                    self.enable = None
                                    self.shutdown = None
                                    self.password = None
                                    self.response_time = None
                                    self.username = None
                                    self.refresh_time = None
                                    self.purge_time = None

                                    self.bindsrc = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Bindsrc()
                                    self.bindsrc.parent = self
                                    self._children_name_map["bindsrc"] = "bindsrc"

                                    self.transport = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Transport()
                                    self.transport.parent = self
                                    self._children_name_map["transport"] = "transport"
                                    self._segment_path = lambda: "rpki-server" + "[server='" + str(self.server) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer, ['server', 'enable', 'shutdown', 'password', 'response_time', 'username', 'refresh_time', 'purge_time'], name, value)


                                class Bindsrc(_Entity_):
                                    """
                                    RPKI server transport bind source
                                    
                                    .. attribute:: bindsrc_type
                                    
                                    	Bind source type
                                    	**type**\:  :py:class:`BgpRpkiBinssrc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpRpkiBinssrc>`
                                    
                                    .. attribute:: bind_src
                                    
                                    	server bind source interface
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Bindsrc, self).__init__()

                                        self.yang_name = "bindsrc"
                                        self.yang_parent_name = "rpki-server"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('bindsrc_type', (YLeaf(YType.enumeration, 'bindsrc-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpRpkiBinssrc', '')])),
                                            ('bind_src', (YLeaf(YType.str, 'bind-src'), ['str'])),
                                        ])
                                        self.bindsrc_type = None
                                        self.bind_src = None
                                        self._segment_path = lambda: "bindsrc"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Bindsrc, ['bindsrc_type', 'bind_src'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Bindsrc']['meta_info']


                                class Transport(_Entity_):
                                    """
                                    RPKI server transport
                                    
                                    .. attribute:: transport
                                    
                                    	RPKI server transport
                                    	**type**\:  :py:class:`BgpRpkiTransport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpRpkiTransport>`
                                    
                                    	**default value**\: ssh
                                    
                                    .. attribute:: port
                                    
                                    	port
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**default value**\: 22
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Transport, self).__init__()

                                        self.yang_name = "transport"
                                        self.yang_parent_name = "rpki-server"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('transport', (YLeaf(YType.enumeration, 'transport'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpRpkiTransport', '')])),
                                            ('port', (YLeaf(YType.uint16, 'port'), ['int'])),
                                        ])
                                        self.transport = None
                                        self.port = None
                                        self._segment_path = lambda: "transport"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Transport, ['transport', 'port'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer.Transport']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers.RpkiServer']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiServers']['meta_info']


                        class AsListGroups(_Entity_):
                            """
                            AS\-list group lists
                            
                            .. attribute:: as_list_group
                            
                            	AS\-List group
                            	**type**\: list of  		 :py:class:`AsListGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups, self).__init__()

                                self.yang_name = "as-list-groups"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("as-list-group", ("as_list_group", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup))])
                                self._leafs = OrderedDict()

                                self.as_list_group = YList(self)
                                self._segment_path = lambda: "as-list-groups"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups, [], name, value)


                            class AsListGroup(_Entity_):
                                """
                                AS\-List group
                                
                                .. attribute:: as_list_group_name  (key)
                                
                                	Group name
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: ases
                                
                                	AS list
                                	**type**\:  :py:class:`Ases <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases>`
                                
                                .. attribute:: enable
                                
                                	AS\-List group creation
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup, self).__init__()

                                    self.yang_name = "as-list-group"
                                    self.yang_parent_name = "as-list-groups"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['as_list_group_name']
                                    self._child_classes = OrderedDict([("ases", ("ases", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases))])
                                    self._leafs = OrderedDict([
                                        ('as_list_group_name', (YLeaf(YType.str, 'as-list-group-name'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                    ])
                                    self.as_list_group_name = None
                                    self.enable = None

                                    self.ases = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases()
                                    self.ases.parent = self
                                    self._children_name_map["ases"] = "ases"
                                    self._segment_path = lambda: "as-list-group" + "[as-list-group-name='" + str(self.as_list_group_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup, ['as_list_group_name', 'enable'], name, value)


                                class Ases(_Entity_):
                                    """
                                    AS list
                                    
                                    .. attribute:: as_
                                    
                                    	AS\-List group
                                    	**type**\: list of  		 :py:class:`As <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases.As>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases, self).__init__()

                                        self.yang_name = "ases"
                                        self.yang_parent_name = "as-list-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("as", ("as_", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases.As))])
                                        self._leafs = OrderedDict()

                                        self.as_ = YList(self)
                                        self._segment_path = lambda: "ases"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases, [], name, value)


                                    class As(_Entity_):
                                        """
                                        AS\-List group
                                        
                                        .. attribute:: as_xx  (key)
                                        
                                        	xx of AS number/confed peer xx.yy
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: as_yy  (key)
                                        
                                        	yy of AS number/confed peer xx.yy
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases.As, self).__init__()

                                            self.yang_name = "as"
                                            self.yang_parent_name = "ases"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['as_xx','as_yy']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                                ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ])
                                            self.as_xx = None
                                            self.as_yy = None
                                            self._segment_path = lambda: "as" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases.As, ['as_xx', 'as_yy'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases.As']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup.Ases']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups.AsListGroup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AsListGroups']['meta_info']


                        class Limits(_Entity_):
                            """
                            Maximum number that can be configured
                            
                            .. attribute:: maximum_neighbors
                            
                            	Maximum number of neighbors that can be configured
                            	**type**\: int
                            
                            	**range:** 1..15000
                            
                            	**default value**\: 10000
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Limits, self).__init__()

                                self.yang_name = "limits"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('maximum_neighbors', (YLeaf(YType.uint32, 'maximum-neighbors'), ['int'])),
                                ])
                                self.maximum_neighbors = None
                                self._segment_path = lambda: "limits"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Limits, ['maximum_neighbors'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Limits']['meta_info']


                        class ConfederationDomain(_Entity_):
                            """
                            Set routing domain confederation AS
                            
                            .. attribute:: as_xx
                            
                            	xx of AS number xx.yy
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: as_yy
                            
                            	yy of AS number xx.yy
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationDomain, self).__init__()

                                self.yang_name = "confederation-domain"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                    ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                ])
                                self.as_xx = None
                                self.as_yy = None
                                self._segment_path = lambda: "confederation-domain"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationDomain, ['as_xx', 'as_yy'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationDomain']['meta_info']


                        class ConfederationPeerAses(_Entity_):
                            """
                            Define peer ASes in BGP confederation
                            
                            .. attribute:: confederation_peer_as
                            
                            	Confederation peer AS
                            	**type**\: list of  		 :py:class:`ConfederationPeerAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses.ConfederationPeerAs>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses, self).__init__()

                                self.yang_name = "confederation-peer-ases"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("confederation-peer-as", ("confederation_peer_as", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses.ConfederationPeerAs))])
                                self._leafs = OrderedDict()

                                self.confederation_peer_as = YList(self)
                                self._segment_path = lambda: "confederation-peer-ases"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses, [], name, value)


                            class ConfederationPeerAs(_Entity_):
                                """
                                Confederation peer AS
                                
                                .. attribute:: as_xx  (key)
                                
                                	xx of AS number/confed peer xx.yy
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: as_yy  (key)
                                
                                	yy of AS number/confed peer xx.yy
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses.ConfederationPeerAs, self).__init__()

                                    self.yang_name = "confederation-peer-as"
                                    self.yang_parent_name = "confederation-peer-ases"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['as_xx','as_yy']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                        ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                    ])
                                    self.as_xx = None
                                    self.as_yy = None
                                    self._segment_path = lambda: "confederation-peer-as" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses.ConfederationPeerAs, ['as_xx', 'as_yy'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses.ConfederationPeerAs']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ConfederationPeerAses']['meta_info']


                        class AttributeFilterGroups(_Entity_):
                            """
                            Attribute\-filter groups list
                            
                            .. attribute:: attribute_filter_group
                            
                            	Attribute\-filter group
                            	**type**\: list of  		 :py:class:`AttributeFilterGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups, self).__init__()

                                self.yang_name = "attribute-filter-groups"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("attribute-filter-group", ("attribute_filter_group", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup))])
                                self._leafs = OrderedDict()

                                self.attribute_filter_group = YList(self)
                                self._segment_path = lambda: "attribute-filter-groups"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups, [], name, value)


                            class AttributeFilterGroup(_Entity_):
                                """
                                Attribute\-filter group
                                
                                .. attribute:: attribute_filter_group_name  (key)
                                
                                	Group name
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: attribute_filters
                                
                                	Attribute\-filter group attributes list
                                	**type**\:  :py:class:`AttributeFilters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters>`
                                
                                .. attribute:: enable
                                
                                	Attribute\-filter group creation
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup, self).__init__()

                                    self.yang_name = "attribute-filter-group"
                                    self.yang_parent_name = "attribute-filter-groups"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['attribute_filter_group_name']
                                    self._child_classes = OrderedDict([("attribute-filters", ("attribute_filters", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters))])
                                    self._leafs = OrderedDict([
                                        ('attribute_filter_group_name', (YLeaf(YType.str, 'attribute-filter-group-name'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                    ])
                                    self.attribute_filter_group_name = None
                                    self.enable = None

                                    self.attribute_filters = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters()
                                    self.attribute_filters.parent = self
                                    self._children_name_map["attribute_filters"] = "attribute-filters"
                                    self._segment_path = lambda: "attribute-filter-group" + "[attribute-filter-group-name='" + str(self.attribute_filter_group_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup, ['attribute_filter_group_name', 'enable'], name, value)


                                class AttributeFilters(_Entity_):
                                    """
                                    Attribute\-filter group attributes list
                                    
                                    .. attribute:: attribute_filter
                                    
                                    	Attribute\-filter group attribute
                                    	**type**\: list of  		 :py:class:`AttributeFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters.AttributeFilter>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters, self).__init__()

                                        self.yang_name = "attribute-filters"
                                        self.yang_parent_name = "attribute-filter-group"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("attribute-filter", ("attribute_filter", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters.AttributeFilter))])
                                        self._leafs = OrderedDict()

                                        self.attribute_filter = YList(self)
                                        self._segment_path = lambda: "attribute-filters"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters, [], name, value)


                                    class AttributeFilter(_Entity_):
                                        """
                                        Attribute\-filter group attribute
                                        
                                        .. attribute:: attribute_start  (key)
                                        
                                        	Start of attribute range
                                        	**type**\: int
                                        
                                        	**range:** 0..256
                                        
                                        .. attribute:: attribute_end  (key)
                                        
                                        	End of attribute range
                                        	**type**\: int
                                        
                                        	**range:** 0..256
                                        
                                        .. attribute:: filter_action
                                        
                                        	Filtering action
                                        	**type**\:  :py:class:`BgpUpdateFilterAction <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpUpdateFilterAction>`
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters.AttributeFilter, self).__init__()

                                            self.yang_name = "attribute-filter"
                                            self.yang_parent_name = "attribute-filters"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['attribute_start','attribute_end']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('attribute_start', (YLeaf(YType.uint32, 'attribute-start'), ['int'])),
                                                ('attribute_end', (YLeaf(YType.uint32, 'attribute-end'), ['int'])),
                                                ('filter_action', (YLeaf(YType.enumeration, 'filter-action'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpUpdateFilterAction', '')])),
                                            ])
                                            self.attribute_start = None
                                            self.attribute_end = None
                                            self.filter_action = None
                                            self._segment_path = lambda: "attribute-filter" + "[attribute-start='" + str(self.attribute_start) + "']" + "[attribute-end='" + str(self.attribute_end) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters.AttributeFilter, ['attribute_start', 'attribute_end', 'filter_action'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters.AttributeFilter']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups.AttributeFilterGroup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.AttributeFilterGroups']['meta_info']


                        class SegmentRoutingGlobal(_Entity_):
                            """
                            Segment\-routing Gbl Configurations
                            
                            .. attribute:: srv6_global
                            
                            	SRv6 Configurations
                            	**type**\:  :py:class:`Srv6Global <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal.Srv6Global>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal, self).__init__()

                                self.yang_name = "segment-routing-global"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("srv6-global", ("srv6_global", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal.Srv6Global))])
                                self._leafs = OrderedDict()

                                self.srv6_global = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal.Srv6Global()
                                self.srv6_global.parent = self
                                self._children_name_map["srv6_global"] = "srv6-global"
                                self._segment_path = lambda: "segment-routing-global"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal, [], name, value)


                            class Srv6Global(_Entity_):
                                """
                                SRv6 Configurations
                                
                                .. attribute:: enable
                                
                                	Enable SRv6 configuration submode
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: locator_name
                                
                                	Configure Locator name for SID allocation
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal.Srv6Global, self).__init__()

                                    self.yang_name = "srv6-global"
                                    self.yang_parent_name = "segment-routing-global"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('locator_name', (YLeaf(YType.str, 'locator-name'), ['str'])),
                                    ])
                                    self.enable = None
                                    self.locator_name = None
                                    self._segment_path = lambda: "srv6-global"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal.Srv6Global, ['enable', 'locator_name'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal.Srv6Global']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SegmentRoutingGlobal']['meta_info']


                        class GlobalAfs(_Entity_):
                            """
                            Global AF\-specific configuration
                            
                            .. attribute:: global_af
                            
                            	Global AF\-specific configuration
                            	**type**\: list of  		 :py:class:`GlobalAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs, self).__init__()

                                self.yang_name = "global-afs"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("global-af", ("global_af", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf))])
                                self._leafs = OrderedDict()

                                self.global_af = YList(self)
                                self._segment_path = lambda: "global-afs"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs, [], name, value)


                            class GlobalAf(_Entity_):
                                """
                                Global AF\-specific configuration
                                
                                .. attribute:: af_name  (key)
                                
                                	Address family
                                	**type**\:  :py:class:`BgpAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamily>`
                                
                                .. attribute:: isis_routes
                                
                                	Redistribute information for IS\-IS routes 
                                	**type**\:  :py:class:`IsisRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes>`
                                
                                .. attribute:: domain_distinguisher
                                
                                	<ASN, router\-id> tuple to use to identify the link\-state domain
                                	**type**\:  :py:class:`DomainDistinguisher <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DomainDistinguisher>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: vrf_all
                                
                                	Configurations to be inherited to all vrfs
                                	**type**\:  :py:class:`VrfAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll>`
                                
                                .. attribute:: disable_cluster_client_to_client_rrs
                                
                                	Disable client\-to\-client reflection for a cluster
                                	**type**\:  :py:class:`DisableClusterClientToClientRrs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs>`
                                
                                .. attribute:: label_delay
                                
                                	Delay timer to batch label processing
                                	**type**\:  :py:class:`LabelDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelDelay>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: ebgp
                                
                                	Use eBGP multipaths
                                	**type**\:  :py:class:`Ebgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ebgp>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: eibgp
                                
                                	Use eiBGP multipaths
                                	**type**\:  :py:class:`Eibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Eibgp>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: retain_rt
                                
                                	Accept received updates with the specified attributes
                                	**type**\:  :py:class:`RetainRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RetainRt>`
                                
                                .. attribute:: ibgp
                                
                                	Use iBGP multipaths
                                	**type**\:  :py:class:`Ibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ibgp>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: import_delay
                                
                                	Delay timer to batch import processing
                                	**type**\:  :py:class:`ImportDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ImportDelay>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: rnh_install_format
                                
                                	RNH install format type\: extcomm \- install rnh as opaque and extcomms, extcomm\-only \- install rnh as extcomms only
                                	**type**\:  :py:class:`BgpRnhInstallFormat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpRnhInstallFormat>`
                                
                                .. attribute:: inter_as_install
                                
                                	Enable install remote MVPN routes to PIM in default VRF
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: segmented_mcast
                                
                                	Enable segmented multicast
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: implicit_import
                                
                                	Implicit import configuration
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: disable_default_martian_check
                                
                                	Disable default Martian Check
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: next_hop_critical_trigger_delay
                                
                                	Next hop Critical Trigger Delay
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: millisecond
                                
                                	**default value**\: 3000
                                
                                .. attribute:: next_hop_non_critical_trigger_delay
                                
                                	Next hop Non\-critical Trigger Delay
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: millisecond
                                
                                	**default value**\: 10000
                                
                                .. attribute:: label_security_rpf
                                
                                	Calculate label\-security RPF lists and install to RIB/LSD
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: use_igpsr_label
                                
                                	Use IGP SR label for resolution configuration
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: label_retain
                                
                                	Label retention time in minutes
                                	**type**\: int
                                
                                	**range:** 3..60
                                
                                	**units**\: minute
                                
                                .. attribute:: scan_time
                                
                                	Configure background scanner interval for this address family
                                	**type**\: int
                                
                                	**range:** 5..3600
                                
                                	**units**\: second
                                
                                	**default value**\: 60
                                
                                .. attribute:: source_route_target_policy
                                
                                	Route policy name to apply to configure source route\-target
                                	**type**\: str
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: update_limit_sub_group_ebgp
                                
                                	Upper bound on update generation transient memory usage for every EBGP Sub\-group
                                	**type**\: int
                                
                                	**range:** 1..512
                                
                                	**units**\: megabyte
                                
                                	**default value**\: 32
                                
                                .. attribute:: update_limit_address_family
                                
                                	Upper bound on update generation transient memory usage for the address\-family
                                	**type**\: int
                                
                                	**range:** 4..2048
                                
                                	**units**\: megabyte
                                
                                	**default value**\: 256
                                
                                .. attribute:: update_limit_sub_group_ibgp
                                
                                	Upper bound on update generation transient memory usage for every IBGP Sub\-group
                                	**type**\: int
                                
                                	**range:** 1..512
                                
                                	**units**\: megabyte
                                
                                	**default value**\: 32
                                
                                .. attribute:: disable_client_to_client_rr
                                
                                	Disable client\-to\-client reflection
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: next_hop_route_policy
                                
                                	Next hop policy to filter out nexthop notification
                                	**type**\: str
                                
                                .. attribute:: global_table_mcast
                                
                                	Enable global table multicast
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: wait_rib_install
                                
                                	Wait for route install before sending updates to neighbors
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: prefix_sid_map
                                
                                	Retrieve prefix sid mapping from SRMS
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_origin_as_validation_enable
                                
                                	RPKI origin\-AS validation enable
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: aggregate_addresses
                                
                                	Configure BGP aggregate entries
                                	**type**\:  :py:class:`AggregateAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses>`
                                
                                .. attribute:: dynamic_med_interval
                                
                                	Update generation delay (in minutes) after a MED change
                                	**type**\: int
                                
                                	**range:** 0..10
                                
                                	**units**\: minute
                                
                                	**default value**\: 10
                                
                                .. attribute:: optimal_route_reflector_groups
                                
                                	Table of multiple ORR groups
                                	**type**\:  :py:class:`OptimalRouteReflectorGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups>`
                                
                                .. attribute:: dampening
                                
                                	Enable route\-flap dampening
                                	**type**\:  :py:class:`Dampening <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Dampening>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: enable
                                
                                	Enable the address family. Deletion of this object causes deletion of all the objects under GlobalAF/VRFGlobalAF associated with this object 
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rip_routes
                                
                                	Redistribute RIP routes
                                	**type**\:  :py:class:`RipRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RipRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: lisp_routes
                                
                                	Redistribute lisp routes
                                	**type**\:  :py:class:`LispRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LispRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: static_routes
                                
                                	Redistribute static routes
                                	**type**\:  :py:class:`StaticRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.StaticRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: distance
                                
                                	Define an administrative distance
                                	**type**\:  :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Distance>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: table_policy
                                
                                	Configure policy for installation of routes to RIB
                                	**type**\: str
                                
                                .. attribute:: application_routes
                                
                                	Redistribute information for Application routes
                                	**type**\:  :py:class:`ApplicationRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes>`
                                
                                .. attribute:: attribute_download
                                
                                	Attribute download configuration
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: label_mode
                                
                                	BGP 6PE/MPLS\-VPN label allocation mode
                                	**type**\:  :py:class:`LabelMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelMode>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: eigrp_routes
                                
                                	Redistribute information for EIGRP routes
                                	**type**\:  :py:class:`EigrpRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes>`
                                
                                .. attribute:: best_external
                                
                                	TRUE to enable BE FALSE to disable BE inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: sourced_networks
                                
                                	Specify a network to announce via BGP
                                	**type**\:  :py:class:`SourcedNetworks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks>`
                                
                                .. attribute:: rpki_origin_as_validity_signal_ibgp
                                
                                	RPKI origin\-AS validity signal ibgp
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: connected_routes
                                
                                	Redistribute connected routes
                                	**type**\:  :py:class:`ConnectedRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ConnectedRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: additional_paths_receive
                                
                                	Advertise additional paths Receive capability
                                	**type**\:  :py:class:`BgpAfAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAfAdditionalPathsCfg>`
                                
                                .. attribute:: permanent_network
                                
                                	Route policy for permanent networks
                                	**type**\: str
                                
                                .. attribute:: rpki_bestpath_use_origin_as_validity
                                
                                	RPKI bestpath use origin\-AS validity
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: allocate_label
                                
                                	Label allocation policy
                                	**type**\:  :py:class:`AllocateLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AllocateLabel>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: additional_paths_selection
                                
                                	Configure additional paths selection
                                	**type**\:  :py:class:`AdditionalPathsSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AdditionalPathsSelection>`
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: next_hop_resolution_prefix_length_minimum
                                
                                	Minimum prefix\-length for nexthop resolution
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                	**default value**\: 0
                                
                                .. attribute:: reset_weight_on_import
                                
                                	TRUE to reset weight on import. FALSE to not reset and to prevent inheritance from a parent
                                	**type**\: bool
                                
                                .. attribute:: ospf_routes
                                
                                	Redistribute information for OSPF routes
                                	**type**\:  :py:class:`OspfRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes>`
                                
                                .. attribute:: additional_paths_send
                                
                                	Advertise additional paths Send capability
                                	**type**\:  :py:class:`BgpAfAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAfAdditionalPathsCfg>`
                                
                                .. attribute:: advertise_local_labeled_route_safi_unicast
                                
                                	Enable/disable advertisement of routes with local\-label via Unicast SAFI
                                	**type**\:  :py:class:`BgpAdvertiseLocalLabeledRouteCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfg>`
                                
                                .. attribute:: mobile_routes
                                
                                	Redistribute mobile routes
                                	**type**\:  :py:class:`MobileRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.MobileRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: disable_as_path_loop_check
                                
                                	Disable outbound AS Path loop check
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: subscriber_routes
                                
                                	Redistribute subscriber routes
                                	**type**\:  :py:class:`SubscriberRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SubscriberRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: segment_routing
                                
                                	Segment\-routing Configurations
                                	**type**\:  :py:class:`SegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf, self).__init__()

                                    self.yang_name = "global-af"
                                    self.yang_parent_name = "global-afs"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['af_name']
                                    self._child_classes = OrderedDict([("isis-routes", ("isis_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes)), ("domain-distinguisher", ("domain_distinguisher", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DomainDistinguisher)), ("vrf-all", ("vrf_all", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll)), ("disable-cluster-client-to-client-rrs", ("disable_cluster_client_to_client_rrs", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs)), ("label-delay", ("label_delay", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelDelay)), ("ebgp", ("ebgp", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ebgp)), ("eibgp", ("eibgp", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Eibgp)), ("retain-rt", ("retain_rt", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RetainRt)), ("ibgp", ("ibgp", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ibgp)), ("import-delay", ("import_delay", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ImportDelay)), ("aggregate-addresses", ("aggregate_addresses", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses)), ("optimal-route-reflector-groups", ("optimal_route_reflector_groups", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups)), ("dampening", ("dampening", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Dampening)), ("rip-routes", ("rip_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RipRoutes)), ("lisp-routes", ("lisp_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LispRoutes)), ("static-routes", ("static_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.StaticRoutes)), ("distance", ("distance", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Distance)), ("application-routes", ("application_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes)), ("label-mode", ("label_mode", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelMode)), ("eigrp-routes", ("eigrp_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes)), ("sourced-networks", ("sourced_networks", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks)), ("connected-routes", ("connected_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ConnectedRoutes)), ("allocate-label", ("allocate_label", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AllocateLabel)), ("additional-paths-selection", ("additional_paths_selection", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AdditionalPathsSelection)), ("ospf-routes", ("ospf_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes)), ("mobile-routes", ("mobile_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.MobileRoutes)), ("subscriber-routes", ("subscriber_routes", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SubscriberRoutes)), ("segment-routing", ("segment_routing", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting))])
                                    self._leafs = OrderedDict([
                                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAddressFamily', '')])),
                                        ('rnh_install_format', (YLeaf(YType.enumeration, 'rnh-install-format'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpRnhInstallFormat', '')])),
                                        ('inter_as_install', (YLeaf(YType.empty, 'inter-as-install'), ['Empty'])),
                                        ('segmented_mcast', (YLeaf(YType.empty, 'segmented-mcast'), ['Empty'])),
                                        ('implicit_import', (YLeaf(YType.empty, 'implicit-import'), ['Empty'])),
                                        ('disable_default_martian_check', (YLeaf(YType.empty, 'disable-default-martian-check'), ['Empty'])),
                                        ('next_hop_critical_trigger_delay', (YLeaf(YType.uint32, 'next-hop-critical-trigger-delay'), ['int'])),
                                        ('next_hop_non_critical_trigger_delay', (YLeaf(YType.uint32, 'next-hop-non-critical-trigger-delay'), ['int'])),
                                        ('label_security_rpf', (YLeaf(YType.empty, 'label-security-rpf'), ['Empty'])),
                                        ('use_igpsr_label', (YLeaf(YType.empty, 'use-igpsr-label'), ['Empty'])),
                                        ('label_retain', (YLeaf(YType.uint32, 'label-retain'), ['int'])),
                                        ('scan_time', (YLeaf(YType.uint32, 'scan-time'), ['int'])),
                                        ('source_route_target_policy', (YLeaf(YType.str, 'source-route-target-policy'), ['str'])),
                                        ('rpki_origin_as_validation_disable', (YLeaf(YType.empty, 'rpki-origin-as-validation-disable'), ['Empty'])),
                                        ('update_limit_sub_group_ebgp', (YLeaf(YType.uint32, 'update-limit-sub-group-ebgp'), ['int'])),
                                        ('update_limit_address_family', (YLeaf(YType.uint32, 'update-limit-address-family'), ['int'])),
                                        ('update_limit_sub_group_ibgp', (YLeaf(YType.uint32, 'update-limit-sub-group-ibgp'), ['int'])),
                                        ('disable_client_to_client_rr', (YLeaf(YType.empty, 'disable-client-to-client-rr'), ['Empty'])),
                                        ('next_hop_route_policy', (YLeaf(YType.str, 'next-hop-route-policy'), ['str'])),
                                        ('global_table_mcast', (YLeaf(YType.empty, 'global-table-mcast'), ['Empty'])),
                                        ('wait_rib_install', (YLeaf(YType.empty, 'wait-rib-install'), ['Empty'])),
                                        ('prefix_sid_map', (YLeaf(YType.empty, 'prefix-sid-map'), ['Empty'])),
                                        ('rpki_origin_as_validation_enable', (YLeaf(YType.empty, 'rpki-origin-as-validation-enable'), ['Empty'])),
                                        ('dynamic_med_interval', (YLeaf(YType.uint32, 'dynamic-med-interval'), ['int'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('table_policy', (YLeaf(YType.str, 'table-policy'), ['str'])),
                                        ('attribute_download', (YLeaf(YType.empty, 'attribute-download'), ['Empty'])),
                                        ('best_external', (YLeaf(YType.boolean, 'best-external'), ['bool'])),
                                        ('rpki_origin_as_validity_signal_ibgp', (YLeaf(YType.empty, 'rpki-origin-as-validity-signal-ibgp'), ['Empty'])),
                                        ('additional_paths_receive', (YLeaf(YType.enumeration, 'additional-paths-receive'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAfAdditionalPathsCfg', '')])),
                                        ('permanent_network', (YLeaf(YType.str, 'permanent-network'), ['str'])),
                                        ('rpki_bestpath_use_origin_as_validity', (YLeaf(YType.empty, 'rpki-bestpath-use-origin-as-validity'), ['Empty'])),
                                        ('rpki_bestpath_origin_as_allow_invalid', (YLeaf(YType.empty, 'rpki-bestpath-origin-as-allow-invalid'), ['Empty'])),
                                        ('next_hop_resolution_prefix_length_minimum', (YLeaf(YType.uint32, 'next-hop-resolution-prefix-length-minimum'), ['int'])),
                                        ('reset_weight_on_import', (YLeaf(YType.boolean, 'reset-weight-on-import'), ['bool'])),
                                        ('additional_paths_send', (YLeaf(YType.enumeration, 'additional-paths-send'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAfAdditionalPathsCfg', '')])),
                                        ('advertise_local_labeled_route_safi_unicast', (YLeaf(YType.enumeration, 'advertise-local-labeled-route-safi-unicast'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAdvertiseLocalLabeledRouteCfg', '')])),
                                        ('disable_as_path_loop_check', (YLeaf(YType.empty, 'disable-as-path-loop-check'), ['Empty'])),
                                    ])
                                    self.af_name = None
                                    self.rnh_install_format = None
                                    self.inter_as_install = None
                                    self.segmented_mcast = None
                                    self.implicit_import = None
                                    self.disable_default_martian_check = None
                                    self.next_hop_critical_trigger_delay = None
                                    self.next_hop_non_critical_trigger_delay = None
                                    self.label_security_rpf = None
                                    self.use_igpsr_label = None
                                    self.label_retain = None
                                    self.scan_time = None
                                    self.source_route_target_policy = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.update_limit_sub_group_ebgp = None
                                    self.update_limit_address_family = None
                                    self.update_limit_sub_group_ibgp = None
                                    self.disable_client_to_client_rr = None
                                    self.next_hop_route_policy = None
                                    self.global_table_mcast = None
                                    self.wait_rib_install = None
                                    self.prefix_sid_map = None
                                    self.rpki_origin_as_validation_enable = None
                                    self.dynamic_med_interval = None
                                    self.enable = None
                                    self.table_policy = None
                                    self.attribute_download = None
                                    self.best_external = None
                                    self.rpki_origin_as_validity_signal_ibgp = None
                                    self.additional_paths_receive = None
                                    self.permanent_network = None
                                    self.rpki_bestpath_use_origin_as_validity = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.next_hop_resolution_prefix_length_minimum = None
                                    self.reset_weight_on_import = None
                                    self.additional_paths_send = None
                                    self.advertise_local_labeled_route_safi_unicast = None
                                    self.disable_as_path_loop_check = None

                                    self.isis_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes()
                                    self.isis_routes.parent = self
                                    self._children_name_map["isis_routes"] = "isis-routes"

                                    self.domain_distinguisher = None
                                    self._children_name_map["domain_distinguisher"] = "domain-distinguisher"

                                    self.vrf_all = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll()
                                    self.vrf_all.parent = self
                                    self._children_name_map["vrf_all"] = "vrf-all"

                                    self.disable_cluster_client_to_client_rrs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs()
                                    self.disable_cluster_client_to_client_rrs.parent = self
                                    self._children_name_map["disable_cluster_client_to_client_rrs"] = "disable-cluster-client-to-client-rrs"

                                    self.label_delay = None
                                    self._children_name_map["label_delay"] = "label-delay"

                                    self.ebgp = None
                                    self._children_name_map["ebgp"] = "ebgp"

                                    self.eibgp = None
                                    self._children_name_map["eibgp"] = "eibgp"

                                    self.retain_rt = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RetainRt()
                                    self.retain_rt.parent = self
                                    self._children_name_map["retain_rt"] = "retain-rt"

                                    self.ibgp = None
                                    self._children_name_map["ibgp"] = "ibgp"

                                    self.import_delay = None
                                    self._children_name_map["import_delay"] = "import-delay"

                                    self.aggregate_addresses = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses()
                                    self.aggregate_addresses.parent = self
                                    self._children_name_map["aggregate_addresses"] = "aggregate-addresses"

                                    self.optimal_route_reflector_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups()
                                    self.optimal_route_reflector_groups.parent = self
                                    self._children_name_map["optimal_route_reflector_groups"] = "optimal-route-reflector-groups"

                                    self.dampening = None
                                    self._children_name_map["dampening"] = "dampening"

                                    self.rip_routes = None
                                    self._children_name_map["rip_routes"] = "rip-routes"

                                    self.lisp_routes = None
                                    self._children_name_map["lisp_routes"] = "lisp-routes"

                                    self.static_routes = None
                                    self._children_name_map["static_routes"] = "static-routes"

                                    self.distance = None
                                    self._children_name_map["distance"] = "distance"

                                    self.application_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes()
                                    self.application_routes.parent = self
                                    self._children_name_map["application_routes"] = "application-routes"

                                    self.label_mode = None
                                    self._children_name_map["label_mode"] = "label-mode"

                                    self.eigrp_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes()
                                    self.eigrp_routes.parent = self
                                    self._children_name_map["eigrp_routes"] = "eigrp-routes"

                                    self.sourced_networks = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks()
                                    self.sourced_networks.parent = self
                                    self._children_name_map["sourced_networks"] = "sourced-networks"

                                    self.connected_routes = None
                                    self._children_name_map["connected_routes"] = "connected-routes"

                                    self.allocate_label = None
                                    self._children_name_map["allocate_label"] = "allocate-label"

                                    self.additional_paths_selection = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AdditionalPathsSelection()
                                    self.additional_paths_selection.parent = self
                                    self._children_name_map["additional_paths_selection"] = "additional-paths-selection"

                                    self.ospf_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes()
                                    self.ospf_routes.parent = self
                                    self._children_name_map["ospf_routes"] = "ospf-routes"

                                    self.mobile_routes = None
                                    self._children_name_map["mobile_routes"] = "mobile-routes"

                                    self.subscriber_routes = None
                                    self._children_name_map["subscriber_routes"] = "subscriber-routes"

                                    self.segment_routing = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting()
                                    self.segment_routing.parent = self
                                    self._children_name_map["segment_routing"] = "segment-routing"
                                    self._segment_path = lambda: "global-af" + "[af-name='" + str(self.af_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf, ['af_name', 'rnh_install_format', 'inter_as_install', 'segmented_mcast', 'implicit_import', 'disable_default_martian_check', 'next_hop_critical_trigger_delay', 'next_hop_non_critical_trigger_delay', 'label_security_rpf', 'use_igpsr_label', 'label_retain', 'scan_time', 'source_route_target_policy', 'rpki_origin_as_validation_disable', 'update_limit_sub_group_ebgp', 'update_limit_address_family', 'update_limit_sub_group_ibgp', 'disable_client_to_client_rr', 'next_hop_route_policy', 'global_table_mcast', 'wait_rib_install', 'prefix_sid_map', 'rpki_origin_as_validation_enable', 'dynamic_med_interval', 'enable', 'table_policy', 'attribute_download', 'best_external', 'rpki_origin_as_validity_signal_ibgp', 'additional_paths_receive', 'permanent_network', 'rpki_bestpath_use_origin_as_validity', 'rpki_bestpath_origin_as_allow_invalid', 'next_hop_resolution_prefix_length_minimum', 'reset_weight_on_import', 'additional_paths_send', 'advertise_local_labeled_route_safi_unicast', 'disable_as_path_loop_check'], name, value)


                                class IsisRoutes(_Entity_):
                                    """
                                    Redistribute information for IS\-IS routes
                                    .
                                    
                                    .. attribute:: isis_route
                                    
                                    	Redistribute IS\-IS routes
                                    	**type**\: list of  		 :py:class:`IsisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes.IsisRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes, self).__init__()

                                        self.yang_name = "isis-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("isis-route", ("isis_route", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes.IsisRoute))])
                                        self._leafs = OrderedDict()

                                        self.isis_route = YList(self)
                                        self._segment_path = lambda: "isis-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes, [], name, value)


                                    class IsisRoute(_Entity_):
                                        """
                                        Redistribute IS\-IS routes
                                        
                                        .. attribute:: instance_name  (key)
                                        
                                        	IS\-IS instance name
                                        	**type**\: str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: redist_type
                                        
                                        	Redistribution type\: 01 for level 1 routes, 02 for level 2 routes, 04 for level 1 inter\-area routes. Logical combinations permitted
                                        	**type**\: str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{1,8}
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes.IsisRoute, self).__init__()

                                            self.yang_name = "isis-route"
                                            self.yang_parent_name = "isis-routes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['instance_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('redist_type', (YLeaf(YType.str, 'redist-type'), ['str'])),
                                            ])
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.redist_type = None
                                            self._segment_path = lambda: "isis-route" + "[instance-name='" + str(self.instance_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes.IsisRoute, ['instance_name', 'default_metric', 'route_policy_name', 'redist_type'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes.IsisRoute']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.IsisRoutes']['meta_info']


                                class DomainDistinguisher(_Entity_):
                                    """
                                    <ASN, router\-id> tuple to use to identify
                                    the link\-state domain
                                    
                                    .. attribute:: as_
                                    
                                    	AS Number
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: router_id
                                    
                                    	Router ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DomainDistinguisher, self).__init__()

                                        self.yang_name = "domain-distinguisher"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                                            ('router_id', (YLeaf(YType.str, 'router-id'), ['str'])),
                                        ])
                                        self.as_ = None
                                        self.router_id = None
                                        self._segment_path = lambda: "domain-distinguisher"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DomainDistinguisher, ['as_', 'router_id'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DomainDistinguisher']['meta_info']


                                class VrfAll(_Entity_):
                                    """
                                    Configurations to be inherited to all
                                    vrfs
                                    
                                    .. attribute:: segment_routing_vrf_all
                                    
                                    	Segment\-routing Vrf All Configurations
                                    	**type**\:  :py:class:`SegmentRoutingVrfAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll>`
                                    
                                    .. attribute:: label_mode
                                    
                                    	MPLS\-VPN label allocation mode
                                    	**type**\:  :py:class:`LabelMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.LabelMode>`
                                    
                                    .. attribute:: rnh_install_format
                                    
                                    	RNH install format type\: extcomm \- install rnh as opaque and extcomms, extcomm\-only \- install rnh as extcomms only
                                    	**type**\:  :py:class:`BgpRnhInstallFormat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpRnhInstallFormat>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable vrf all configuration submode
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: table_policy
                                    
                                    	Configure policy for installation of routes to RIB
                                    	**type**\: str
                                    
                                    .. attribute:: source_rt_import_policy
                                    
                                    	Enable sourcing of import route\-targets from import\-policy
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll, self).__init__()

                                        self.yang_name = "vrf-all"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("segment-routing-vrf-all", ("segment_routing_vrf_all", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll)), ("label-mode", ("label_mode", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.LabelMode))])
                                        self._leafs = OrderedDict([
                                            ('rnh_install_format', (YLeaf(YType.enumeration, 'rnh-install-format'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpRnhInstallFormat', '')])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('table_policy', (YLeaf(YType.str, 'table-policy'), ['str'])),
                                            ('source_rt_import_policy', (YLeaf(YType.empty, 'source-rt-import-policy'), ['Empty'])),
                                        ])
                                        self.rnh_install_format = None
                                        self.enable = None
                                        self.table_policy = None
                                        self.source_rt_import_policy = None

                                        self.segment_routing_vrf_all = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll()
                                        self.segment_routing_vrf_all.parent = self
                                        self._children_name_map["segment_routing_vrf_all"] = "segment-routing-vrf-all"

                                        self.label_mode = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.LabelMode()
                                        self.label_mode.parent = self
                                        self._children_name_map["label_mode"] = "label-mode"
                                        self._segment_path = lambda: "vrf-all"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll, ['rnh_install_format', 'enable', 'table_policy', 'source_rt_import_policy'], name, value)


                                    class SegmentRoutingVrfAll(_Entity_):
                                        """
                                        Segment\-routing Vrf All Configurations
                                        
                                        .. attribute:: srv6_vrf_all
                                        
                                        	SRv6 Configurations
                                        	**type**\:  :py:class:`Srv6VrfAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll.Srv6VrfAll>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll, self).__init__()

                                            self.yang_name = "segment-routing-vrf-all"
                                            self.yang_parent_name = "vrf-all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("srv6-vrf-all", ("srv6_vrf_all", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll.Srv6VrfAll))])
                                            self._leafs = OrderedDict()

                                            self.srv6_vrf_all = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll.Srv6VrfAll()
                                            self.srv6_vrf_all.parent = self
                                            self._children_name_map["srv6_vrf_all"] = "srv6-vrf-all"
                                            self._segment_path = lambda: "segment-routing-vrf-all"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll, [], name, value)


                                        class Srv6VrfAll(_Entity_):
                                            """
                                            SRv6 Configurations
                                            
                                            .. attribute:: enable
                                            
                                            	Enable SRv6 configuration submode
                                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                            
                                            .. attribute:: srv6sid_allocation_mode
                                            
                                            	SID allocation mode\: per\-ce  Set per CE SID mode,per\-vrf Set per VRF SID mode
                                            	**type**\: str
                                            
                                            .. attribute:: locator_name
                                            
                                            	Configure Locator name for SID allocation
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll.Srv6VrfAll, self).__init__()

                                                self.yang_name = "srv6-vrf-all"
                                                self.yang_parent_name = "segment-routing-vrf-all"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                                    ('srv6sid_allocation_mode', (YLeaf(YType.str, 'srv6sid-allocation-mode'), ['str'])),
                                                    ('locator_name', (YLeaf(YType.str, 'locator-name'), ['str'])),
                                                ])
                                                self.enable = None
                                                self.srv6sid_allocation_mode = None
                                                self.locator_name = None
                                                self._segment_path = lambda: "srv6-vrf-all"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll.Srv6VrfAll, ['enable', 'srv6sid_allocation_mode', 'locator_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll.Srv6VrfAll']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.SegmentRoutingVrfAll']['meta_info']


                                    class LabelMode(_Entity_):
                                        """
                                        MPLS\-VPN label allocation mode
                                        
                                        .. attribute:: label_allocation_mode
                                        
                                        	Label allocation mode\: per\-ce  Set per CE label mode, per\-vrf Set per VRF label mode
                                        	**type**\: str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Label mode route policy name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.LabelMode, self).__init__()

                                            self.yang_name = "label-mode"
                                            self.yang_parent_name = "vrf-all"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('label_allocation_mode', (YLeaf(YType.str, 'label-allocation-mode'), ['str'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ])
                                            self.label_allocation_mode = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "label-mode"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.LabelMode, ['label_allocation_mode', 'route_policy_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll.LabelMode']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.VrfAll']['meta_info']


                                class DisableClusterClientToClientRrs(_Entity_):
                                    """
                                    Disable client\-to\-client reflection for a
                                    cluster
                                    
                                    .. attribute:: disable_cluster_client_to_client_rr
                                    
                                    	Cluster ID for which reflection is to be disbled
                                    	**type**\: list of  		 :py:class:`DisableClusterClientToClientRr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs, self).__init__()

                                        self.yang_name = "disable-cluster-client-to-client-rrs"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("disable-cluster-client-to-client-rr", ("disable_cluster_client_to_client_rr", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr))])
                                        self._leafs = OrderedDict()

                                        self.disable_cluster_client_to_client_rr = YList(self)
                                        self._segment_path = lambda: "disable-cluster-client-to-client-rrs"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs, [], name, value)


                                    class DisableClusterClientToClientRr(_Entity_):
                                        """
                                        Cluster ID for which reflection is to be
                                        disbled
                                        
                                        .. attribute:: cluster_type  (key)
                                        
                                        	Type of cluster\-id
                                        	**type**\:  :py:class:`BgpClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpClusterId>`
                                        
                                        .. attribute:: number
                                        
                                        	number
                                        	**type**\: list of  		 :py:class:`Number <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Number>`
                                        
                                        .. attribute:: ipv4_address
                                        
                                        	ipv4 address
                                        	**type**\: list of  		 :py:class:`Ipv4Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Ipv4Address>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr, self).__init__()

                                            self.yang_name = "disable-cluster-client-to-client-rr"
                                            self.yang_parent_name = "disable-cluster-client-to-client-rrs"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['cluster_type']
                                            self._child_classes = OrderedDict([("number", ("number", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Number)), ("ipv4-address", ("ipv4_address", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Ipv4Address))])
                                            self._leafs = OrderedDict([
                                                ('cluster_type', (YLeaf(YType.enumeration, 'cluster-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BgpClusterId', '')])),
                                            ])
                                            self.cluster_type = None

                                            self.number = YList(self)
                                            self.ipv4_address = YList(self)
                                            self._segment_path = lambda: "disable-cluster-client-to-client-rr" + "[cluster-type='" + str(self.cluster_type) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr, ['cluster_type'], name, value)


                                        class Number(_Entity_):
                                            """
                                            number
                                            
                                            .. attribute:: cluster_id_number  (key)
                                            
                                            	Cluster ID\: if configured as a number
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Number, self).__init__()

                                                self.yang_name = "number"
                                                self.yang_parent_name = "disable-cluster-client-to-client-rr"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['cluster_id_number']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('cluster_id_number', (YLeaf(YType.uint32, 'cluster-id-number'), ['int'])),
                                                ])
                                                self.cluster_id_number = None
                                                self._segment_path = lambda: "number" + "[cluster-id-number='" + str(self.cluster_id_number) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Number, ['cluster_id_number'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Number']['meta_info']


                                        class Ipv4Address(_Entity_):
                                            """
                                            ipv4 address
                                            
                                            .. attribute:: cluster_id_address  (key)
                                            
                                            	Cluster ID\: if configured as an IP Address
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2018-06-15'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Ipv4Address, self).__init__()

                                                self.yang_name = "ipv4-address"
                                                self.yang_parent_name = "disable-cluster-client-to-client-rr"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['cluster_id_address']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('cluster_id_address', (YLeaf(YType.str, 'cluster-id-address'), ['str','str'])),
                                                ])
                                                self.cluster_id_address = None
                                                self._segment_path = lambda: "ipv4-address" + "[cluster-id-address='" + str(self.cluster_id_address) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Ipv4Address, ['cluster_id_address'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Ipv4Address']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs']['meta_info']


                                class LabelDelay(_Entity_):
                                    """
                                    Delay timer to batch label processing.
                                    
                                    .. attribute:: seconds
                                    
                                    	Delay, seconds part
                                    	**type**\: int
                                    
                                    	**range:** 0..10
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: milliseconds
                                    
                                    	Delay, milliseconds part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelDelay, self).__init__()

                                        self.yang_name = "label-delay"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('seconds', (YLeaf(YType.uint32, 'seconds'), ['int'])),
                                            ('milliseconds', (YLeaf(YType.uint32, 'milliseconds'), ['int'])),
                                        ])
                                        self.seconds = None
                                        self.milliseconds = None
                                        self._segment_path = lambda: "label-delay"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelDelay, ['seconds', 'milliseconds'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelDelay']['meta_info']


                                class Ebgp(_Entity_):
                                    """
                                    Use eBGP multipaths
                                    
                                    .. attribute:: paths_value
                                    
                                    	Number of paths
                                    	**type**\: int
                                    
                                    	**range:** 2..64
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: unequal_cost
                                    
                                    	UNUSED
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: selective
                                    
                                    	Allow multipaths only from marked neighbors
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: order_by_igp_metric
                                    
                                    	Order candidate multipaths by IGP metric
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ebgp, self).__init__()

                                        self.yang_name = "ebgp"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('paths_value', (YLeaf(YType.uint32, 'paths-value'), ['int'])),
                                            ('unequal_cost', (YLeaf(YType.boolean, 'unequal-cost'), ['bool'])),
                                            ('selective', (YLeaf(YType.boolean, 'selective'), ['bool'])),
                                            ('order_by_igp_metric', (YLeaf(YType.boolean, 'order-by-igp-metric'), ['bool'])),
                                        ])
                                        self.paths_value = None
                                        self.unequal_cost = None
                                        self.selective = None
                                        self.order_by_igp_metric = None
                                        self._segment_path = lambda: "ebgp"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ebgp, ['paths_value', 'unequal_cost', 'selective', 'order_by_igp_metric'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ebgp']['meta_info']


                                class Eibgp(_Entity_):
                                    """
                                    Use eiBGP multipaths
                                    
                                    .. attribute:: paths_value
                                    
                                    	Number of paths
                                    	**type**\: int
                                    
                                    	**range:** 2..64
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: unequal_cost
                                    
                                    	UNUSED
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: selective
                                    
                                    	Allow multipaths only from marked neighbors
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: order_by_igp_metric
                                    
                                    	Order candidate multipaths by IGP metric
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Eibgp, self).__init__()

                                        self.yang_name = "eibgp"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('paths_value', (YLeaf(YType.uint32, 'paths-value'), ['int'])),
                                            ('unequal_cost', (YLeaf(YType.boolean, 'unequal-cost'), ['bool'])),
                                            ('selective', (YLeaf(YType.boolean, 'selective'), ['bool'])),
                                            ('order_by_igp_metric', (YLeaf(YType.boolean, 'order-by-igp-metric'), ['bool'])),
                                        ])
                                        self.paths_value = None
                                        self.unequal_cost = None
                                        self.selective = None
                                        self.order_by_igp_metric = None
                                        self._segment_path = lambda: "eibgp"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Eibgp, ['paths_value', 'unequal_cost', 'selective', 'order_by_igp_metric'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Eibgp']['meta_info']


                                class RetainRt(_Entity_):
                                    """
                                    Accept received updates with the
                                    specified attributes
                                    
                                    .. attribute:: all
                                    
                                    	Whether all RTs are to be retained, default is FALSE
                                    	**type**\: bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RetainRt, self).__init__()

                                        self.yang_name = "retain-rt"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all', (YLeaf(YType.boolean, 'all'), ['bool'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ])
                                        self.all = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "retain-rt"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RetainRt, ['all', 'route_policy_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RetainRt']['meta_info']


                                class Ibgp(_Entity_):
                                    """
                                    Use iBGP multipaths
                                    
                                    .. attribute:: paths_value
                                    
                                    	Number of paths
                                    	**type**\: int
                                    
                                    	**range:** 2..64
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: unequal_cost
                                    
                                    	Allow multipaths to have different IGP metrics
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: selective
                                    
                                    	Allow multipaths only from marked neighbors
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: order_by_igp_metric
                                    
                                    	Order candidate multipaths by IGP metric
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ibgp, self).__init__()

                                        self.yang_name = "ibgp"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('paths_value', (YLeaf(YType.uint32, 'paths-value'), ['int'])),
                                            ('unequal_cost', (YLeaf(YType.boolean, 'unequal-cost'), ['bool'])),
                                            ('selective', (YLeaf(YType.boolean, 'selective'), ['bool'])),
                                            ('order_by_igp_metric', (YLeaf(YType.boolean, 'order-by-igp-metric'), ['bool'])),
                                        ])
                                        self.paths_value = None
                                        self.unequal_cost = None
                                        self.selective = None
                                        self.order_by_igp_metric = None
                                        self._segment_path = lambda: "ibgp"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ibgp, ['paths_value', 'unequal_cost', 'selective', 'order_by_igp_metric'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Ibgp']['meta_info']


                                class ImportDelay(_Entity_):
                                    """
                                    Delay timer to batch import processing.
                                    
                                    .. attribute:: seconds
                                    
                                    	Delay, seconds part
                                    	**type**\: int
                                    
                                    	**range:** 0..10
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: milliseconds
                                    
                                    	Delay, milliseconds part
                                    	**type**\: int
                                    
                                    	**range:** 0..999
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ImportDelay, self).__init__()

                                        self.yang_name = "import-delay"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('seconds', (YLeaf(YType.uint32, 'seconds'), ['int'])),
                                            ('milliseconds', (YLeaf(YType.uint32, 'milliseconds'), ['int'])),
                                        ])
                                        self.seconds = None
                                        self.milliseconds = None
                                        self._segment_path = lambda: "import-delay"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ImportDelay, ['seconds', 'milliseconds'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ImportDelay']['meta_info']


                                class AggregateAddresses(_Entity_):
                                    """
                                    Configure BGP aggregate entries
                                    
                                    .. attribute:: aggregate_address
                                    
                                    	Aggregate address configuration
                                    	**type**\: list of  		 :py:class:`AggregateAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses.AggregateAddress>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses, self).__init__()

                                        self.yang_name = "aggregate-addresses"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("aggregate-address", ("aggregate_address", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses.AggregateAddress))])
                                        self._leafs = OrderedDict()

                                        self.aggregate_address = YList(self)
                                        self._segment_path = lambda: "aggregate-addresses"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses, [], name, value)


                                    class AggregateAddress(_Entity_):
                                        """
                                        Aggregate address configuration
                                        
                                        .. attribute:: aggregate_addr  (key)
                                        
                                        	Aggregate in prefix/length format (address part)
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: aggregate_prefix  (key)
                                        
                                        	Aggregate in prefix/length format (prefix part)
                                        	**type**\: int
                                        
                                        	**range:** 0..128
                                        
                                        .. attribute:: generate_set_info
                                        
                                        	TRUE to generate AS set path information, FALSE otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: generate_confederation_set_info
                                        
                                        	TRUE to generate AS confederation set path information, FALSE otherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: summary_only
                                        
                                        	TRUE to filter more specific routes from updates, FALSEotherwise
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy on which to condition advertisement, suppression, and attributes
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses.AggregateAddress, self).__init__()

                                            self.yang_name = "aggregate-address"
                                            self.yang_parent_name = "aggregate-addresses"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['aggregate_addr','aggregate_prefix']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('aggregate_addr', (YLeaf(YType.str, 'aggregate-addr'), ['str','str'])),
                                                ('aggregate_prefix', (YLeaf(YType.uint16, 'aggregate-prefix'), ['int'])),
                                                ('generate_set_info', (YLeaf(YType.boolean, 'generate-set-info'), ['bool'])),
                                                ('generate_confederation_set_info', (YLeaf(YType.boolean, 'generate-confederation-set-info'), ['bool'])),
                                                ('summary_only', (YLeaf(YType.boolean, 'summary-only'), ['bool'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ])
                                            self.aggregate_addr = None
                                            self.aggregate_prefix = None
                                            self.generate_set_info = None
                                            self.generate_confederation_set_info = None
                                            self.summary_only = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "aggregate-address" + "[aggregate-addr='" + str(self.aggregate_addr) + "']" + "[aggregate-prefix='" + str(self.aggregate_prefix) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses.AggregateAddress, ['aggregate_addr', 'aggregate_prefix', 'generate_set_info', 'generate_confederation_set_info', 'summary_only', 'route_policy_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses.AggregateAddress']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AggregateAddresses']['meta_info']


                                class OptimalRouteReflectorGroups(_Entity_):
                                    """
                                    Table of multiple ORR groups
                                    
                                    .. attribute:: optimal_route_reflector_group
                                    
                                    	Optimal Route Reffelctor group. Each such group is equivalent to an IGP area
                                    	**type**\: list of  		 :py:class:`OptimalRouteReflectorGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups, self).__init__()

                                        self.yang_name = "optimal-route-reflector-groups"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("optimal-route-reflector-group", ("optimal_route_reflector_group", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup))])
                                        self._leafs = OrderedDict()

                                        self.optimal_route_reflector_group = YList(self)
                                        self._segment_path = lambda: "optimal-route-reflector-groups"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups, [], name, value)


                                    class OptimalRouteReflectorGroup(_Entity_):
                                        """
                                        Optimal Route Reffelctor group. Each such group
                                        is equivalent to an IGP area
                                        
                                        .. attribute:: group_name  (key)
                                        
                                        	Name of the ORR group
                                        	**type**\: str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: primary_root_address
                                        
                                        	Primary Root for the ORR group
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: secondary_root_address
                                        
                                        	Secondary Root for the ORR group
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: tertiary_root_address
                                        
                                        	Tertiary Root for the ORR group
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup, self).__init__()

                                            self.yang_name = "optimal-route-reflector-group"
                                            self.yang_parent_name = "optimal-route-reflector-groups"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['group_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('group_name', (YLeaf(YType.str, 'group-name'), ['str'])),
                                                ('primary_root_address', (YLeaf(YType.str, 'primary-root-address'), ['str','str'])),
                                                ('secondary_root_address', (YLeaf(YType.str, 'secondary-root-address'), ['str','str'])),
                                                ('tertiary_root_address', (YLeaf(YType.str, 'tertiary-root-address'), ['str','str'])),
                                            ])
                                            self.group_name = None
                                            self.primary_root_address = None
                                            self.secondary_root_address = None
                                            self.tertiary_root_address = None
                                            self._segment_path = lambda: "optimal-route-reflector-group" + "[group-name='" + str(self.group_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup, ['group_name', 'primary_root_address', 'secondary_root_address', 'tertiary_root_address'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups.OptimalRouteReflectorGroup']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OptimalRouteReflectorGroups']['meta_info']


                                class Dampening(_Entity_):
                                    """
                                    Enable route\-flap dampening
                                    
                                    .. attribute:: half_life
                                    
                                    	Half\-life time for the penalty (minutes)
                                    	**type**\: int
                                    
                                    	**range:** 1..45
                                    
                                    	**units**\: minute
                                    
                                    .. attribute:: reuse_threshold
                                    
                                    	Value to start reusing a route
                                    	**type**\: int
                                    
                                    	**range:** 1..20000
                                    
                                    .. attribute:: suppress_threshold
                                    
                                    	Value to start suppressing a route
                                    	**type**\: int
                                    
                                    	**range:** 1..20000
                                    
                                    .. attribute:: suppress_time
                                    
                                    	Maximum duration to suppress a stable route (seconds)
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy to specify criteria for dampening. This cannot be specified if any other parameters are specified
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Dampening, self).__init__()

                                        self.yang_name = "dampening"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('half_life', (YLeaf(YType.uint32, 'half-life'), ['int'])),
                                            ('reuse_threshold', (YLeaf(YType.uint32, 'reuse-threshold'), ['int'])),
                                            ('suppress_threshold', (YLeaf(YType.uint32, 'suppress-threshold'), ['int'])),
                                            ('suppress_time', (YLeaf(YType.uint32, 'suppress-time'), ['int'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ])
                                        self.half_life = None
                                        self.reuse_threshold = None
                                        self.suppress_threshold = None
                                        self.suppress_time = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "dampening"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Dampening, ['half_life', 'reuse_threshold', 'suppress_threshold', 'suppress_time', 'route_policy_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Dampening']['meta_info']


                                class RipRoutes(_Entity_):
                                    """
                                    Redistribute RIP routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\: int
                                    
                                    	**range:** 0..127
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RipRoutes, self).__init__()

                                        self.yang_name = "rip-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                        ])
                                        self.default_metric = None
                                        self.route_policy_name = None
                                        self.not_used = None
                                        self._segment_path = lambda: "rip-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RipRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.RipRoutes']['meta_info']


                                class LispRoutes(_Entity_):
                                    """
                                    Redistribute lisp routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LispRoutes, self).__init__()

                                        self.yang_name = "lisp-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ])
                                        self.default_metric = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "lisp-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LispRoutes, ['default_metric', 'route_policy_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LispRoutes']['meta_info']


                                class StaticRoutes(_Entity_):
                                    """
                                    Redistribute static routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\: int
                                    
                                    	**range:** 0..127
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.StaticRoutes, self).__init__()

                                        self.yang_name = "static-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                        ])
                                        self.default_metric = None
                                        self.route_policy_name = None
                                        self.not_used = None
                                        self._segment_path = lambda: "static-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.StaticRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.StaticRoutes']['meta_info']


                                class Distance(_Entity_):
                                    """
                                    Define an administrative distance
                                    
                                    .. attribute:: external_routes
                                    
                                    	Distance for routes external to the AS
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: internal_routes
                                    
                                    	Distance for routes internal to the AS
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: local_routes
                                    
                                    	Distance for local routes
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Distance, self).__init__()

                                        self.yang_name = "distance"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('external_routes', (YLeaf(YType.uint32, 'external-routes'), ['int'])),
                                            ('internal_routes', (YLeaf(YType.uint32, 'internal-routes'), ['int'])),
                                            ('local_routes', (YLeaf(YType.uint32, 'local-routes'), ['int'])),
                                        ])
                                        self.external_routes = None
                                        self.internal_routes = None
                                        self.local_routes = None
                                        self._segment_path = lambda: "distance"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Distance, ['external_routes', 'internal_routes', 'local_routes'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.Distance']['meta_info']


                                class ApplicationRoutes(_Entity_):
                                    """
                                    Redistribute information for Application routes.
                                    
                                    .. attribute:: application_route
                                    
                                    	Redistribute application routes
                                    	**type**\: list of  		 :py:class:`ApplicationRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes.ApplicationRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes, self).__init__()

                                        self.yang_name = "application-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("application-route", ("application_route", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes.ApplicationRoute))])
                                        self._leafs = OrderedDict()

                                        self.application_route = YList(self)
                                        self._segment_path = lambda: "application-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes, [], name, value)


                                    class ApplicationRoute(_Entity_):
                                        """
                                        Redistribute application routes
                                        
                                        .. attribute:: instance_name  (key)
                                        
                                        	OnePK application name
                                        	**type**\: str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\: int
                                        
                                        	**range:** 0..127
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes.ApplicationRoute, self).__init__()

                                            self.yang_name = "application-route"
                                            self.yang_parent_name = "application-routes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['instance_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                            ])
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.not_used = None
                                            self._segment_path = lambda: "application-route" + "[instance-name='" + str(self.instance_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes.ApplicationRoute, ['instance_name', 'default_metric', 'route_policy_name', 'not_used'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes.ApplicationRoute']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ApplicationRoutes']['meta_info']


                                class LabelMode(_Entity_):
                                    """
                                    BGP 6PE/MPLS\-VPN label allocation mode
                                    
                                    .. attribute:: label_allocation_mode
                                    
                                    	Label allocation mode\: per\-ce  Set per CE label mode, per\-vrf Set per VRF label mode, per\-prefix Set per Prefix label mode (for MPLS\-VPN only)
                                    	**type**\: str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Label mode route policy name
                                    	**type**\: str
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelMode, self).__init__()

                                        self.yang_name = "label-mode"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('label_allocation_mode', (YLeaf(YType.str, 'label-allocation-mode'), ['str'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ])
                                        self.label_allocation_mode = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "label-mode"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelMode, ['label_allocation_mode', 'route_policy_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.LabelMode']['meta_info']


                                class EigrpRoutes(_Entity_):
                                    """
                                    Redistribute information for EIGRP routes.
                                    
                                    .. attribute:: eigrp_route
                                    
                                    	Redistribute EIGRP routes
                                    	**type**\: list of  		 :py:class:`EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes.EigrpRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes, self).__init__()

                                        self.yang_name = "eigrp-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("eigrp-route", ("eigrp_route", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes.EigrpRoute))])
                                        self._leafs = OrderedDict()

                                        self.eigrp_route = YList(self)
                                        self._segment_path = lambda: "eigrp-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes, [], name, value)


                                    class EigrpRoute(_Entity_):
                                        """
                                        Redistribute EIGRP routes
                                        
                                        .. attribute:: instance_name  (key)
                                        
                                        	EIGRP router tag
                                        	**type**\: str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: redist_type
                                        
                                        	Redistribution type\: 01 for internal routes, 02 for external routes, Logical combinations permitted
                                        	**type**\: str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{1,8}
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes.EigrpRoute, self).__init__()

                                            self.yang_name = "eigrp-route"
                                            self.yang_parent_name = "eigrp-routes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['instance_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('redist_type', (YLeaf(YType.str, 'redist-type'), ['str'])),
                                            ])
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.redist_type = None
                                            self._segment_path = lambda: "eigrp-route" + "[instance-name='" + str(self.instance_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes.EigrpRoute, ['instance_name', 'default_metric', 'route_policy_name', 'redist_type'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes.EigrpRoute']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.EigrpRoutes']['meta_info']


                                class SourcedNetworks(_Entity_):
                                    """
                                    Specify a network to announce via BGP
                                    
                                    .. attribute:: sourced_network
                                    
                                    	Sourced network configuration
                                    	**type**\: list of  		 :py:class:`SourcedNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks.SourcedNetwork>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks, self).__init__()

                                        self.yang_name = "sourced-networks"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("sourced-network", ("sourced_network", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks.SourcedNetwork))])
                                        self._leafs = OrderedDict()

                                        self.sourced_network = YList(self)
                                        self._segment_path = lambda: "sourced-networks"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks, [], name, value)


                                    class SourcedNetwork(_Entity_):
                                        """
                                        Sourced network configuration
                                        
                                        .. attribute:: network_addr  (key)
                                        
                                        	Network in prefix/length format (address part)
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: network_prefix  (key)
                                        
                                        	Network in prefix/length format (prefix part)
                                        	**type**\: int
                                        
                                        	**range:** 0..128
                                        
                                        .. attribute:: backdoor
                                        
                                        	Specify a BGP backdoor route, default is FALSE
                                        	**type**\: bool
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks.SourcedNetwork, self).__init__()

                                            self.yang_name = "sourced-network"
                                            self.yang_parent_name = "sourced-networks"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['network_addr','network_prefix']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('network_addr', (YLeaf(YType.str, 'network-addr'), ['str','str'])),
                                                ('network_prefix', (YLeaf(YType.uint16, 'network-prefix'), ['int'])),
                                                ('backdoor', (YLeaf(YType.boolean, 'backdoor'), ['bool'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ])
                                            self.network_addr = None
                                            self.network_prefix = None
                                            self.backdoor = None
                                            self.route_policy_name = None
                                            self._segment_path = lambda: "sourced-network" + "[network-addr='" + str(self.network_addr) + "']" + "[network-prefix='" + str(self.network_prefix) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks.SourcedNetwork, ['network_addr', 'network_prefix', 'backdoor', 'route_policy_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks.SourcedNetwork']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SourcedNetworks']['meta_info']


                                class ConnectedRoutes(_Entity_):
                                    """
                                    Redistribute connected routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\: int
                                    
                                    	**range:** 0..127
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ConnectedRoutes, self).__init__()

                                        self.yang_name = "connected-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                        ])
                                        self.default_metric = None
                                        self.route_policy_name = None
                                        self.not_used = None
                                        self._segment_path = lambda: "connected-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ConnectedRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.ConnectedRoutes']['meta_info']


                                class AllocateLabel(_Entity_):
                                    """
                                    Label allocation policy
                                    
                                    .. attribute:: all
                                    
                                    	Whether all nets should be labeled, default is FALSE
                                    	**type**\: bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    .. attribute:: un_labeled_path
                                    
                                    	Allocate label for unlabeled paths too
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AllocateLabel, self).__init__()

                                        self.yang_name = "allocate-label"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('all', (YLeaf(YType.boolean, 'all'), ['bool'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ('un_labeled_path', (YLeaf(YType.boolean, 'un-labeled-path'), ['bool'])),
                                        ])
                                        self.all = None
                                        self.route_policy_name = None
                                        self.un_labeled_path = None
                                        self._segment_path = lambda: "allocate-label"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AllocateLabel, ['all', 'route_policy_name', 'un_labeled_path'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AllocateLabel']['meta_info']


                                class AdditionalPathsSelection(_Entity_):
                                    """
                                    Configure additional paths selection
                                    
                                    .. attribute:: selection
                                    
                                    	Enable/disable selection 
                                    	**type**\:  :py:class:`BgpAfAdditionalPathsCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAfAdditionalPathsCfg>`
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy for selection
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AdditionalPathsSelection, self).__init__()

                                        self.yang_name = "additional-paths-selection"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('selection', (YLeaf(YType.enumeration, 'selection'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpAfAdditionalPathsCfg', '')])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ])
                                        self.selection = None
                                        self.route_policy_name = None
                                        self._segment_path = lambda: "additional-paths-selection"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AdditionalPathsSelection, ['selection', 'route_policy_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.AdditionalPathsSelection']['meta_info']


                                class OspfRoutes(_Entity_):
                                    """
                                    Redistribute information for OSPF routes.
                                    
                                    .. attribute:: ospf_route
                                    
                                    	Redistribute OSPF routes
                                    	**type**\: list of  		 :py:class:`OspfRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes.OspfRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes, self).__init__()

                                        self.yang_name = "ospf-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("ospf-route", ("ospf_route", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes.OspfRoute))])
                                        self._leafs = OrderedDict()

                                        self.ospf_route = YList(self)
                                        self._segment_path = lambda: "ospf-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes, [], name, value)


                                    class OspfRoute(_Entity_):
                                        """
                                        Redistribute OSPF routes
                                        
                                        .. attribute:: instance_name  (key)
                                        
                                        	OSPF router tag
                                        	**type**\: str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\: str
                                        
                                        .. attribute:: redist_type
                                        
                                        	Redistribution type\: 01 for internal routes, 02 for external routes of type 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1, 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA external routes.  Logical combinations permitted
                                        	**type**\: str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{1,8}
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes.OspfRoute, self).__init__()

                                            self.yang_name = "ospf-route"
                                            self.yang_parent_name = "ospf-routes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['instance_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('instance_name', (YLeaf(YType.str, 'instance-name'), ['str'])),
                                                ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                                ('redist_type', (YLeaf(YType.str, 'redist-type'), ['str'])),
                                            ])
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.route_policy_name = None
                                            self.redist_type = None
                                            self._segment_path = lambda: "ospf-route" + "[instance-name='" + str(self.instance_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes.OspfRoute, ['instance_name', 'default_metric', 'route_policy_name', 'redist_type'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes.OspfRoute']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.OspfRoutes']['meta_info']


                                class MobileRoutes(_Entity_):
                                    """
                                    Redistribute mobile routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\: int
                                    
                                    	**range:** 0..127
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.MobileRoutes, self).__init__()

                                        self.yang_name = "mobile-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                        ])
                                        self.default_metric = None
                                        self.route_policy_name = None
                                        self.not_used = None
                                        self._segment_path = lambda: "mobile-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.MobileRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.MobileRoutes']['meta_info']


                                class SubscriberRoutes(_Entity_):
                                    """
                                    Redistribute subscriber routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\: str
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\: int
                                    
                                    	**range:** 0..127
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SubscriberRoutes, self).__init__()

                                        self.yang_name = "subscriber-routes"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self.is_presence_container = True
                                        self._leafs = OrderedDict([
                                            ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                            ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                            ('not_used', (YLeaf(YType.uint32, 'not-used'), ['int'])),
                                        ])
                                        self.default_metric = None
                                        self.route_policy_name = None
                                        self.not_used = None
                                        self._segment_path = lambda: "subscriber-routes"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SubscriberRoutes, ['default_metric', 'route_policy_name', 'not_used'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SubscriberRoutes']['meta_info']


                                class SegmentRouting(_Entity_):
                                    """
                                    Segment\-routing Configurations
                                    
                                    .. attribute:: srv6
                                    
                                    	SRv6 Configurations
                                    	**type**\:  :py:class:`Srv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting.Srv6>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting, self).__init__()

                                        self.yang_name = "segment-routing"
                                        self.yang_parent_name = "global-af"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("srv6", ("srv6", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting.Srv6))])
                                        self._leafs = OrderedDict()

                                        self.srv6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting.Srv6()
                                        self.srv6.parent = self
                                        self._children_name_map["srv6"] = "srv6"
                                        self._segment_path = lambda: "segment-routing"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting, [], name, value)


                                    class Srv6(_Entity_):
                                        """
                                        SRv6 Configurations
                                        
                                        .. attribute:: enable
                                        
                                        	Enable SRv6 configuration submode
                                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: srv6sid_allocation_mode
                                        
                                        	SID allocation mode\: per\-ce  Set per CE SID mode,per\-vrf Set per VRF SID mode
                                        	**type**\: str
                                        
                                        .. attribute:: locator_name
                                        
                                        	Configure Locator name for SID allocation
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2018-06-15'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting.Srv6, self).__init__()

                                            self.yang_name = "srv6"
                                            self.yang_parent_name = "segment-routing"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                                ('srv6sid_allocation_mode', (YLeaf(YType.str, 'srv6sid-allocation-mode'), ['str'])),
                                                ('locator_name', (YLeaf(YType.str, 'locator-name'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.srv6sid_allocation_mode = None
                                            self.locator_name = None
                                            self._segment_path = lambda: "srv6"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting.Srv6, ['enable', 'srv6sid_allocation_mode', 'locator_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting.Srv6']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf.SegmentRouting']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs.GlobalAf']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalAfs']['meta_info']


                        class GlobalGracefulMaintenanceActivate(_Entity_):
                            """
                            Graceful maintenance activate
                            configurations
                            
                            .. attribute:: interfaces
                            
                            	BGP graceful maintenance interface table
                            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces>`
                            
                            .. attribute:: locations
                            
                            	BGP graceful maintenance location table
                            	**type**\:  :py:class:`Locations <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations>`
                            
                            .. attribute:: retain_routes
                            
                            	BGP graceful maintenance retain routes 
                            	**type**\: bool
                            
                            .. attribute:: enable
                            
                            	Enable graceful maintenance activate configuration submode
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: all_neighbor
                            
                            	Enable graceful maintenance for all neighbors without graceful maintenance config
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate, self).__init__()

                                self.yang_name = "global-graceful-maintenance-activate"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("interfaces", ("interfaces", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces)), ("locations", ("locations", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations))])
                                self._leafs = OrderedDict([
                                    ('retain_routes', (YLeaf(YType.boolean, 'retain-routes'), ['bool'])),
                                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                    ('all_neighbor', (YLeaf(YType.boolean, 'all-neighbor'), ['bool'])),
                                ])
                                self.retain_routes = None
                                self.enable = None
                                self.all_neighbor = None

                                self.interfaces = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces()
                                self.interfaces.parent = self
                                self._children_name_map["interfaces"] = "interfaces"

                                self.locations = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations()
                                self.locations.parent = self
                                self._children_name_map["locations"] = "locations"
                                self._segment_path = lambda: "global-graceful-maintenance-activate"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate, ['retain_routes', 'enable', 'all_neighbor'], name, value)


                            class Interfaces(_Entity_):
                                """
                                BGP graceful maintenance interface table
                                
                                .. attribute:: interface
                                
                                	Enable graceful maintenance for e\-bgp directly connected neighbors going over this interface
                                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces.Interface>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces, self).__init__()

                                    self.yang_name = "interfaces"
                                    self.yang_parent_name = "global-graceful-maintenance-activate"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("interface", ("interface", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces.Interface))])
                                    self._leafs = OrderedDict()

                                    self.interface = YList(self)
                                    self._segment_path = lambda: "interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces, [], name, value)


                                class Interface(_Entity_):
                                    """
                                    Enable graceful maintenance for e\-bgp
                                    directly connected neighbors going over
                                    this interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Name of Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces.Interface, self).__init__()

                                        self.yang_name = "interface"
                                        self.yang_parent_name = "interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces.Interface, ['interface_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces.Interface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Interfaces']['meta_info']


                            class Locations(_Entity_):
                                """
                                BGP graceful maintenance location table
                                
                                .. attribute:: location
                                
                                	Enable graceful maintenance for e\-bgp directly connected neighbors going over this line\-card (location)
                                	**type**\: list of  		 :py:class:`Location <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations.Location>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations, self).__init__()

                                    self.yang_name = "locations"
                                    self.yang_parent_name = "global-graceful-maintenance-activate"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("location", ("location", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations.Location))])
                                    self._leafs = OrderedDict()

                                    self.location = YList(self)
                                    self._segment_path = lambda: "locations"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations, [], name, value)


                                class Location(_Entity_):
                                    """
                                    Enable graceful maintenance for e\-bgp
                                    directly connected neighbors going over
                                    this line\-card (location)
                                    
                                    .. attribute:: location  (key)
                                    
                                    	Name of Location
                                    	**type**\: str
                                    
                                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2018-06-15'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations.Location, self).__init__()

                                        self.yang_name = "location"
                                        self.yang_parent_name = "locations"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['location']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('location', (YLeaf(YType.str, 'location'), ['str'])),
                                        ])
                                        self.location = None
                                        self._segment_path = lambda: "location" + "[location='" + str(self.location) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations.Location, ['location'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations.Location']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate.Locations']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalGracefulMaintenanceActivate']['meta_info']


                        class RpkiStaticRoutes(_Entity_):
                            """
                            RPKI static route configuration
                            
                            .. attribute:: rpki_static_route
                            
                            	RPKI static route
                            	**type**\: list of  		 :py:class:`RpkiStaticRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes.RpkiStaticRoute>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes, self).__init__()

                                self.yang_name = "rpki-static-routes"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("rpki-static-route", ("rpki_static_route", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes.RpkiStaticRoute))])
                                self._leafs = OrderedDict()

                                self.rpki_static_route = YList(self)
                                self._segment_path = lambda: "rpki-static-routes"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes, [], name, value)


                            class RpkiStaticRoute(_Entity_):
                                """
                                RPKI static route
                                
                                .. attribute:: address  (key)
                                
                                	Address
                                	**type**\: union of the below types:
                                
                                		**type**\: str
                                
                                			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                		**type**\: str
                                
                                			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: minimum  (key)
                                
                                	Minimum Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                .. attribute:: maximum  (key)
                                
                                	Maximum Prefix Length
                                	**type**\: int
                                
                                	**range:** 1..128
                                
                                .. attribute:: as_  (key)
                                
                                	AS Number
                                	**type**\: int
                                
                                	**range:** 1..4294967295
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes.RpkiStaticRoute, self).__init__()

                                    self.yang_name = "rpki-static-route"
                                    self.yang_parent_name = "rpki-static-routes"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['address','minimum','maximum','as_']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', (YLeaf(YType.str, 'address'), ['str','str'])),
                                        ('minimum', (YLeaf(YType.uint32, 'minimum'), ['int'])),
                                        ('maximum', (YLeaf(YType.uint32, 'maximum'), ['int'])),
                                        ('as_', (YLeaf(YType.uint32, 'as'), ['int'])),
                                    ])
                                    self.address = None
                                    self.minimum = None
                                    self.maximum = None
                                    self.as_ = None
                                    self._segment_path = lambda: "rpki-static-route" + "[address='" + str(self.address) + "']" + "[minimum='" + str(self.minimum) + "']" + "[maximum='" + str(self.maximum) + "']" + "[as='" + str(self.as_) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes.RpkiStaticRoute, ['address', 'minimum', 'maximum', 'as_'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes.RpkiStaticRoute']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.RpkiStaticRoutes']['meta_info']


                        class MplsActivatedInterfaces(_Entity_):
                            """
                            Configure list of MPLS activated interfaces
                            
                            .. attribute:: mpls_activated_interface
                            
                            	Configure a MPLS activated interface
                            	**type**\: list of  		 :py:class:`MplsActivatedInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces.MplsActivatedInterface>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces, self).__init__()

                                self.yang_name = "mpls-activated-interfaces"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("mpls-activated-interface", ("mpls_activated_interface", Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces.MplsActivatedInterface))])
                                self._leafs = OrderedDict()

                                self.mpls_activated_interface = YList(self)
                                self._segment_path = lambda: "mpls-activated-interfaces"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces, [], name, value)


                            class MplsActivatedInterface(_Entity_):
                                """
                                Configure a MPLS activated interface
                                
                                .. attribute:: interface_name  (key)
                                
                                	Interface Name
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2018-06-15'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces.MplsActivatedInterface, self).__init__()

                                    self.yang_name = "mpls-activated-interface"
                                    self.yang_parent_name = "mpls-activated-interfaces"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                    ])
                                    self.interface_name = None
                                    self._segment_path = lambda: "mpls-activated-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces.MplsActivatedInterface, ['interface_name'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces.MplsActivatedInterface']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.MplsActivatedInterfaces']['meta_info']


                        class GlobalTimers(_Entity_):
                            """
                            Adjust routing timers.
                            
                            .. attribute:: keepalive
                            
                            	Keepalive interval (seconds)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 60
                            
                            .. attribute:: hold_time
                            
                            	Hold time (seconds).  Specify 0 to disable keepalives/hold time
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 180
                            
                            .. attribute:: min_accept_hold_time
                            
                            	Minimum acceptable hold time (seconds). Specify 0 to disable keepalives/hold time
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 3
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalTimers, self).__init__()

                                self.yang_name = "global-timers"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('keepalive', (YLeaf(YType.uint32, 'keepalive'), ['int'])),
                                    ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                                    ('min_accept_hold_time', (YLeaf(YType.uint32, 'min-accept-hold-time'), ['int'])),
                                ])
                                self.keepalive = None
                                self.hold_time = None
                                self.min_accept_hold_time = None
                                self._segment_path = lambda: "global-timers"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalTimers, ['keepalive', 'hold_time', 'min_accept_hold_time'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.GlobalTimers']['meta_info']


                        class Bfd(_Entity_):
                            """
                            BFD configuration
                            
                            .. attribute:: detection_multiplier
                            
                            	Detection multiplier for BFD sessions created by BGP
                            	**type**\: int
                            
                            	**range:** 2..16
                            
                            .. attribute:: interval
                            
                            	Hello interval for BFD sessions created by BGP
                            	**type**\: int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Bfd, self).__init__()

                                self.yang_name = "bfd"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                    ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                ])
                                self.detection_multiplier = None
                                self.interval = None
                                self._segment_path = lambda: "bfd"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Bfd, ['detection_multiplier', 'interval'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.Bfd']['meta_info']


                        class SendSocketBufferSizes(_Entity_):
                            """
                            set socket parameters
                            
                            .. attribute:: socket_send_size
                            
                            	Send socket buffer size in bytes
                            	**type**\: int
                            
                            	**range:** 4096..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 24576
                            
                            .. attribute:: bgp_send_size
                            
                            	BGP Write buffer size in bytes
                            	**type**\: int
                            
                            	**range:** 4096..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 4096
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SendSocketBufferSizes, self).__init__()

                                self.yang_name = "send-socket-buffer-sizes"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('socket_send_size', (YLeaf(YType.uint32, 'socket-send-size'), ['int'])),
                                    ('bgp_send_size', (YLeaf(YType.uint32, 'bgp-send-size'), ['int'])),
                                ])
                                self.socket_send_size = None
                                self.bgp_send_size = None
                                self._segment_path = lambda: "send-socket-buffer-sizes"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SendSocketBufferSizes, ['socket_send_size', 'bgp_send_size'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.SendSocketBufferSizes']['meta_info']


                        class ReceiveSocketBufferSizes(_Entity_):
                            """
                            Set socket and BGP receive buffer sizes
                            
                            .. attribute:: socket_receive_size
                            
                            	Receive socket buffer size in bytes
                            	**type**\: int
                            
                            	**range:** 512..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 32768
                            
                            .. attribute:: bgp_receive_size
                            
                            	BGP Read buffer size in bytes
                            	**type**\: int
                            
                            	**range:** 512..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 4096
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2018-06-15'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ReceiveSocketBufferSizes, self).__init__()

                                self.yang_name = "receive-socket-buffer-sizes"
                                self.yang_parent_name = "global"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('socket_receive_size', (YLeaf(YType.uint32, 'socket-receive-size'), ['int'])),
                                    ('bgp_receive_size', (YLeaf(YType.uint32, 'bgp-receive-size'), ['int'])),
                                ])
                                self.socket_receive_size = None
                                self.bgp_receive_size = None
                                self._segment_path = lambda: "receive-socket-buffer-sizes"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ReceiveSocketBufferSizes, ['socket_receive_size', 'bgp_receive_size'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global.ReceiveSocketBufferSizes']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['Bgp.Instance.InstanceAs']['meta_info']

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
            return meta._meta_table['Bgp.Instance']['meta_info']

    def clone_ptr(self):
        self._top_entity = Bgp()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['Bgp']['meta_info']


class BmpServerAll(_Entity_):
    """
    bmp server all
    
    .. attribute:: route_monitoring
    
    	Enable Route Monitoring capability for the BMP servers. BGP update messages messages will be regenrated with a table walk 
    	**type**\:  :py:class:`RouteMonitoring <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServerAll.RouteMonitoring>`
    
    .. attribute:: maximum_buffer_size
    
    	Range in MegaBytes for the maximum buffer size of BMP message queue. The maximum buf\-size is 20% and default buf\-size is 15% of the platform virtual memory max\-limit (aka rlimit). Please run show bgp process performance\-statistics to see the individual values. Unit is in Megabytes
    	**type**\: int
    
    	**range:** 1..4294967295
    
    	**units**\: megabyte
    
    

    """

    _prefix = 'ipv4-bgp-cfg'
    _revision = '2018-06-15'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(BmpServerAll, self).__init__()
        self._top_entity = None

        self.yang_name = "bmp-server-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("route-monitoring", ("route_monitoring", BmpServerAll.RouteMonitoring))])
        self._leafs = OrderedDict([
            ('maximum_buffer_size', (YLeaf(YType.uint32, 'maximum-buffer-size'), ['int'])),
        ])
        self.maximum_buffer_size = None

        self.route_monitoring = BmpServerAll.RouteMonitoring()
        self.route_monitoring.parent = self
        self._children_name_map["route_monitoring"] = "route-monitoring"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server-all"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(BmpServerAll, ['maximum_buffer_size'], name, value)


    class RouteMonitoring(_Entity_):
        """
        Enable Route Monitoring capability for the BMP
        servers.
        BGP update messages messages will be
        regenrated with a table walk
        
        
        .. attribute:: policy
        
        	Specify if the routes packed in update messages should be before or after the application of route\-policy
        	**type**\:  :py:class:`BmpPolicySelect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpPolicySelect>`
        
        .. attribute:: direction
        
        	Specify if the routes should be picked up at inbound or outbound direction
        	**type**\:  :py:class:`BmpRouteDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpRouteDirection>`
        
        

        """

        _prefix = 'ipv4-bgp-cfg'
        _revision = '2018-06-15'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(BmpServerAll.RouteMonitoring, self).__init__()

            self.yang_name = "route-monitoring"
            self.yang_parent_name = "bmp-server-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('policy', (YLeaf(YType.enumeration, 'policy'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BmpPolicySelect', '')])),
                ('direction', (YLeaf(YType.enumeration, 'direction'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg', 'BmpRouteDirection', '')])),
            ])
            self.policy = None
            self.direction = None
            self._segment_path = lambda: "route-monitoring"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server-all/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(BmpServerAll.RouteMonitoring, ['policy', 'direction'], name, value)

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
            return meta._meta_table['BmpServerAll.RouteMonitoring']['meta_info']

    def clone_ptr(self):
        self._top_entity = BmpServerAll()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BmpServerAll']['meta_info']


class BmpServers(_Entity_):
    """
    bmp servers
    
    .. attribute:: bmp_server
    
    	A particular BMP server
    	**type**\: list of  		 :py:class:`BmpServer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer>`
    
    

    """

    _prefix = 'ipv4-bgp-cfg'
    _revision = '2018-06-15'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(BmpServers, self).__init__()
        self._top_entity = None

        self.yang_name = "bmp-servers"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("bmp-server", ("bmp_server", BmpServers.BmpServer))])
        self._leafs = OrderedDict()

        self.bmp_server = YList(self)
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(BmpServers, [], name, value)


    class BmpServer(_Entity_):
        """
        A particular BMP server
        
        .. attribute:: server_id  (key)
        
        	BMP Server ID
        	**type**\: int
        
        	**range:** 1..8
        
        .. attribute:: initial_refresh_delay
        
        	Initial refresh to generate BGP updates
        	**type**\:  :py:class:`InitialRefreshDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer.InitialRefreshDelay>`
        
        .. attribute:: host_port
        
        	Configure Host Name/Address and Port for BMP Server
        	**type**\:  :py:class:`HostPort <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer.HostPort>`
        
        .. attribute:: tos
        
        	TOS (Type Of Service)
        	**type**\:  :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer.Tos>`
        
        .. attribute:: create
        
        	BMP Server Creation
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: maximum_buffer_size
        
        	Range in MegaBytes for the maximum buffer size of BMP message queue. The maximum buf\-size is 20% and default buf\-size is 15% of the platform virtual memory max\-limit (aka rlimit) . Please run show bgp process performance\-statistics to see the individual values. Unit is in Megabytes
        	**type**\: int
        
        	**range:** 1..4294967295
        
        	**units**\: megabyte
        
        .. attribute:: initial_delay
        
        	Initial connect delay in seconds in sending updates
        	**type**\: int
        
        	**range:** 1..3600
        
        	**units**\: second
        
        .. attribute:: flapping_delay
        
        	Delay in connecting to BMP Server after a flap had been detected
        	**type**\: int
        
        	**range:** 60..3600
        
        	**units**\: second
        
        .. attribute:: status_report_interval
        
        	Stats reporting period for BMP server
        	**type**\: int
        
        	**range:** 1..3600
        
        	**units**\: second
        
        .. attribute:: description
        
        	String to describe the BMP server
        	**type**\: str
        
        .. attribute:: bmptcp_maximum_segment_size
        
        	configure TCP maximum segment size. Default=16384
        	**type**\: int
        
        	**range:** 68..10000
        
        	**units**\: byte
        
        .. attribute:: bmptcp_keep_alive
        
        	configure TCP keep alives to be exchanged between client and server. Default=1000
        	**type**\: int
        
        	**range:** 0..7200
        
        	**units**\: second
        
        .. attribute:: vrf
        
        	VRF for BMP Server
        	**type**\: str
        
        .. attribute:: shutdown
        
        	Shutdown connection to BMP server
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: update_source_interface
        
        	Select an interface to configure
        	**type**\: str
        
        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
        
        

        """

        _prefix = 'ipv4-bgp-cfg'
        _revision = '2018-06-15'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(BmpServers.BmpServer, self).__init__()

            self.yang_name = "bmp-server"
            self.yang_parent_name = "bmp-servers"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = ['server_id']
            self._child_classes = OrderedDict([("initial-refresh-delay", ("initial_refresh_delay", BmpServers.BmpServer.InitialRefreshDelay)), ("host-port", ("host_port", BmpServers.BmpServer.HostPort)), ("tos", ("tos", BmpServers.BmpServer.Tos))])
            self._leafs = OrderedDict([
                ('server_id', (YLeaf(YType.uint32, 'server-id'), ['int'])),
                ('create', (YLeaf(YType.empty, 'create'), ['Empty'])),
                ('maximum_buffer_size', (YLeaf(YType.uint32, 'maximum-buffer-size'), ['int'])),
                ('initial_delay', (YLeaf(YType.uint32, 'initial-delay'), ['int'])),
                ('flapping_delay', (YLeaf(YType.uint32, 'flapping-delay'), ['int'])),
                ('status_report_interval', (YLeaf(YType.uint32, 'status-report-interval'), ['int'])),
                ('description', (YLeaf(YType.str, 'description'), ['str'])),
                ('bmptcp_maximum_segment_size', (YLeaf(YType.uint32, 'bmptcp-maximum-segment-size'), ['int'])),
                ('bmptcp_keep_alive', (YLeaf(YType.uint32, 'bmptcp-keep-alive'), ['int'])),
                ('vrf', (YLeaf(YType.str, 'vrf'), ['str'])),
                ('shutdown', (YLeaf(YType.empty, 'shutdown'), ['Empty'])),
                ('update_source_interface', (YLeaf(YType.str, 'update-source-interface'), ['str'])),
            ])
            self.server_id = None
            self.create = None
            self.maximum_buffer_size = None
            self.initial_delay = None
            self.flapping_delay = None
            self.status_report_interval = None
            self.description = None
            self.bmptcp_maximum_segment_size = None
            self.bmptcp_keep_alive = None
            self.vrf = None
            self.shutdown = None
            self.update_source_interface = None

            self.initial_refresh_delay = BmpServers.BmpServer.InitialRefreshDelay()
            self.initial_refresh_delay.parent = self
            self._children_name_map["initial_refresh_delay"] = "initial-refresh-delay"

            self.host_port = BmpServers.BmpServer.HostPort()
            self.host_port.parent = self
            self._children_name_map["host_port"] = "host-port"

            self.tos = BmpServers.BmpServer.Tos()
            self.tos.parent = self
            self._children_name_map["tos"] = "tos"
            self._segment_path = lambda: "bmp-server" + "[server-id='" + str(self.server_id) + "']"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(BmpServers.BmpServer, ['server_id', 'create', 'maximum_buffer_size', 'initial_delay', 'flapping_delay', 'status_report_interval', 'description', 'bmptcp_maximum_segment_size', 'bmptcp_keep_alive', 'vrf', 'shutdown', 'update_source_interface'], name, value)


        class InitialRefreshDelay(_Entity_):
            """
            Initial refresh to generate BGP updates
            
            .. attribute:: delay
            
            	Delay in seconds before sending Refresh request to Peers
            	**type**\: int
            
            	**range:** 1..3600
            
            	**units**\: second
            
            .. attribute:: spread
            
            	Spread over which to send initial Refresh request to Peers
            	**type**\: int
            
            	**range:** 1..3600
            
            .. attribute:: skip
            
            	Skip Route Refresh request to Peers
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2018-06-15'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(BmpServers.BmpServer.InitialRefreshDelay, self).__init__()

                self.yang_name = "initial-refresh-delay"
                self.yang_parent_name = "bmp-server"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('delay', (YLeaf(YType.uint32, 'delay'), ['int'])),
                    ('spread', (YLeaf(YType.uint32, 'spread'), ['int'])),
                    ('skip', (YLeaf(YType.empty, 'skip'), ['Empty'])),
                ])
                self.delay = None
                self.spread = None
                self.skip = None
                self._segment_path = lambda: "initial-refresh-delay"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(BmpServers.BmpServer.InitialRefreshDelay, ['delay', 'spread', 'skip'], name, value)

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['BmpServers.BmpServer.InitialRefreshDelay']['meta_info']


        class HostPort(_Entity_):
            """
            Configure Host Name/Address and Port for BMP
            Server
            
            .. attribute:: host
            
            	Name of the BMP server(accepts IPv4/IPv6 Address format too)
            	**type**\: str
            
            .. attribute:: port
            
            	Port Number of listening BMP server
            	**type**\: int
            
            	**range:** 1..65535
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2018-06-15'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(BmpServers.BmpServer.HostPort, self).__init__()

                self.yang_name = "host-port"
                self.yang_parent_name = "bmp-server"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('host', (YLeaf(YType.str, 'host'), ['str'])),
                    ('port', (YLeaf(YType.uint16, 'port'), ['int'])),
                ])
                self.host = None
                self.port = None
                self._segment_path = lambda: "host-port"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(BmpServers.BmpServer.HostPort, ['host', 'port'], name, value)

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['BmpServers.BmpServer.HostPort']['meta_info']


        class Tos(_Entity_):
            """
            TOS (Type Of Service)
            
            .. attribute:: type
            
            	Set type of service
            	**type**\:  :py:class:`BgpTos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTos>`
            
            .. attribute:: value
            
            	TOS value to set
            	**type**\: union of the below types:
            
            		**type**\:  :py:class:`BgpPrecedenceDscp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscp>`
            
            		**type**\: int
            
            			**range:** 0..63
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2018-06-15'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(BmpServers.BmpServer.Tos, self).__init__()

                self.yang_name = "tos"
                self.yang_parent_name = "bmp-server"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpTos', '')])),
                    ('value', (YLeaf(YType.str, 'value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes', 'BgpPrecedenceDscp', ''),'int'])),
                ])
                self.type = None
                self.value = None
                self._segment_path = lambda: "tos"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(BmpServers.BmpServer.Tos, ['type', 'value'], name, value)

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['BmpServers.BmpServer.Tos']['meta_info']

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
            return meta._meta_table['BmpServers.BmpServer']['meta_info']

    def clone_ptr(self):
        self._top_entity = BmpServers()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BmpServers']['meta_info']


