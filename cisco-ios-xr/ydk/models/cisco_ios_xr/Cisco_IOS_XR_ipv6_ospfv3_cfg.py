""" Cisco_IOS_XR_ipv6_ospfv3_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv6\-ospfv3 package configuration.

This module contains definitions
for the following management objects\:
  ospfv3\: OSPFv3 configuration

This YANG module augments the
  Cisco\-IOS\-XR\-snmp\-agent\-cfg
module with configuration data.

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class Ospfv3AddressFamily(Enum):
    """
    Ospfv3AddressFamily

    Ospfv3 address family

    .. data:: ipv6 = 1

    	IPv6 address family

    """

    ipv6 = Enum.YLeaf(1, "ipv6")


class Ospfv3Authentication(Enum):
    """
    Ospfv3Authentication

    Ospfv3 authentication

    .. data:: md5 = 1

    	MD5 algorithm

    .. data:: sha1 = 2

    	SHA1 algorithm

    """

    md5 = Enum.YLeaf(1, "md5")

    sha1 = Enum.YLeaf(2, "sha1")


class Ospfv3AuthenticationType2(Enum):
    """
    Ospfv3AuthenticationType2

    Ospfv3 authentication type2

    .. data:: null = 0

    	NULL authentication

    .. data:: md5 = 1

    	MD5 algorithm

    .. data:: sha1 = 2

    	SHA1 algorithm

    """

    null = Enum.YLeaf(0, "null")

    md5 = Enum.YLeaf(1, "md5")

    sha1 = Enum.YLeaf(2, "sha1")


class Ospfv3DomainId(Enum):
    """
    Ospfv3DomainId

    Ospfv3 domain id

    .. data:: type0005 = 5

    	Type 0x0005

    .. data:: type0105 = 261

    	Type 0x0105

    .. data:: type0205 = 517

    	Type 0x0205

    .. data:: type8005 = 32773

    	Type 0x8005

    """

    type0005 = Enum.YLeaf(5, "type0005")

    type0105 = Enum.YLeaf(261, "type0105")

    type0205 = Enum.YLeaf(517, "type0205")

    type8005 = Enum.YLeaf(32773, "type8005")


class Ospfv3EigrpRoute(Enum):
    """
    Ospfv3EigrpRoute

    Ospfv3 eigrp route

    .. data:: internal = 16384

    	EIGRP internal routes

    .. data:: external = 32768

    	EIGRP external routes

    """

    internal = Enum.YLeaf(16384, "internal")

    external = Enum.YLeaf(32768, "external")


class Ospfv3EncryptionAlgorithm(Enum):
    """
    Ospfv3EncryptionAlgorithm

    Ospfv3 encryption algorithm

    .. data:: null = 0

    	Use NULL encryption

    .. data:: des = 1

    	Use the DES algorithm

    .. data:: Y_3des = 2

    	Use the triple DES algorithm

    .. data:: aes = 3

    	Use the AES algorithm

    .. data:: aes192 = 4

    	Use the 192-bit AES algorithm

    .. data:: aes256 = 5

    	Use the 256-bit AES algorithm

    """

    null = Enum.YLeaf(0, "null")

    des = Enum.YLeaf(1, "des")

    Y_3des = Enum.YLeaf(2, "3des")

    aes = Enum.YLeaf(3, "aes")

    aes192 = Enum.YLeaf(4, "aes192")

    aes256 = Enum.YLeaf(5, "aes256")


class Ospfv3ExternalRoute(Enum):
    """
    Ospfv3ExternalRoute

    Ospfv3 external route

    .. data:: external1 = 8

    	External type 1 routes

    .. data:: external2 = 16

    	External type 2 routes

    .. data:: external = 24

    	External (type 1 and 2) routes

    """

    external1 = Enum.YLeaf(8, "external1")

    external2 = Enum.YLeaf(16, "external2")

    external = Enum.YLeaf(24, "external")


class Ospfv3FastReroute(Enum):
    """
    Ospfv3FastReroute

    Ospfv3 fast reroute

    .. data:: none = 0

    	Disable

    .. data:: per_link = 1

    	Per link

    .. data:: per_prefix = 2

    	Per prefix

    """

    none = Enum.YLeaf(0, "none")

    per_link = Enum.YLeaf(1, "per-link")

    per_prefix = Enum.YLeaf(2, "per-prefix")


class Ospfv3FastReroutePriority(Enum):
    """
    Ospfv3FastReroutePriority

    Ospfv3 fast reroute priority

    .. data:: critical = 0

    	Critical

    .. data:: high = 1

    	High

    .. data:: medium = 2

    	Medium

    .. data:: low = 3

    	Low

    """

    critical = Enum.YLeaf(0, "critical")

    high = Enum.YLeaf(1, "high")

    medium = Enum.YLeaf(2, "medium")

    low = Enum.YLeaf(3, "low")


class Ospfv3FastRerouteTiebreakers(Enum):
    """
    Ospfv3FastRerouteTiebreakers

    Ospfv3 fast reroute tiebreakers

    .. data:: downstream = 0

    	Downstream

    .. data:: line_card_disjoint = 1

    	LC Disjoint

    .. data:: lowest_metric = 2

    	Lowest metric

    .. data:: node_protect = 3

    	Node protection

    .. data:: primary_path = 4

    	Primary path

    .. data:: secondary_path = 5

    	Secondar path

    .. data:: srlg_disjoint = 6

    	SRLG

    """

    downstream = Enum.YLeaf(0, "downstream")

    line_card_disjoint = Enum.YLeaf(1, "line-card-disjoint")

    lowest_metric = Enum.YLeaf(2, "lowest-metric")

    node_protect = Enum.YLeaf(3, "node-protect")

    primary_path = Enum.YLeaf(4, "primary-path")

    secondary_path = Enum.YLeaf(5, "secondary-path")

    srlg_disjoint = Enum.YLeaf(6, "srlg-disjoint")


class Ospfv3InternalRoute(Enum):
    """
    Ospfv3InternalRoute

    Ospfv3 internal route

    .. data:: internal = 6

    	OSPFv3 internal routes

    """

    internal = Enum.YLeaf(6, "internal")


class Ospfv3LogAdj(Enum):
    """
    Ospfv3LogAdj

    Ospfv3 log adj

    .. data:: suppress = 0

    	No output

    .. data:: brief = 1

    	Limited output

    .. data:: detail = 2

    	Verbose output

    """

    suppress = Enum.YLeaf(0, "suppress")

    brief = Enum.YLeaf(1, "brief")

    detail = Enum.YLeaf(2, "detail")


class Ospfv3Metric(Enum):
    """
    Ospfv3Metric

    Ospfv3 metric

    .. data:: type1 = 1

    	OSPFv3 external type 1 metrics

    .. data:: type2 = 2

    	OSPFv3 external type 2 metrics

    """

    type1 = Enum.YLeaf(1, "type1")

    type2 = Enum.YLeaf(2, "type2")


class Ospfv3Network(Enum):
    """
    Ospfv3Network

    Ospfv3 network

    .. data:: broadcast = 1

    	Broadcast multi-access network

    .. data:: non_broadcast = 2

    	Non-broadcast multi-access network

    .. data:: point_to_point = 3

    	Point-to-point network

    .. data:: point_to_multipoint = 4

    	Point-to-multipoint network

    .. data:: non_broadcast_point_to_multipoint = 5

    	Non-broadcast point-to-multipoint network

    """

    broadcast = Enum.YLeaf(1, "broadcast")

    non_broadcast = Enum.YLeaf(2, "non-broadcast")

    point_to_point = Enum.YLeaf(3, "point-to-point")

    point_to_multipoint = Enum.YLeaf(4, "point-to-multipoint")

    non_broadcast_point_to_multipoint = Enum.YLeaf(5, "non-broadcast-point-to-multipoint")


class Ospfv3Protocol(Enum):
    """
    Ospfv3Protocol

    Ospfv3 protocol

    .. data:: all = 0

    	All

    .. data:: connected = 1

    	Connected

    .. data:: static = 3

    	Static

    .. data:: bgp = 4

    	BGP

    .. data:: isis = 6

    	ISIS

    .. data:: ospfv3 = 7

    	OSPFv3

    .. data:: eigrp = 8

    	EIGRP

    """

    all = Enum.YLeaf(0, "all")

    connected = Enum.YLeaf(1, "connected")

    static = Enum.YLeaf(3, "static")

    bgp = Enum.YLeaf(4, "bgp")

    isis = Enum.YLeaf(6, "isis")

    ospfv3 = Enum.YLeaf(7, "ospfv3")

    eigrp = Enum.YLeaf(8, "eigrp")


class Ospfv3ProtocolType2(Enum):
    """
    Ospfv3ProtocolType2

    Ospfv3 protocol type2

    .. data:: connected = 1

    	Connected

    .. data:: static = 3

    	Static

    .. data:: bgp = 4

    	BGP

    .. data:: isis = 6

    	ISIS

    .. data:: ospfv3 = 7

    	OSPFv3

    .. data:: eigrp = 8

    	EIGRP

    .. data:: subscriber = 9

    	Subscriber

    .. data:: application = 10

    	Application

    .. data:: mobile = 11

    	Mobile

    """

    connected = Enum.YLeaf(1, "connected")

    static = Enum.YLeaf(3, "static")

    bgp = Enum.YLeaf(4, "bgp")

    isis = Enum.YLeaf(6, "isis")

    ospfv3 = Enum.YLeaf(7, "ospfv3")

    eigrp = Enum.YLeaf(8, "eigrp")

    subscriber = Enum.YLeaf(9, "subscriber")

    application = Enum.YLeaf(10, "application")

    mobile = Enum.YLeaf(11, "mobile")


class Ospfv3SubsequentAddressFamily(Enum):
    """
    Ospfv3SubsequentAddressFamily

    Ospfv3 subsequent address family

    .. data:: unicast = 1

    	Unicast subsequent address family

    """

    unicast = Enum.YLeaf(1, "unicast")


class Ospfv3TraceBufSize(Enum):
    """
    Ospfv3TraceBufSize

    Ospfv3 trace buf size

    .. data:: size0 = 0

    	Disable trace

    .. data:: size256 = 256

    	trace buffer size 256

    .. data:: size512 = 512

    	trace buffer size 512

    .. data:: size1024 = 1024

    	trace buffer size 1024

    .. data:: size2048 = 2048

    	trace buffer size 2048

    .. data:: size4096 = 4096

    	trace buffer size 4096

    .. data:: size8192 = 8192

    	trace buffer size 8192

    .. data:: size16384 = 16384

    	trace buffer size 16384

    .. data:: size32768 = 32768

    	trace buffer size 32768

    .. data:: size65536 = 65536

    	trace buffer size 65536

    """

    size0 = Enum.YLeaf(0, "size0")

    size256 = Enum.YLeaf(256, "size256")

    size512 = Enum.YLeaf(512, "size512")

    size1024 = Enum.YLeaf(1024, "size1024")

    size2048 = Enum.YLeaf(2048, "size2048")

    size4096 = Enum.YLeaf(4096, "size4096")

    size8192 = Enum.YLeaf(8192, "size8192")

    size16384 = Enum.YLeaf(16384, "size16384")

    size32768 = Enum.YLeaf(32768, "size32768")

    size65536 = Enum.YLeaf(65536, "size65536")


class Ospfv3bfdEnableMode(Enum):
    """
    Ospfv3bfdEnableMode

    Ospfv3bfd enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Default BFD behavior

    .. data:: strict = 2

    	Strict Mode - Hold down adj until BFD sesion up

    """

    disable = Enum.YLeaf(0, "disable")

    default = Enum.YLeaf(1, "default")

    strict = Enum.YLeaf(2, "strict")


class Ospfv3isisRoute(Enum):
    """
    Ospfv3isisRoute

    Ospfv3isis route

    .. data:: level1 = 64

    	IS-IS level-1 routes

    .. data:: level2 = 128

    	IS-IS level-2 routes

    .. data:: level1_and2 = 192

    	IS-IS level-1 and level-2 routes

    """

    level1 = Enum.YLeaf(64, "level1")

    level2 = Enum.YLeaf(128, "level2")

    level1_and2 = Enum.YLeaf(192, "level1-and2")


class Ospfv3nsr(Enum):
    """
    Ospfv3nsr

    Ospfv3nsr

    .. data:: true = 1

    	Enable non-stop routing

    .. data:: false = 2

    	Disable non-stop routing

    """

    true = Enum.YLeaf(1, "true")

    false = Enum.YLeaf(2, "false")


class Ospfv3nssaExternalRoute(Enum):
    """
    Ospfv3nssaExternalRoute

    Ospfv3nssa external route

    .. data:: external1 = 4096

    	NSSA external type 1 routes

    .. data:: external2 = 8192

    	NSSA external type 2 routes

    .. data:: external = 12288

    	NSSA external (type 1 and 2) routes

    """

    external1 = Enum.YLeaf(4096, "external1")

    external2 = Enum.YLeaf(8192, "external2")

    external = Enum.YLeaf(12288, "external")



class Ospfv3(Entity):
    """
    OSPFv3 configuration
    
    .. attribute:: dns_name_lookup
    
    	Enable OSPFv3 router IDs as DNS names
    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
    
    .. attribute:: processes
    
    	OSPFv3 processes
    	**type**\:   :py:class:`Processes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes>`
    
    

    """

    _prefix = 'ipv6-ospfv3-cfg'
    _revision = '2017-07-14'

    def __init__(self):
        super(Ospfv3, self).__init__()
        self._top_entity = None

        self.yang_name = "ospfv3"
        self.yang_parent_name = "Cisco-IOS-XR-ipv6-ospfv3-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self._child_container_classes = {"processes" : ("processes", Ospfv3.Processes)}
        self._child_list_classes = {}

        self.dns_name_lookup = YLeaf(YType.empty, "dns-name-lookup")

        self.processes = Ospfv3.Processes()
        self.processes.parent = self
        self._children_name_map["processes"] = "processes"
        self._children_yang_names.add("processes")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3"

    def __setattr__(self, name, value):
        self._perform_setattr(Ospfv3, ['dns_name_lookup'], name, value)


    class Processes(Entity):
        """
        OSPFv3 processes
        
        .. attribute:: process
        
        	An OSPFv3 process
        	**type**\: list of    :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process>`
        
        

        """

        _prefix = 'ipv6-ospfv3-cfg'
        _revision = '2017-07-14'

        def __init__(self):
            super(Ospfv3.Processes, self).__init__()

            self.yang_name = "processes"
            self.yang_parent_name = "ospfv3"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self._child_container_classes = {}
            self._child_list_classes = {"process" : ("process", Ospfv3.Processes.Process)}

            self.process = YList(self)
            self._segment_path = lambda: "processes"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Ospfv3.Processes, [], name, value)


        class Process(Entity):
            """
            An OSPFv3 process
            
            .. attribute:: process_name  <key>
            
            	OSPFv3 process name
            	**type**\:  str
            
            	**length:** 1..32
            
            .. attribute:: af
            
            	Address Family (AF)
            	**type**\:   :py:class:`Af <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Af>`
            
            	**presence node**\: True
            
            .. attribute:: default_vrf
            
            	Default VRF related configuration
            	**type**\:   :py:class:`DefaultVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf>`
            
            .. attribute:: enable
            
            	Enable OSPFv3
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: nsr
            
            	Enable non\-stop routing
            	**type**\:   :py:class:`Ospfv3nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nsr>`
            
            	**default value**\: true
            
            .. attribute:: protocol_shutdown
            
            	Enable protocol shutdown
            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: trace_bufs
            
            	Configuration to change size of trace buffer
            	**type**\:   :py:class:`TraceBufs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.TraceBufs>`
            
            .. attribute:: vrfs
            
            	VRF related configuration
            	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs>`
            
            

            """

            _prefix = 'ipv6-ospfv3-cfg'
            _revision = '2017-07-14'

            def __init__(self):
                super(Ospfv3.Processes.Process, self).__init__()

                self.yang_name = "process"
                self.yang_parent_name = "processes"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self._child_container_classes = {"af" : ("af", Ospfv3.Processes.Process.Af), "default-vrf" : ("default_vrf", Ospfv3.Processes.Process.DefaultVrf), "trace-bufs" : ("trace_bufs", Ospfv3.Processes.Process.TraceBufs), "vrfs" : ("vrfs", Ospfv3.Processes.Process.Vrfs)}
                self._child_list_classes = {}

                self.process_name = YLeaf(YType.str, "process-name")

                self.enable = YLeaf(YType.empty, "enable")

                self.nsr = YLeaf(YType.enumeration, "nsr")

                self.protocol_shutdown = YLeaf(YType.empty, "protocol-shutdown")

                self.af = None
                self._children_name_map["af"] = "af"
                self._children_yang_names.add("af")

                self.default_vrf = Ospfv3.Processes.Process.DefaultVrf()
                self.default_vrf.parent = self
                self._children_name_map["default_vrf"] = "default-vrf"
                self._children_yang_names.add("default-vrf")

                self.trace_bufs = Ospfv3.Processes.Process.TraceBufs()
                self.trace_bufs.parent = self
                self._children_name_map["trace_bufs"] = "trace-bufs"
                self._children_yang_names.add("trace-bufs")

                self.vrfs = Ospfv3.Processes.Process.Vrfs()
                self.vrfs.parent = self
                self._children_name_map["vrfs"] = "vrfs"
                self._children_yang_names.add("vrfs")
                self._segment_path = lambda: "process" + "[process-name='" + self.process_name.get() + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3/processes/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Ospfv3.Processes.Process, ['process_name', 'enable', 'nsr', 'protocol_shutdown'], name, value)


            class Af(Entity):
                """
                Address Family (AF)
                
                .. attribute:: af_name
                
                	Address Family (AF) identifier
                	**type**\:   :py:class:`Ospfv3AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AddressFamily>`
                
                	**mandatory**\: True
                
                .. attribute:: saf_name
                
                	Subsequent Address Family (SAF) identifier
                	**type**\:   :py:class:`Ospfv3SubsequentAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3SubsequentAddressFamily>`
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospfv3.Processes.Process.Af, self).__init__()

                    self.yang_name = "af"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self._child_container_classes = {}
                    self._child_list_classes = {}
                    self.is_presence_container = True

                    self.af_name = YLeaf(YType.enumeration, "af-name")

                    self.saf_name = YLeaf(YType.enumeration, "saf-name")
                    self._segment_path = lambda: "af"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.Af, ['af_name', 'saf_name'], name, value)


            class DefaultVrf(Entity):
                """
                Default VRF related configuration
                
                .. attribute:: area_addresses
                
                	Area configuration
                	**type**\:   :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses>`
                
                .. attribute:: authentication
                
                	Authenticate OSPFv3 packets
                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Authentication>`
                
                .. attribute:: auto_cost
                
                	Calculate interface cost according to bandwidth
                	**type**\:   :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AutoCost>`
                
                	**presence node**\: True
                
                .. attribute:: bfd
                
                	Configure BFD parameters
                	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Bfd>`
                
                .. attribute:: cost
                
                	Interface cost
                	**type**\:  int
                
                	**range:** 1..65535
                
                .. attribute:: database_filter
                
                	Database filter
                	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter>`
                
                .. attribute:: dead_interval
                
                	Interval after which a neighbor is declared dead (in seconds)
                	**type**\:  int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                .. attribute:: default_information
                
                	Control distribution of default information
                	**type**\:   :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DefaultInformation>`
                
                .. attribute:: default_metric
                
                	Set metric of redistributed routes
                	**type**\:  int
                
                	**range:** 1..16777214
                
                .. attribute:: demand_circuit
                
                	Enable/disable demand circuit operation
                	**type**\:  bool
                
                .. attribute:: distance
                
                	Define an administrative distance
                	**type**\:   :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Distance>`
                
                .. attribute:: distribute_list
                
                	Filter prefixes to/from RIB
                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeList>`
                
                .. attribute:: distribute_list_out
                
                	Filter prefixes from RIB 
                	**type**\:   :py:class:`DistributeListOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut>`
                
                .. attribute:: encryption
                
                	Encrypt and authenticate OSPFv3 packets
                	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Encryption>`
                
                .. attribute:: fast_reroute
                
                	Fast\-reroute instance scoped parameters
                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute>`
                
                .. attribute:: flood_reduction
                
                	Enable/disable flood reduction
                	**type**\:  bool
                
                .. attribute:: graceful_restart
                
                	Graceful restart configuration
                	**type**\:   :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.GracefulRestart>`
                
                .. attribute:: hello_interval
                
                	Time between HELLO packets
                	**type**\:  int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                .. attribute:: ignore
                
                	Do not complain about a specified event
                	**type**\:   :py:class:`Ignore <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Ignore>`
                
                .. attribute:: instance
                
                	Instance ID
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ldp_sync
                
                	Enable/Disable MPLS LDP sync
                	**type**\:  bool
                
                .. attribute:: log_adjacency_changes
                
                	Log changes in adjacency state
                	**type**\:   :py:class:`Ospfv3LogAdj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3LogAdj>`
                
                .. attribute:: maximum
                
                	Set OSPFv3 limits
                	**type**\:   :py:class:`Maximum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Maximum>`
                
                .. attribute:: mtu_ignore
                
                	Enable/disable ignoring of MTU in DBD packets
                	**type**\:  bool
                
                .. attribute:: network
                
                	Specify network type
                	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                
                .. attribute:: packet_size
                
                	Limit size of OSPFv3 packets
                	**type**\:  int
                
                	**range:** 256..10000
                
                .. attribute:: passive
                
                	Enable/disable routing updates on an interface
                	**type**\:  bool
                
                .. attribute:: prefix_suppression
                
                	Enable/disable prefix suppression on an interface
                	**type**\:  bool
                
                .. attribute:: priority
                
                	Specify router priority
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: process_scope
                
                	Process scope configuration
                	**type**\:   :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope>`
                
                .. attribute:: redistributes
                
                	Redistribute information from another routing protocol
                	**type**\:   :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes>`
                
                .. attribute:: retransmit_interval
                
                	Specify the transmit interval in seconds
                	**type**\:  int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                .. attribute:: router_id
                
                	Specify the router ID for this OSPFv3 process in IPv4 address format
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: snmp
                
                	SNMP configuration
                	**type**\:   :py:class:`Snmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Snmp>`
                
                .. attribute:: spf_prefix_priority_disable
                
                	SPF prefix prioritization disabled
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: spf_prefix_priority_policy
                
                	Route policy for SPF prefix prioritization
                	**type**\:  str
                
                .. attribute:: stub_router
                
                	Stub router configuration
                	**type**\:   :py:class:`StubRouter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter>`
                
                .. attribute:: summary_prefixes
                
                	Summarize redistributed routes matching prefix/length
                	**type**\:   :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes>`
                
                .. attribute:: timers
                
                	Adjust routing timers
                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers>`
                
                .. attribute:: transmit_delay
                
                	Specify the transmit delay in seconds
                	**type**\:  int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospfv3.Processes.Process.DefaultVrf, self).__init__()

                    self.yang_name = "default-vrf"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self._child_container_classes = {"area-addresses" : ("area_addresses", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses), "authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.Authentication), "auto-cost" : ("auto_cost", Ospfv3.Processes.Process.DefaultVrf.AutoCost), "bfd" : ("bfd", Ospfv3.Processes.Process.DefaultVrf.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter), "default-information" : ("default_information", Ospfv3.Processes.Process.DefaultVrf.DefaultInformation), "distance" : ("distance", Ospfv3.Processes.Process.DefaultVrf.Distance), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.DistributeList), "distribute-list-out" : ("distribute_list_out", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.Encryption), "fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.FastReroute), "graceful-restart" : ("graceful_restart", Ospfv3.Processes.Process.DefaultVrf.GracefulRestart), "ignore" : ("ignore", Ospfv3.Processes.Process.DefaultVrf.Ignore), "maximum" : ("maximum", Ospfv3.Processes.Process.DefaultVrf.Maximum), "process-scope" : ("process_scope", Ospfv3.Processes.Process.DefaultVrf.ProcessScope), "redistributes" : ("redistributes", Ospfv3.Processes.Process.DefaultVrf.Redistributes), "snmp" : ("snmp", Ospfv3.Processes.Process.DefaultVrf.Snmp), "stub-router" : ("stub_router", Ospfv3.Processes.Process.DefaultVrf.StubRouter), "summary-prefixes" : ("summary_prefixes", Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes), "timers" : ("timers", Ospfv3.Processes.Process.DefaultVrf.Timers)}
                    self._child_list_classes = {}

                    self.cost = YLeaf(YType.uint32, "cost")

                    self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                    self.default_metric = YLeaf(YType.uint32, "default-metric")

                    self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                    self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                    self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                    self.instance = YLeaf(YType.uint32, "instance")

                    self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                    self.log_adjacency_changes = YLeaf(YType.enumeration, "log-adjacency-changes")

                    self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                    self.network = YLeaf(YType.enumeration, "network")

                    self.packet_size = YLeaf(YType.uint32, "packet-size")

                    self.passive = YLeaf(YType.boolean, "passive")

                    self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                    self.priority = YLeaf(YType.uint32, "priority")

                    self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                    self.router_id = YLeaf(YType.str, "router-id")

                    self.spf_prefix_priority_disable = YLeaf(YType.empty, "spf-prefix-priority-disable")

                    self.spf_prefix_priority_policy = YLeaf(YType.str, "spf-prefix-priority-policy")

                    self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                    self.area_addresses = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses()
                    self.area_addresses.parent = self
                    self._children_name_map["area_addresses"] = "area-addresses"
                    self._children_yang_names.add("area-addresses")

                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.Authentication()
                    self.authentication.parent = self
                    self._children_name_map["authentication"] = "authentication"
                    self._children_yang_names.add("authentication")

                    self.auto_cost = None
                    self._children_name_map["auto_cost"] = "auto-cost"
                    self._children_yang_names.add("auto-cost")

                    self.bfd = Ospfv3.Processes.Process.DefaultVrf.Bfd()
                    self.bfd.parent = self
                    self._children_name_map["bfd"] = "bfd"
                    self._children_yang_names.add("bfd")

                    self.database_filter = Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter()
                    self.database_filter.parent = self
                    self._children_name_map["database_filter"] = "database-filter"
                    self._children_yang_names.add("database-filter")

                    self.default_information = Ospfv3.Processes.Process.DefaultVrf.DefaultInformation()
                    self.default_information.parent = self
                    self._children_name_map["default_information"] = "default-information"
                    self._children_yang_names.add("default-information")

                    self.distance = Ospfv3.Processes.Process.DefaultVrf.Distance()
                    self.distance.parent = self
                    self._children_name_map["distance"] = "distance"
                    self._children_yang_names.add("distance")

                    self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.DistributeList()
                    self.distribute_list.parent = self
                    self._children_name_map["distribute_list"] = "distribute-list"
                    self._children_yang_names.add("distribute-list")

                    self.distribute_list_out = Ospfv3.Processes.Process.DefaultVrf.DistributeListOut()
                    self.distribute_list_out.parent = self
                    self._children_name_map["distribute_list_out"] = "distribute-list-out"
                    self._children_yang_names.add("distribute-list-out")

                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.Encryption()
                    self.encryption.parent = self
                    self._children_name_map["encryption"] = "encryption"
                    self._children_yang_names.add("encryption")

                    self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.FastReroute()
                    self.fast_reroute.parent = self
                    self._children_name_map["fast_reroute"] = "fast-reroute"
                    self._children_yang_names.add("fast-reroute")

                    self.graceful_restart = Ospfv3.Processes.Process.DefaultVrf.GracefulRestart()
                    self.graceful_restart.parent = self
                    self._children_name_map["graceful_restart"] = "graceful-restart"
                    self._children_yang_names.add("graceful-restart")

                    self.ignore = Ospfv3.Processes.Process.DefaultVrf.Ignore()
                    self.ignore.parent = self
                    self._children_name_map["ignore"] = "ignore"
                    self._children_yang_names.add("ignore")

                    self.maximum = Ospfv3.Processes.Process.DefaultVrf.Maximum()
                    self.maximum.parent = self
                    self._children_name_map["maximum"] = "maximum"
                    self._children_yang_names.add("maximum")

                    self.process_scope = Ospfv3.Processes.Process.DefaultVrf.ProcessScope()
                    self.process_scope.parent = self
                    self._children_name_map["process_scope"] = "process-scope"
                    self._children_yang_names.add("process-scope")

                    self.redistributes = Ospfv3.Processes.Process.DefaultVrf.Redistributes()
                    self.redistributes.parent = self
                    self._children_name_map["redistributes"] = "redistributes"
                    self._children_yang_names.add("redistributes")

                    self.snmp = Ospfv3.Processes.Process.DefaultVrf.Snmp()
                    self.snmp.parent = self
                    self._children_name_map["snmp"] = "snmp"
                    self._children_yang_names.add("snmp")

                    self.stub_router = Ospfv3.Processes.Process.DefaultVrf.StubRouter()
                    self.stub_router.parent = self
                    self._children_name_map["stub_router"] = "stub-router"
                    self._children_yang_names.add("stub-router")

                    self.summary_prefixes = Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes()
                    self.summary_prefixes.parent = self
                    self._children_name_map["summary_prefixes"] = "summary-prefixes"
                    self._children_yang_names.add("summary-prefixes")

                    self.timers = Ospfv3.Processes.Process.DefaultVrf.Timers()
                    self.timers.parent = self
                    self._children_name_map["timers"] = "timers"
                    self._children_yang_names.add("timers")
                    self._segment_path = lambda: "default-vrf"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf, ['cost', 'dead_interval', 'default_metric', 'demand_circuit', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'log_adjacency_changes', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'router_id', 'spf_prefix_priority_disable', 'spf_prefix_priority_policy', 'transmit_delay'], name, value)


                class AreaAddresses(Entity):
                    """
                    Area configuration
                    
                    .. attribute:: area_address
                    
                    	Configuration for a particular area
                    	**type**\: list of    :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress>`
                    
                    .. attribute:: area_area_id
                    
                    	Configuration for a particular area
                    	**type**\: list of    :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses, self).__init__()

                        self.yang_name = "area-addresses"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"area-address" : ("area_address", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress), "area-area-id" : ("area_area_id", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId)}

                        self.area_address = YList(self)
                        self.area_area_id = YList(self)
                        self._segment_path = lambda: "area-addresses"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses, [], name, value)


                    class AreaAddress(Entity):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: address  <key>
                        
                        	Area ID if in IP address format
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: area_scope
                        
                        	Area Scope Configuration
                        	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope>`
                        
                        .. attribute:: authentication
                        
                        	Authenticate OSPFv3 packets
                        	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication>`
                        
                        .. attribute:: bfd
                        
                        	Configure BFD parameters
                        	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd>`
                        
                        .. attribute:: cost
                        
                        	Interface cost
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        .. attribute:: database_filter
                        
                        	Database filter
                        	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter>`
                        
                        .. attribute:: dead_interval
                        
                        	Interval after which a neighbor is declared dead (in seconds)
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\:  int
                        
                        	**range:** 0..16777215
                        
                        .. attribute:: demand_circuit
                        
                        	Enable/disable demand circuit operation
                        	**type**\:  bool
                        
                        .. attribute:: distribute_list
                        
                        	Filter prefixes to/from RIB
                        	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList>`
                        
                        .. attribute:: enable
                        
                        	Enable OSPFv3 area
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: encryption
                        
                        	Encrypt and authenticate OSPFv3 packets
                        	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption>`
                        
                        .. attribute:: flood_reduction
                        
                        	Enable/disable flood reduction
                        	**type**\:  bool
                        
                        .. attribute:: hello_interval
                        
                        	Time between HELLO packets
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: instance
                        
                        	Instance ID
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: interfaces
                        
                        	OSPFv3 interfaces
                        	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces>`
                        
                        .. attribute:: ldp_sync
                        
                        	Enable/Disable MPLS LDP sync
                        	**type**\:  bool
                        
                        .. attribute:: mtu_ignore
                        
                        	Enable/disable ignoring of MTU in DBD packets
                        	**type**\:  bool
                        
                        .. attribute:: network
                        
                        	Specify network type
                        	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                        	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa>`
                        
                        .. attribute:: packet_size
                        
                        	Limit size of OSPFv3 packets
                        	**type**\:  int
                        
                        	**range:** 256..10000
                        
                        .. attribute:: passive
                        
                        	Enable/disable routing updates on an interface
                        	**type**\:  bool
                        
                        .. attribute:: prefix_suppression
                        
                        	Enable/disable prefix suppression on an interface
                        	**type**\:  bool
                        
                        .. attribute:: priority
                        
                        	Specify router priority
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ranges
                        
                        	Range configuration
                        	**type**\:   :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges>`
                        
                        .. attribute:: retransmit_interval
                        
                        	Specify the transmit interval in seconds
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: sham_links
                        
                        	Sham Link sub\-mode
                        	**type**\:   :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks>`
                        
                        .. attribute:: stub
                        
                        	Specify area as a stub area.  Allowed only in non\-backbone areas
                        	**type**\:  bool
                        
                        .. attribute:: transmit_delay
                        
                        	Specify the transmit delay in seconds
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: virtual_links
                        
                        	Virtual link sub\-mode
                        	**type**\:   :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress, self).__init__()

                            self.yang_name = "area-address"
                            self.yang_parent_name = "area-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"area-scope" : ("area_scope", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope), "authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption), "interfaces" : ("interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces), "nssa" : ("nssa", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa), "ranges" : ("ranges", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges), "sham-links" : ("sham_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks), "virtual-links" : ("virtual_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks)}
                            self._child_list_classes = {}

                            self.address = YLeaf(YType.str, "address")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                            self.default_cost = YLeaf(YType.uint32, "default-cost")

                            self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                            self.enable = YLeaf(YType.empty, "enable")

                            self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                            self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                            self.instance = YLeaf(YType.uint32, "instance")

                            self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                            self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                            self.network = YLeaf(YType.enumeration, "network")

                            self.packet_size = YLeaf(YType.uint32, "packet-size")

                            self.passive = YLeaf(YType.boolean, "passive")

                            self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                            self.priority = YLeaf(YType.uint32, "priority")

                            self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                            self.stub = YLeaf(YType.boolean, "stub")

                            self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                            self.area_scope = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope()
                            self.area_scope.parent = self
                            self._children_name_map["area_scope"] = "area-scope"
                            self._children_yang_names.add("area-scope")

                            self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication()
                            self.authentication.parent = self
                            self._children_name_map["authentication"] = "authentication"
                            self._children_yang_names.add("authentication")

                            self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd()
                            self.bfd.parent = self
                            self._children_name_map["bfd"] = "bfd"
                            self._children_yang_names.add("bfd")

                            self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter()
                            self.database_filter.parent = self
                            self._children_name_map["database_filter"] = "database-filter"
                            self._children_yang_names.add("database-filter")

                            self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList()
                            self.distribute_list.parent = self
                            self._children_name_map["distribute_list"] = "distribute-list"
                            self._children_yang_names.add("distribute-list")

                            self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption()
                            self.encryption.parent = self
                            self._children_name_map["encryption"] = "encryption"
                            self._children_yang_names.add("encryption")

                            self.interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"
                            self._children_yang_names.add("interfaces")

                            self.nssa = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa()
                            self.nssa.parent = self
                            self._children_name_map["nssa"] = "nssa"
                            self._children_yang_names.add("nssa")

                            self.ranges = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges()
                            self.ranges.parent = self
                            self._children_name_map["ranges"] = "ranges"
                            self._children_yang_names.add("ranges")

                            self.sham_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks()
                            self.sham_links.parent = self
                            self._children_name_map["sham_links"] = "sham-links"
                            self._children_yang_names.add("sham-links")

                            self.virtual_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks()
                            self.virtual_links.parent = self
                            self._children_name_map["virtual_links"] = "virtual-links"
                            self._children_yang_names.add("virtual-links")
                            self._segment_path = lambda: "area-address" + "[address='" + self.address.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress, ['address', 'cost', 'dead_interval', 'default_cost', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'stub', 'transmit_delay'], name, value)


                        class AreaScope(Entity):
                            """
                            Area Scope Configuration
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope, self).__init__()

                                self.yang_name = "area-scope"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute)}
                                self._child_list_classes = {}

                                self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self._children_name_map["fast_reroute"] = "fast-reroute"
                                self._children_yang_names.add("fast-reroute")
                                self._segment_path = lambda: "area-scope"


                            class FastReroute(Entity):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, self).__init__()

                                    self.yang_name = "fast-reroute"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix)}
                                    self._child_list_classes = {}

                                    self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                    self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self._children_name_map["per_link"] = "per-link"
                                    self._children_yang_names.add("per-link")

                                    self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self
                                    self._children_name_map["per_prefix"] = "per-prefix"
                                    self._children_yang_names.add("per-prefix")
                                    self._segment_path = lambda: "fast-reroute"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                class PerLink(Entity):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, self).__init__()

                                        self.yang_name = "per-link"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-link"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class PerPrefix(Entity):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, self).__init__()

                                        self.yang_name = "per-prefix"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-prefix"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                        class Authentication(Entity):
                            """
                            Authenticate OSPFv3 packets
                            
                            .. attribute:: algorithm
                            
                            	Use the MD5 or SHA1 algorithm
                            	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\:  bool
                            
                            .. attribute:: password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\:  str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: spi
                            
                            	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\:  int
                            
                            	**range:** 256..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication, self).__init__()

                                self.yang_name = "authentication"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                self.enable = YLeaf(YType.boolean, "enable")

                                self.password = YLeaf(YType.str, "password")

                                self.spi = YLeaf(YType.uint32, "spi")
                                self._segment_path = lambda: "authentication"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                        class Bfd(Entity):
                            """
                            Configure BFD parameters
                            
                            .. attribute:: detection_multiplier
                            
                            	Detect multiplier
                            	**type**\:  int
                            
                            	**range:** 2..50
                            
                            .. attribute:: fast_detect_mode
                            
                            	Enable or disable BFD fast detection
                            	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                            
                            .. attribute:: interval
                            
                            	Hello interval in milli\-seconds
                            	**type**\:  int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd, self).__init__()

                                self.yang_name = "bfd"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                self.interval = YLeaf(YType.uint32, "interval")
                                self._segment_path = lambda: "bfd"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                        class DatabaseFilter(Entity):
                            """
                            Database filter
                            
                            .. attribute:: all
                            
                            	All
                            	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter, self).__init__()

                                self.yang_name = "database-filter"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All)}
                                self._child_list_classes = {}

                                self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All()
                                self.all.parent = self
                                self._children_name_map["all"] = "all"
                                self._children_yang_names.add("all")
                                self._segment_path = lambda: "database-filter"


                            class All(Entity):
                                """
                                All
                                
                                .. attribute:: out
                                
                                	Enable or disable database\-filter
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All, self).__init__()

                                    self.yang_name = "all"
                                    self.yang_parent_name = "database-filter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.out = YLeaf(YType.boolean, "out")
                                    self._segment_path = lambda: "all"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All, ['out'], name, value)


                        class DistributeList(Entity):
                            """
                            Filter prefixes to/from RIB
                            
                            .. attribute:: in_
                            
                            	Filter prefixes installed to RIB
                            	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In_>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList, self).__init__()

                                self.yang_name = "distribute-list"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In_)}
                                self._child_list_classes = {}

                                self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In_()
                                self.in_.parent = self
                                self._children_name_map["in_"] = "in"
                                self._children_yang_names.add("in")
                                self._segment_path = lambda: "distribute-list"


                            class In_(Entity):
                                """
                                Filter prefixes installed to RIB
                                
                                .. attribute:: prefix_list
                                
                                	Filter prefixes based on an IPv6 prefix\-list
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In_, self).__init__()

                                    self.yang_name = "in"
                                    self.yang_parent_name = "distribute-list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.prefix_list = YLeaf(YType.str, "prefix-list")
                                    self._segment_path = lambda: "in"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In_, ['prefix_list'], name, value)


                        class Encryption(Entity):
                            """
                            Encrypt and authenticate OSPFv3 packets
                            
                            .. attribute:: authentication_algorithm
                            
                            	Use the NULL, MD5 or SHA1 algorithm
                            	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                            
                            .. attribute:: authentication_password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\:  str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\:  bool
                            
                            .. attribute:: encryption_algorithm
                            
                            	Specify the encryption algorithm
                            	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                            
                            .. attribute:: encryption_password
                            
                            	Encryption password
                            	**type**\:  str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: spi
                            
                            	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\:  int
                            
                            	**range:** 256..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption, self).__init__()

                                self.yang_name = "encryption"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                self.authentication_password = YLeaf(YType.str, "authentication-password")

                                self.enable = YLeaf(YType.boolean, "enable")

                                self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                self.encryption_password = YLeaf(YType.str, "encryption-password")

                                self.spi = YLeaf(YType.uint32, "spi")
                                self._segment_path = lambda: "encryption"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                        class Interfaces(Entity):
                            """
                            OSPFv3 interfaces
                            
                            .. attribute:: interface
                            
                            	OSPFv3 interface
                            	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces, self).__init__()

                                self.yang_name = "interfaces"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"interface" : ("interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface)}

                                self.interface = YList(self)
                                self._segment_path = lambda: "interfaces"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces, [], name, value)


                            class Interface(Entity):
                                """
                                OSPFv3 interface
                                
                                .. attribute:: interface_name  <key>
                                
                                	Interface to configure
                                	**type**\:  str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication>`
                                
                                .. attribute:: bfd
                                
                                	Configure BFD parameters
                                	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: database_filter
                                
                                	Database filter
                                	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/disable demand circuit operation
                                	**type**\:  bool
                                
                                .. attribute:: distribute_list
                                
                                	Filter prefixes to/from RIB
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList>`
                                
                                .. attribute:: enable
                                
                                	Enable OSPFv3 interface
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute>`
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/disable flood reduction
                                	**type**\:  bool
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: instance
                                
                                	Instance ID
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\:  bool
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                .. attribute:: neighbors
                                
                                	Specify a neighbor router
                                	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors>`
                                
                                .. attribute:: network
                                
                                	Specify network type
                                	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                
                                .. attribute:: packet_size
                                
                                	Limit size of OSPFv3 packets
                                	**type**\:  int
                                
                                	**range:** 256..10000
                                
                                .. attribute:: passive
                                
                                	Enable/disable routing updates on an interface
                                	**type**\:  bool
                                
                                .. attribute:: prefix_suppression
                                
                                	Enable/disable prefix suppression on an interface
                                	**type**\:  bool
                                
                                .. attribute:: priority
                                
                                	Specify router priority
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface, self).__init__()

                                    self.yang_name = "interface"
                                    self.yang_parent_name = "interfaces"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption), "fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute), "neighbors" : ("neighbors", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors)}
                                    self._child_list_classes = {}

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.cost = YLeaf(YType.uint32, "cost")

                                    self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                    self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                                    self.enable = YLeaf(YType.empty, "enable")

                                    self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                                    self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                    self.instance = YLeaf(YType.uint32, "instance")

                                    self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                                    self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                                    self.network = YLeaf(YType.enumeration, "network")

                                    self.packet_size = YLeaf(YType.uint32, "packet-size")

                                    self.passive = YLeaf(YType.boolean, "passive")

                                    self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                                    self.priority = YLeaf(YType.uint32, "priority")

                                    self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                    self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"
                                    self._children_yang_names.add("bfd")

                                    self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter()
                                    self.database_filter.parent = self
                                    self._children_name_map["database_filter"] = "database-filter"
                                    self._children_yang_names.add("database-filter")

                                    self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList()
                                    self.distribute_list.parent = self
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._children_yang_names.add("encryption")

                                    self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.neighbors = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"
                                    self._children_yang_names.add("neighbors")
                                    self._segment_path = lambda: "interface" + "[interface-name='" + self.interface_name.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface, ['interface_name', 'cost', 'dead_interval', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.password = YLeaf(YType.str, "password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                class Bfd(Entity):
                                    """
                                    Configure BFD parameters
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detect multiplier
                                    	**type**\:  int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	Enable or disable BFD fast detection
                                    	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval in milli\-seconds
                                    	**type**\:  int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                        self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                        self.interval = YLeaf(YType.uint32, "interval")
                                        self._segment_path = lambda: "bfd"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                                class DatabaseFilter(Entity):
                                    """
                                    Database filter
                                    
                                    .. attribute:: all
                                    
                                    	All
                                    	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter, self).__init__()

                                        self.yang_name = "database-filter"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All)}
                                        self._child_list_classes = {}

                                        self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All()
                                        self.all.parent = self
                                        self._children_name_map["all"] = "all"
                                        self._children_yang_names.add("all")
                                        self._segment_path = lambda: "database-filter"


                                    class All(Entity):
                                        """
                                        All
                                        
                                        .. attribute:: out
                                        
                                        	Enable or disable database\-filter
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                            self.yang_name = "all"
                                            self.yang_parent_name = "database-filter"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.out = YLeaf(YType.boolean, "out")
                                            self._segment_path = lambda: "all"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter prefixes to/from RIB
                                    
                                    .. attribute:: in_
                                    
                                    	Filter prefixes installed to RIB
                                    	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_)}
                                        self._child_list_classes = {}

                                        self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_()
                                        self.in_.parent = self
                                        self._children_name_map["in_"] = "in"
                                        self._children_yang_names.add("in")
                                        self._segment_path = lambda: "distribute-list"


                                    class In_(Entity):
                                        """
                                        Filter prefixes installed to RIB
                                        
                                        .. attribute:: prefix_list
                                        
                                        	Filter prefixes based on an IPv6 prefix\-list
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_, self).__init__()

                                            self.yang_name = "in"
                                            self.yang_parent_name = "distribute-list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.prefix_list = YLeaf(YType.str, "prefix-list")
                                            self._segment_path = lambda: "in"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_, ['prefix_list'], name, value)


                                class Encryption(Entity):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                        self.authentication_password = YLeaf(YType.str, "authentication-password")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                        self.encryption_password = YLeaf(YType.str, "encryption-password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "encryption"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                        self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class Neighbors(Entity):
                                    """
                                    Specify a neighbor router
                                    
                                    .. attribute:: neighbor
                                    
                                    	IPv6 address
                                    	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"neighbor" : ("neighbor", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor)}

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, [], name, value)


                                    class Neighbor(Entity):
                                        """
                                        IPv6 address
                                        
                                        .. attribute:: neighbor_address  <key>
                                        
                                        	IPV6 address
                                        	**type**\:  str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: cost
                                        
                                        	OSPFv3 cost for point\-to\-multipoint neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: database_filter
                                        
                                        	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPFv3 dead\-router polling interval (in seconds)
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: priority
                                        
                                        	OSPFv3 priority of non\-broadcast neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: zone
                                        
                                        	Zone
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                            self.cost = YLeaf(YType.uint32, "cost")

                                            self.database_filter = YLeaf(YType.boolean, "database-filter")

                                            self.poll_interval = YLeaf(YType.uint32, "poll-interval")

                                            self.priority = YLeaf(YType.uint32, "priority")

                                            self.zone = YLeaf(YType.str, "zone")
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + self.neighbor_address.get() + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'cost', 'database_filter', 'poll_interval', 'priority', 'zone'], name, value)


                        class Nssa(Entity):
                            """
                            Specify area as a NSSA area.  Allowed only in
                            non\-backbone areas
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: metric
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\:  int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa, self).__init__()

                                self.yang_name = "nssa"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.default_info_originate = YLeaf(YType.boolean, "default-info-originate")

                                self.metric = YLeaf(YType.uint32, "metric")

                                self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                self.no_redistribution = YLeaf(YType.boolean, "no-redistribution")

                                self.no_summary = YLeaf(YType.empty, "no-summary")
                                self._segment_path = lambda: "nssa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa, ['default_info_originate', 'metric', 'metric_type', 'no_redistribution', 'no_summary'], name, value)


                        class Ranges(Entity):
                            """
                            Range configuration
                            
                            .. attribute:: range
                            
                            	Summarize inter\-area routes matching prefix/length
                            	**type**\: list of    :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges, self).__init__()

                                self.yang_name = "ranges"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"range" : ("range", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range)}

                                self.range = YList(self)
                                self._segment_path = lambda: "ranges"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges, [], name, value)


                            class Range(Entity):
                                """
                                Summarize inter\-area routes matching
                                prefix/length
                                
                                .. attribute:: prefix  <key>
                                
                                	IPv6 prefix format
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length  <key>
                                
                                	IPV6 prefix length
                                	**type**\:  int
                                
                                	**range:** 0..128
                                
                                .. attribute:: cost
                                
                                	Specified metric for this range
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise address range
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range, self).__init__()

                                    self.yang_name = "range"
                                    self.yang_parent_name = "ranges"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.prefix = YLeaf(YType.str, "prefix")

                                    self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                    self.cost = YLeaf(YType.uint32, "cost")

                                    self.not_advertise = YLeaf(YType.boolean, "not-advertise")
                                    self._segment_path = lambda: "range" + "[prefix='" + self.prefix.get() + "']" + "[prefix-length='" + self.prefix_length.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range, ['prefix', 'prefix_length', 'cost', 'not_advertise'], name, value)


                        class ShamLinks(Entity):
                            """
                            Sham Link sub\-mode
                            
                            .. attribute:: sham_link
                            
                            	ShamLink local and remote endpoints
                            	**type**\: list of    :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks, self).__init__()

                                self.yang_name = "sham-links"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"sham-link" : ("sham_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink)}

                                self.sham_link = YList(self)
                                self._segment_path = lambda: "sham-links"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks, [], name, value)


                            class ShamLink(Entity):
                                """
                                ShamLink local and remote endpoints
                                
                                .. attribute:: source_address  <key>
                                
                                	Local sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: destination_address  <key>
                                
                                	Remote sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: enable
                                
                                	Enable sham link
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, self).__init__()

                                    self.yang_name = "sham-link"
                                    self.yang_parent_name = "sham-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption)}
                                    self._child_list_classes = {}

                                    self.source_address = YLeaf(YType.str, "source-address")

                                    self.destination_address = YLeaf(YType.str, "destination-address")

                                    self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                    self.enable = YLeaf(YType.empty, "enable")

                                    self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                    self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                    self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._children_yang_names.add("encryption")
                                    self._segment_path = lambda: "sham-link" + "[source-address='" + self.source_address.get() + "']" + "[destination-address='" + self.destination_address.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, ['source_address', 'destination_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.password = YLeaf(YType.str, "password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                class Encryption(Entity):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                        self.authentication_password = YLeaf(YType.str, "authentication-password")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                        self.encryption_password = YLeaf(YType.str, "encryption-password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "encryption"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                        class VirtualLinks(Entity):
                            """
                            Virtual link sub\-mode
                            
                            .. attribute:: virtual_link
                            
                            	Router ID of virtual link neighbor
                            	**type**\: list of    :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks, self).__init__()

                                self.yang_name = "virtual-links"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"virtual-link" : ("virtual_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink)}

                                self.virtual_link = YList(self)
                                self._segment_path = lambda: "virtual-links"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks, [], name, value)


                            class VirtualLink(Entity):
                                """
                                Router ID of virtual link neighbor
                                
                                .. attribute:: virtual_link_address  <key>
                                
                                	Router ID of virtual link neighbor
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: enable
                                
                                	Enabled virtual link
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, self).__init__()

                                    self.yang_name = "virtual-link"
                                    self.yang_parent_name = "virtual-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption)}
                                    self._child_list_classes = {}

                                    self.virtual_link_address = YLeaf(YType.str, "virtual-link-address")

                                    self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                    self.enable = YLeaf(YType.empty, "enable")

                                    self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                    self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                    self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._children_yang_names.add("encryption")
                                    self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + self.virtual_link_address.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, ['virtual_link_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.password = YLeaf(YType.str, "password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                class Encryption(Entity):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                        self.authentication_password = YLeaf(YType.str, "authentication-password")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                        self.encryption_password = YLeaf(YType.str, "encryption-password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "encryption"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                    class AreaAreaId(Entity):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: area_id  <key>
                        
                        	Area ID if in integer format
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: area_scope
                        
                        	Area Scope Configuration
                        	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope>`
                        
                        .. attribute:: authentication
                        
                        	Authenticate OSPFv3 packets
                        	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication>`
                        
                        .. attribute:: bfd
                        
                        	Configure BFD parameters
                        	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd>`
                        
                        .. attribute:: cost
                        
                        	Interface cost
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        .. attribute:: database_filter
                        
                        	Database filter
                        	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter>`
                        
                        .. attribute:: dead_interval
                        
                        	Interval after which a neighbor is declared dead (in seconds)
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\:  int
                        
                        	**range:** 0..16777215
                        
                        .. attribute:: demand_circuit
                        
                        	Enable/disable demand circuit operation
                        	**type**\:  bool
                        
                        .. attribute:: distribute_list
                        
                        	Filter prefixes to/from RIB
                        	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList>`
                        
                        .. attribute:: enable
                        
                        	Enable OSPFv3 area
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: encryption
                        
                        	Encrypt and authenticate OSPFv3 packets
                        	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption>`
                        
                        .. attribute:: flood_reduction
                        
                        	Enable/disable flood reduction
                        	**type**\:  bool
                        
                        .. attribute:: hello_interval
                        
                        	Time between HELLO packets
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: instance
                        
                        	Instance ID
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: interfaces
                        
                        	OSPFv3 interfaces
                        	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces>`
                        
                        .. attribute:: ldp_sync
                        
                        	Enable/Disable MPLS LDP sync
                        	**type**\:  bool
                        
                        .. attribute:: mtu_ignore
                        
                        	Enable/disable ignoring of MTU in DBD packets
                        	**type**\:  bool
                        
                        .. attribute:: network
                        
                        	Specify network type
                        	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                        	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa>`
                        
                        .. attribute:: packet_size
                        
                        	Limit size of OSPFv3 packets
                        	**type**\:  int
                        
                        	**range:** 256..10000
                        
                        .. attribute:: passive
                        
                        	Enable/disable routing updates on an interface
                        	**type**\:  bool
                        
                        .. attribute:: prefix_suppression
                        
                        	Enable/disable prefix suppression on an interface
                        	**type**\:  bool
                        
                        .. attribute:: priority
                        
                        	Specify router priority
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ranges
                        
                        	Range configuration
                        	**type**\:   :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges>`
                        
                        .. attribute:: retransmit_interval
                        
                        	Specify the transmit interval in seconds
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: sham_links
                        
                        	Sham Link sub\-mode
                        	**type**\:   :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks>`
                        
                        .. attribute:: stub
                        
                        	Specify area as a stub area.  Allowed only in non\-backbone areas
                        	**type**\:  bool
                        
                        .. attribute:: transmit_delay
                        
                        	Specify the transmit delay in seconds
                        	**type**\:  int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: virtual_links
                        
                        	Virtual link sub\-mode
                        	**type**\:   :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId, self).__init__()

                            self.yang_name = "area-area-id"
                            self.yang_parent_name = "area-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"area-scope" : ("area_scope", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope), "authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption), "interfaces" : ("interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces), "nssa" : ("nssa", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa), "ranges" : ("ranges", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges), "sham-links" : ("sham_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks), "virtual-links" : ("virtual_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks)}
                            self._child_list_classes = {}

                            self.area_id = YLeaf(YType.uint32, "area-id")

                            self.cost = YLeaf(YType.uint32, "cost")

                            self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                            self.default_cost = YLeaf(YType.uint32, "default-cost")

                            self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                            self.enable = YLeaf(YType.empty, "enable")

                            self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                            self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                            self.instance = YLeaf(YType.uint32, "instance")

                            self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                            self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                            self.network = YLeaf(YType.enumeration, "network")

                            self.packet_size = YLeaf(YType.uint32, "packet-size")

                            self.passive = YLeaf(YType.boolean, "passive")

                            self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                            self.priority = YLeaf(YType.uint32, "priority")

                            self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                            self.stub = YLeaf(YType.boolean, "stub")

                            self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                            self.area_scope = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope()
                            self.area_scope.parent = self
                            self._children_name_map["area_scope"] = "area-scope"
                            self._children_yang_names.add("area-scope")

                            self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication()
                            self.authentication.parent = self
                            self._children_name_map["authentication"] = "authentication"
                            self._children_yang_names.add("authentication")

                            self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd()
                            self.bfd.parent = self
                            self._children_name_map["bfd"] = "bfd"
                            self._children_yang_names.add("bfd")

                            self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter()
                            self.database_filter.parent = self
                            self._children_name_map["database_filter"] = "database-filter"
                            self._children_yang_names.add("database-filter")

                            self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList()
                            self.distribute_list.parent = self
                            self._children_name_map["distribute_list"] = "distribute-list"
                            self._children_yang_names.add("distribute-list")

                            self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption()
                            self.encryption.parent = self
                            self._children_name_map["encryption"] = "encryption"
                            self._children_yang_names.add("encryption")

                            self.interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"
                            self._children_yang_names.add("interfaces")

                            self.nssa = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa()
                            self.nssa.parent = self
                            self._children_name_map["nssa"] = "nssa"
                            self._children_yang_names.add("nssa")

                            self.ranges = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges()
                            self.ranges.parent = self
                            self._children_name_map["ranges"] = "ranges"
                            self._children_yang_names.add("ranges")

                            self.sham_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks()
                            self.sham_links.parent = self
                            self._children_name_map["sham_links"] = "sham-links"
                            self._children_yang_names.add("sham-links")

                            self.virtual_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks()
                            self.virtual_links.parent = self
                            self._children_name_map["virtual_links"] = "virtual-links"
                            self._children_yang_names.add("virtual-links")
                            self._segment_path = lambda: "area-area-id" + "[area-id='" + self.area_id.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId, ['area_id', 'cost', 'dead_interval', 'default_cost', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'stub', 'transmit_delay'], name, value)


                        class AreaScope(Entity):
                            """
                            Area Scope Configuration
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope, self).__init__()

                                self.yang_name = "area-scope"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute)}
                                self._child_list_classes = {}

                                self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self._children_name_map["fast_reroute"] = "fast-reroute"
                                self._children_yang_names.add("fast-reroute")
                                self._segment_path = lambda: "area-scope"


                            class FastReroute(Entity):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, self).__init__()

                                    self.yang_name = "fast-reroute"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix)}
                                    self._child_list_classes = {}

                                    self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                    self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self._children_name_map["per_link"] = "per-link"
                                    self._children_yang_names.add("per-link")

                                    self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self
                                    self._children_name_map["per_prefix"] = "per-prefix"
                                    self._children_yang_names.add("per-prefix")
                                    self._segment_path = lambda: "fast-reroute"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                class PerLink(Entity):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, self).__init__()

                                        self.yang_name = "per-link"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-link"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class PerPrefix(Entity):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, self).__init__()

                                        self.yang_name = "per-prefix"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                        self._children_yang_names.add("candidate-interfaces")

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._children_yang_names.add("exclude-interfaces")
                                        self._segment_path = lambda: "per-prefix"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(Entity):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                    class ExcludeInterfaces(Entity):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(Entity):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  <key>
                                            
                                            	Interface
                                            	**type**\:  str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.interface_name = YLeaf(YType.str, "interface-name")
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                        class Authentication(Entity):
                            """
                            Authenticate OSPFv3 packets
                            
                            .. attribute:: algorithm
                            
                            	Use the MD5 or SHA1 algorithm
                            	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\:  bool
                            
                            .. attribute:: password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\:  str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: spi
                            
                            	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\:  int
                            
                            	**range:** 256..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication, self).__init__()

                                self.yang_name = "authentication"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                self.enable = YLeaf(YType.boolean, "enable")

                                self.password = YLeaf(YType.str, "password")

                                self.spi = YLeaf(YType.uint32, "spi")
                                self._segment_path = lambda: "authentication"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                        class Bfd(Entity):
                            """
                            Configure BFD parameters
                            
                            .. attribute:: detection_multiplier
                            
                            	Detect multiplier
                            	**type**\:  int
                            
                            	**range:** 2..50
                            
                            .. attribute:: fast_detect_mode
                            
                            	Enable or disable BFD fast detection
                            	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                            
                            .. attribute:: interval
                            
                            	Hello interval in milli\-seconds
                            	**type**\:  int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd, self).__init__()

                                self.yang_name = "bfd"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                self.interval = YLeaf(YType.uint32, "interval")
                                self._segment_path = lambda: "bfd"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                        class DatabaseFilter(Entity):
                            """
                            Database filter
                            
                            .. attribute:: all
                            
                            	All
                            	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter, self).__init__()

                                self.yang_name = "database-filter"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All)}
                                self._child_list_classes = {}

                                self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All()
                                self.all.parent = self
                                self._children_name_map["all"] = "all"
                                self._children_yang_names.add("all")
                                self._segment_path = lambda: "database-filter"


                            class All(Entity):
                                """
                                All
                                
                                .. attribute:: out
                                
                                	Enable or disable database\-filter
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, self).__init__()

                                    self.yang_name = "all"
                                    self.yang_parent_name = "database-filter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.out = YLeaf(YType.boolean, "out")
                                    self._segment_path = lambda: "all"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, ['out'], name, value)


                        class DistributeList(Entity):
                            """
                            Filter prefixes to/from RIB
                            
                            .. attribute:: in_
                            
                            	Filter prefixes installed to RIB
                            	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In_>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList, self).__init__()

                                self.yang_name = "distribute-list"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In_)}
                                self._child_list_classes = {}

                                self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In_()
                                self.in_.parent = self
                                self._children_name_map["in_"] = "in"
                                self._children_yang_names.add("in")
                                self._segment_path = lambda: "distribute-list"


                            class In_(Entity):
                                """
                                Filter prefixes installed to RIB
                                
                                .. attribute:: prefix_list
                                
                                	Filter prefixes based on an IPv6 prefix\-list
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In_, self).__init__()

                                    self.yang_name = "in"
                                    self.yang_parent_name = "distribute-list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.prefix_list = YLeaf(YType.str, "prefix-list")
                                    self._segment_path = lambda: "in"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In_, ['prefix_list'], name, value)


                        class Encryption(Entity):
                            """
                            Encrypt and authenticate OSPFv3 packets
                            
                            .. attribute:: authentication_algorithm
                            
                            	Use the NULL, MD5 or SHA1 algorithm
                            	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                            
                            .. attribute:: authentication_password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\:  str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\:  bool
                            
                            .. attribute:: encryption_algorithm
                            
                            	Specify the encryption algorithm
                            	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                            
                            .. attribute:: encryption_password
                            
                            	Encryption password
                            	**type**\:  str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: spi
                            
                            	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\:  int
                            
                            	**range:** 256..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption, self).__init__()

                                self.yang_name = "encryption"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                self.authentication_password = YLeaf(YType.str, "authentication-password")

                                self.enable = YLeaf(YType.boolean, "enable")

                                self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                self.encryption_password = YLeaf(YType.str, "encryption-password")

                                self.spi = YLeaf(YType.uint32, "spi")
                                self._segment_path = lambda: "encryption"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                        class Interfaces(Entity):
                            """
                            OSPFv3 interfaces
                            
                            .. attribute:: interface
                            
                            	OSPFv3 interface
                            	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces, self).__init__()

                                self.yang_name = "interfaces"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"interface" : ("interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface)}

                                self.interface = YList(self)
                                self._segment_path = lambda: "interfaces"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces, [], name, value)


                            class Interface(Entity):
                                """
                                OSPFv3 interface
                                
                                .. attribute:: interface_name  <key>
                                
                                	Interface to configure
                                	**type**\:  str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication>`
                                
                                .. attribute:: bfd
                                
                                	Configure BFD parameters
                                	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd>`
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: database_filter
                                
                                	Database filter
                                	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/disable demand circuit operation
                                	**type**\:  bool
                                
                                .. attribute:: distribute_list
                                
                                	Filter prefixes to/from RIB
                                	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList>`
                                
                                .. attribute:: enable
                                
                                	Enable OSPFv3 interface
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption>`
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute>`
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/disable flood reduction
                                	**type**\:  bool
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: instance
                                
                                	Instance ID
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\:  bool
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/disable ignoring of MTU in DBD packets
                                	**type**\:  bool
                                
                                .. attribute:: neighbors
                                
                                	Specify a neighbor router
                                	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors>`
                                
                                .. attribute:: network
                                
                                	Specify network type
                                	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                
                                .. attribute:: packet_size
                                
                                	Limit size of OSPFv3 packets
                                	**type**\:  int
                                
                                	**range:** 256..10000
                                
                                .. attribute:: passive
                                
                                	Enable/disable routing updates on an interface
                                	**type**\:  bool
                                
                                .. attribute:: prefix_suppression
                                
                                	Enable/disable prefix suppression on an interface
                                	**type**\:  bool
                                
                                .. attribute:: priority
                                
                                	Specify router priority
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface, self).__init__()

                                    self.yang_name = "interface"
                                    self.yang_parent_name = "interfaces"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption), "fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute), "neighbors" : ("neighbors", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors)}
                                    self._child_list_classes = {}

                                    self.interface_name = YLeaf(YType.str, "interface-name")

                                    self.cost = YLeaf(YType.uint32, "cost")

                                    self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                    self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                                    self.enable = YLeaf(YType.empty, "enable")

                                    self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                                    self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                    self.instance = YLeaf(YType.uint32, "instance")

                                    self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                                    self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                                    self.network = YLeaf(YType.enumeration, "network")

                                    self.packet_size = YLeaf(YType.uint32, "packet-size")

                                    self.passive = YLeaf(YType.boolean, "passive")

                                    self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                                    self.priority = YLeaf(YType.uint32, "priority")

                                    self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                    self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"
                                    self._children_yang_names.add("bfd")

                                    self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter()
                                    self.database_filter.parent = self
                                    self._children_name_map["database_filter"] = "database-filter"
                                    self._children_yang_names.add("database-filter")

                                    self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList()
                                    self.distribute_list.parent = self
                                    self._children_name_map["distribute_list"] = "distribute-list"
                                    self._children_yang_names.add("distribute-list")

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._children_yang_names.add("encryption")

                                    self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")

                                    self.neighbors = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"
                                    self._children_yang_names.add("neighbors")
                                    self._segment_path = lambda: "interface" + "[interface-name='" + self.interface_name.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface, ['interface_name', 'cost', 'dead_interval', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.password = YLeaf(YType.str, "password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                class Bfd(Entity):
                                    """
                                    Configure BFD parameters
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detect multiplier
                                    	**type**\:  int
                                    
                                    	**range:** 2..50
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	Enable or disable BFD fast detection
                                    	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval in milli\-seconds
                                    	**type**\:  int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                        self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                        self.interval = YLeaf(YType.uint32, "interval")
                                        self._segment_path = lambda: "bfd"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                                class DatabaseFilter(Entity):
                                    """
                                    Database filter
                                    
                                    .. attribute:: all
                                    
                                    	All
                                    	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter, self).__init__()

                                        self.yang_name = "database-filter"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All)}
                                        self._child_list_classes = {}

                                        self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All()
                                        self.all.parent = self
                                        self._children_name_map["all"] = "all"
                                        self._children_yang_names.add("all")
                                        self._segment_path = lambda: "database-filter"


                                    class All(Entity):
                                        """
                                        All
                                        
                                        .. attribute:: out
                                        
                                        	Enable or disable database\-filter
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                            self.yang_name = "all"
                                            self.yang_parent_name = "database-filter"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.out = YLeaf(YType.boolean, "out")
                                            self._segment_path = lambda: "all"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)


                                class DistributeList(Entity):
                                    """
                                    Filter prefixes to/from RIB
                                    
                                    .. attribute:: in_
                                    
                                    	Filter prefixes installed to RIB
                                    	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_)}
                                        self._child_list_classes = {}

                                        self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_()
                                        self.in_.parent = self
                                        self._children_name_map["in_"] = "in"
                                        self._children_yang_names.add("in")
                                        self._segment_path = lambda: "distribute-list"


                                    class In_(Entity):
                                        """
                                        Filter prefixes installed to RIB
                                        
                                        .. attribute:: prefix_list
                                        
                                        	Filter prefixes based on an IPv6 prefix\-list
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_, self).__init__()

                                            self.yang_name = "in"
                                            self.yang_parent_name = "distribute-list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.prefix_list = YLeaf(YType.str, "prefix-list")
                                            self._segment_path = lambda: "in"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_, ['prefix_list'], name, value)


                                class Encryption(Entity):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                        self.authentication_password = YLeaf(YType.str, "authentication-password")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                        self.encryption_password = YLeaf(YType.str, "encryption-password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "encryption"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                        self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                class Neighbors(Entity):
                                    """
                                    Specify a neighbor router
                                    
                                    .. attribute:: neighbor
                                    
                                    	IPv6 address
                                    	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"neighbor" : ("neighbor", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor)}

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, [], name, value)


                                    class Neighbor(Entity):
                                        """
                                        IPv6 address
                                        
                                        .. attribute:: neighbor_address  <key>
                                        
                                        	IPV6 address
                                        	**type**\:  str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: cost
                                        
                                        	OSPFv3 cost for point\-to\-multipoint neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: database_filter
                                        
                                        	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPFv3 dead\-router polling interval (in seconds)
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: priority
                                        
                                        	OSPFv3 priority of non\-broadcast neighbor
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: zone
                                        
                                        	Zone
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                            self.cost = YLeaf(YType.uint32, "cost")

                                            self.database_filter = YLeaf(YType.boolean, "database-filter")

                                            self.poll_interval = YLeaf(YType.uint32, "poll-interval")

                                            self.priority = YLeaf(YType.uint32, "priority")

                                            self.zone = YLeaf(YType.str, "zone")
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + self.neighbor_address.get() + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'cost', 'database_filter', 'poll_interval', 'priority', 'zone'], name, value)


                        class Nssa(Entity):
                            """
                            Specify area as a NSSA area.  Allowed only in
                            non\-backbone areas
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: metric
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\:  int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa, self).__init__()

                                self.yang_name = "nssa"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.default_info_originate = YLeaf(YType.boolean, "default-info-originate")

                                self.metric = YLeaf(YType.uint32, "metric")

                                self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                self.no_redistribution = YLeaf(YType.boolean, "no-redistribution")

                                self.no_summary = YLeaf(YType.empty, "no-summary")
                                self._segment_path = lambda: "nssa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa, ['default_info_originate', 'metric', 'metric_type', 'no_redistribution', 'no_summary'], name, value)


                        class Ranges(Entity):
                            """
                            Range configuration
                            
                            .. attribute:: range
                            
                            	Summarize inter\-area routes matching prefix/length
                            	**type**\: list of    :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges, self).__init__()

                                self.yang_name = "ranges"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"range" : ("range", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range)}

                                self.range = YList(self)
                                self._segment_path = lambda: "ranges"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges, [], name, value)


                            class Range(Entity):
                                """
                                Summarize inter\-area routes matching
                                prefix/length
                                
                                .. attribute:: prefix  <key>
                                
                                	IPv6 prefix format
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length  <key>
                                
                                	IPV6 prefix length
                                	**type**\:  int
                                
                                	**range:** 0..128
                                
                                .. attribute:: cost
                                
                                	Specified metric for this range
                                	**type**\:  int
                                
                                	**range:** 1..16777214
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise address range
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range, self).__init__()

                                    self.yang_name = "range"
                                    self.yang_parent_name = "ranges"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.prefix = YLeaf(YType.str, "prefix")

                                    self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                    self.cost = YLeaf(YType.uint32, "cost")

                                    self.not_advertise = YLeaf(YType.boolean, "not-advertise")
                                    self._segment_path = lambda: "range" + "[prefix='" + self.prefix.get() + "']" + "[prefix-length='" + self.prefix_length.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range, ['prefix', 'prefix_length', 'cost', 'not_advertise'], name, value)


                        class ShamLinks(Entity):
                            """
                            Sham Link sub\-mode
                            
                            .. attribute:: sham_link
                            
                            	ShamLink local and remote endpoints
                            	**type**\: list of    :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks, self).__init__()

                                self.yang_name = "sham-links"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"sham-link" : ("sham_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink)}

                                self.sham_link = YList(self)
                                self._segment_path = lambda: "sham-links"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks, [], name, value)


                            class ShamLink(Entity):
                                """
                                ShamLink local and remote endpoints
                                
                                .. attribute:: source_address  <key>
                                
                                	Local sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: destination_address  <key>
                                
                                	Remote sham\-link endpoint
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: enable
                                
                                	Enable sham link
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, self).__init__()

                                    self.yang_name = "sham-link"
                                    self.yang_parent_name = "sham-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption)}
                                    self._child_list_classes = {}

                                    self.source_address = YLeaf(YType.str, "source-address")

                                    self.destination_address = YLeaf(YType.str, "destination-address")

                                    self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                    self.enable = YLeaf(YType.empty, "enable")

                                    self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                    self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                    self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._children_yang_names.add("encryption")
                                    self._segment_path = lambda: "sham-link" + "[source-address='" + self.source_address.get() + "']" + "[destination-address='" + self.destination_address.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, ['source_address', 'destination_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.password = YLeaf(YType.str, "password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                class Encryption(Entity):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                        self.authentication_password = YLeaf(YType.str, "authentication-password")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                        self.encryption_password = YLeaf(YType.str, "encryption-password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "encryption"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                        class VirtualLinks(Entity):
                            """
                            Virtual link sub\-mode
                            
                            .. attribute:: virtual_link
                            
                            	Router ID of virtual link neighbor
                            	**type**\: list of    :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks, self).__init__()

                                self.yang_name = "virtual-links"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"virtual-link" : ("virtual_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink)}

                                self.virtual_link = YList(self)
                                self._segment_path = lambda: "virtual-links"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks, [], name, value)


                            class VirtualLink(Entity):
                                """
                                Router ID of virtual link neighbor
                                
                                .. attribute:: virtual_link_address  <key>
                                
                                	Router ID of virtual link neighbor
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: enable
                                
                                	Enabled virtual link
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, self).__init__()

                                    self.yang_name = "virtual-link"
                                    self.yang_parent_name = "virtual-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption)}
                                    self._child_list_classes = {}

                                    self.virtual_link_address = YLeaf(YType.str, "virtual-link-address")

                                    self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                    self.enable = YLeaf(YType.empty, "enable")

                                    self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                    self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                    self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"
                                    self._children_yang_names.add("authentication")

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._children_yang_names.add("encryption")
                                    self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + self.virtual_link_address.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, ['virtual_link_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(Entity):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.password = YLeaf(YType.str, "password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "authentication"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                class Encryption(Entity):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\:  int
                                    
                                    	**range:** 256..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                        self.authentication_password = YLeaf(YType.str, "authentication-password")

                                        self.enable = YLeaf(YType.boolean, "enable")

                                        self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                        self.encryption_password = YLeaf(YType.str, "encryption-password")

                                        self.spi = YLeaf(YType.uint32, "spi")
                                        self._segment_path = lambda: "encryption"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                class Authentication(Entity):
                    """
                    Authenticate OSPFv3 packets
                    
                    .. attribute:: algorithm
                    
                    	Use the MD5 or SHA1 algorithm
                    	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                    
                    .. attribute:: enable
                    
                    	Authenticate packets
                    	**type**\:  bool
                    
                    .. attribute:: password
                    
                    	Specify MD5 or SHA1 password
                    	**type**\:  str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    .. attribute:: spi
                    
                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                    	**type**\:  int
                    
                    	**range:** 256..4294967295
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Authentication, self).__init__()

                        self.yang_name = "authentication"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.algorithm = YLeaf(YType.enumeration, "algorithm")

                        self.enable = YLeaf(YType.boolean, "enable")

                        self.password = YLeaf(YType.str, "password")

                        self.spi = YLeaf(YType.uint32, "spi")
                        self._segment_path = lambda: "authentication"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                class AutoCost(Entity):
                    """
                    Calculate interface cost according to bandwidth
                    
                    .. attribute:: disable
                    
                    	Specify 'true' to assign cost based on interface type
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reference_bandwidth
                    
                    	Specify reference bandwidth for cost computations in terms of Mbits per second
                    	**type**\:  int
                    
                    	**range:** 1..4294967
                    
                    	**units**\: Mbit/s
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.AutoCost, self).__init__()

                        self.yang_name = "auto-cost"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}
                        self.is_presence_container = True

                        self.disable = YLeaf(YType.empty, "disable")

                        self.reference_bandwidth = YLeaf(YType.uint32, "reference-bandwidth")
                        self._segment_path = lambda: "auto-cost"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AutoCost, ['disable', 'reference_bandwidth'], name, value)


                class Bfd(Entity):
                    """
                    Configure BFD parameters
                    
                    .. attribute:: detection_multiplier
                    
                    	Detect multiplier
                    	**type**\:  int
                    
                    	**range:** 2..50
                    
                    .. attribute:: fast_detect_mode
                    
                    	Enable or disable BFD fast detection
                    	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                    
                    .. attribute:: interval
                    
                    	Hello interval in milli\-seconds
                    	**type**\:  int
                    
                    	**range:** 3..30000
                    
                    	**units**\: millisecond
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Bfd, self).__init__()

                        self.yang_name = "bfd"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                        self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                        self.interval = YLeaf(YType.uint32, "interval")
                        self._segment_path = lambda: "bfd"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                class DatabaseFilter(Entity):
                    """
                    Database filter
                    
                    .. attribute:: all
                    
                    	All
                    	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter, self).__init__()

                        self.yang_name = "database-filter"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All)}
                        self._child_list_classes = {}

                        self.all = Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All()
                        self.all.parent = self
                        self._children_name_map["all"] = "all"
                        self._children_yang_names.add("all")
                        self._segment_path = lambda: "database-filter"


                    class All(Entity):
                        """
                        All
                        
                        .. attribute:: out
                        
                        	Enable out
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All, self).__init__()

                            self.yang_name = "all"
                            self.yang_parent_name = "database-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.out = YLeaf(YType.empty, "out")
                            self._segment_path = lambda: "all"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All, ['out'], name, value)


                class DefaultInformation(Entity):
                    """
                    Control distribution of default information
                    
                    .. attribute:: originate
                    
                    	Distribute a default route
                    	**type**\:   :py:class:`Originate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.DefaultInformation, self).__init__()

                        self.yang_name = "default-information"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"originate" : ("originate", Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate)}
                        self._child_list_classes = {}

                        self.originate = None
                        self._children_name_map["originate"] = "originate"
                        self._children_yang_names.add("originate")
                        self._segment_path = lambda: "default-information"


                    class Originate(Entity):
                        """
                        Distribute a default route
                        
                        .. attribute:: always
                        
                        	Always advertise default route
                        	**type**\:  bool
                        
                        	**mandatory**\: True
                        
                        .. attribute:: metric
                        
                        	OSPFv3 default metric
                        	**type**\:  int
                        
                        	**range:** 0..16777214
                        
                        .. attribute:: metric_type
                        
                        	OSPFv3 metric type for default routes
                        	**type**\:  int
                        
                        	**range:** 1..2
                        
                        .. attribute:: route_policy_name
                        
                        	Route policy to default\-information origination
                        	**type**\:  str
                        
                        .. attribute:: tag
                        
                        	Tag for default route
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate, self).__init__()

                            self.yang_name = "originate"
                            self.yang_parent_name = "default-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}
                            self.is_presence_container = True

                            self.always = YLeaf(YType.boolean, "always")

                            self.metric = YLeaf(YType.uint32, "metric")

                            self.metric_type = YLeaf(YType.uint32, "metric-type")

                            self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                            self.tag = YLeaf(YType.uint32, "tag")
                            self._segment_path = lambda: "originate"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate, ['always', 'metric', 'metric_type', 'route_policy_name', 'tag'], name, value)


                class Distance(Entity):
                    """
                    Define an administrative distance
                    
                    .. attribute:: administrative
                    
                    	Define an administrative distance
                    	**type**\:  int
                    
                    	**range:** 1..255
                    
                    .. attribute:: ospfv3
                    
                    	OSPFv3 administrative distance
                    	**type**\:   :py:class:`Ospfv3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Distance, self).__init__()

                        self.yang_name = "distance"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"ospfv3" : ("ospfv3", Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3)}
                        self._child_list_classes = {}

                        self.administrative = YLeaf(YType.uint32, "administrative")

                        self.ospfv3 = Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3()
                        self.ospfv3.parent = self
                        self._children_name_map["ospfv3"] = "ospfv3"
                        self._children_yang_names.add("ospfv3")
                        self._segment_path = lambda: "distance"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Distance, ['administrative'], name, value)


                    class Ospfv3(Entity):
                        """
                        OSPFv3 administrative distance
                        
                        .. attribute:: external
                        
                        	Distance for external type 5 and type 7 routes
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        .. attribute:: inter_area
                        
                        	Distance for inter\-area routes
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        .. attribute:: intra_area
                        
                        	Distance for intra\-area routes
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3, self).__init__()

                            self.yang_name = "ospfv3"
                            self.yang_parent_name = "distance"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.external = YLeaf(YType.uint32, "external")

                            self.inter_area = YLeaf(YType.uint32, "inter-area")

                            self.intra_area = YLeaf(YType.uint32, "intra-area")
                            self._segment_path = lambda: "ospfv3"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3, ['external', 'inter_area', 'intra_area'], name, value)


                class DistributeList(Entity):
                    """
                    Filter prefixes to/from RIB
                    
                    .. attribute:: in_
                    
                    	Filter prefixes installed to RIB
                    	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeList.In_>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.DistributeList, self).__init__()

                        self.yang_name = "distribute-list"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.DefaultVrf.DistributeList.In_)}
                        self._child_list_classes = {}

                        self.in_ = Ospfv3.Processes.Process.DefaultVrf.DistributeList.In_()
                        self.in_.parent = self
                        self._children_name_map["in_"] = "in"
                        self._children_yang_names.add("in")
                        self._segment_path = lambda: "distribute-list"


                    class In_(Entity):
                        """
                        Filter prefixes installed to RIB
                        
                        .. attribute:: prefix_list
                        
                        	Filter prefixes based on an IPv6 prefix\-list
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.DistributeList.In_, self).__init__()

                            self.yang_name = "in"
                            self.yang_parent_name = "distribute-list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.prefix_list = YLeaf(YType.str, "prefix-list")
                            self._segment_path = lambda: "in"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeList.In_, ['prefix_list'], name, value)


                class DistributeListOut(Entity):
                    """
                    Filter prefixes from RIB 
                    
                    .. attribute:: distribute_outs
                    
                    	Filter generated type\-5 LSAs
                    	**type**\:   :py:class:`DistributeOuts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut, self).__init__()

                        self.yang_name = "distribute-list-out"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"distribute-outs" : ("distribute_outs", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts)}
                        self._child_list_classes = {}

                        self.distribute_outs = Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts()
                        self.distribute_outs.parent = self
                        self._children_name_map["distribute_outs"] = "distribute-outs"
                        self._children_yang_names.add("distribute-outs")
                        self._segment_path = lambda: "distribute-list-out"


                    class DistributeOuts(Entity):
                        """
                        Filter generated type\-5 LSAs
                        
                        .. attribute:: distribute_out
                        
                        	Filter generated type\-5 LSAs
                        	**type**\: list of    :py:class:`DistributeOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts, self).__init__()

                            self.yang_name = "distribute-outs"
                            self.yang_parent_name = "distribute-list-out"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"distribute-out" : ("distribute_out", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut)}

                            self.distribute_out = YList(self)
                            self._segment_path = lambda: "distribute-outs"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts, [], name, value)


                        class DistributeOut(Entity):
                            """
                            Filter generated type\-5 LSAs
                            
                            .. attribute:: protocol_name  <key>
                            
                            	none
                            	**type**\:   :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Protocol>`
                            
                            .. attribute:: as_yy_and_as_xx_and_process_name
                            
                            	keys\: as\-yy, as\-xx, process\-name
                            	**type**\: list of    :py:class:`AsYyAndAsXxAndProcessName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut, self).__init__()

                                self.yang_name = "distribute-out"
                                self.yang_parent_name = "distribute-outs"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"as-yy-and-as-xx-and-process-name" : ("as_yy_and_as_xx_and_process_name", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName)}

                                self.protocol_name = YLeaf(YType.enumeration, "protocol-name")

                                self.as_yy_and_as_xx_and_process_name = YList(self)
                                self._segment_path = lambda: "distribute-out" + "[protocol-name='" + self.protocol_name.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut, ['protocol_name'], name, value)


                            class AsYyAndAsXxAndProcessName(Entity):
                                """
                                keys\: as\-yy, as\-xx, process\-name
                                
                                .. attribute:: as_yy  <key>
                                
                                	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: as_xx  <key>
                                
                                	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                	**type**\:  int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: process_name  <key>
                                
                                	If ISIS or OSPFv3, specify the instance name
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: prefix_list
                                
                                	Prefix\-list name
                                	**type**\:  str
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName, self).__init__()

                                    self.yang_name = "as-yy-and-as-xx-and-process-name"
                                    self.yang_parent_name = "distribute-out"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.as_yy = YLeaf(YType.uint32, "as-yy")

                                    self.as_xx = YLeaf(YType.uint32, "as-xx")

                                    self.process_name = YLeaf(YType.str, "process-name")

                                    self.prefix_list = YLeaf(YType.str, "prefix-list")
                                    self._segment_path = lambda: "as-yy-and-as-xx-and-process-name" + "[as-yy='" + self.as_yy.get() + "']" + "[as-xx='" + self.as_xx.get() + "']" + "[process-name='" + self.process_name.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName, ['as_yy', 'as_xx', 'process_name', 'prefix_list'], name, value)


                class Encryption(Entity):
                    """
                    Encrypt and authenticate OSPFv3 packets
                    
                    .. attribute:: authentication_algorithm
                    
                    	Use the NULL, MD5 or SHA1 algorithm
                    	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                    
                    .. attribute:: authentication_password
                    
                    	Specify MD5 or SHA1 password
                    	**type**\:  str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    .. attribute:: enable
                    
                    	Authenticate packets
                    	**type**\:  bool
                    
                    .. attribute:: encryption_algorithm
                    
                    	Specify the encryption algorithm
                    	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                    
                    .. attribute:: encryption_password
                    
                    	Encryption password
                    	**type**\:  str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    .. attribute:: spi
                    
                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                    	**type**\:  int
                    
                    	**range:** 256..4294967295
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Encryption, self).__init__()

                        self.yang_name = "encryption"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                        self.authentication_password = YLeaf(YType.str, "authentication-password")

                        self.enable = YLeaf(YType.boolean, "enable")

                        self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                        self.encryption_password = YLeaf(YType.str, "encryption-password")

                        self.spi = YLeaf(YType.uint32, "spi")
                        self._segment_path = lambda: "encryption"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                class FastReroute(Entity):
                    """
                    Fast\-reroute instance scoped parameters
                    
                    .. attribute:: per_link
                    
                    	Fast\-reroute per\-link global configuration
                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink>`
                    
                    .. attribute:: per_prefix
                    
                    	Fast\-reroute per\-prefix global configuration
                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.FastReroute, self).__init__()

                        self.yang_name = "fast-reroute"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix)}
                        self._child_list_classes = {}

                        self.per_link = Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink()
                        self.per_link.parent = self
                        self._children_name_map["per_link"] = "per-link"
                        self._children_yang_names.add("per-link")

                        self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix()
                        self.per_prefix.parent = self
                        self._children_name_map["per_prefix"] = "per-prefix"
                        self._children_yang_names.add("per-prefix")
                        self._segment_path = lambda: "fast-reroute"


                    class PerLink(Entity):
                        """
                        Fast\-reroute per\-link global configuration
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:   :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink, self).__init__()

                            self.yang_name = "per-link"
                            self.yang_parent_name = "fast-reroute"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.priority = YLeaf(YType.enumeration, "priority")
                            self._segment_path = lambda: "per-link"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink, ['priority'], name, value)


                    class PerPrefix(Entity):
                        """
                        Fast\-reroute per\-prefix global configuration
                        
                        .. attribute:: load_sharing_disable
                        
                        	Disable load sharing between multiple backups
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:   :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                        
                        .. attribute:: tiebreakers
                        
                        	Fast\-reroute tiebreakers configurations
                        	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix, self).__init__()

                            self.yang_name = "per-prefix"
                            self.yang_parent_name = "fast-reroute"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"tiebreakers" : ("tiebreakers", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers)}
                            self._child_list_classes = {}

                            self.load_sharing_disable = YLeaf(YType.empty, "load-sharing-disable")

                            self.priority = YLeaf(YType.enumeration, "priority")

                            self.tiebreakers = Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers()
                            self.tiebreakers.parent = self
                            self._children_name_map["tiebreakers"] = "tiebreakers"
                            self._children_yang_names.add("tiebreakers")
                            self._segment_path = lambda: "per-prefix"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix, ['load_sharing_disable', 'priority'], name, value)


                        class Tiebreakers(Entity):
                            """
                            Fast\-reroute tiebreakers configurations
                            
                            .. attribute:: tiebreaker
                            
                            	Fast\-reroute tiebreakers configuration
                            	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                self.yang_name = "tiebreakers"
                                self.yang_parent_name = "per-prefix"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"tiebreaker" : ("tiebreaker", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker)}

                                self.tiebreaker = YList(self)
                                self._segment_path = lambda: "tiebreakers"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                            class Tiebreaker(Entity):
                                """
                                Fast\-reroute tiebreakers configuration
                                
                                .. attribute:: tiebreaker_type  <key>
                                
                                	Tiebreaker type
                                	**type**\:   :py:class:`Ospfv3FastRerouteTiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastRerouteTiebreakers>`
                                
                                .. attribute:: tiebreaker_index
                                
                                	Index value for a tiebreaker
                                	**type**\:  int
                                
                                	**range:** 1..255
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                    self.yang_name = "tiebreaker"
                                    self.yang_parent_name = "tiebreakers"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.tiebreaker_type = YLeaf(YType.enumeration, "tiebreaker-type")

                                    self.tiebreaker_index = YLeaf(YType.uint32, "tiebreaker-index")
                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + self.tiebreaker_type.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                class GracefulRestart(Entity):
                    """
                    Graceful restart configuration
                    
                    .. attribute:: enable
                    
                    	Enable graceful restart
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: helper
                    
                    	Disable router's helper support
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: interval
                    
                    	Minimum interval between graceful restarts (seconds)
                    	**type**\:  int
                    
                    	**range:** 90..3600
                    
                    	**units**\: second
                    
                    .. attribute:: lifetime
                    
                    	Maximum route lifetime following restart (seconds)
                    	**type**\:  int
                    
                    	**range:** 90..1800
                    
                    	**units**\: second
                    
                    .. attribute:: strict_lsa_checking
                    
                    	Terminate graceful restart helper mode if LSA changed
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.GracefulRestart, self).__init__()

                        self.yang_name = "graceful-restart"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.enable = YLeaf(YType.empty, "enable")

                        self.helper = YLeaf(YType.empty, "helper")

                        self.interval = YLeaf(YType.uint32, "interval")

                        self.lifetime = YLeaf(YType.uint32, "lifetime")

                        self.strict_lsa_checking = YLeaf(YType.empty, "strict-lsa-checking")
                        self._segment_path = lambda: "graceful-restart"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.GracefulRestart, ['enable', 'helper', 'interval', 'lifetime', 'strict_lsa_checking'], name, value)


                class Ignore(Entity):
                    """
                    Do not complain about a specified event
                    
                    .. attribute:: lsa
                    
                    	Do not complain upon receiving LSA of the specified type
                    	**type**\:   :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Ignore, self).__init__()

                        self.yang_name = "ignore"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"lsa" : ("lsa", Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa)}
                        self._child_list_classes = {}

                        self.lsa = Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa()
                        self.lsa.parent = self
                        self._children_name_map["lsa"] = "lsa"
                        self._children_yang_names.add("lsa")
                        self._segment_path = lambda: "ignore"


                    class Lsa(Entity):
                        """
                        Do not complain upon receiving LSA of the
                        specified type
                        
                        .. attribute:: mospf
                        
                        	Enable ignore of MOSPF type 6 LSA
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa, self).__init__()

                            self.yang_name = "lsa"
                            self.yang_parent_name = "ignore"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.mospf = YLeaf(YType.empty, "mospf")
                            self._segment_path = lambda: "lsa"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa, ['mospf'], name, value)


                class Maximum(Entity):
                    """
                    Set OSPFv3 limits
                    
                    .. attribute:: interfaces
                    
                    	Specify maximum number of interfaces
                    	**type**\:  int
                    
                    	**range:** 1..4294967295
                    
                    .. attribute:: paths
                    
                    	Specify maximum number of paths per route
                    	**type**\:  int
                    
                    	**range:** 1..64
                    
                    .. attribute:: redistributed_prefixes
                    
                    	Limit number of redistributed prefixes
                    	**type**\:   :py:class:`RedistributedPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Maximum, self).__init__()

                        self.yang_name = "maximum"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"redistributed-prefixes" : ("redistributed_prefixes", Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes)}
                        self._child_list_classes = {}

                        self.interfaces = YLeaf(YType.uint32, "interfaces")

                        self.paths = YLeaf(YType.uint32, "paths")

                        self.redistributed_prefixes = Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes()
                        self.redistributed_prefixes.parent = self
                        self._children_name_map["redistributed_prefixes"] = "redistributed-prefixes"
                        self._children_yang_names.add("redistributed-prefixes")
                        self._segment_path = lambda: "maximum"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Maximum, ['interfaces', 'paths'], name, value)


                    class RedistributedPrefixes(Entity):
                        """
                        Limit number of redistributed prefixes
                        
                        .. attribute:: prefixes
                        
                        	Maximum number of prefixes redistributed to protocol
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: threshold
                        
                        	Threshold value (%) at which to generate a warning message
                        	**type**\:  int
                        
                        	**range:** 1..100
                        
                        .. attribute:: warning_only
                        
                        	Only give warning message when limit is exceeded
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes, self).__init__()

                            self.yang_name = "redistributed-prefixes"
                            self.yang_parent_name = "maximum"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.prefixes = YLeaf(YType.uint32, "prefixes")

                            self.threshold = YLeaf(YType.uint32, "threshold")

                            self.warning_only = YLeaf(YType.empty, "warning-only")
                            self._segment_path = lambda: "redistributed-prefixes"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes, ['prefixes', 'threshold', 'warning_only'], name, value)


                class ProcessScope(Entity):
                    """
                    Process scope configuration
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute configuration
                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope, self).__init__()

                        self.yang_name = "process-scope"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute)}
                        self._child_list_classes = {}

                        self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute()
                        self.fast_reroute.parent = self
                        self._children_name_map["fast_reroute"] = "fast-reroute"
                        self._children_yang_names.add("fast-reroute")
                        self._segment_path = lambda: "process-scope"


                    class FastReroute(Entity):
                        """
                        Fast\-reroute configuration
                        
                        .. attribute:: fast_reroute_enable
                        
                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                        	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link configuration
                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-link configuration
                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute, self).__init__()

                            self.yang_name = "fast-reroute"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix)}
                            self._child_list_classes = {}

                            self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                            self.per_link = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink()
                            self.per_link.parent = self
                            self._children_name_map["per_link"] = "per-link"
                            self._children_yang_names.add("per-link")

                            self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix()
                            self.per_prefix.parent = self
                            self._children_name_map["per_prefix"] = "per-prefix"
                            self._children_yang_names.add("per-prefix")
                            self._segment_path = lambda: "fast-reroute"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute, ['fast_reroute_enable'], name, value)


                        class PerLink(Entity):
                            """
                            Fast\-reroute per\-link configuration
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink, self).__init__()

                                self.yang_name = "per-link"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces)}
                                self._child_list_classes = {}

                                self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                self._children_yang_names.add("candidate-interfaces")

                                self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                self._children_yang_names.add("exclude-interfaces")
                                self._segment_path = lambda: "per-link"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                            class CandidateInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                    self.yang_name = "candidate-interfaces"
                                    self.yang_parent_name = "per-link"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                    self.candidate_interface = YList(self)
                                    self._segment_path = lambda: "candidate-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                class CandidateInterface(Entity):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                        self.yang_name = "candidate-interface"
                                        self.yang_parent_name = "candidate-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                            class ExcludeInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup
                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                    self.yang_name = "exclude-interfaces"
                                    self.yang_parent_name = "per-link"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                    self.exclude_interface = YList(self)
                                    self._segment_path = lambda: "exclude-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                class ExcludeInterface(Entity):
                                    """
                                    Exclude an interface from becoming a backup
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                        self.yang_name = "exclude-interface"
                                        self.yang_parent_name = "exclude-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                        class PerPrefix(Entity):
                            """
                            Fast\-reroute per\-link configuration
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix, self).__init__()

                                self.yang_name = "per-prefix"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces)}
                                self._child_list_classes = {}

                                self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                self._children_yang_names.add("candidate-interfaces")

                                self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                self._children_yang_names.add("exclude-interfaces")
                                self._segment_path = lambda: "per-prefix"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                            class CandidateInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                    self.yang_name = "candidate-interfaces"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                    self.candidate_interface = YList(self)
                                    self._segment_path = lambda: "candidate-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                class CandidateInterface(Entity):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                        self.yang_name = "candidate-interface"
                                        self.yang_parent_name = "candidate-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                            class ExcludeInterfaces(Entity):
                                """
                                Fast\-reroute per\-link/per\-prefix exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup
                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                    self.yang_name = "exclude-interfaces"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                    self.exclude_interface = YList(self)
                                    self._segment_path = lambda: "exclude-interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                class ExcludeInterface(Entity):
                                    """
                                    Exclude an interface from becoming a backup
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                        self.yang_name = "exclude-interface"
                                        self.yang_parent_name = "exclude-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                class Redistributes(Entity):
                    """
                    Redistribute information from another routing
                    protocol
                    
                    .. attribute:: redistribute
                    
                    	Redistribute information from another routing protocol
                    	**type**\: list of    :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Redistributes, self).__init__()

                        self.yang_name = "redistributes"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"redistribute" : ("redistribute", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute)}

                        self.redistribute = YList(self)
                        self._segment_path = lambda: "redistributes"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes, [], name, value)


                    class Redistribute(Entity):
                        """
                        Redistribute information from another routing
                        protocol
                        
                        .. attribute:: protocol_name  <key>
                        
                        	Protocol
                        	**type**\:   :py:class:`Ospfv3ProtocolType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ProtocolType2>`
                        
                        .. attribute:: bgp
                        
                        	bgp
                        	**type**\: list of    :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp>`
                        
                        .. attribute:: connected_or_static_or_subscriber_or_mobile
                        
                        	connected or static or subscriber or mobile
                        	**type**\:   :py:class:`ConnectedOrStaticOrSubscriberOrMobile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: eigrp
                        
                        	eigrp
                        	**type**\: list of    :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp>`
                        
                        .. attribute:: ospfv3_or_isis_or_application
                        
                        	ospfv3 or isis or application
                        	**type**\: list of    :py:class:`Ospfv3OrIsisOrApplication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute, self).__init__()

                            self.yang_name = "redistribute"
                            self.yang_parent_name = "redistributes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"connected-or-static-or-subscriber-or-mobile" : ("connected_or_static_or_subscriber_or_mobile", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile)}
                            self._child_list_classes = {"bgp" : ("bgp", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp), "eigrp" : ("eigrp", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp), "ospfv3-or-isis-or-application" : ("ospfv3_or_isis_or_application", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication)}

                            self.protocol_name = YLeaf(YType.enumeration, "protocol-name")

                            self.connected_or_static_or_subscriber_or_mobile = None
                            self._children_name_map["connected_or_static_or_subscriber_or_mobile"] = "connected-or-static-or-subscriber-or-mobile"
                            self._children_yang_names.add("connected-or-static-or-subscriber-or-mobile")

                            self.bgp = YList(self)
                            self.eigrp = YList(self)
                            self.ospfv3_or_isis_or_application = YList(self)
                            self._segment_path = lambda: "redistribute" + "[protocol-name='" + self.protocol_name.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute, ['protocol_name'], name, value)


                        class Bgp(Entity):
                            """
                            bgp
                            
                            .. attribute:: as_xx  <key>
                            
                            	4\-byte AS number in asdot (X.Y) format \- first half (X)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: as_yy  <key>
                            
                            	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\:  int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: preserve_med_info
                            
                            	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\:  bool
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\:  str
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp, self).__init__()

                                self.yang_name = "bgp"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.as_xx = YLeaf(YType.uint32, "as-xx")

                                self.as_yy = YLeaf(YType.uint32, "as-yy")

                                self.default_metric = YLeaf(YType.uint32, "default-metric")

                                self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.tag = YLeaf(YType.uint32, "tag")
                                self._segment_path = lambda: "bgp" + "[as-xx='" + self.as_xx.get() + "']" + "[as-yy='" + self.as_yy.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp, ['as_xx', 'as_yy', 'default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                        class ConnectedOrStaticOrSubscriberOrMobile(Entity):
                            """
                            connected or static or subscriber or mobile
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\:  int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: preserve_med_info
                            
                            	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\:  bool
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\:  str
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, self).__init__()

                                self.yang_name = "connected-or-static-or-subscriber-or-mobile"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}
                                self.is_presence_container = True

                                self.default_metric = YLeaf(YType.uint32, "default-metric")

                                self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.tag = YLeaf(YType.uint32, "tag")
                                self._segment_path = lambda: "connected-or-static-or-subscriber-or-mobile"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, ['default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                        class Eigrp(Entity):
                            """
                            eigrp
                            
                            .. attribute:: as_xx  <key>
                            
                            	4\-byte AS number in asdot (X.Y) format \- first half (X)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\:  int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: preserve_med_info
                            
                            	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\:  bool
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\:  str
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp, self).__init__()

                                self.yang_name = "eigrp"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.as_xx = YLeaf(YType.uint32, "as-xx")

                                self.default_metric = YLeaf(YType.uint32, "default-metric")

                                self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.tag = YLeaf(YType.uint32, "tag")
                                self._segment_path = lambda: "eigrp" + "[as-xx='" + self.as_xx.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp, ['as_xx', 'default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                        class Ospfv3OrIsisOrApplication(Entity):
                            """
                            ospfv3 or isis or application
                            
                            .. attribute:: process_name  <key>
                            
                            	ISIS process name if protocol is ISIS, or OSPFv3 process name if protocol is OSPFv3
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\:  int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: preserve_med_info
                            
                            	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\:  bool
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\:  str
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, self).__init__()

                                self.yang_name = "ospfv3-or-isis-or-application"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.process_name = YLeaf(YType.str, "process-name")

                                self.default_metric = YLeaf(YType.uint32, "default-metric")

                                self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.tag = YLeaf(YType.uint32, "tag")
                                self._segment_path = lambda: "ospfv3-or-isis-or-application" + "[process-name='" + self.process_name.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, ['process_name', 'default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                class Snmp(Entity):
                    """
                    SNMP configuration
                    
                    .. attribute:: context
                    
                    	SNMP context configuration
                    	**type**\:  str
                    
                    .. attribute:: trap_rate_limit
                    
                    	SNMP trap rate configuration
                    	**type**\:   :py:class:`TrapRateLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Snmp, self).__init__()

                        self.yang_name = "snmp"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"trap-rate-limit" : ("trap_rate_limit", Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit)}
                        self._child_list_classes = {}

                        self.context = YLeaf(YType.str, "context")

                        self.trap_rate_limit = Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit()
                        self.trap_rate_limit.parent = self
                        self._children_name_map["trap_rate_limit"] = "trap-rate-limit"
                        self._children_yang_names.add("trap-rate-limit")
                        self._segment_path = lambda: "snmp"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Snmp, ['context'], name, value)


                    class TrapRateLimit(Entity):
                        """
                        SNMP trap rate configuration
                        
                        .. attribute:: max_window_traps
                        
                        	Max number of traps sent in window time
                        	**type**\:  int
                        
                        	**range:** 0..300
                        
                        .. attribute:: window_size
                        
                        	Trap rate limit sliding window size
                        	**type**\:  int
                        
                        	**range:** 2..60
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit, self).__init__()

                            self.yang_name = "trap-rate-limit"
                            self.yang_parent_name = "snmp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.max_window_traps = YLeaf(YType.uint32, "max-window-traps")

                            self.window_size = YLeaf(YType.uint32, "window-size")
                            self._segment_path = lambda: "trap-rate-limit"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit, ['max_window_traps', 'window_size'], name, value)


                class StubRouter(Entity):
                    """
                    Stub router configuration
                    
                    .. attribute:: max_metric
                    
                    	Stub router max\-metric configuration
                    	**type**\:   :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric>`
                    
                    .. attribute:: rbit
                    
                    	Stub router R\-bit configuration
                    	**type**\:   :py:class:`Rbit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit>`
                    
                    .. attribute:: v6bit
                    
                    	Stub router V6\-bit configuration
                    	**type**\:   :py:class:`V6Bit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.StubRouter, self).__init__()

                        self.yang_name = "stub-router"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"max-metric" : ("max_metric", Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric), "rbit" : ("rbit", Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit), "v6bit" : ("v6bit", Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit)}
                        self._child_list_classes = {}

                        self.max_metric = Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric()
                        self.max_metric.parent = self
                        self._children_name_map["max_metric"] = "max-metric"
                        self._children_yang_names.add("max-metric")

                        self.rbit = Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit()
                        self.rbit.parent = self
                        self._children_name_map["rbit"] = "rbit"
                        self._children_yang_names.add("rbit")

                        self.v6bit = Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit()
                        self.v6bit.parent = self
                        self._children_name_map["v6bit"] = "v6bit"
                        self._children_yang_names.add("v6bit")
                        self._segment_path = lambda: "stub-router"


                    class MaxMetric(Entity):
                        """
                        Stub router max\-metric configuration
                        
                        .. attribute:: always
                        
                        	Unconditionally enter stub router operational state
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: enable
                        
                        	Enabled stub router configuration mode
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: external_lsa
                        
                        	Advertise external LSAs with modified metric in stub router mode
                        	**type**\:  int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        .. attribute:: include_stub
                        
                        	Advertise stub links with maximum metric in stub router mode
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_proc_migration
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_proc_restart
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_startup
                        
                        	Enter stub router operational state on startup
                        	**type**\:   :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup>`
                        
                        .. attribute:: on_switchover
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: summary_lsa
                        
                        	Advertise summary LSAs with modified metric in stub router mode
                        	**type**\:  int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric, self).__init__()

                            self.yang_name = "max-metric"
                            self.yang_parent_name = "stub-router"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"on-startup" : ("on_startup", Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup)}
                            self._child_list_classes = {}

                            self.always = YLeaf(YType.empty, "always")

                            self.enable = YLeaf(YType.empty, "enable")

                            self.external_lsa = YLeaf(YType.uint32, "external-lsa")

                            self.include_stub = YLeaf(YType.empty, "include-stub")

                            self.on_proc_migration = YLeaf(YType.uint32, "on-proc-migration")

                            self.on_proc_restart = YLeaf(YType.uint32, "on-proc-restart")

                            self.on_switchover = YLeaf(YType.uint32, "on-switchover")

                            self.summary_lsa = YLeaf(YType.uint32, "summary-lsa")

                            self.on_startup = Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup()
                            self.on_startup.parent = self
                            self._children_name_map["on_startup"] = "on-startup"
                            self._children_yang_names.add("on-startup")
                            self._segment_path = lambda: "max-metric"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric, ['always', 'enable', 'external_lsa', 'include_stub', 'on_proc_migration', 'on_proc_restart', 'on_switchover', 'summary_lsa'], name, value)


                        class OnStartup(Entity):
                            """
                            Enter stub router operational state on startup
                            
                            .. attribute:: wait_for_bgp
                            
                            	Wait until BGP converges (only applicable to default VRF)
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: wait_time
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup, self).__init__()

                                self.yang_name = "on-startup"
                                self.yang_parent_name = "max-metric"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.wait_for_bgp = YLeaf(YType.boolean, "wait-for-bgp")

                                self.wait_time = YLeaf(YType.uint32, "wait-time")
                                self._segment_path = lambda: "on-startup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)


                    class Rbit(Entity):
                        """
                        Stub router R\-bit configuration
                        
                        .. attribute:: always
                        
                        	Unconditionally enter stub router operational state
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: enable
                        
                        	Enabled stub router configuration mode
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: external_lsa
                        
                        	Advertise external LSAs with modified metric in stub router mode
                        	**type**\:  int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        .. attribute:: include_stub
                        
                        	Advertise stub links with maximum metric in stub router mode
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_proc_migration
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_proc_restart
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_startup
                        
                        	Enter stub router operational state on startup
                        	**type**\:   :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup>`
                        
                        .. attribute:: on_switchover
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: summary_lsa
                        
                        	Advertise summary LSAs with modified metric in stub router mode
                        	**type**\:  int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit, self).__init__()

                            self.yang_name = "rbit"
                            self.yang_parent_name = "stub-router"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"on-startup" : ("on_startup", Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup)}
                            self._child_list_classes = {}

                            self.always = YLeaf(YType.empty, "always")

                            self.enable = YLeaf(YType.empty, "enable")

                            self.external_lsa = YLeaf(YType.uint32, "external-lsa")

                            self.include_stub = YLeaf(YType.empty, "include-stub")

                            self.on_proc_migration = YLeaf(YType.uint32, "on-proc-migration")

                            self.on_proc_restart = YLeaf(YType.uint32, "on-proc-restart")

                            self.on_switchover = YLeaf(YType.uint32, "on-switchover")

                            self.summary_lsa = YLeaf(YType.uint32, "summary-lsa")

                            self.on_startup = Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup()
                            self.on_startup.parent = self
                            self._children_name_map["on_startup"] = "on-startup"
                            self._children_yang_names.add("on-startup")
                            self._segment_path = lambda: "rbit"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit, ['always', 'enable', 'external_lsa', 'include_stub', 'on_proc_migration', 'on_proc_restart', 'on_switchover', 'summary_lsa'], name, value)


                        class OnStartup(Entity):
                            """
                            Enter stub router operational state on startup
                            
                            .. attribute:: wait_for_bgp
                            
                            	Wait until BGP converges (only applicable to default VRF)
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: wait_time
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup, self).__init__()

                                self.yang_name = "on-startup"
                                self.yang_parent_name = "rbit"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.wait_for_bgp = YLeaf(YType.boolean, "wait-for-bgp")

                                self.wait_time = YLeaf(YType.uint32, "wait-time")
                                self._segment_path = lambda: "on-startup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)


                    class V6Bit(Entity):
                        """
                        Stub router V6\-bit configuration
                        
                        .. attribute:: always
                        
                        	Unconditionally enter stub router operational state
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: enable
                        
                        	Enabled stub router configuration mode
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: external_lsa
                        
                        	Advertise external LSAs with modified metric in stub router mode
                        	**type**\:  int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        .. attribute:: include_stub
                        
                        	Advertise stub links with maximum metric in stub router mode
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_proc_migration
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_proc_restart
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_startup
                        
                        	Enter stub router operational state on startup
                        	**type**\:   :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit.OnStartup>`
                        
                        .. attribute:: on_switchover
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\:  int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: summary_lsa
                        
                        	Advertise summary LSAs with modified metric in stub router mode
                        	**type**\:  int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit, self).__init__()

                            self.yang_name = "v6bit"
                            self.yang_parent_name = "stub-router"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"on-startup" : ("on_startup", Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit.OnStartup)}
                            self._child_list_classes = {}

                            self.always = YLeaf(YType.empty, "always")

                            self.enable = YLeaf(YType.empty, "enable")

                            self.external_lsa = YLeaf(YType.uint32, "external-lsa")

                            self.include_stub = YLeaf(YType.empty, "include-stub")

                            self.on_proc_migration = YLeaf(YType.uint32, "on-proc-migration")

                            self.on_proc_restart = YLeaf(YType.uint32, "on-proc-restart")

                            self.on_switchover = YLeaf(YType.uint32, "on-switchover")

                            self.summary_lsa = YLeaf(YType.uint32, "summary-lsa")

                            self.on_startup = Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit.OnStartup()
                            self.on_startup.parent = self
                            self._children_name_map["on_startup"] = "on-startup"
                            self._children_yang_names.add("on-startup")
                            self._segment_path = lambda: "v6bit"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit, ['always', 'enable', 'external_lsa', 'include_stub', 'on_proc_migration', 'on_proc_restart', 'on_switchover', 'summary_lsa'], name, value)


                        class OnStartup(Entity):
                            """
                            Enter stub router operational state on startup
                            
                            .. attribute:: wait_for_bgp
                            
                            	Wait until BGP converges (only applicable to default VRF)
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: wait_time
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit.OnStartup, self).__init__()

                                self.yang_name = "on-startup"
                                self.yang_parent_name = "v6bit"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.wait_for_bgp = YLeaf(YType.boolean, "wait-for-bgp")

                                self.wait_time = YLeaf(YType.uint32, "wait-time")
                                self._segment_path = lambda: "on-startup"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6Bit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)


                class SummaryPrefixes(Entity):
                    """
                    Summarize redistributed routes matching
                    prefix/length
                    
                    .. attribute:: summary_prefix
                    
                    	IPv6 address
                    	**type**\: list of    :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes, self).__init__()

                        self.yang_name = "summary-prefixes"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {"summary-prefix" : ("summary_prefix", Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix)}

                        self.summary_prefix = YList(self)
                        self._segment_path = lambda: "summary-prefixes"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes, [], name, value)


                    class SummaryPrefix(Entity):
                        """
                        IPv6 address
                        
                        .. attribute:: prefix  <key>
                        
                        	IPv6 prefix string format
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: prefix_length  <key>
                        
                        	IPV6 prefix length
                        	**type**\:  int
                        
                        	**range:** 0..128
                        
                        .. attribute:: not_advertise
                        
                        	Suppress routes matching prefix/length
                        	**type**\:  bool
                        
                        .. attribute:: tag
                        
                        	Tag
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix, self).__init__()

                            self.yang_name = "summary-prefix"
                            self.yang_parent_name = "summary-prefixes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.prefix = YLeaf(YType.str, "prefix")

                            self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                            self.not_advertise = YLeaf(YType.boolean, "not-advertise")

                            self.tag = YLeaf(YType.uint32, "tag")
                            self._segment_path = lambda: "summary-prefix" + "[prefix='" + self.prefix.get() + "']" + "[prefix-length='" + self.prefix_length.get() + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix, ['prefix', 'prefix_length', 'not_advertise', 'tag'], name, value)


                class Timers(Entity):
                    """
                    Adjust routing timers
                    
                    .. attribute:: lsa_timers
                    
                    	LSA timers
                    	**type**\:   :py:class:`LsaTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers>`
                    
                    .. attribute:: pacing
                    
                    	Pacing timers
                    	**type**\:   :py:class:`Pacing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing>`
                    
                    .. attribute:: throttle
                    
                    	Throttle timers
                    	**type**\:   :py:class:`Throttle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.DefaultVrf.Timers, self).__init__()

                        self.yang_name = "timers"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"lsa-timers" : ("lsa_timers", Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers), "pacing" : ("pacing", Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing), "throttle" : ("throttle", Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle)}
                        self._child_list_classes = {}

                        self.lsa_timers = Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers()
                        self.lsa_timers.parent = self
                        self._children_name_map["lsa_timers"] = "lsa-timers"
                        self._children_yang_names.add("lsa-timers")

                        self.pacing = Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing()
                        self.pacing.parent = self
                        self._children_name_map["pacing"] = "pacing"
                        self._children_yang_names.add("pacing")

                        self.throttle = Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle()
                        self.throttle.parent = self
                        self._children_name_map["throttle"] = "throttle"
                        self._children_yang_names.add("throttle")
                        self._segment_path = lambda: "timers"


                    class LsaTimers(Entity):
                        """
                        LSA timers
                        
                        .. attribute:: arrival
                        
                        	The minimum interval in milliseconds between accepting the same LSA
                        	**type**\:  int
                        
                        	**range:** 0..60000
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers, self).__init__()

                            self.yang_name = "lsa-timers"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.arrival = YLeaf(YType.uint32, "arrival")
                            self._segment_path = lambda: "lsa-timers"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers, ['arrival'], name, value)


                    class Pacing(Entity):
                        """
                        Pacing timers
                        
                        .. attribute:: flood
                        
                        	The minimum interval in milliseconds to pace limit flooding on interface
                        	**type**\:  int
                        
                        	**range:** 5..100
                        
                        	**units**\: millisecond
                        
                        .. attribute:: lsa_group
                        
                        	Interval in seconds at which LSAs are grouped and refreshed, checksummed, or aged
                        	**type**\:  int
                        
                        	**range:** 10..1800
                        
                        	**units**\: second
                        
                        .. attribute:: retransmission
                        
                        	The minimum interval in msec between neighbor retransmissions
                        	**type**\:  int
                        
                        	**range:** 5..100
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing, self).__init__()

                            self.yang_name = "pacing"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.flood = YLeaf(YType.uint32, "flood")

                            self.lsa_group = YLeaf(YType.uint32, "lsa-group")

                            self.retransmission = YLeaf(YType.uint32, "retransmission")
                            self._segment_path = lambda: "pacing"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing, ['flood', 'lsa_group', 'retransmission'], name, value)


                    class Throttle(Entity):
                        """
                        Throttle timers
                        
                        .. attribute:: lsa
                        
                        	LSA throttle timers for all types of OSPF LSAs
                        	**type**\:   :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa>`
                        
                        .. attribute:: spf
                        
                        	SPF throttle timers
                        	**type**\:   :py:class:`Spf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle, self).__init__()

                            self.yang_name = "throttle"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"lsa" : ("lsa", Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa), "spf" : ("spf", Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf)}
                            self._child_list_classes = {}

                            self.lsa = Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa()
                            self.lsa.parent = self
                            self._children_name_map["lsa"] = "lsa"
                            self._children_yang_names.add("lsa")

                            self.spf = Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf()
                            self.spf.parent = self
                            self._children_name_map["spf"] = "spf"
                            self._children_yang_names.add("spf")
                            self._segment_path = lambda: "throttle"


                        class Lsa(Entity):
                            """
                            LSA throttle timers for all types of OSPF LSAs
                            
                            .. attribute:: first_delay
                            
                            	Delay to generate first occurrence of LSA in milliseconds
                            	**type**\:  int
                            
                            	**range:** 0..600000
                            
                            	**units**\: millisecond
                            
                            .. attribute:: maximum_delay
                            
                            	Maximum delay between originating the same LSA in milliseconds
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_delay
                            
                            	Minimum delay between originating the same LSA in milliseconds
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa, self).__init__()

                                self.yang_name = "lsa"
                                self.yang_parent_name = "throttle"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.first_delay = YLeaf(YType.uint32, "first-delay")

                                self.maximum_delay = YLeaf(YType.uint32, "maximum-delay")

                                self.minimum_delay = YLeaf(YType.uint32, "minimum-delay")
                                self._segment_path = lambda: "lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa, ['first_delay', 'maximum_delay', 'minimum_delay'], name, value)


                        class Spf(Entity):
                            """
                            SPF throttle timers
                            
                            .. attribute:: first_delay
                            
                            	Initial delay between receiving a change and starting SPF in ms
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            .. attribute:: maximum_delay
                            
                            	Maximum wait time between consecutive SPF calculations in ms
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            .. attribute:: minimum_delay
                            
                            	Minimum hold time between consecutive SPF calculations in ms
                            	**type**\:  int
                            
                            	**range:** 1..600000
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf, self).__init__()

                                self.yang_name = "spf"
                                self.yang_parent_name = "throttle"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.first_delay = YLeaf(YType.uint32, "first-delay")

                                self.maximum_delay = YLeaf(YType.uint32, "maximum-delay")

                                self.minimum_delay = YLeaf(YType.uint32, "minimum-delay")
                                self._segment_path = lambda: "spf"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf, ['first_delay', 'maximum_delay', 'minimum_delay'], name, value)


            class TraceBufs(Entity):
                """
                Configuration to change size of trace buffer
                
                .. attribute:: trace_buf
                
                	Changes the size of the specified trace buffer
                	**type**\: list of    :py:class:`TraceBuf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.TraceBufs.TraceBuf>`
                
                

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospfv3.Processes.Process.TraceBufs, self).__init__()

                    self.yang_name = "trace-bufs"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self._child_container_classes = {}
                    self._child_list_classes = {"trace-buf" : ("trace_buf", Ospfv3.Processes.Process.TraceBufs.TraceBuf)}

                    self.trace_buf = YList(self)
                    self._segment_path = lambda: "trace-bufs"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.TraceBufs, [], name, value)


                class TraceBuf(Entity):
                    """
                    Changes the size of the specified trace
                    buffer
                    
                    .. attribute:: trace_buf_name  <key>
                    
                    	Name for this trace buffer
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: bufsize
                    
                    	Buffer size
                    	**type**\:   :py:class:`Ospfv3TraceBufSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3TraceBufSize>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.TraceBufs.TraceBuf, self).__init__()

                        self.yang_name = "trace-buf"
                        self.yang_parent_name = "trace-bufs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {}
                        self._child_list_classes = {}

                        self.trace_buf_name = YLeaf(YType.str, "trace-buf-name")

                        self.bufsize = YLeaf(YType.enumeration, "bufsize")
                        self._segment_path = lambda: "trace-buf" + "[trace-buf-name='" + self.trace_buf_name.get() + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.TraceBufs.TraceBuf, ['trace_buf_name', 'bufsize'], name, value)


            class Vrfs(Entity):
                """
                VRF related configuration
                
                .. attribute:: vrf
                
                	Configuration for a particular OSPF VRF
                	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf>`
                
                

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2017-07-14'

                def __init__(self):
                    super(Ospfv3.Processes.Process.Vrfs, self).__init__()

                    self.yang_name = "vrfs"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self._child_container_classes = {}
                    self._child_list_classes = {"vrf" : ("vrf", Ospfv3.Processes.Process.Vrfs.Vrf)}

                    self.vrf = YList(self)
                    self._segment_path = lambda: "vrfs"

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs, [], name, value)


                class Vrf(Entity):
                    """
                    Configuration for a particular OSPF VRF
                    
                    .. attribute:: vrf_name  <key>
                    
                    	Name for this VRF
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: area_addresses
                    
                    	Area configuration
                    	**type**\:   :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses>`
                    
                    .. attribute:: authentication
                    
                    	Authenticate OSPFv3 packets
                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Authentication>`
                    
                    .. attribute:: auto_cost
                    
                    	Calculate interface cost according to bandwidth
                    	**type**\:   :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: bfd
                    
                    	Configure BFD parameters
                    	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Bfd>`
                    
                    .. attribute:: capability
                    
                    	OSPFv3 Capability
                    	**type**\:   :py:class:`Capability <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Capability>`
                    
                    .. attribute:: cost
                    
                    	Interface cost
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: database_filter
                    
                    	Database filter
                    	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter>`
                    
                    .. attribute:: dead_interval
                    
                    	Interval after which a neighbor is declared dead (in seconds)
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: default_information
                    
                    	Control distribution of default information
                    	**type**\:   :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation>`
                    
                    .. attribute:: default_metric
                    
                    	Set metric of redistributed routes
                    	**type**\:  int
                    
                    	**range:** 1..16777214
                    
                    .. attribute:: demand_circuit
                    
                    	Enable/disable demand circuit operation
                    	**type**\:  bool
                    
                    .. attribute:: distance
                    
                    	Define an administrative distance
                    	**type**\:   :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Distance>`
                    
                    .. attribute:: distribute_list
                    
                    	Filter prefixes to/from RIB
                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList>`
                    
                    .. attribute:: distribute_list_out
                    
                    	Filter prefixes from RIB 
                    	**type**\:   :py:class:`DistributeListOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut>`
                    
                    .. attribute:: domain_id
                    
                    	OSPFv3 Domain ID
                    	**type**\:   :py:class:`DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId>`
                    
                    .. attribute:: enable
                    
                    	Enable OSPFv3 VRF configuration
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: encryption
                    
                    	Encrypt and authenticate OSPFv3 packets
                    	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Encryption>`
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute instance scoped parameters
                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute>`
                    
                    .. attribute:: flood_reduction
                    
                    	Enable/disable flood reduction
                    	**type**\:  bool
                    
                    .. attribute:: graceful_restart
                    
                    	Graceful restart configuration
                    	**type**\:   :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart>`
                    
                    .. attribute:: hello_interval
                    
                    	Time between HELLO packets
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: ignore
                    
                    	Do not complain about a specified event
                    	**type**\:   :py:class:`Ignore <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Ignore>`
                    
                    .. attribute:: instance
                    
                    	Instance ID
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: log_adjacency_changes
                    
                    	Log changes in adjacency state
                    	**type**\:   :py:class:`Ospfv3LogAdj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3LogAdj>`
                    
                    .. attribute:: maximum
                    
                    	Set OSPFv3 limits
                    	**type**\:   :py:class:`Maximum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Maximum>`
                    
                    .. attribute:: mtu_ignore
                    
                    	Enable/disable ignoring of MTU in DBD packets
                    	**type**\:  bool
                    
                    .. attribute:: network
                    
                    	Specify network type
                    	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                    
                    .. attribute:: packet_size
                    
                    	Limit size of OSPFv3 packets
                    	**type**\:  int
                    
                    	**range:** 256..10000
                    
                    .. attribute:: passive
                    
                    	Enable/disable routing updates on an interface
                    	**type**\:  bool
                    
                    .. attribute:: prefix_suppression
                    
                    	Enable/disable prefix suppression on an interface
                    	**type**\:  bool
                    
                    .. attribute:: priority
                    
                    	Specify router priority
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: process_scope
                    
                    	Process scope configuration
                    	**type**\:   :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope>`
                    
                    .. attribute:: redistributes
                    
                    	Redistribute information from another routing protocol
                    	**type**\:   :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes>`
                    
                    .. attribute:: retransmit_interval
                    
                    	Specify the transmit interval in seconds
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: router_id
                    
                    	Specify the router ID for this OSPFv3 process in IPv4 address format
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: snmp
                    
                    	SNMP configuration
                    	**type**\:   :py:class:`Snmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Snmp>`
                    
                    .. attribute:: snmpvrf_trap
                    
                    	Enable SNMP trap configuration in a VRF
                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: spf_prefix_priority_policy
                    
                    	Route policy for SPF prefix prioritization
                    	**type**\:  str
                    
                    .. attribute:: stub_router
                    
                    	Stub router configuration
                    	**type**\:   :py:class:`StubRouter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter>`
                    
                    .. attribute:: summary_prefixes
                    
                    	Summarize redistributed routes matching prefix/length
                    	**type**\:   :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes>`
                    
                    .. attribute:: timers
                    
                    	Adjust routing timers
                    	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers>`
                    
                    .. attribute:: transmit_delay
                    
                    	Specify the transmit delay in seconds
                    	**type**\:  int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2017-07-14'

                    def __init__(self):
                        super(Ospfv3.Processes.Process.Vrfs.Vrf, self).__init__()

                        self.yang_name = "vrf"
                        self.yang_parent_name = "vrfs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self._child_container_classes = {"area-addresses" : ("area_addresses", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses), "authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.Authentication), "auto-cost" : ("auto_cost", Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost), "bfd" : ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.Bfd), "capability" : ("capability", Ospfv3.Processes.Process.Vrfs.Vrf.Capability), "database-filter" : ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter), "default-information" : ("default_information", Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation), "distance" : ("distance", Ospfv3.Processes.Process.Vrfs.Vrf.Distance), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList), "distribute-list-out" : ("distribute_list_out", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut), "domain-id" : ("domain_id", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.Encryption), "fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute), "graceful-restart" : ("graceful_restart", Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart), "ignore" : ("ignore", Ospfv3.Processes.Process.Vrfs.Vrf.Ignore), "maximum" : ("maximum", Ospfv3.Processes.Process.Vrfs.Vrf.Maximum), "process-scope" : ("process_scope", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope), "redistributes" : ("redistributes", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes), "snmp" : ("snmp", Ospfv3.Processes.Process.Vrfs.Vrf.Snmp), "stub-router" : ("stub_router", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter), "summary-prefixes" : ("summary_prefixes", Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes), "timers" : ("timers", Ospfv3.Processes.Process.Vrfs.Vrf.Timers)}
                        self._child_list_classes = {}

                        self.vrf_name = YLeaf(YType.str, "vrf-name")

                        self.cost = YLeaf(YType.uint32, "cost")

                        self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                        self.default_metric = YLeaf(YType.uint32, "default-metric")

                        self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                        self.enable = YLeaf(YType.empty, "enable")

                        self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                        self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                        self.instance = YLeaf(YType.uint32, "instance")

                        self.log_adjacency_changes = YLeaf(YType.enumeration, "log-adjacency-changes")

                        self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                        self.network = YLeaf(YType.enumeration, "network")

                        self.packet_size = YLeaf(YType.uint32, "packet-size")

                        self.passive = YLeaf(YType.boolean, "passive")

                        self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                        self.priority = YLeaf(YType.uint32, "priority")

                        self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                        self.router_id = YLeaf(YType.str, "router-id")

                        self.snmpvrf_trap = YLeaf(YType.empty, "snmpvrf-trap")

                        self.spf_prefix_priority_policy = YLeaf(YType.str, "spf-prefix-priority-policy")

                        self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                        self.area_addresses = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses()
                        self.area_addresses.parent = self
                        self._children_name_map["area_addresses"] = "area-addresses"
                        self._children_yang_names.add("area-addresses")

                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.Authentication()
                        self.authentication.parent = self
                        self._children_name_map["authentication"] = "authentication"
                        self._children_yang_names.add("authentication")

                        self.auto_cost = None
                        self._children_name_map["auto_cost"] = "auto-cost"
                        self._children_yang_names.add("auto-cost")

                        self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.Bfd()
                        self.bfd.parent = self
                        self._children_name_map["bfd"] = "bfd"
                        self._children_yang_names.add("bfd")

                        self.capability = Ospfv3.Processes.Process.Vrfs.Vrf.Capability()
                        self.capability.parent = self
                        self._children_name_map["capability"] = "capability"
                        self._children_yang_names.add("capability")

                        self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter()
                        self.database_filter.parent = self
                        self._children_name_map["database_filter"] = "database-filter"
                        self._children_yang_names.add("database-filter")

                        self.default_information = Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation()
                        self.default_information.parent = self
                        self._children_name_map["default_information"] = "default-information"
                        self._children_yang_names.add("default-information")

                        self.distance = Ospfv3.Processes.Process.Vrfs.Vrf.Distance()
                        self.distance.parent = self
                        self._children_name_map["distance"] = "distance"
                        self._children_yang_names.add("distance")

                        self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList()
                        self.distribute_list.parent = self
                        self._children_name_map["distribute_list"] = "distribute-list"
                        self._children_yang_names.add("distribute-list")

                        self.distribute_list_out = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut()
                        self.distribute_list_out.parent = self
                        self._children_name_map["distribute_list_out"] = "distribute-list-out"
                        self._children_yang_names.add("distribute-list-out")

                        self.domain_id = Ospfv3.Processes.Process.Vrfs.Vrf.DomainId()
                        self.domain_id.parent = self
                        self._children_name_map["domain_id"] = "domain-id"
                        self._children_yang_names.add("domain-id")

                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.Encryption()
                        self.encryption.parent = self
                        self._children_name_map["encryption"] = "encryption"
                        self._children_yang_names.add("encryption")

                        self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute()
                        self.fast_reroute.parent = self
                        self._children_name_map["fast_reroute"] = "fast-reroute"
                        self._children_yang_names.add("fast-reroute")

                        self.graceful_restart = Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart()
                        self.graceful_restart.parent = self
                        self._children_name_map["graceful_restart"] = "graceful-restart"
                        self._children_yang_names.add("graceful-restart")

                        self.ignore = Ospfv3.Processes.Process.Vrfs.Vrf.Ignore()
                        self.ignore.parent = self
                        self._children_name_map["ignore"] = "ignore"
                        self._children_yang_names.add("ignore")

                        self.maximum = Ospfv3.Processes.Process.Vrfs.Vrf.Maximum()
                        self.maximum.parent = self
                        self._children_name_map["maximum"] = "maximum"
                        self._children_yang_names.add("maximum")

                        self.process_scope = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope()
                        self.process_scope.parent = self
                        self._children_name_map["process_scope"] = "process-scope"
                        self._children_yang_names.add("process-scope")

                        self.redistributes = Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes()
                        self.redistributes.parent = self
                        self._children_name_map["redistributes"] = "redistributes"
                        self._children_yang_names.add("redistributes")

                        self.snmp = Ospfv3.Processes.Process.Vrfs.Vrf.Snmp()
                        self.snmp.parent = self
                        self._children_name_map["snmp"] = "snmp"
                        self._children_yang_names.add("snmp")

                        self.stub_router = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter()
                        self.stub_router.parent = self
                        self._children_name_map["stub_router"] = "stub-router"
                        self._children_yang_names.add("stub-router")

                        self.summary_prefixes = Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes()
                        self.summary_prefixes.parent = self
                        self._children_name_map["summary_prefixes"] = "summary-prefixes"
                        self._children_yang_names.add("summary-prefixes")

                        self.timers = Ospfv3.Processes.Process.Vrfs.Vrf.Timers()
                        self.timers.parent = self
                        self._children_name_map["timers"] = "timers"
                        self._children_yang_names.add("timers")
                        self._segment_path = lambda: "vrf" + "[vrf-name='" + self.vrf_name.get() + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf, ['vrf_name', 'cost', 'dead_interval', 'default_metric', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'log_adjacency_changes', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'router_id', 'snmpvrf_trap', 'spf_prefix_priority_policy', 'transmit_delay'], name, value)


                    class AreaAddresses(Entity):
                        """
                        Area configuration
                        
                        .. attribute:: area_address
                        
                        	Configuration for a particular area
                        	**type**\: list of    :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress>`
                        
                        .. attribute:: area_area_id
                        
                        	Configuration for a particular area
                        	**type**\: list of    :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses, self).__init__()

                            self.yang_name = "area-addresses"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"area-address" : ("area_address", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress), "area-area-id" : ("area_area_id", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId)}

                            self.area_address = YList(self)
                            self.area_area_id = YList(self)
                            self._segment_path = lambda: "area-addresses"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses, [], name, value)


                        class AreaAddress(Entity):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: address  <key>
                            
                            	Area ID if in IP address format
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: area_scope
                            
                            	Area Scope Configuration
                            	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope>`
                            
                            .. attribute:: authentication
                            
                            	Authenticate OSPFv3 packets
                            	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication>`
                            
                            .. attribute:: bfd
                            
                            	Configure BFD parameters
                            	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd>`
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: database_filter
                            
                            	Database filter
                            	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter>`
                            
                            .. attribute:: dead_interval
                            
                            	Interval after which a neighbor is declared dead (in seconds)
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\:  int
                            
                            	**range:** 0..16777215
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/disable demand circuit operation
                            	**type**\:  bool
                            
                            .. attribute:: distribute_list
                            
                            	Filter prefixes to/from RIB
                            	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList>`
                            
                            .. attribute:: enable
                            
                            	Enable OSPFv3 area
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: encryption
                            
                            	Encrypt and authenticate OSPFv3 packets
                            	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption>`
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/disable flood reduction
                            	**type**\:  bool
                            
                            .. attribute:: hello_interval
                            
                            	Time between HELLO packets
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: instance
                            
                            	Instance ID
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: interfaces
                            
                            	OSPFv3 interfaces
                            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces>`
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\:  bool
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/disable ignoring of MTU in DBD packets
                            	**type**\:  bool
                            
                            .. attribute:: network
                            
                            	Specify network type
                            	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                            	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa>`
                            
                            .. attribute:: packet_size
                            
                            	Limit size of OSPFv3 packets
                            	**type**\:  int
                            
                            	**range:** 256..10000
                            
                            .. attribute:: passive
                            
                            	Enable/disable routing updates on an interface
                            	**type**\:  bool
                            
                            .. attribute:: prefix_suppression
                            
                            	Enable/disable prefix suppression on an interface
                            	**type**\:  bool
                            
                            .. attribute:: priority
                            
                            	Specify router priority
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ranges
                            
                            	Range configuration
                            	**type**\:   :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges>`
                            
                            .. attribute:: retransmit_interval
                            
                            	Specify the transmit interval in seconds
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: sham_links
                            
                            	Sham Link sub\-mode
                            	**type**\:   :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks>`
                            
                            .. attribute:: stub
                            
                            	Specify area as a stub area.  Allowed only in non\-backbone areas
                            	**type**\:  bool
                            
                            .. attribute:: transmit_delay
                            
                            	Specify the transmit delay in seconds
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: virtual_links
                            
                            	Virtual link sub\-mode
                            	**type**\:   :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress, self).__init__()

                                self.yang_name = "area-address"
                                self.yang_parent_name = "area-addresses"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"area-scope" : ("area_scope", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope), "authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption), "interfaces" : ("interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces), "nssa" : ("nssa", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa), "ranges" : ("ranges", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges), "sham-links" : ("sham_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks), "virtual-links" : ("virtual_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks)}
                                self._child_list_classes = {}

                                self.address = YLeaf(YType.str, "address")

                                self.cost = YLeaf(YType.uint32, "cost")

                                self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                self.default_cost = YLeaf(YType.uint32, "default-cost")

                                self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                                self.enable = YLeaf(YType.empty, "enable")

                                self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                                self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                self.instance = YLeaf(YType.uint32, "instance")

                                self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                                self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                                self.network = YLeaf(YType.enumeration, "network")

                                self.packet_size = YLeaf(YType.uint32, "packet-size")

                                self.passive = YLeaf(YType.boolean, "passive")

                                self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                                self.priority = YLeaf(YType.uint32, "priority")

                                self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                self.stub = YLeaf(YType.boolean, "stub")

                                self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                self.area_scope = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope()
                                self.area_scope.parent = self
                                self._children_name_map["area_scope"] = "area-scope"
                                self._children_yang_names.add("area-scope")

                                self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication()
                                self.authentication.parent = self
                                self._children_name_map["authentication"] = "authentication"
                                self._children_yang_names.add("authentication")

                                self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd()
                                self.bfd.parent = self
                                self._children_name_map["bfd"] = "bfd"
                                self._children_yang_names.add("bfd")

                                self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter()
                                self.database_filter.parent = self
                                self._children_name_map["database_filter"] = "database-filter"
                                self._children_yang_names.add("database-filter")

                                self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList()
                                self.distribute_list.parent = self
                                self._children_name_map["distribute_list"] = "distribute-list"
                                self._children_yang_names.add("distribute-list")

                                self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption()
                                self.encryption.parent = self
                                self._children_name_map["encryption"] = "encryption"
                                self._children_yang_names.add("encryption")

                                self.interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces()
                                self.interfaces.parent = self
                                self._children_name_map["interfaces"] = "interfaces"
                                self._children_yang_names.add("interfaces")

                                self.nssa = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa()
                                self.nssa.parent = self
                                self._children_name_map["nssa"] = "nssa"
                                self._children_yang_names.add("nssa")

                                self.ranges = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges()
                                self.ranges.parent = self
                                self._children_name_map["ranges"] = "ranges"
                                self._children_yang_names.add("ranges")

                                self.sham_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks()
                                self.sham_links.parent = self
                                self._children_name_map["sham_links"] = "sham-links"
                                self._children_yang_names.add("sham-links")

                                self.virtual_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks()
                                self.virtual_links.parent = self
                                self._children_name_map["virtual_links"] = "virtual-links"
                                self._children_yang_names.add("virtual-links")
                                self._segment_path = lambda: "area-address" + "[address='" + self.address.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress, ['address', 'cost', 'dead_interval', 'default_cost', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'stub', 'transmit_delay'], name, value)


                            class AreaScope(Entity):
                                """
                                Area Scope Configuration
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope, self).__init__()

                                    self.yang_name = "area-scope"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute)}
                                    self._child_list_classes = {}

                                    self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")
                                    self._segment_path = lambda: "area-scope"


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                        self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                            class Authentication(Entity):
                                """
                                Authenticate OSPFv3 packets
                                
                                .. attribute:: algorithm
                                
                                	Use the MD5 or SHA1 algorithm
                                	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\:  bool
                                
                                .. attribute:: password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: spi
                                
                                	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\:  int
                                
                                	**range:** 256..4294967295
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication, self).__init__()

                                    self.yang_name = "authentication"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                    self.enable = YLeaf(YType.boolean, "enable")

                                    self.password = YLeaf(YType.str, "password")

                                    self.spi = YLeaf(YType.uint32, "spi")
                                    self._segment_path = lambda: "authentication"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                            class Bfd(Entity):
                                """
                                Configure BFD parameters
                                
                                .. attribute:: detection_multiplier
                                
                                	Detect multiplier
                                	**type**\:  int
                                
                                	**range:** 2..50
                                
                                .. attribute:: fast_detect_mode
                                
                                	Enable or disable BFD fast detection
                                	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                
                                .. attribute:: interval
                                
                                	Hello interval in milli\-seconds
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd, self).__init__()

                                    self.yang_name = "bfd"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                    self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                    self.interval = YLeaf(YType.uint32, "interval")
                                    self._segment_path = lambda: "bfd"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                            class DatabaseFilter(Entity):
                                """
                                Database filter
                                
                                .. attribute:: all
                                
                                	All
                                	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter, self).__init__()

                                    self.yang_name = "database-filter"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All)}
                                    self._child_list_classes = {}

                                    self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All()
                                    self.all.parent = self
                                    self._children_name_map["all"] = "all"
                                    self._children_yang_names.add("all")
                                    self._segment_path = lambda: "database-filter"


                                class All(Entity):
                                    """
                                    All
                                    
                                    .. attribute:: out
                                    
                                    	Enable or disable database\-filter
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All, self).__init__()

                                        self.yang_name = "all"
                                        self.yang_parent_name = "database-filter"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.out = YLeaf(YType.boolean, "out")
                                        self._segment_path = lambda: "all"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All, ['out'], name, value)


                            class DistributeList(Entity):
                                """
                                Filter prefixes to/from RIB
                                
                                .. attribute:: in_
                                
                                	Filter prefixes installed to RIB
                                	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In_>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList, self).__init__()

                                    self.yang_name = "distribute-list"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In_)}
                                    self._child_list_classes = {}

                                    self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In_()
                                    self.in_.parent = self
                                    self._children_name_map["in_"] = "in"
                                    self._children_yang_names.add("in")
                                    self._segment_path = lambda: "distribute-list"


                                class In_(Entity):
                                    """
                                    Filter prefixes installed to RIB
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Filter prefixes based on an IPv6 prefix\-list
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In_, self).__init__()

                                        self.yang_name = "in"
                                        self.yang_parent_name = "distribute-list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.prefix_list = YLeaf(YType.str, "prefix-list")
                                        self._segment_path = lambda: "in"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In_, ['prefix_list'], name, value)


                            class Encryption(Entity):
                                """
                                Encrypt and authenticate OSPFv3 packets
                                
                                .. attribute:: authentication_algorithm
                                
                                	Use the NULL, MD5 or SHA1 algorithm
                                	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                
                                .. attribute:: authentication_password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\:  bool
                                
                                .. attribute:: encryption_algorithm
                                
                                	Specify the encryption algorithm
                                	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                
                                .. attribute:: encryption_password
                                
                                	Encryption password
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: spi
                                
                                	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\:  int
                                
                                	**range:** 256..4294967295
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption, self).__init__()

                                    self.yang_name = "encryption"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                    self.authentication_password = YLeaf(YType.str, "authentication-password")

                                    self.enable = YLeaf(YType.boolean, "enable")

                                    self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                    self.encryption_password = YLeaf(YType.str, "encryption-password")

                                    self.spi = YLeaf(YType.uint32, "spi")
                                    self._segment_path = lambda: "encryption"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                            class Interfaces(Entity):
                                """
                                OSPFv3 interfaces
                                
                                .. attribute:: interface
                                
                                	OSPFv3 interface
                                	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces, self).__init__()

                                    self.yang_name = "interfaces"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"interface" : ("interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface)}

                                    self.interface = YList(self)
                                    self._segment_path = lambda: "interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces, [], name, value)


                                class Interface(Entity):
                                    """
                                    OSPFv3 interface
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface to configure
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication>`
                                    
                                    .. attribute:: bfd
                                    
                                    	Configure BFD parameters
                                    	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: database_filter
                                    
                                    	Database filter
                                    	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/disable demand circuit operation
                                    	**type**\:  bool
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter prefixes to/from RIB
                                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable OSPFv3 interface
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption>`
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute>`
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/disable flood reduction
                                    	**type**\:  bool
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: instance
                                    
                                    	Instance ID
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\:  bool
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/disable ignoring of MTU in DBD packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: neighbors
                                    
                                    	Specify a neighbor router
                                    	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors>`
                                    
                                    .. attribute:: network
                                    
                                    	Specify network type
                                    	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                    
                                    .. attribute:: packet_size
                                    
                                    	Limit size of OSPFv3 packets
                                    	**type**\:  int
                                    
                                    	**range:** 256..10000
                                    
                                    .. attribute:: passive
                                    
                                    	Enable/disable routing updates on an interface
                                    	**type**\:  bool
                                    
                                    .. attribute:: prefix_suppression
                                    
                                    	Enable/disable prefix suppression on an interface
                                    	**type**\:  bool
                                    
                                    .. attribute:: priority
                                    
                                    	Specify router priority
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface, self).__init__()

                                        self.yang_name = "interface"
                                        self.yang_parent_name = "interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption), "fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute), "neighbors" : ("neighbors", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors)}
                                        self._child_list_classes = {}

                                        self.interface_name = YLeaf(YType.str, "interface-name")

                                        self.cost = YLeaf(YType.uint32, "cost")

                                        self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                        self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                                        self.enable = YLeaf(YType.empty, "enable")

                                        self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                                        self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                        self.instance = YLeaf(YType.uint32, "instance")

                                        self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                                        self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                                        self.network = YLeaf(YType.enumeration, "network")

                                        self.packet_size = YLeaf(YType.uint32, "packet-size")

                                        self.passive = YLeaf(YType.boolean, "passive")

                                        self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                                        self.priority = YLeaf(YType.uint32, "priority")

                                        self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                        self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd()
                                        self.bfd.parent = self
                                        self._children_name_map["bfd"] = "bfd"
                                        self._children_yang_names.add("bfd")

                                        self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter()
                                        self.database_filter.parent = self
                                        self._children_name_map["database_filter"] = "database-filter"
                                        self._children_yang_names.add("database-filter")

                                        self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList()
                                        self.distribute_list.parent = self
                                        self._children_name_map["distribute_list"] = "distribute-list"
                                        self._children_yang_names.add("distribute-list")

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._children_yang_names.add("encryption")

                                        self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._children_yang_names.add("fast-reroute")

                                        self.neighbors = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"
                                        self._children_yang_names.add("neighbors")
                                        self._segment_path = lambda: "interface" + "[interface-name='" + self.interface_name.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface, ['interface_name', 'cost', 'dead_interval', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.password = YLeaf(YType.str, "password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                    class Bfd(Entity):
                                        """
                                        Configure BFD parameters
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detect multiplier
                                        	**type**\:  int
                                        
                                        	**range:** 2..50
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	Enable or disable BFD fast detection
                                        	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval in milli\-seconds
                                        	**type**\:  int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, self).__init__()

                                            self.yang_name = "bfd"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                            self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                            self.interval = YLeaf(YType.uint32, "interval")
                                            self._segment_path = lambda: "bfd"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                                    class DatabaseFilter(Entity):
                                        """
                                        Database filter
                                        
                                        .. attribute:: all
                                        
                                        	All
                                        	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter, self).__init__()

                                            self.yang_name = "database-filter"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All)}
                                            self._child_list_classes = {}

                                            self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All()
                                            self.all.parent = self
                                            self._children_name_map["all"] = "all"
                                            self._children_yang_names.add("all")
                                            self._segment_path = lambda: "database-filter"


                                        class All(Entity):
                                            """
                                            All
                                            
                                            .. attribute:: out
                                            
                                            	Enable or disable database\-filter
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                                self.yang_name = "all"
                                                self.yang_parent_name = "database-filter"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.out = YLeaf(YType.boolean, "out")
                                                self._segment_path = lambda: "all"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)


                                    class DistributeList(Entity):
                                        """
                                        Filter prefixes to/from RIB
                                        
                                        .. attribute:: in_
                                        
                                        	Filter prefixes installed to RIB
                                        	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_)}
                                            self._child_list_classes = {}

                                            self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_()
                                            self.in_.parent = self
                                            self._children_name_map["in_"] = "in"
                                            self._children_yang_names.add("in")
                                            self._segment_path = lambda: "distribute-list"


                                        class In_(Entity):
                                            """
                                            Filter prefixes installed to RIB
                                            
                                            .. attribute:: prefix_list
                                            
                                            	Filter prefixes based on an IPv6 prefix\-list
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_, self).__init__()

                                                self.yang_name = "in"
                                                self.yang_parent_name = "distribute-list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.prefix_list = YLeaf(YType.str, "prefix-list")
                                                self._segment_path = lambda: "in"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In_, ['prefix_list'], name, value)


                                    class Encryption(Entity):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                            self.authentication_password = YLeaf(YType.str, "authentication-password")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                            self.encryption_password = YLeaf(YType.str, "encryption-password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "encryption"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                                    class FastReroute(Entity):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                            self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"
                                            self._children_yang_names.add("per-link")

                                            self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._children_yang_names.add("per-prefix")
                                            self._segment_path = lambda: "fast-reroute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces)}
                                                self._child_list_classes = {}

                                                self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-link"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                        class PerPrefix(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces)}
                                                self._child_list_classes = {}

                                                self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-prefix"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class Neighbors(Entity):
                                        """
                                        Specify a neighbor router
                                        
                                        .. attribute:: neighbor
                                        
                                        	IPv6 address
                                        	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"neighbor" : ("neighbor", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor)}

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, [], name, value)


                                        class Neighbor(Entity):
                                            """
                                            IPv6 address
                                            
                                            .. attribute:: neighbor_address  <key>
                                            
                                            	IPV6 address
                                            	**type**\:  str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: cost
                                            
                                            	OSPFv3 cost for point\-to\-multipoint neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 1..65535
                                            
                                            .. attribute:: database_filter
                                            
                                            	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                            	**type**\:  bool
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPFv3 dead\-router polling interval (in seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: priority
                                            
                                            	OSPFv3 priority of non\-broadcast neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: zone
                                            
                                            	Zone
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                                self.cost = YLeaf(YType.uint32, "cost")

                                                self.database_filter = YLeaf(YType.boolean, "database-filter")

                                                self.poll_interval = YLeaf(YType.uint32, "poll-interval")

                                                self.priority = YLeaf(YType.uint32, "priority")

                                                self.zone = YLeaf(YType.str, "zone")
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + self.neighbor_address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'cost', 'database_filter', 'poll_interval', 'priority', 'zone'], name, value)


                            class Nssa(Entity):
                                """
                                Specify area as a NSSA area.  Allowed only in
                                non\-backbone areas
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: metric
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\:  int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa, self).__init__()

                                    self.yang_name = "nssa"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.default_info_originate = YLeaf(YType.boolean, "default-info-originate")

                                    self.metric = YLeaf(YType.uint32, "metric")

                                    self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                    self.no_redistribution = YLeaf(YType.boolean, "no-redistribution")

                                    self.no_summary = YLeaf(YType.empty, "no-summary")
                                    self._segment_path = lambda: "nssa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa, ['default_info_originate', 'metric', 'metric_type', 'no_redistribution', 'no_summary'], name, value)


                            class Ranges(Entity):
                                """
                                Range configuration
                                
                                .. attribute:: range
                                
                                	Summarize inter\-area routes matching prefix/length
                                	**type**\: list of    :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges, self).__init__()

                                    self.yang_name = "ranges"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"range" : ("range", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range)}

                                    self.range = YList(self)
                                    self._segment_path = lambda: "ranges"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges, [], name, value)


                                class Range(Entity):
                                    """
                                    Summarize inter\-area routes matching
                                    prefix/length
                                    
                                    .. attribute:: prefix  <key>
                                    
                                    	IPv6 prefix format
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length  <key>
                                    
                                    	IPV6 prefix length
                                    	**type**\:  int
                                    
                                    	**range:** 0..128
                                    
                                    .. attribute:: cost
                                    
                                    	Specified metric for this range
                                    	**type**\:  int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise address range
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range, self).__init__()

                                        self.yang_name = "range"
                                        self.yang_parent_name = "ranges"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.prefix = YLeaf(YType.str, "prefix")

                                        self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                        self.cost = YLeaf(YType.uint32, "cost")

                                        self.not_advertise = YLeaf(YType.boolean, "not-advertise")
                                        self._segment_path = lambda: "range" + "[prefix='" + self.prefix.get() + "']" + "[prefix-length='" + self.prefix_length.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range, ['prefix', 'prefix_length', 'cost', 'not_advertise'], name, value)


                            class ShamLinks(Entity):
                                """
                                Sham Link sub\-mode
                                
                                .. attribute:: sham_link
                                
                                	ShamLink local and remote endpoints
                                	**type**\: list of    :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks, self).__init__()

                                    self.yang_name = "sham-links"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"sham-link" : ("sham_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink)}

                                    self.sham_link = YList(self)
                                    self._segment_path = lambda: "sham-links"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks, [], name, value)


                                class ShamLink(Entity):
                                    """
                                    ShamLink local and remote endpoints
                                    
                                    .. attribute:: source_address  <key>
                                    
                                    	Local sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: destination_address  <key>
                                    
                                    	Remote sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: enable
                                    
                                    	Enable sham link
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, self).__init__()

                                        self.yang_name = "sham-link"
                                        self.yang_parent_name = "sham-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption)}
                                        self._child_list_classes = {}

                                        self.source_address = YLeaf(YType.str, "source-address")

                                        self.destination_address = YLeaf(YType.str, "destination-address")

                                        self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                        self.enable = YLeaf(YType.empty, "enable")

                                        self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                        self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                        self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._children_yang_names.add("encryption")
                                        self._segment_path = lambda: "sham-link" + "[source-address='" + self.source_address.get() + "']" + "[destination-address='" + self.destination_address.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, ['source_address', 'destination_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.password = YLeaf(YType.str, "password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                    class Encryption(Entity):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                            self.authentication_password = YLeaf(YType.str, "authentication-password")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                            self.encryption_password = YLeaf(YType.str, "encryption-password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "encryption"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                            class VirtualLinks(Entity):
                                """
                                Virtual link sub\-mode
                                
                                .. attribute:: virtual_link
                                
                                	Router ID of virtual link neighbor
                                	**type**\: list of    :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks, self).__init__()

                                    self.yang_name = "virtual-links"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"virtual-link" : ("virtual_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink)}

                                    self.virtual_link = YList(self)
                                    self._segment_path = lambda: "virtual-links"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks, [], name, value)


                                class VirtualLink(Entity):
                                    """
                                    Router ID of virtual link neighbor
                                    
                                    .. attribute:: virtual_link_address  <key>
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: enable
                                    
                                    	Enabled virtual link
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, self).__init__()

                                        self.yang_name = "virtual-link"
                                        self.yang_parent_name = "virtual-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption)}
                                        self._child_list_classes = {}

                                        self.virtual_link_address = YLeaf(YType.str, "virtual-link-address")

                                        self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                        self.enable = YLeaf(YType.empty, "enable")

                                        self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                        self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                        self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._children_yang_names.add("encryption")
                                        self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + self.virtual_link_address.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, ['virtual_link_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.password = YLeaf(YType.str, "password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                    class Encryption(Entity):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                            self.authentication_password = YLeaf(YType.str, "authentication-password")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                            self.encryption_password = YLeaf(YType.str, "encryption-password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "encryption"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                        class AreaAreaId(Entity):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: area_id  <key>
                            
                            	Area ID if in integer format
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: area_scope
                            
                            	Area Scope Configuration
                            	**type**\:   :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope>`
                            
                            .. attribute:: authentication
                            
                            	Authenticate OSPFv3 packets
                            	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication>`
                            
                            .. attribute:: bfd
                            
                            	Configure BFD parameters
                            	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd>`
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: database_filter
                            
                            	Database filter
                            	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter>`
                            
                            .. attribute:: dead_interval
                            
                            	Interval after which a neighbor is declared dead (in seconds)
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\:  int
                            
                            	**range:** 0..16777215
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/disable demand circuit operation
                            	**type**\:  bool
                            
                            .. attribute:: distribute_list
                            
                            	Filter prefixes to/from RIB
                            	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList>`
                            
                            .. attribute:: enable
                            
                            	Enable OSPFv3 area
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: encryption
                            
                            	Encrypt and authenticate OSPFv3 packets
                            	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption>`
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/disable flood reduction
                            	**type**\:  bool
                            
                            .. attribute:: hello_interval
                            
                            	Time between HELLO packets
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: instance
                            
                            	Instance ID
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: interfaces
                            
                            	OSPFv3 interfaces
                            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces>`
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\:  bool
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/disable ignoring of MTU in DBD packets
                            	**type**\:  bool
                            
                            .. attribute:: network
                            
                            	Specify network type
                            	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                            	**type**\:   :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa>`
                            
                            .. attribute:: packet_size
                            
                            	Limit size of OSPFv3 packets
                            	**type**\:  int
                            
                            	**range:** 256..10000
                            
                            .. attribute:: passive
                            
                            	Enable/disable routing updates on an interface
                            	**type**\:  bool
                            
                            .. attribute:: prefix_suppression
                            
                            	Enable/disable prefix suppression on an interface
                            	**type**\:  bool
                            
                            .. attribute:: priority
                            
                            	Specify router priority
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ranges
                            
                            	Range configuration
                            	**type**\:   :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges>`
                            
                            .. attribute:: retransmit_interval
                            
                            	Specify the transmit interval in seconds
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: sham_links
                            
                            	Sham Link sub\-mode
                            	**type**\:   :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks>`
                            
                            .. attribute:: stub
                            
                            	Specify area as a stub area.  Allowed only in non\-backbone areas
                            	**type**\:  bool
                            
                            .. attribute:: transmit_delay
                            
                            	Specify the transmit delay in seconds
                            	**type**\:  int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: virtual_links
                            
                            	Virtual link sub\-mode
                            	**type**\:   :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId, self).__init__()

                                self.yang_name = "area-area-id"
                                self.yang_parent_name = "area-addresses"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"area-scope" : ("area_scope", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope), "authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption), "interfaces" : ("interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces), "nssa" : ("nssa", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa), "ranges" : ("ranges", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges), "sham-links" : ("sham_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks), "virtual-links" : ("virtual_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks)}
                                self._child_list_classes = {}

                                self.area_id = YLeaf(YType.uint32, "area-id")

                                self.cost = YLeaf(YType.uint32, "cost")

                                self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                self.default_cost = YLeaf(YType.uint32, "default-cost")

                                self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                                self.enable = YLeaf(YType.empty, "enable")

                                self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                                self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                self.instance = YLeaf(YType.uint32, "instance")

                                self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                                self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                                self.network = YLeaf(YType.enumeration, "network")

                                self.packet_size = YLeaf(YType.uint32, "packet-size")

                                self.passive = YLeaf(YType.boolean, "passive")

                                self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                                self.priority = YLeaf(YType.uint32, "priority")

                                self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                self.stub = YLeaf(YType.boolean, "stub")

                                self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                self.area_scope = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope()
                                self.area_scope.parent = self
                                self._children_name_map["area_scope"] = "area-scope"
                                self._children_yang_names.add("area-scope")

                                self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication()
                                self.authentication.parent = self
                                self._children_name_map["authentication"] = "authentication"
                                self._children_yang_names.add("authentication")

                                self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd()
                                self.bfd.parent = self
                                self._children_name_map["bfd"] = "bfd"
                                self._children_yang_names.add("bfd")

                                self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter()
                                self.database_filter.parent = self
                                self._children_name_map["database_filter"] = "database-filter"
                                self._children_yang_names.add("database-filter")

                                self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList()
                                self.distribute_list.parent = self
                                self._children_name_map["distribute_list"] = "distribute-list"
                                self._children_yang_names.add("distribute-list")

                                self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption()
                                self.encryption.parent = self
                                self._children_name_map["encryption"] = "encryption"
                                self._children_yang_names.add("encryption")

                                self.interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces()
                                self.interfaces.parent = self
                                self._children_name_map["interfaces"] = "interfaces"
                                self._children_yang_names.add("interfaces")

                                self.nssa = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa()
                                self.nssa.parent = self
                                self._children_name_map["nssa"] = "nssa"
                                self._children_yang_names.add("nssa")

                                self.ranges = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges()
                                self.ranges.parent = self
                                self._children_name_map["ranges"] = "ranges"
                                self._children_yang_names.add("ranges")

                                self.sham_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks()
                                self.sham_links.parent = self
                                self._children_name_map["sham_links"] = "sham-links"
                                self._children_yang_names.add("sham-links")

                                self.virtual_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks()
                                self.virtual_links.parent = self
                                self._children_name_map["virtual_links"] = "virtual-links"
                                self._children_yang_names.add("virtual-links")
                                self._segment_path = lambda: "area-area-id" + "[area-id='" + self.area_id.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId, ['area_id', 'cost', 'dead_interval', 'default_cost', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'stub', 'transmit_delay'], name, value)


                            class AreaScope(Entity):
                                """
                                Area Scope Configuration
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope, self).__init__()

                                    self.yang_name = "area-scope"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute)}
                                    self._child_list_classes = {}

                                    self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._children_yang_names.add("fast-reroute")
                                    self._segment_path = lambda: "area-scope"


                                class FastReroute(Entity):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix)}
                                        self._child_list_classes = {}

                                        self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                        self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"
                                        self._children_yang_names.add("per-link")

                                        self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._children_yang_names.add("per-prefix")
                                        self._segment_path = lambda: "fast-reroute"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-link"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class PerPrefix(Entity):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                            self._children_yang_names.add("candidate-interfaces")

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._children_yang_names.add("exclude-interfaces")
                                            self._segment_path = lambda: "per-prefix"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(Entity):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                        class ExcludeInterfaces(Entity):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(Entity):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  <key>
                                                
                                                	Interface
                                                	**type**\:  str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {}

                                                    self.interface_name = YLeaf(YType.str, "interface-name")
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                            class Authentication(Entity):
                                """
                                Authenticate OSPFv3 packets
                                
                                .. attribute:: algorithm
                                
                                	Use the MD5 or SHA1 algorithm
                                	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\:  bool
                                
                                .. attribute:: password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: spi
                                
                                	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\:  int
                                
                                	**range:** 256..4294967295
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication, self).__init__()

                                    self.yang_name = "authentication"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                    self.enable = YLeaf(YType.boolean, "enable")

                                    self.password = YLeaf(YType.str, "password")

                                    self.spi = YLeaf(YType.uint32, "spi")
                                    self._segment_path = lambda: "authentication"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                            class Bfd(Entity):
                                """
                                Configure BFD parameters
                                
                                .. attribute:: detection_multiplier
                                
                                	Detect multiplier
                                	**type**\:  int
                                
                                	**range:** 2..50
                                
                                .. attribute:: fast_detect_mode
                                
                                	Enable or disable BFD fast detection
                                	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                
                                .. attribute:: interval
                                
                                	Hello interval in milli\-seconds
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd, self).__init__()

                                    self.yang_name = "bfd"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                    self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                    self.interval = YLeaf(YType.uint32, "interval")
                                    self._segment_path = lambda: "bfd"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                            class DatabaseFilter(Entity):
                                """
                                Database filter
                                
                                .. attribute:: all
                                
                                	All
                                	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter, self).__init__()

                                    self.yang_name = "database-filter"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All)}
                                    self._child_list_classes = {}

                                    self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All()
                                    self.all.parent = self
                                    self._children_name_map["all"] = "all"
                                    self._children_yang_names.add("all")
                                    self._segment_path = lambda: "database-filter"


                                class All(Entity):
                                    """
                                    All
                                    
                                    .. attribute:: out
                                    
                                    	Enable or disable database\-filter
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, self).__init__()

                                        self.yang_name = "all"
                                        self.yang_parent_name = "database-filter"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.out = YLeaf(YType.boolean, "out")
                                        self._segment_path = lambda: "all"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, ['out'], name, value)


                            class DistributeList(Entity):
                                """
                                Filter prefixes to/from RIB
                                
                                .. attribute:: in_
                                
                                	Filter prefixes installed to RIB
                                	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In_>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList, self).__init__()

                                    self.yang_name = "distribute-list"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In_)}
                                    self._child_list_classes = {}

                                    self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In_()
                                    self.in_.parent = self
                                    self._children_name_map["in_"] = "in"
                                    self._children_yang_names.add("in")
                                    self._segment_path = lambda: "distribute-list"


                                class In_(Entity):
                                    """
                                    Filter prefixes installed to RIB
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Filter prefixes based on an IPv6 prefix\-list
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In_, self).__init__()

                                        self.yang_name = "in"
                                        self.yang_parent_name = "distribute-list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.prefix_list = YLeaf(YType.str, "prefix-list")
                                        self._segment_path = lambda: "in"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In_, ['prefix_list'], name, value)


                            class Encryption(Entity):
                                """
                                Encrypt and authenticate OSPFv3 packets
                                
                                .. attribute:: authentication_algorithm
                                
                                	Use the NULL, MD5 or SHA1 algorithm
                                	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                
                                .. attribute:: authentication_password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\:  bool
                                
                                .. attribute:: encryption_algorithm
                                
                                	Specify the encryption algorithm
                                	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                
                                .. attribute:: encryption_password
                                
                                	Encryption password
                                	**type**\:  str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: spi
                                
                                	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\:  int
                                
                                	**range:** 256..4294967295
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption, self).__init__()

                                    self.yang_name = "encryption"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                    self.authentication_password = YLeaf(YType.str, "authentication-password")

                                    self.enable = YLeaf(YType.boolean, "enable")

                                    self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                    self.encryption_password = YLeaf(YType.str, "encryption-password")

                                    self.spi = YLeaf(YType.uint32, "spi")
                                    self._segment_path = lambda: "encryption"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                            class Interfaces(Entity):
                                """
                                OSPFv3 interfaces
                                
                                .. attribute:: interface
                                
                                	OSPFv3 interface
                                	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces, self).__init__()

                                    self.yang_name = "interfaces"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"interface" : ("interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface)}

                                    self.interface = YList(self)
                                    self._segment_path = lambda: "interfaces"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces, [], name, value)


                                class Interface(Entity):
                                    """
                                    OSPFv3 interface
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface to configure
                                    	**type**\:  str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication>`
                                    
                                    .. attribute:: bfd
                                    
                                    	Configure BFD parameters
                                    	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd>`
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: database_filter
                                    
                                    	Database filter
                                    	**type**\:   :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/disable demand circuit operation
                                    	**type**\:  bool
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter prefixes to/from RIB
                                    	**type**\:   :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable OSPFv3 interface
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption>`
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute>`
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/disable flood reduction
                                    	**type**\:  bool
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: instance
                                    
                                    	Instance ID
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\:  bool
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/disable ignoring of MTU in DBD packets
                                    	**type**\:  bool
                                    
                                    .. attribute:: neighbors
                                    
                                    	Specify a neighbor router
                                    	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors>`
                                    
                                    .. attribute:: network
                                    
                                    	Specify network type
                                    	**type**\:   :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                    
                                    .. attribute:: packet_size
                                    
                                    	Limit size of OSPFv3 packets
                                    	**type**\:  int
                                    
                                    	**range:** 256..10000
                                    
                                    .. attribute:: passive
                                    
                                    	Enable/disable routing updates on an interface
                                    	**type**\:  bool
                                    
                                    .. attribute:: prefix_suppression
                                    
                                    	Enable/disable prefix suppression on an interface
                                    	**type**\:  bool
                                    
                                    .. attribute:: priority
                                    
                                    	Specify router priority
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface, self).__init__()

                                        self.yang_name = "interface"
                                        self.yang_parent_name = "interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication), "bfd" : ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd), "database-filter" : ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter), "distribute-list" : ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption), "fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute), "neighbors" : ("neighbors", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors)}
                                        self._child_list_classes = {}

                                        self.interface_name = YLeaf(YType.str, "interface-name")

                                        self.cost = YLeaf(YType.uint32, "cost")

                                        self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                        self.demand_circuit = YLeaf(YType.boolean, "demand-circuit")

                                        self.enable = YLeaf(YType.empty, "enable")

                                        self.flood_reduction = YLeaf(YType.boolean, "flood-reduction")

                                        self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                        self.instance = YLeaf(YType.uint32, "instance")

                                        self.ldp_sync = YLeaf(YType.boolean, "ldp-sync")

                                        self.mtu_ignore = YLeaf(YType.boolean, "mtu-ignore")

                                        self.network = YLeaf(YType.enumeration, "network")

                                        self.packet_size = YLeaf(YType.uint32, "packet-size")

                                        self.passive = YLeaf(YType.boolean, "passive")

                                        self.prefix_suppression = YLeaf(YType.boolean, "prefix-suppression")

                                        self.priority = YLeaf(YType.uint32, "priority")

                                        self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                        self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd()
                                        self.bfd.parent = self
                                        self._children_name_map["bfd"] = "bfd"
                                        self._children_yang_names.add("bfd")

                                        self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter()
                                        self.database_filter.parent = self
                                        self._children_name_map["database_filter"] = "database-filter"
                                        self._children_yang_names.add("database-filter")

                                        self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList()
                                        self.distribute_list.parent = self
                                        self._children_name_map["distribute_list"] = "distribute-list"
                                        self._children_yang_names.add("distribute-list")

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._children_yang_names.add("encryption")

                                        self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._children_yang_names.add("fast-reroute")

                                        self.neighbors = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"
                                        self._children_yang_names.add("neighbors")
                                        self._segment_path = lambda: "interface" + "[interface-name='" + self.interface_name.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface, ['interface_name', 'cost', 'dead_interval', 'demand_circuit', 'enable', 'flood_reduction', 'hello_interval', 'instance', 'ldp_sync', 'mtu_ignore', 'network', 'packet_size', 'passive', 'prefix_suppression', 'priority', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.password = YLeaf(YType.str, "password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                    class Bfd(Entity):
                                        """
                                        Configure BFD parameters
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detect multiplier
                                        	**type**\:  int
                                        
                                        	**range:** 2..50
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	Enable or disable BFD fast detection
                                        	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval in milli\-seconds
                                        	**type**\:  int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, self).__init__()

                                            self.yang_name = "bfd"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                                            self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                                            self.interval = YLeaf(YType.uint32, "interval")
                                            self._segment_path = lambda: "bfd"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                                    class DatabaseFilter(Entity):
                                        """
                                        Database filter
                                        
                                        .. attribute:: all
                                        
                                        	All
                                        	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter, self).__init__()

                                            self.yang_name = "database-filter"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All)}
                                            self._child_list_classes = {}

                                            self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All()
                                            self.all.parent = self
                                            self._children_name_map["all"] = "all"
                                            self._children_yang_names.add("all")
                                            self._segment_path = lambda: "database-filter"


                                        class All(Entity):
                                            """
                                            All
                                            
                                            .. attribute:: out
                                            
                                            	Enable or disable database\-filter
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                                self.yang_name = "all"
                                                self.yang_parent_name = "database-filter"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.out = YLeaf(YType.boolean, "out")
                                                self._segment_path = lambda: "all"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)


                                    class DistributeList(Entity):
                                        """
                                        Filter prefixes to/from RIB
                                        
                                        .. attribute:: in_
                                        
                                        	Filter prefixes installed to RIB
                                        	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_)}
                                            self._child_list_classes = {}

                                            self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_()
                                            self.in_.parent = self
                                            self._children_name_map["in_"] = "in"
                                            self._children_yang_names.add("in")
                                            self._segment_path = lambda: "distribute-list"


                                        class In_(Entity):
                                            """
                                            Filter prefixes installed to RIB
                                            
                                            .. attribute:: prefix_list
                                            
                                            	Filter prefixes based on an IPv6 prefix\-list
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_, self).__init__()

                                                self.yang_name = "in"
                                                self.yang_parent_name = "distribute-list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.prefix_list = YLeaf(YType.str, "prefix-list")
                                                self._segment_path = lambda: "in"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In_, ['prefix_list'], name, value)


                                    class Encryption(Entity):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                            self.authentication_password = YLeaf(YType.str, "authentication-password")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                            self.encryption_password = YLeaf(YType.str, "encryption-password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "encryption"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                                    class FastReroute(Entity):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix)}
                                            self._child_list_classes = {}

                                            self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                            self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"
                                            self._children_yang_names.add("per-link")

                                            self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._children_yang_names.add("per-prefix")
                                            self._segment_path = lambda: "fast-reroute"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces)}
                                                self._child_list_classes = {}

                                                self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-link"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                        class PerPrefix(Entity):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces)}
                                                self._child_list_classes = {}

                                                self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                                self._children_yang_names.add("candidate-interfaces")

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._children_yang_names.add("exclude-interfaces")
                                                self._segment_path = lambda: "per-prefix"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(Entity):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                            class ExcludeInterfaces(Entity):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2017-07-14'

                                                def __init__(self):
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self._child_container_classes = {}
                                                    self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(Entity):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  <key>
                                                    
                                                    	Interface
                                                    	**type**\:  str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2017-07-14'

                                                    def __init__(self):
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self._child_container_classes = {}
                                                        self._child_list_classes = {}

                                                        self.interface_name = YLeaf(YType.str, "interface-name")
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                                    class Neighbors(Entity):
                                        """
                                        Specify a neighbor router
                                        
                                        .. attribute:: neighbor
                                        
                                        	IPv6 address
                                        	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {"neighbor" : ("neighbor", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor)}

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, [], name, value)


                                        class Neighbor(Entity):
                                            """
                                            IPv6 address
                                            
                                            .. attribute:: neighbor_address  <key>
                                            
                                            	IPV6 address
                                            	**type**\:  str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: cost
                                            
                                            	OSPFv3 cost for point\-to\-multipoint neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 1..65535
                                            
                                            .. attribute:: database_filter
                                            
                                            	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                            	**type**\:  bool
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPFv3 dead\-router polling interval (in seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: priority
                                            
                                            	OSPFv3 priority of non\-broadcast neighbor
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: zone
                                            
                                            	Zone
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2017-07-14'

                                            def __init__(self):
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self._child_container_classes = {}
                                                self._child_list_classes = {}

                                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                                self.cost = YLeaf(YType.uint32, "cost")

                                                self.database_filter = YLeaf(YType.boolean, "database-filter")

                                                self.poll_interval = YLeaf(YType.uint32, "poll-interval")

                                                self.priority = YLeaf(YType.uint32, "priority")

                                                self.zone = YLeaf(YType.str, "zone")
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + self.neighbor_address.get() + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'cost', 'database_filter', 'poll_interval', 'priority', 'zone'], name, value)


                            class Nssa(Entity):
                                """
                                Specify area as a NSSA area.  Allowed only in
                                non\-backbone areas
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: metric
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\:  int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa, self).__init__()

                                    self.yang_name = "nssa"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.default_info_originate = YLeaf(YType.boolean, "default-info-originate")

                                    self.metric = YLeaf(YType.uint32, "metric")

                                    self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                    self.no_redistribution = YLeaf(YType.boolean, "no-redistribution")

                                    self.no_summary = YLeaf(YType.empty, "no-summary")
                                    self._segment_path = lambda: "nssa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa, ['default_info_originate', 'metric', 'metric_type', 'no_redistribution', 'no_summary'], name, value)


                            class Ranges(Entity):
                                """
                                Range configuration
                                
                                .. attribute:: range
                                
                                	Summarize inter\-area routes matching prefix/length
                                	**type**\: list of    :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges, self).__init__()

                                    self.yang_name = "ranges"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"range" : ("range", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range)}

                                    self.range = YList(self)
                                    self._segment_path = lambda: "ranges"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges, [], name, value)


                                class Range(Entity):
                                    """
                                    Summarize inter\-area routes matching
                                    prefix/length
                                    
                                    .. attribute:: prefix  <key>
                                    
                                    	IPv6 prefix format
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length  <key>
                                    
                                    	IPV6 prefix length
                                    	**type**\:  int
                                    
                                    	**range:** 0..128
                                    
                                    .. attribute:: cost
                                    
                                    	Specified metric for this range
                                    	**type**\:  int
                                    
                                    	**range:** 1..16777214
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise address range
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range, self).__init__()

                                        self.yang_name = "range"
                                        self.yang_parent_name = "ranges"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.prefix = YLeaf(YType.str, "prefix")

                                        self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                        self.cost = YLeaf(YType.uint32, "cost")

                                        self.not_advertise = YLeaf(YType.boolean, "not-advertise")
                                        self._segment_path = lambda: "range" + "[prefix='" + self.prefix.get() + "']" + "[prefix-length='" + self.prefix_length.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range, ['prefix', 'prefix_length', 'cost', 'not_advertise'], name, value)


                            class ShamLinks(Entity):
                                """
                                Sham Link sub\-mode
                                
                                .. attribute:: sham_link
                                
                                	ShamLink local and remote endpoints
                                	**type**\: list of    :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks, self).__init__()

                                    self.yang_name = "sham-links"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"sham-link" : ("sham_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink)}

                                    self.sham_link = YList(self)
                                    self._segment_path = lambda: "sham-links"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks, [], name, value)


                                class ShamLink(Entity):
                                    """
                                    ShamLink local and remote endpoints
                                    
                                    .. attribute:: source_address  <key>
                                    
                                    	Local sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: destination_address  <key>
                                    
                                    	Remote sham\-link endpoint
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: enable
                                    
                                    	Enable sham link
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, self).__init__()

                                        self.yang_name = "sham-link"
                                        self.yang_parent_name = "sham-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption)}
                                        self._child_list_classes = {}

                                        self.source_address = YLeaf(YType.str, "source-address")

                                        self.destination_address = YLeaf(YType.str, "destination-address")

                                        self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                        self.enable = YLeaf(YType.empty, "enable")

                                        self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                        self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                        self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._children_yang_names.add("encryption")
                                        self._segment_path = lambda: "sham-link" + "[source-address='" + self.source_address.get() + "']" + "[destination-address='" + self.destination_address.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, ['source_address', 'destination_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.password = YLeaf(YType.str, "password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                    class Encryption(Entity):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                            self.authentication_password = YLeaf(YType.str, "authentication-password")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                            self.encryption_password = YLeaf(YType.str, "encryption-password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "encryption"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                            class VirtualLinks(Entity):
                                """
                                Virtual link sub\-mode
                                
                                .. attribute:: virtual_link
                                
                                	Router ID of virtual link neighbor
                                	**type**\: list of    :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks, self).__init__()

                                    self.yang_name = "virtual-links"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"virtual-link" : ("virtual_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink)}

                                    self.virtual_link = YList(self)
                                    self._segment_path = lambda: "virtual-links"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks, [], name, value)


                                class VirtualLink(Entity):
                                    """
                                    Router ID of virtual link neighbor
                                    
                                    .. attribute:: virtual_link_address  <key>
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: enable
                                    
                                    	Enabled virtual link
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:   :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, self).__init__()

                                        self.yang_name = "virtual-link"
                                        self.yang_parent_name = "virtual-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {"authentication" : ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication), "encryption" : ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption)}
                                        self._child_list_classes = {}

                                        self.virtual_link_address = YLeaf(YType.str, "virtual-link-address")

                                        self.dead_interval = YLeaf(YType.uint32, "dead-interval")

                                        self.enable = YLeaf(YType.empty, "enable")

                                        self.hello_interval = YLeaf(YType.uint32, "hello-interval")

                                        self.retransmit_interval = YLeaf(YType.uint32, "retransmit-interval")

                                        self.transmit_delay = YLeaf(YType.uint32, "transmit-delay")

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"
                                        self._children_yang_names.add("authentication")

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._children_yang_names.add("encryption")
                                        self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + self.virtual_link_address.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, ['virtual_link_address', 'dead_interval', 'enable', 'hello_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(Entity):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.algorithm = YLeaf(YType.enumeration, "algorithm")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.password = YLeaf(YType.str, "password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "authentication"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                                    class Encryption(Entity):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\:  bool
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\:  str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\:  int
                                        
                                        	**range:** 256..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                                            self.authentication_password = YLeaf(YType.str, "authentication-password")

                                            self.enable = YLeaf(YType.boolean, "enable")

                                            self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                                            self.encryption_password = YLeaf(YType.str, "encryption-password")

                                            self.spi = YLeaf(YType.uint32, "spi")
                                            self._segment_path = lambda: "encryption"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                    class Authentication(Entity):
                        """
                        Authenticate OSPFv3 packets
                        
                        .. attribute:: algorithm
                        
                        	Use the MD5 or SHA1 algorithm
                        	**type**\:   :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                        
                        .. attribute:: enable
                        
                        	Authenticate packets
                        	**type**\:  bool
                        
                        .. attribute:: password
                        
                        	Specify MD5 or SHA1 password
                        	**type**\:  str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        .. attribute:: spi
                        
                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                        	**type**\:  int
                        
                        	**range:** 256..4294967295
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Authentication, self).__init__()

                            self.yang_name = "authentication"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.algorithm = YLeaf(YType.enumeration, "algorithm")

                            self.enable = YLeaf(YType.boolean, "enable")

                            self.password = YLeaf(YType.str, "password")

                            self.spi = YLeaf(YType.uint32, "spi")
                            self._segment_path = lambda: "authentication"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Authentication, ['algorithm', 'enable', 'password', 'spi'], name, value)


                    class AutoCost(Entity):
                        """
                        Calculate interface cost according to bandwidth
                        
                        .. attribute:: disable
                        
                        	Specify 'true' to assign cost based on interface type
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: reference_bandwidth
                        
                        	Specify reference bandwidth for cost computations in terms of Mbits per second
                        	**type**\:  int
                        
                        	**range:** 1..4294967
                        
                        	**units**\: Mbit/s
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost, self).__init__()

                            self.yang_name = "auto-cost"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}
                            self.is_presence_container = True

                            self.disable = YLeaf(YType.empty, "disable")

                            self.reference_bandwidth = YLeaf(YType.uint32, "reference-bandwidth")
                            self._segment_path = lambda: "auto-cost"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost, ['disable', 'reference_bandwidth'], name, value)


                    class Bfd(Entity):
                        """
                        Configure BFD parameters
                        
                        .. attribute:: detection_multiplier
                        
                        	Detect multiplier
                        	**type**\:  int
                        
                        	**range:** 2..50
                        
                        .. attribute:: fast_detect_mode
                        
                        	Enable or disable BFD fast detection
                        	**type**\:   :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                        
                        .. attribute:: interval
                        
                        	Hello interval in milli\-seconds
                        	**type**\:  int
                        
                        	**range:** 3..30000
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Bfd, self).__init__()

                            self.yang_name = "bfd"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.detection_multiplier = YLeaf(YType.uint32, "detection-multiplier")

                            self.fast_detect_mode = YLeaf(YType.enumeration, "fast-detect-mode")

                            self.interval = YLeaf(YType.uint32, "interval")
                            self._segment_path = lambda: "bfd"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Bfd, ['detection_multiplier', 'fast_detect_mode', 'interval'], name, value)


                    class Capability(Entity):
                        """
                        OSPFv3 Capability
                        
                        .. attribute:: vrf_lite
                        
                        	Enable VRF Lite
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Capability, self).__init__()

                            self.yang_name = "capability"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.vrf_lite = YLeaf(YType.boolean, "vrf-lite")
                            self._segment_path = lambda: "capability"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Capability, ['vrf_lite'], name, value)


                    class DatabaseFilter(Entity):
                        """
                        Database filter
                        
                        .. attribute:: all
                        
                        	All
                        	**type**\:   :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter, self).__init__()

                            self.yang_name = "database-filter"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"all" : ("all", Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All)}
                            self._child_list_classes = {}

                            self.all = Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All()
                            self.all.parent = self
                            self._children_name_map["all"] = "all"
                            self._children_yang_names.add("all")
                            self._segment_path = lambda: "database-filter"


                        class All(Entity):
                            """
                            All
                            
                            .. attribute:: out
                            
                            	Enable out
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All, self).__init__()

                                self.yang_name = "all"
                                self.yang_parent_name = "database-filter"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.out = YLeaf(YType.empty, "out")
                                self._segment_path = lambda: "all"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All, ['out'], name, value)


                    class DefaultInformation(Entity):
                        """
                        Control distribution of default information
                        
                        .. attribute:: originate
                        
                        	Distribute a default route
                        	**type**\:   :py:class:`Originate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation, self).__init__()

                            self.yang_name = "default-information"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"originate" : ("originate", Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate)}
                            self._child_list_classes = {}

                            self.originate = None
                            self._children_name_map["originate"] = "originate"
                            self._children_yang_names.add("originate")
                            self._segment_path = lambda: "default-information"


                        class Originate(Entity):
                            """
                            Distribute a default route
                            
                            .. attribute:: always
                            
                            	Always advertise default route
                            	**type**\:  bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: metric
                            
                            	OSPFv3 default metric
                            	**type**\:  int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 metric type for default routes
                            	**type**\:  int
                            
                            	**range:** 1..2
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to default\-information origination
                            	**type**\:  str
                            
                            .. attribute:: tag
                            
                            	Tag for default route
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate, self).__init__()

                                self.yang_name = "originate"
                                self.yang_parent_name = "default-information"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}
                                self.is_presence_container = True

                                self.always = YLeaf(YType.boolean, "always")

                                self.metric = YLeaf(YType.uint32, "metric")

                                self.metric_type = YLeaf(YType.uint32, "metric-type")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.tag = YLeaf(YType.uint32, "tag")
                                self._segment_path = lambda: "originate"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate, ['always', 'metric', 'metric_type', 'route_policy_name', 'tag'], name, value)


                    class Distance(Entity):
                        """
                        Define an administrative distance
                        
                        .. attribute:: administrative
                        
                        	Define an administrative distance
                        	**type**\:  int
                        
                        	**range:** 1..255
                        
                        .. attribute:: ospfv3
                        
                        	OSPFv3 administrative distance
                        	**type**\:   :py:class:`Ospfv3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Distance, self).__init__()

                            self.yang_name = "distance"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"ospfv3" : ("ospfv3", Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3)}
                            self._child_list_classes = {}

                            self.administrative = YLeaf(YType.uint32, "administrative")

                            self.ospfv3 = Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3()
                            self.ospfv3.parent = self
                            self._children_name_map["ospfv3"] = "ospfv3"
                            self._children_yang_names.add("ospfv3")
                            self._segment_path = lambda: "distance"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Distance, ['administrative'], name, value)


                        class Ospfv3(Entity):
                            """
                            OSPFv3 administrative distance
                            
                            .. attribute:: external
                            
                            	Distance for external type 5 and type 7 routes
                            	**type**\:  int
                            
                            	**range:** 1..255
                            
                            .. attribute:: inter_area
                            
                            	Distance for inter\-area routes
                            	**type**\:  int
                            
                            	**range:** 1..255
                            
                            .. attribute:: intra_area
                            
                            	Distance for intra\-area routes
                            	**type**\:  int
                            
                            	**range:** 1..255
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3, self).__init__()

                                self.yang_name = "ospfv3"
                                self.yang_parent_name = "distance"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.external = YLeaf(YType.uint32, "external")

                                self.inter_area = YLeaf(YType.uint32, "inter-area")

                                self.intra_area = YLeaf(YType.uint32, "intra-area")
                                self._segment_path = lambda: "ospfv3"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3, ['external', 'inter_area', 'intra_area'], name, value)


                    class DistributeList(Entity):
                        """
                        Filter prefixes to/from RIB
                        
                        .. attribute:: in_
                        
                        	Filter prefixes installed to RIB
                        	**type**\:   :py:class:`In_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In_>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList, self).__init__()

                            self.yang_name = "distribute-list"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"in" : ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In_)}
                            self._child_list_classes = {}

                            self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In_()
                            self.in_.parent = self
                            self._children_name_map["in_"] = "in"
                            self._children_yang_names.add("in")
                            self._segment_path = lambda: "distribute-list"


                        class In_(Entity):
                            """
                            Filter prefixes installed to RIB
                            
                            .. attribute:: prefix_list
                            
                            	Filter prefixes based on an IPv6 prefix\-list
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In_, self).__init__()

                                self.yang_name = "in"
                                self.yang_parent_name = "distribute-list"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.prefix_list = YLeaf(YType.str, "prefix-list")
                                self._segment_path = lambda: "in"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In_, ['prefix_list'], name, value)


                    class DistributeListOut(Entity):
                        """
                        Filter prefixes from RIB 
                        
                        .. attribute:: distribute_outs
                        
                        	Filter generated type\-5 LSAs
                        	**type**\:   :py:class:`DistributeOuts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut, self).__init__()

                            self.yang_name = "distribute-list-out"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"distribute-outs" : ("distribute_outs", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts)}
                            self._child_list_classes = {}

                            self.distribute_outs = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts()
                            self.distribute_outs.parent = self
                            self._children_name_map["distribute_outs"] = "distribute-outs"
                            self._children_yang_names.add("distribute-outs")
                            self._segment_path = lambda: "distribute-list-out"


                        class DistributeOuts(Entity):
                            """
                            Filter generated type\-5 LSAs
                            
                            .. attribute:: distribute_out
                            
                            	Filter generated type\-5 LSAs
                            	**type**\: list of    :py:class:`DistributeOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts, self).__init__()

                                self.yang_name = "distribute-outs"
                                self.yang_parent_name = "distribute-list-out"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"distribute-out" : ("distribute_out", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut)}

                                self.distribute_out = YList(self)
                                self._segment_path = lambda: "distribute-outs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts, [], name, value)


                            class DistributeOut(Entity):
                                """
                                Filter generated type\-5 LSAs
                                
                                .. attribute:: protocol_name  <key>
                                
                                	none
                                	**type**\:   :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Protocol>`
                                
                                .. attribute:: as_yy_and_as_xx_and_process_name
                                
                                	keys\: as\-yy, as\-xx, process\-name
                                	**type**\: list of    :py:class:`AsYyAndAsXxAndProcessName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut, self).__init__()

                                    self.yang_name = "distribute-out"
                                    self.yang_parent_name = "distribute-outs"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"as-yy-and-as-xx-and-process-name" : ("as_yy_and_as_xx_and_process_name", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName)}

                                    self.protocol_name = YLeaf(YType.enumeration, "protocol-name")

                                    self.as_yy_and_as_xx_and_process_name = YList(self)
                                    self._segment_path = lambda: "distribute-out" + "[protocol-name='" + self.protocol_name.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut, ['protocol_name'], name, value)


                                class AsYyAndAsXxAndProcessName(Entity):
                                    """
                                    keys\: as\-yy, as\-xx, process\-name
                                    
                                    .. attribute:: as_yy  <key>
                                    
                                    	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_xx  <key>
                                    
                                    	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: process_name  <key>
                                    
                                    	If ISIS or OSPFv3, specify the instance name
                                    	**type**\:  str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Prefix\-list name
                                    	**type**\:  str
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName, self).__init__()

                                        self.yang_name = "as-yy-and-as-xx-and-process-name"
                                        self.yang_parent_name = "distribute-out"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.as_yy = YLeaf(YType.uint32, "as-yy")

                                        self.as_xx = YLeaf(YType.uint32, "as-xx")

                                        self.process_name = YLeaf(YType.str, "process-name")

                                        self.prefix_list = YLeaf(YType.str, "prefix-list")
                                        self._segment_path = lambda: "as-yy-and-as-xx-and-process-name" + "[as-yy='" + self.as_yy.get() + "']" + "[as-xx='" + self.as_xx.get() + "']" + "[process-name='" + self.process_name.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.AsYyAndAsXxAndProcessName, ['as_yy', 'as_xx', 'process_name', 'prefix_list'], name, value)


                    class DomainId(Entity):
                        """
                        OSPFv3 Domain ID
                        
                        .. attribute:: primary_domain_id
                        
                        	OSPF Primary domain ID
                        	**type**\:   :py:class:`PrimaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId>`
                        
                        .. attribute:: secondary_domain_ids
                        
                        	Secondary domain ID Table
                        	**type**\:   :py:class:`SecondaryDomainIds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId, self).__init__()

                            self.yang_name = "domain-id"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"primary-domain-id" : ("primary_domain_id", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId), "secondary-domain-ids" : ("secondary_domain_ids", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds)}
                            self._child_list_classes = {}

                            self.primary_domain_id = Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId()
                            self.primary_domain_id.parent = self
                            self._children_name_map["primary_domain_id"] = "primary-domain-id"
                            self._children_yang_names.add("primary-domain-id")

                            self.secondary_domain_ids = Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds()
                            self.secondary_domain_ids.parent = self
                            self._children_name_map["secondary_domain_ids"] = "secondary-domain-ids"
                            self._children_yang_names.add("secondary-domain-ids")
                            self._segment_path = lambda: "domain-id"


                        class PrimaryDomainId(Entity):
                            """
                            OSPF Primary domain ID
                            
                            .. attribute:: domain_id_name
                            
                            	Primary domain ID value
                            	**type**\:  str
                            
                            .. attribute:: domain_id_type
                            
                            	Primary domain ID type
                            	**type**\:   :py:class:`Ospfv3DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3DomainId>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId, self).__init__()

                                self.yang_name = "primary-domain-id"
                                self.yang_parent_name = "domain-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.domain_id_name = YLeaf(YType.str, "domain-id-name")

                                self.domain_id_type = YLeaf(YType.enumeration, "domain-id-type")
                                self._segment_path = lambda: "primary-domain-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId, ['domain_id_name', 'domain_id_type'], name, value)


                        class SecondaryDomainIds(Entity):
                            """
                            Secondary domain ID Table
                            
                            .. attribute:: secondary_domain_id
                            
                            	OSPF Secondary domain ID
                            	**type**\: list of    :py:class:`SecondaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds, self).__init__()

                                self.yang_name = "secondary-domain-ids"
                                self.yang_parent_name = "domain-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {"secondary-domain-id" : ("secondary_domain_id", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId)}

                                self.secondary_domain_id = YList(self)
                                self._segment_path = lambda: "secondary-domain-ids"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds, [], name, value)


                            class SecondaryDomainId(Entity):
                                """
                                OSPF Secondary domain ID
                                
                                .. attribute:: domain_id_type  <key>
                                
                                	Secondary domain ID type
                                	**type**\:   :py:class:`Ospfv3DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3DomainId>`
                                
                                .. attribute:: domain_id_name  <key>
                                
                                	Secondary domain ID value
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId, self).__init__()

                                    self.yang_name = "secondary-domain-id"
                                    self.yang_parent_name = "secondary-domain-ids"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.domain_id_type = YLeaf(YType.enumeration, "domain-id-type")

                                    self.domain_id_name = YLeaf(YType.str, "domain-id-name")
                                    self._segment_path = lambda: "secondary-domain-id" + "[domain-id-type='" + self.domain_id_type.get() + "']" + "[domain-id-name='" + self.domain_id_name.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId, ['domain_id_type', 'domain_id_name'], name, value)


                    class Encryption(Entity):
                        """
                        Encrypt and authenticate OSPFv3 packets
                        
                        .. attribute:: authentication_algorithm
                        
                        	Use the NULL, MD5 or SHA1 algorithm
                        	**type**\:   :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                        
                        .. attribute:: authentication_password
                        
                        	Specify MD5 or SHA1 password
                        	**type**\:  str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        .. attribute:: enable
                        
                        	Authenticate packets
                        	**type**\:  bool
                        
                        .. attribute:: encryption_algorithm
                        
                        	Specify the encryption algorithm
                        	**type**\:   :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                        
                        .. attribute:: encryption_password
                        
                        	Encryption password
                        	**type**\:  str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        .. attribute:: spi
                        
                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                        	**type**\:  int
                        
                        	**range:** 256..4294967295
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Encryption, self).__init__()

                            self.yang_name = "encryption"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.authentication_algorithm = YLeaf(YType.enumeration, "authentication-algorithm")

                            self.authentication_password = YLeaf(YType.str, "authentication-password")

                            self.enable = YLeaf(YType.boolean, "enable")

                            self.encryption_algorithm = YLeaf(YType.enumeration, "encryption-algorithm")

                            self.encryption_password = YLeaf(YType.str, "encryption-password")

                            self.spi = YLeaf(YType.uint32, "spi")
                            self._segment_path = lambda: "encryption"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Encryption, ['authentication_algorithm', 'authentication_password', 'enable', 'encryption_algorithm', 'encryption_password', 'spi'], name, value)


                    class FastReroute(Entity):
                        """
                        Fast\-reroute instance scoped parameters
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link global configuration
                        	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-prefix global configuration
                        	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute, self).__init__()

                            self.yang_name = "fast-reroute"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix)}
                            self._child_list_classes = {}

                            self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink()
                            self.per_link.parent = self
                            self._children_name_map["per_link"] = "per-link"
                            self._children_yang_names.add("per-link")

                            self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix()
                            self.per_prefix.parent = self
                            self._children_name_map["per_prefix"] = "per-prefix"
                            self._children_yang_names.add("per-prefix")
                            self._segment_path = lambda: "fast-reroute"


                        class PerLink(Entity):
                            """
                            Fast\-reroute per\-link global configuration
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:   :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink, self).__init__()

                                self.yang_name = "per-link"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.priority = YLeaf(YType.enumeration, "priority")
                                self._segment_path = lambda: "per-link"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink, ['priority'], name, value)


                        class PerPrefix(Entity):
                            """
                            Fast\-reroute per\-prefix global configuration
                            
                            .. attribute:: load_sharing_disable
                            
                            	Disable load sharing between multiple backups
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:   :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                            
                            .. attribute:: tiebreakers
                            
                            	Fast\-reroute tiebreakers configurations
                            	**type**\:   :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix, self).__init__()

                                self.yang_name = "per-prefix"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"tiebreakers" : ("tiebreakers", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers)}
                                self._child_list_classes = {}

                                self.load_sharing_disable = YLeaf(YType.empty, "load-sharing-disable")

                                self.priority = YLeaf(YType.enumeration, "priority")

                                self.tiebreakers = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers()
                                self.tiebreakers.parent = self
                                self._children_name_map["tiebreakers"] = "tiebreakers"
                                self._children_yang_names.add("tiebreakers")
                                self._segment_path = lambda: "per-prefix"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix, ['load_sharing_disable', 'priority'], name, value)


                            class Tiebreakers(Entity):
                                """
                                Fast\-reroute tiebreakers configurations
                                
                                .. attribute:: tiebreaker
                                
                                	Fast\-reroute tiebreakers configuration
                                	**type**\: list of    :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                    self.yang_name = "tiebreakers"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {"tiebreaker" : ("tiebreaker", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker)}

                                    self.tiebreaker = YList(self)
                                    self._segment_path = lambda: "tiebreakers"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                class Tiebreaker(Entity):
                                    """
                                    Fast\-reroute tiebreakers configuration
                                    
                                    .. attribute:: tiebreaker_type  <key>
                                    
                                    	Tiebreaker type
                                    	**type**\:   :py:class:`Ospfv3FastRerouteTiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastRerouteTiebreakers>`
                                    
                                    .. attribute:: tiebreaker_index
                                    
                                    	Index value for a tiebreaker
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                        self.yang_name = "tiebreaker"
                                        self.yang_parent_name = "tiebreakers"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {}

                                        self.tiebreaker_type = YLeaf(YType.enumeration, "tiebreaker-type")

                                        self.tiebreaker_index = YLeaf(YType.uint32, "tiebreaker-index")
                                        self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + self.tiebreaker_type.get() + "']"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)


                    class GracefulRestart(Entity):
                        """
                        Graceful restart configuration
                        
                        .. attribute:: enable
                        
                        	Enable graceful restart
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: helper
                        
                        	Disable router's helper support
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: interval
                        
                        	Minimum interval between graceful restarts (seconds)
                        	**type**\:  int
                        
                        	**range:** 90..3600
                        
                        	**units**\: second
                        
                        .. attribute:: lifetime
                        
                        	Maximum route lifetime following restart (seconds)
                        	**type**\:  int
                        
                        	**range:** 90..1800
                        
                        	**units**\: second
                        
                        .. attribute:: strict_lsa_checking
                        
                        	Terminate graceful restart helper mode if LSA changed
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart, self).__init__()

                            self.yang_name = "graceful-restart"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {}

                            self.enable = YLeaf(YType.empty, "enable")

                            self.helper = YLeaf(YType.empty, "helper")

                            self.interval = YLeaf(YType.uint32, "interval")

                            self.lifetime = YLeaf(YType.uint32, "lifetime")

                            self.strict_lsa_checking = YLeaf(YType.empty, "strict-lsa-checking")
                            self._segment_path = lambda: "graceful-restart"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart, ['enable', 'helper', 'interval', 'lifetime', 'strict_lsa_checking'], name, value)


                    class Ignore(Entity):
                        """
                        Do not complain about a specified event
                        
                        .. attribute:: lsa
                        
                        	Do not complain upon receiving LSA of the specified type
                        	**type**\:   :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Ignore, self).__init__()

                            self.yang_name = "ignore"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"lsa" : ("lsa", Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa)}
                            self._child_list_classes = {}

                            self.lsa = Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa()
                            self.lsa.parent = self
                            self._children_name_map["lsa"] = "lsa"
                            self._children_yang_names.add("lsa")
                            self._segment_path = lambda: "ignore"


                        class Lsa(Entity):
                            """
                            Do not complain upon receiving LSA of the
                            specified type
                            
                            .. attribute:: mospf
                            
                            	Enable ignore of MOSPF type 6 LSA
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa, self).__init__()

                                self.yang_name = "lsa"
                                self.yang_parent_name = "ignore"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.mospf = YLeaf(YType.empty, "mospf")
                                self._segment_path = lambda: "lsa"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa, ['mospf'], name, value)


                    class Maximum(Entity):
                        """
                        Set OSPFv3 limits
                        
                        .. attribute:: interfaces
                        
                        	Specify maximum number of interfaces
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: paths
                        
                        	Specify maximum number of paths per route
                        	**type**\:  int
                        
                        	**range:** 1..64
                        
                        .. attribute:: redistributed_prefixes
                        
                        	Limit number of redistributed prefixes
                        	**type**\:   :py:class:`RedistributedPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum, self).__init__()

                            self.yang_name = "maximum"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"redistributed-prefixes" : ("redistributed_prefixes", Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes)}
                            self._child_list_classes = {}

                            self.interfaces = YLeaf(YType.uint32, "interfaces")

                            self.paths = YLeaf(YType.uint32, "paths")

                            self.redistributed_prefixes = Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes()
                            self.redistributed_prefixes.parent = self
                            self._children_name_map["redistributed_prefixes"] = "redistributed-prefixes"
                            self._children_yang_names.add("redistributed-prefixes")
                            self._segment_path = lambda: "maximum"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum, ['interfaces', 'paths'], name, value)


                        class RedistributedPrefixes(Entity):
                            """
                            Limit number of redistributed prefixes
                            
                            .. attribute:: prefixes
                            
                            	Maximum number of prefixes redistributed to protocol
                            	**type**\:  int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: threshold
                            
                            	Threshold value (%) at which to generate a warning message
                            	**type**\:  int
                            
                            	**range:** 1..100
                            
                            .. attribute:: warning_only
                            
                            	Only give warning message when limit is exceeded
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes, self).__init__()

                                self.yang_name = "redistributed-prefixes"
                                self.yang_parent_name = "maximum"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.prefixes = YLeaf(YType.uint32, "prefixes")

                                self.threshold = YLeaf(YType.uint32, "threshold")

                                self.warning_only = YLeaf(YType.empty, "warning-only")
                                self._segment_path = lambda: "redistributed-prefixes"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes, ['prefixes', 'threshold', 'warning_only'], name, value)


                    class ProcessScope(Entity):
                        """
                        Process scope configuration
                        
                        .. attribute:: fast_reroute
                        
                        	Fast\-reroute configuration
                        	**type**\:   :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope, self).__init__()

                            self.yang_name = "process-scope"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"fast-reroute" : ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute)}
                            self._child_list_classes = {}

                            self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute()
                            self.fast_reroute.parent = self
                            self._children_name_map["fast_reroute"] = "fast-reroute"
                            self._children_yang_names.add("fast-reroute")
                            self._segment_path = lambda: "process-scope"


                        class FastReroute(Entity):
                            """
                            Fast\-reroute configuration
                            
                            .. attribute:: fast_reroute_enable
                            
                            	Enable/Disable Fast\-reroute per\-link or per\-prefix
                            	**type**\:   :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                            
                            .. attribute:: per_link
                            
                            	Fast\-reroute per\-link configuration
                            	**type**\:   :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink>`
                            
                            .. attribute:: per_prefix
                            
                            	Fast\-reroute per\-link configuration
                            	**type**\:   :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute, self).__init__()

                                self.yang_name = "fast-reroute"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"per-link" : ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink), "per-prefix" : ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix)}
                                self._child_list_classes = {}

                                self.fast_reroute_enable = YLeaf(YType.enumeration, "fast-reroute-enable")

                                self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink()
                                self.per_link.parent = self
                                self._children_name_map["per_link"] = "per-link"
                                self._children_yang_names.add("per-link")

                                self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix()
                                self.per_prefix.parent = self
                                self._children_name_map["per_prefix"] = "per-prefix"
                                self._children_yang_names.add("per-prefix")
                                self._segment_path = lambda: "fast-reroute"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute, ['fast_reroute_enable'], name, value)


                            class PerLink(Entity):
                                """
                                Fast\-reroute per\-link configuration
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink, self).__init__()

                                    self.yang_name = "per-link"
                                    self.yang_parent_name = "fast-reroute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces)}
                                    self._child_list_classes = {}

                                    self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                    self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                    self._children_yang_names.add("candidate-interfaces")

                                    self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                    self._children_yang_names.add("exclude-interfaces")
                                    self._segment_path = lambda: "per-link"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                class CandidateInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                        self.yang_name = "candidate-interfaces"
                                        self.yang_parent_name = "per-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface)}

                                        self.candidate_interface = YList(self)
                                        self._segment_path = lambda: "candidate-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                    class CandidateInterface(Entity):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                            self.yang_name = "candidate-interface"
                                            self.yang_parent_name = "candidate-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.interface_name = YLeaf(YType.str, "interface-name")
                                            self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                class ExcludeInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup
                                    	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                        self.yang_name = "exclude-interfaces"
                                        self.yang_parent_name = "per-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface)}

                                        self.exclude_interface = YList(self)
                                        self._segment_path = lambda: "exclude-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                    class ExcludeInterface(Entity):
                                        """
                                        Exclude an interface from becoming a backup
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                            self.yang_name = "exclude-interface"
                                            self.yang_parent_name = "exclude-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.interface_name = YLeaf(YType.str, "interface-name")
                                            self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                            class PerPrefix(Entity):
                                """
                                Fast\-reroute per\-link configuration
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:   :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                	**type**\:   :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix, self).__init__()

                                    self.yang_name = "per-prefix"
                                    self.yang_parent_name = "fast-reroute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {"candidate-interfaces" : ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces), "exclude-interfaces" : ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces)}
                                    self._child_list_classes = {}

                                    self.fast_reroute_use_candidate_only = YLeaf(YType.boolean, "fast-reroute-use-candidate-only")

                                    self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self._children_name_map["candidate_interfaces"] = "candidate-interfaces"
                                    self._children_yang_names.add("candidate-interfaces")

                                    self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                    self._children_yang_names.add("exclude-interfaces")
                                    self._segment_path = lambda: "per-prefix"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                class CandidateInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of    :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                        self.yang_name = "candidate-interfaces"
                                        self.yang_parent_name = "per-prefix"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"candidate-interface" : ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface)}

                                        self.candidate_interface = YList(self)
                                        self._segment_path = lambda: "candidate-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                    class CandidateInterface(Entity):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                            self.yang_name = "candidate-interface"
                                            self.yang_parent_name = "candidate-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.interface_name = YLeaf(YType.str, "interface-name")
                                            self._segment_path = lambda: "candidate-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)


                                class ExcludeInterfaces(Entity):
                                    """
                                    Fast\-reroute per\-link/per\-prefix exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup
                                    	**type**\: list of    :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2017-07-14'

                                    def __init__(self):
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                        self.yang_name = "exclude-interfaces"
                                        self.yang_parent_name = "per-prefix"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self._child_container_classes = {}
                                        self._child_list_classes = {"exclude-interface" : ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface)}

                                        self.exclude_interface = YList(self)
                                        self._segment_path = lambda: "exclude-interfaces"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                    class ExcludeInterface(Entity):
                                        """
                                        Exclude an interface from becoming a backup
                                        
                                        .. attribute:: interface_name  <key>
                                        
                                        	Interface
                                        	**type**\:  str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2017-07-14'

                                        def __init__(self):
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                            self.yang_name = "exclude-interface"
                                            self.yang_parent_name = "exclude-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self._child_container_classes = {}
                                            self._child_list_classes = {}

                                            self.interface_name = YLeaf(YType.str, "interface-name")
                                            self._segment_path = lambda: "exclude-interface" + "[interface-name='" + self.interface_name.get() + "']"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)


                    class Redistributes(Entity):
                        """
                        Redistribute information from another routing
                        protocol
                        
                        .. attribute:: redistribute
                        
                        	Redistribute information from another routing protocol
                        	**type**\: list of    :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes, self).__init__()

                            self.yang_name = "redistributes"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"redistribute" : ("redistribute", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute)}

                            self.redistribute = YList(self)
                            self._segment_path = lambda: "redistributes"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes, [], name, value)


                        class Redistribute(Entity):
                            """
                            Redistribute information from another routing
                            protocol
                            
                            .. attribute:: protocol_name  <key>
                            
                            	Protocol
                            	**type**\:   :py:class:`Ospfv3ProtocolType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ProtocolType2>`
                            
                            .. attribute:: bgp
                            
                            	bgp
                            	**type**\: list of    :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp>`
                            
                            .. attribute:: connected_or_static_or_subscriber_or_mobile
                            
                            	connected or static or subscriber or mobile
                            	**type**\:   :py:class:`ConnectedOrStaticOrSubscriberOrMobile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: eigrp
                            
                            	eigrp
                            	**type**\: list of    :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp>`
                            
                            .. attribute:: ospfv3_or_isis_or_application
                            
                            	ospfv3 or isis or application
                            	**type**\: list of    :py:class:`Ospfv3OrIsisOrApplication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute, self).__init__()

                                self.yang_name = "redistribute"
                                self.yang_parent_name = "redistributes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"connected-or-static-or-subscriber-or-mobile" : ("connected_or_static_or_subscriber_or_mobile", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile)}
                                self._child_list_classes = {"bgp" : ("bgp", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp), "eigrp" : ("eigrp", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp), "ospfv3-or-isis-or-application" : ("ospfv3_or_isis_or_application", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication)}

                                self.protocol_name = YLeaf(YType.enumeration, "protocol-name")

                                self.connected_or_static_or_subscriber_or_mobile = None
                                self._children_name_map["connected_or_static_or_subscriber_or_mobile"] = "connected-or-static-or-subscriber-or-mobile"
                                self._children_yang_names.add("connected-or-static-or-subscriber-or-mobile")

                                self.bgp = YList(self)
                                self.eigrp = YList(self)
                                self.ospfv3_or_isis_or_application = YList(self)
                                self._segment_path = lambda: "redistribute" + "[protocol-name='" + self.protocol_name.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute, ['protocol_name'], name, value)


                            class Bgp(Entity):
                                """
                                bgp
                                
                                .. attribute:: as_xx  <key>
                                
                                	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: as_yy  <key>
                                
                                	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\:  int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: preserve_med_info
                                
                                	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp, self).__init__()

                                    self.yang_name = "bgp"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.as_xx = YLeaf(YType.uint32, "as-xx")

                                    self.as_yy = YLeaf(YType.uint32, "as-yy")

                                    self.default_metric = YLeaf(YType.uint32, "default-metric")

                                    self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                    self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                    self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                    self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                    self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                    self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                    self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                    self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                    self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                    self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                    self.tag = YLeaf(YType.uint32, "tag")
                                    self._segment_path = lambda: "bgp" + "[as-xx='" + self.as_xx.get() + "']" + "[as-yy='" + self.as_yy.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp, ['as_xx', 'as_yy', 'default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                            class ConnectedOrStaticOrSubscriberOrMobile(Entity):
                                """
                                connected or static or subscriber or mobile
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\:  int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: preserve_med_info
                                
                                	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, self).__init__()

                                    self.yang_name = "connected-or-static-or-subscriber-or-mobile"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}
                                    self.is_presence_container = True

                                    self.default_metric = YLeaf(YType.uint32, "default-metric")

                                    self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                    self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                    self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                    self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                    self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                    self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                    self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                    self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                    self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                    self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                    self.tag = YLeaf(YType.uint32, "tag")
                                    self._segment_path = lambda: "connected-or-static-or-subscriber-or-mobile"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, ['default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                            class Eigrp(Entity):
                                """
                                eigrp
                                
                                .. attribute:: as_xx  <key>
                                
                                	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\:  int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: preserve_med_info
                                
                                	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp, self).__init__()

                                    self.yang_name = "eigrp"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.as_xx = YLeaf(YType.uint32, "as-xx")

                                    self.default_metric = YLeaf(YType.uint32, "default-metric")

                                    self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                    self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                    self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                    self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                    self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                    self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                    self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                    self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                    self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                    self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                    self.tag = YLeaf(YType.uint32, "tag")
                                    self._segment_path = lambda: "eigrp" + "[as-xx='" + self.as_xx.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp, ['as_xx', 'default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                            class Ospfv3OrIsisOrApplication(Entity):
                                """
                                ospfv3 or isis or application
                                
                                .. attribute:: process_name  <key>
                                
                                	ISIS process name if protocol is ISIS, or OSPFv3 process name if protocol is OSPFv3
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\:  int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:   :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:   :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:   :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:   :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:   :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:   :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: preserve_med_info
                                
                                	Preserve Information (Multi\-Exit Discriminator) of BGP routes
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\:  bool
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\:  str
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, self).__init__()

                                    self.yang_name = "ospfv3-or-isis-or-application"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.process_name = YLeaf(YType.str, "process-name")

                                    self.default_metric = YLeaf(YType.uint32, "default-metric")

                                    self.eigrp_route_type = YLeaf(YType.enumeration, "eigrp-route-type")

                                    self.external_route_type = YLeaf(YType.enumeration, "external-route-type")

                                    self.internal_route_type = YLeaf(YType.enumeration, "internal-route-type")

                                    self.isis_route_type = YLeaf(YType.enumeration, "isis-route-type")

                                    self.metric_type = YLeaf(YType.enumeration, "metric-type")

                                    self.nssa_external_route_type = YLeaf(YType.enumeration, "nssa-external-route-type")

                                    self.preserve_med = YLeaf(YType.empty, "preserve-med")

                                    self.preserve_med_info = YLeaf(YType.empty, "preserve-med-info")

                                    self.redistribute_route = YLeaf(YType.boolean, "redistribute-route")

                                    self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                    self.tag = YLeaf(YType.uint32, "tag")
                                    self._segment_path = lambda: "ospfv3-or-isis-or-application" + "[process-name='" + self.process_name.get() + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, ['process_name', 'default_metric', 'eigrp_route_type', 'external_route_type', 'internal_route_type', 'isis_route_type', 'metric_type', 'nssa_external_route_type', 'preserve_med', 'preserve_med_info', 'redistribute_route', 'route_policy_name', 'tag'], name, value)


                    class Snmp(Entity):
                        """
                        SNMP configuration
                        
                        .. attribute:: context
                        
                        	SNMP context configuration
                        	**type**\:  str
                        
                        .. attribute:: trap_rate_limit
                        
                        	SNMP trap rate configuration
                        	**type**\:   :py:class:`TrapRateLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp, self).__init__()

                            self.yang_name = "snmp"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"trap-rate-limit" : ("trap_rate_limit", Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit)}
                            self._child_list_classes = {}

                            self.context = YLeaf(YType.str, "context")

                            self.trap_rate_limit = Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit()
                            self.trap_rate_limit.parent = self
                            self._children_name_map["trap_rate_limit"] = "trap-rate-limit"
                            self._children_yang_names.add("trap-rate-limit")
                            self._segment_path = lambda: "snmp"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp, ['context'], name, value)


                        class TrapRateLimit(Entity):
                            """
                            SNMP trap rate configuration
                            
                            .. attribute:: max_window_traps
                            
                            	Max number of traps sent in window time
                            	**type**\:  int
                            
                            	**range:** 0..300
                            
                            .. attribute:: window_size
                            
                            	Trap rate limit sliding window size
                            	**type**\:  int
                            
                            	**range:** 2..60
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit, self).__init__()

                                self.yang_name = "trap-rate-limit"
                                self.yang_parent_name = "snmp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.max_window_traps = YLeaf(YType.uint32, "max-window-traps")

                                self.window_size = YLeaf(YType.uint32, "window-size")
                                self._segment_path = lambda: "trap-rate-limit"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit, ['max_window_traps', 'window_size'], name, value)


                    class StubRouter(Entity):
                        """
                        Stub router configuration
                        
                        .. attribute:: max_metric
                        
                        	Stub router max\-metric configuration
                        	**type**\:   :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric>`
                        
                        .. attribute:: rbit
                        
                        	Stub router R\-bit configuration
                        	**type**\:   :py:class:`Rbit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit>`
                        
                        .. attribute:: v6bit
                        
                        	Stub router V6\-bit configuration
                        	**type**\:   :py:class:`V6Bit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter, self).__init__()

                            self.yang_name = "stub-router"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"max-metric" : ("max_metric", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric), "rbit" : ("rbit", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit), "v6bit" : ("v6bit", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit)}
                            self._child_list_classes = {}

                            self.max_metric = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric()
                            self.max_metric.parent = self
                            self._children_name_map["max_metric"] = "max-metric"
                            self._children_yang_names.add("max-metric")

                            self.rbit = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit()
                            self.rbit.parent = self
                            self._children_name_map["rbit"] = "rbit"
                            self._children_yang_names.add("rbit")

                            self.v6bit = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit()
                            self.v6bit.parent = self
                            self._children_name_map["v6bit"] = "v6bit"
                            self._children_yang_names.add("v6bit")
                            self._segment_path = lambda: "stub-router"


                        class MaxMetric(Entity):
                            """
                            Stub router max\-metric configuration
                            
                            .. attribute:: always
                            
                            	Unconditionally enter stub router operational state
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: enable
                            
                            	Enabled stub router configuration mode
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: external_lsa
                            
                            	Advertise external LSAs with modified metric in stub router mode
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            .. attribute:: include_stub
                            
                            	Advertise stub links with maximum metric in stub router mode
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_proc_migration
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_proc_restart
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_startup
                            
                            	Enter stub router operational state on startup
                            	**type**\:   :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup>`
                            
                            .. attribute:: on_switchover
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: summary_lsa
                            
                            	Advertise summary LSAs with modified metric in stub router mode
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric, self).__init__()

                                self.yang_name = "max-metric"
                                self.yang_parent_name = "stub-router"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"on-startup" : ("on_startup", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup)}
                                self._child_list_classes = {}

                                self.always = YLeaf(YType.empty, "always")

                                self.enable = YLeaf(YType.empty, "enable")

                                self.external_lsa = YLeaf(YType.uint32, "external-lsa")

                                self.include_stub = YLeaf(YType.empty, "include-stub")

                                self.on_proc_migration = YLeaf(YType.uint32, "on-proc-migration")

                                self.on_proc_restart = YLeaf(YType.uint32, "on-proc-restart")

                                self.on_switchover = YLeaf(YType.uint32, "on-switchover")

                                self.summary_lsa = YLeaf(YType.uint32, "summary-lsa")

                                self.on_startup = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup()
                                self.on_startup.parent = self
                                self._children_name_map["on_startup"] = "on-startup"
                                self._children_yang_names.add("on-startup")
                                self._segment_path = lambda: "max-metric"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric, ['always', 'enable', 'external_lsa', 'include_stub', 'on_proc_migration', 'on_proc_restart', 'on_switchover', 'summary_lsa'], name, value)


                            class OnStartup(Entity):
                                """
                                Enter stub router operational state on startup
                                
                                .. attribute:: wait_for_bgp
                                
                                	Wait until BGP converges (only applicable to default VRF)
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: wait_time
                                
                                	Time (in seconds) to stay in stub router operational state
                                	**type**\:  int
                                
                                	**range:** 5..86400
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup, self).__init__()

                                    self.yang_name = "on-startup"
                                    self.yang_parent_name = "max-metric"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.wait_for_bgp = YLeaf(YType.boolean, "wait-for-bgp")

                                    self.wait_time = YLeaf(YType.uint32, "wait-time")
                                    self._segment_path = lambda: "on-startup"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)


                        class Rbit(Entity):
                            """
                            Stub router R\-bit configuration
                            
                            .. attribute:: always
                            
                            	Unconditionally enter stub router operational state
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: enable
                            
                            	Enabled stub router configuration mode
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: external_lsa
                            
                            	Advertise external LSAs with modified metric in stub router mode
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            .. attribute:: include_stub
                            
                            	Advertise stub links with maximum metric in stub router mode
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_proc_migration
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_proc_restart
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_startup
                            
                            	Enter stub router operational state on startup
                            	**type**\:   :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup>`
                            
                            .. attribute:: on_switchover
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: summary_lsa
                            
                            	Advertise summary LSAs with modified metric in stub router mode
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit, self).__init__()

                                self.yang_name = "rbit"
                                self.yang_parent_name = "stub-router"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"on-startup" : ("on_startup", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup)}
                                self._child_list_classes = {}

                                self.always = YLeaf(YType.empty, "always")

                                self.enable = YLeaf(YType.empty, "enable")

                                self.external_lsa = YLeaf(YType.uint32, "external-lsa")

                                self.include_stub = YLeaf(YType.empty, "include-stub")

                                self.on_proc_migration = YLeaf(YType.uint32, "on-proc-migration")

                                self.on_proc_restart = YLeaf(YType.uint32, "on-proc-restart")

                                self.on_switchover = YLeaf(YType.uint32, "on-switchover")

                                self.summary_lsa = YLeaf(YType.uint32, "summary-lsa")

                                self.on_startup = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup()
                                self.on_startup.parent = self
                                self._children_name_map["on_startup"] = "on-startup"
                                self._children_yang_names.add("on-startup")
                                self._segment_path = lambda: "rbit"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit, ['always', 'enable', 'external_lsa', 'include_stub', 'on_proc_migration', 'on_proc_restart', 'on_switchover', 'summary_lsa'], name, value)


                            class OnStartup(Entity):
                                """
                                Enter stub router operational state on startup
                                
                                .. attribute:: wait_for_bgp
                                
                                	Wait until BGP converges (only applicable to default VRF)
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: wait_time
                                
                                	Time (in seconds) to stay in stub router operational state
                                	**type**\:  int
                                
                                	**range:** 5..86400
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup, self).__init__()

                                    self.yang_name = "on-startup"
                                    self.yang_parent_name = "rbit"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.wait_for_bgp = YLeaf(YType.boolean, "wait-for-bgp")

                                    self.wait_time = YLeaf(YType.uint32, "wait-time")
                                    self._segment_path = lambda: "on-startup"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)


                        class V6Bit(Entity):
                            """
                            Stub router V6\-bit configuration
                            
                            .. attribute:: always
                            
                            	Unconditionally enter stub router operational state
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: enable
                            
                            	Enabled stub router configuration mode
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: external_lsa
                            
                            	Advertise external LSAs with modified metric in stub router mode
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            .. attribute:: include_stub
                            
                            	Advertise stub links with maximum metric in stub router mode
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_proc_migration
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_proc_restart
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_startup
                            
                            	Enter stub router operational state on startup
                            	**type**\:   :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit.OnStartup>`
                            
                            .. attribute:: on_switchover
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\:  int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: summary_lsa
                            
                            	Advertise summary LSAs with modified metric in stub router mode
                            	**type**\:  int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit, self).__init__()

                                self.yang_name = "v6bit"
                                self.yang_parent_name = "stub-router"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"on-startup" : ("on_startup", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit.OnStartup)}
                                self._child_list_classes = {}

                                self.always = YLeaf(YType.empty, "always")

                                self.enable = YLeaf(YType.empty, "enable")

                                self.external_lsa = YLeaf(YType.uint32, "external-lsa")

                                self.include_stub = YLeaf(YType.empty, "include-stub")

                                self.on_proc_migration = YLeaf(YType.uint32, "on-proc-migration")

                                self.on_proc_restart = YLeaf(YType.uint32, "on-proc-restart")

                                self.on_switchover = YLeaf(YType.uint32, "on-switchover")

                                self.summary_lsa = YLeaf(YType.uint32, "summary-lsa")

                                self.on_startup = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit.OnStartup()
                                self.on_startup.parent = self
                                self._children_name_map["on_startup"] = "on-startup"
                                self._children_yang_names.add("on-startup")
                                self._segment_path = lambda: "v6bit"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit, ['always', 'enable', 'external_lsa', 'include_stub', 'on_proc_migration', 'on_proc_restart', 'on_switchover', 'summary_lsa'], name, value)


                            class OnStartup(Entity):
                                """
                                Enter stub router operational state on startup
                                
                                .. attribute:: wait_for_bgp
                                
                                	Wait until BGP converges (only applicable to default VRF)
                                	**type**\:  bool
                                
                                	**default value**\: false
                                
                                .. attribute:: wait_time
                                
                                	Time (in seconds) to stay in stub router operational state
                                	**type**\:  int
                                
                                	**range:** 5..86400
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit.OnStartup, self).__init__()

                                    self.yang_name = "on-startup"
                                    self.yang_parent_name = "v6bit"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.wait_for_bgp = YLeaf(YType.boolean, "wait-for-bgp")

                                    self.wait_time = YLeaf(YType.uint32, "wait-time")
                                    self._segment_path = lambda: "on-startup"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6Bit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)


                    class SummaryPrefixes(Entity):
                        """
                        Summarize redistributed routes matching
                        prefix/length
                        
                        .. attribute:: summary_prefix
                        
                        	IPv6 address
                        	**type**\: list of    :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes, self).__init__()

                            self.yang_name = "summary-prefixes"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {}
                            self._child_list_classes = {"summary-prefix" : ("summary_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix)}

                            self.summary_prefix = YList(self)
                            self._segment_path = lambda: "summary-prefixes"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes, [], name, value)


                        class SummaryPrefix(Entity):
                            """
                            IPv6 address
                            
                            .. attribute:: prefix  <key>
                            
                            	IPv6 prefix string format
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: prefix_length  <key>
                            
                            	IPV6 prefix length
                            	**type**\:  int
                            
                            	**range:** 0..128
                            
                            .. attribute:: not_advertise
                            
                            	Suppress routes matching prefix/length
                            	**type**\:  bool
                            
                            .. attribute:: tag
                            
                            	Tag
                            	**type**\:  int
                            
                            	**range:** 1..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix, self).__init__()

                                self.yang_name = "summary-prefix"
                                self.yang_parent_name = "summary-prefixes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.prefix = YLeaf(YType.str, "prefix")

                                self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                self.not_advertise = YLeaf(YType.boolean, "not-advertise")

                                self.tag = YLeaf(YType.uint32, "tag")
                                self._segment_path = lambda: "summary-prefix" + "[prefix='" + self.prefix.get() + "']" + "[prefix-length='" + self.prefix_length.get() + "']"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix, ['prefix', 'prefix_length', 'not_advertise', 'tag'], name, value)


                    class Timers(Entity):
                        """
                        Adjust routing timers
                        
                        .. attribute:: lsa_timers
                        
                        	LSA timers
                        	**type**\:   :py:class:`LsaTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers>`
                        
                        .. attribute:: pacing
                        
                        	Pacing timers
                        	**type**\:   :py:class:`Pacing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing>`
                        
                        .. attribute:: throttle
                        
                        	Throttle timers
                        	**type**\:   :py:class:`Throttle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2017-07-14'

                        def __init__(self):
                            super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers, self).__init__()

                            self.yang_name = "timers"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self._child_container_classes = {"lsa-timers" : ("lsa_timers", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers), "pacing" : ("pacing", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing), "throttle" : ("throttle", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle)}
                            self._child_list_classes = {}

                            self.lsa_timers = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers()
                            self.lsa_timers.parent = self
                            self._children_name_map["lsa_timers"] = "lsa-timers"
                            self._children_yang_names.add("lsa-timers")

                            self.pacing = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing()
                            self.pacing.parent = self
                            self._children_name_map["pacing"] = "pacing"
                            self._children_yang_names.add("pacing")

                            self.throttle = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle()
                            self.throttle.parent = self
                            self._children_name_map["throttle"] = "throttle"
                            self._children_yang_names.add("throttle")
                            self._segment_path = lambda: "timers"


                        class LsaTimers(Entity):
                            """
                            LSA timers
                            
                            .. attribute:: arrival
                            
                            	The minimum interval in milliseconds between accepting the same LSA
                            	**type**\:  int
                            
                            	**range:** 0..60000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers, self).__init__()

                                self.yang_name = "lsa-timers"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.arrival = YLeaf(YType.uint32, "arrival")
                                self._segment_path = lambda: "lsa-timers"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers, ['arrival'], name, value)


                        class Pacing(Entity):
                            """
                            Pacing timers
                            
                            .. attribute:: flood
                            
                            	The minimum interval in milliseconds to pace limit flooding on interface
                            	**type**\:  int
                            
                            	**range:** 5..100
                            
                            	**units**\: millisecond
                            
                            .. attribute:: lsa_group
                            
                            	Interval in seconds at which LSAs are grouped and refreshed, checksummed, or aged
                            	**type**\:  int
                            
                            	**range:** 10..1800
                            
                            	**units**\: second
                            
                            .. attribute:: retransmission
                            
                            	The minimum interval in msec between neighbor retransmissions
                            	**type**\:  int
                            
                            	**range:** 5..100
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing, self).__init__()

                                self.yang_name = "pacing"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {}
                                self._child_list_classes = {}

                                self.flood = YLeaf(YType.uint32, "flood")

                                self.lsa_group = YLeaf(YType.uint32, "lsa-group")

                                self.retransmission = YLeaf(YType.uint32, "retransmission")
                                self._segment_path = lambda: "pacing"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing, ['flood', 'lsa_group', 'retransmission'], name, value)


                        class Throttle(Entity):
                            """
                            Throttle timers
                            
                            .. attribute:: lsa
                            
                            	LSA throttle timers for all types of OSPF LSAs
                            	**type**\:   :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa>`
                            
                            .. attribute:: spf
                            
                            	SPF throttle timers
                            	**type**\:   :py:class:`Spf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2017-07-14'

                            def __init__(self):
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle, self).__init__()

                                self.yang_name = "throttle"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self._child_container_classes = {"lsa" : ("lsa", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa), "spf" : ("spf", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf)}
                                self._child_list_classes = {}

                                self.lsa = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa()
                                self.lsa.parent = self
                                self._children_name_map["lsa"] = "lsa"
                                self._children_yang_names.add("lsa")

                                self.spf = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf()
                                self.spf.parent = self
                                self._children_name_map["spf"] = "spf"
                                self._children_yang_names.add("spf")
                                self._segment_path = lambda: "throttle"


                            class Lsa(Entity):
                                """
                                LSA throttle timers for all types of OSPF LSAs
                                
                                .. attribute:: first_delay
                                
                                	Delay to generate first occurrence of LSA in milliseconds
                                	**type**\:  int
                                
                                	**range:** 0..600000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: maximum_delay
                                
                                	Maximum delay between originating the same LSA in milliseconds
                                	**type**\:  int
                                
                                	**range:** 1..600000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: minimum_delay
                                
                                	Minimum delay between originating the same LSA in milliseconds
                                	**type**\:  int
                                
                                	**range:** 1..600000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa, self).__init__()

                                    self.yang_name = "lsa"
                                    self.yang_parent_name = "throttle"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.first_delay = YLeaf(YType.uint32, "first-delay")

                                    self.maximum_delay = YLeaf(YType.uint32, "maximum-delay")

                                    self.minimum_delay = YLeaf(YType.uint32, "minimum-delay")
                                    self._segment_path = lambda: "lsa"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa, ['first_delay', 'maximum_delay', 'minimum_delay'], name, value)


                            class Spf(Entity):
                                """
                                SPF throttle timers
                                
                                .. attribute:: first_delay
                                
                                	Initial delay between receiving a change and starting SPF in ms
                                	**type**\:  int
                                
                                	**range:** 1..600000
                                
                                .. attribute:: maximum_delay
                                
                                	Maximum wait time between consecutive SPF calculations in ms
                                	**type**\:  int
                                
                                	**range:** 1..600000
                                
                                .. attribute:: minimum_delay
                                
                                	Minimum hold time between consecutive SPF calculations in ms
                                	**type**\:  int
                                
                                	**range:** 1..600000
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2017-07-14'

                                def __init__(self):
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf, self).__init__()

                                    self.yang_name = "spf"
                                    self.yang_parent_name = "throttle"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self._child_container_classes = {}
                                    self._child_list_classes = {}

                                    self.first_delay = YLeaf(YType.uint32, "first-delay")

                                    self.maximum_delay = YLeaf(YType.uint32, "maximum-delay")

                                    self.minimum_delay = YLeaf(YType.uint32, "minimum-delay")
                                    self._segment_path = lambda: "spf"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf, ['first_delay', 'maximum_delay', 'minimum_delay'], name, value)

    def clone_ptr(self):
        self._top_entity = Ospfv3()
        return self._top_entity

