""" Cisco_IOS_XR_ipv4_bgp_act 

This module contains a collection of YANG definitions
for Cisco IOS\-XR action package configuration.

Copyright (c) 2016\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class Afi(Enum):
    """
    Afi (Enum Class)

    .. data:: all = 0

    	Both ipv4 and ipv6 address families

    .. data:: ipv4 = 1

    .. data:: ipv6 = 2

    .. data:: l2vpn = 3

    .. data:: link_state = 4

    .. data:: vpnv4 = 5

    .. data:: vpnv6 = 6

    """

    all = Enum.YLeaf(0, "all")

    ipv4 = Enum.YLeaf(1, "ipv4")

    ipv6 = Enum.YLeaf(2, "ipv6")

    l2vpn = Enum.YLeaf(3, "l2vpn")

    link_state = Enum.YLeaf(4, "link-state")

    vpnv4 = Enum.YLeaf(5, "vpnv4")

    vpnv6 = Enum.YLeaf(6, "vpnv6")


class AfiSafiType(Enum):
    """
    AfiSafiType (Enum Class)

    .. data:: all_all = 0

    	Both unicast and multicast address family modifiers

    	of ipv4 and ipv6 address family

    .. data:: all_evpn = 1

    .. data:: all_flowspec = 2

    .. data:: all_labeled_unicast = 3

    .. data:: all_mdt = 4

    .. data:: all_mspw = 5

    .. data:: all_multicast = 6

    .. data:: all_mvpn = 7

    .. data:: all_rt_filter = 8

    .. data:: all_sr_policy = 9

    .. data:: all_tunnel = 10

    .. data:: all_unicast = 11

    .. data:: all_vpls = 12

    .. data:: all_vpws = 13

    .. data:: ipv4_all = 14

    	Both unicast and multicast address family modifiers

    .. data:: ipv4_flowspec = 15

    .. data:: ipv4_labeled_unicast = 16

    .. data:: ipv4_mdt = 17

    .. data:: ipv4_multicast = 18

    .. data:: ipv4_mvpn = 19

    .. data:: ipv4_rt_filter = 20

    .. data:: ipv4_sr_policy = 21

    .. data:: ipv4_tunnel = 22

    .. data:: ipv4_unicast = 23

    .. data:: ipv6_all = 24

    	Both unicast and multicast address family modifiers

    .. data:: ipv6_flowspec = 25

    .. data:: ipv6_labeled_unicast = 26

    .. data:: ipv6_multicast = 27

    .. data:: ipv6_mvpn = 28

    .. data:: ipv6_sr_policy = 29

    .. data:: ipv6_unicast = 30

    .. data:: l2vpn_evpn = 31

    .. data:: l2vpn_mspw = 32

    .. data:: l2vpn_vpls = 33

    .. data:: l2vpn_vpws = 34

    .. data:: link_state = 35

    .. data:: vpnv4_flowspec = 36

    .. data:: vpnv4_multicast = 37

    .. data:: vpnv4_unicast = 38

    .. data:: vpnv6_flowspec = 39

    .. data:: vpnv6_multicast = 40

    .. data:: vpnv6_unicast = 41

    """

    all_all = Enum.YLeaf(0, "all-all")

    all_evpn = Enum.YLeaf(1, "all-evpn")

    all_flowspec = Enum.YLeaf(2, "all-flowspec")

    all_labeled_unicast = Enum.YLeaf(3, "all-labeled-unicast")

    all_mdt = Enum.YLeaf(4, "all-mdt")

    all_mspw = Enum.YLeaf(5, "all-mspw")

    all_multicast = Enum.YLeaf(6, "all-multicast")

    all_mvpn = Enum.YLeaf(7, "all-mvpn")

    all_rt_filter = Enum.YLeaf(8, "all-rt-filter")

    all_sr_policy = Enum.YLeaf(9, "all-sr-policy")

    all_tunnel = Enum.YLeaf(10, "all-tunnel")

    all_unicast = Enum.YLeaf(11, "all-unicast")

    all_vpls = Enum.YLeaf(12, "all-vpls")

    all_vpws = Enum.YLeaf(13, "all-vpws")

    ipv4_all = Enum.YLeaf(14, "ipv4-all")

    ipv4_flowspec = Enum.YLeaf(15, "ipv4-flowspec")

    ipv4_labeled_unicast = Enum.YLeaf(16, "ipv4-labeled-unicast")

    ipv4_mdt = Enum.YLeaf(17, "ipv4-mdt")

    ipv4_multicast = Enum.YLeaf(18, "ipv4-multicast")

    ipv4_mvpn = Enum.YLeaf(19, "ipv4-mvpn")

    ipv4_rt_filter = Enum.YLeaf(20, "ipv4-rt-filter")

    ipv4_sr_policy = Enum.YLeaf(21, "ipv4-sr-policy")

    ipv4_tunnel = Enum.YLeaf(22, "ipv4-tunnel")

    ipv4_unicast = Enum.YLeaf(23, "ipv4-unicast")

    ipv6_all = Enum.YLeaf(24, "ipv6-all")

    ipv6_flowspec = Enum.YLeaf(25, "ipv6-flowspec")

    ipv6_labeled_unicast = Enum.YLeaf(26, "ipv6-labeled-unicast")

    ipv6_multicast = Enum.YLeaf(27, "ipv6-multicast")

    ipv6_mvpn = Enum.YLeaf(28, "ipv6-mvpn")

    ipv6_sr_policy = Enum.YLeaf(29, "ipv6-sr-policy")

    ipv6_unicast = Enum.YLeaf(30, "ipv6-unicast")

    l2vpn_evpn = Enum.YLeaf(31, "l2vpn-evpn")

    l2vpn_mspw = Enum.YLeaf(32, "l2vpn-mspw")

    l2vpn_vpls = Enum.YLeaf(33, "l2vpn-vpls")

    l2vpn_vpws = Enum.YLeaf(34, "l2vpn-vpws")

    link_state = Enum.YLeaf(35, "link-state")

    vpnv4_flowspec = Enum.YLeaf(36, "vpnv4-flowspec")

    vpnv4_multicast = Enum.YLeaf(37, "vpnv4-multicast")

    vpnv4_unicast = Enum.YLeaf(38, "vpnv4-unicast")

    vpnv6_flowspec = Enum.YLeaf(39, "vpnv6-flowspec")

    vpnv6_multicast = Enum.YLeaf(40, "vpnv6-multicast")

    vpnv6_unicast = Enum.YLeaf(41, "vpnv6-unicast")


class InstanceName(Enum):
    """
    InstanceName (Enum Class)

    .. data:: all = 0

    """

    all = Enum.YLeaf(0, "all")


class Ipv4Safi(Enum):
    """
    Ipv4Safi (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: mdt = 3

    .. data:: multicast = 4

    .. data:: mvpn = 5

    .. data:: rt_filter = 6

    .. data:: sr_policy = 7

    .. data:: tunnel = 8

    .. data:: unicast = 9

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    mdt = Enum.YLeaf(3, "mdt")

    multicast = Enum.YLeaf(4, "multicast")

    mvpn = Enum.YLeaf(5, "mvpn")

    rt_filter = Enum.YLeaf(6, "rt-filter")

    sr_policy = Enum.YLeaf(7, "sr-policy")

    tunnel = Enum.YLeaf(8, "tunnel")

    unicast = Enum.YLeaf(9, "unicast")


class Ipv4Safi_(Enum):
    """
    Ipv4Safi\_ (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: mdt = 3

    .. data:: multicast = 4

    .. data:: mvpn = 5

    .. data:: rt_filter = 6

    .. data:: sr_policy = 7

    .. data:: tunnel = 8

    .. data:: unicast = 9

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    mdt = Enum.YLeaf(3, "mdt")

    multicast = Enum.YLeaf(4, "multicast")

    mvpn = Enum.YLeaf(5, "mvpn")

    rt_filter = Enum.YLeaf(6, "rt-filter")

    sr_policy = Enum.YLeaf(7, "sr-policy")

    tunnel = Enum.YLeaf(8, "tunnel")

    unicast = Enum.YLeaf(9, "unicast")


class Ipv6Safi(Enum):
    """
    Ipv6Safi (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: multicast = 3

    .. data:: mvpn = 4

    .. data:: sr_policy = 5

    .. data:: unicast = 6

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    multicast = Enum.YLeaf(3, "multicast")

    mvpn = Enum.YLeaf(4, "mvpn")

    sr_policy = Enum.YLeaf(5, "sr-policy")

    unicast = Enum.YLeaf(6, "unicast")


class Ipv6Safi_(Enum):
    """
    Ipv6Safi\_ (Enum Class)

    .. data:: all = 0

    	Both unicast and multicast address family modifiers

    .. data:: flowspec = 1

    .. data:: labeled_unicast = 2

    .. data:: multicast = 3

    .. data:: mvpn = 4

    .. data:: sr_policy = 5

    .. data:: unicast = 6

    """

    all = Enum.YLeaf(0, "all")

    flowspec = Enum.YLeaf(1, "flowspec")

    labeled_unicast = Enum.YLeaf(2, "labeled-unicast")

    multicast = Enum.YLeaf(3, "multicast")

    mvpn = Enum.YLeaf(4, "mvpn")

    sr_policy = Enum.YLeaf(5, "sr-policy")

    unicast = Enum.YLeaf(6, "unicast")


class L2VpnSafi(Enum):
    """
    L2VpnSafi (Enum Class)

    .. data:: evpn = 0

    .. data:: mspw = 1

    .. data:: vpls = 2

    .. data:: vpws = 3

    """

    evpn = Enum.YLeaf(0, "evpn")

    mspw = Enum.YLeaf(1, "mspw")

    vpls = Enum.YLeaf(2, "vpls")

    vpws = Enum.YLeaf(3, "vpws")


class L2VpnSafi_(Enum):
    """
    L2VpnSafi\_ (Enum Class)

    .. data:: evpn = 0

    .. data:: mspw = 1

    .. data:: vpls = 2

    .. data:: vpws = 3

    """

    evpn = Enum.YLeaf(0, "evpn")

    mspw = Enum.YLeaf(1, "mspw")

    vpls = Enum.YLeaf(2, "vpls")

    vpws = Enum.YLeaf(3, "vpws")


class LinkStateSafi(Enum):
    """
    LinkStateSafi (Enum Class)

    .. data:: link_state = 0

    """

    link_state = Enum.YLeaf(0, "link-state")


class LinkStateSafi_(Enum):
    """
    LinkStateSafi\_ (Enum Class)

    .. data:: link_state = 0

    """

    link_state = Enum.YLeaf(0, "link-state")


class Vpnv4Safi(Enum):
    """
    Vpnv4Safi (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


class Vpnv4Safi_(Enum):
    """
    Vpnv4Safi\_ (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


class Vpnv6Safi(Enum):
    """
    Vpnv6Safi (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


class Vpnv6Safi_(Enum):
    """
    Vpnv6Safi\_ (Enum Class)

    .. data:: flowspec = 0

    .. data:: multicast = 1

    .. data:: unicast = 2

    """

    flowspec = Enum.YLeaf(0, "flowspec")

    multicast = Enum.YLeaf(1, "multicast")

    unicast = Enum.YLeaf(2, "unicast")


class VrfName(Enum):
    """
    VrfName (Enum Class)

    .. data:: all = 0

    """

    all = Enum.YLeaf(0, "all")



class ClearBgpAllGraceful(Entity):
    """
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all-graceful"

    def clone_ptr(self):
        self._top_entity = ClearBgpAllGraceful()
        return self._top_entity

class ClearBgpAll(Entity):
    """
    Clear all peers and all routes from the BGP table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all"

    def clone_ptr(self):
        self._top_entity = ClearBgpAll()
        return self._top_entity

class ClearBgpIpAddrGraceful(Entity):
    """
    BGP neighbor address to clear.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpIpAddrGraceful.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpIpAddrGraceful()
        return self._top_entity

class ClearBgpIpAddrLongLivedStale(Entity):
    """
    BGP neighbor address to clear.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpIpAddrLongLivedStale.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpIpAddr(Entity):
    """
    BGP neighbor address to clear.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpIpAddr.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpIpAddr()
        return self._top_entity

class ClearBgpAfiSafiAllSoftInPrefixFilter(Entity):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoftInPrefixFilter.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

class ClearBgpAfiSafiAllSoftIn(Entity):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoftIn.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoftIn()
        return self._top_entity

class ClearBgpAfiSafiAllSoftOut(Entity):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoftOut.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoftOut()
        return self._top_entity

class ClearBgpAfiSafiAllSoft(Entity):
    """
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAllSoft.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAllSoft()
        return self._top_entity

class ClearBgpAfiSafiIpAddrLongLivedStale(Entity):
    """
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrLongLivedStale.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpAfiSafiIpAddrSoftInPrefixFilter(Entity):
    """
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoftInPrefixFilter.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

class ClearBgpAfiSafiIpAddrSoftIn(Entity):
    """
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoftIn.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoftIn()
        return self._top_entity

class ClearBgpAfiSafiIpAddrSoftOut(Entity):
    """
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoftOut.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoftOut()
        return self._top_entity

class ClearBgpAfiSafiIpAddrSoft(Entity):
    """
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiIpAddrSoft.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiIpAddrSoft()
        return self._top_entity

class ClearBgpAfiSafiAsSoftInPrefixFilter(Entity):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoftInPrefixFilter.Input, ['afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

class ClearBgpAfiSafiAsSoftIn(Entity):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoftIn.Input, ['afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoftIn()
        return self._top_entity

class ClearBgpAfiSafiAsSoftOut(Entity):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoftOut.Input, ['afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoftOut()
        return self._top_entity

class ClearBgpAfiSafiAsSoft(Entity):
    """
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiAsSoft.Input, ['afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiAsSoft()
        return self._top_entity

class ClearBgpAfiSafiDampeningIpPrefix(Entity):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiDampeningIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampeningIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear dampening information
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiDampeningIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampeningIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampeningIpPrefix()
        return self._top_entity

class ClearBgpAfiSafiDampening(Entity):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampening.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampening()
        return self._top_entity

class ClearBgpAfiSafiExternalSoftInPrefixFilter(Entity):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoftInPrefixFilter.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

class ClearBgpAfiSafiExternalSoftIn(Entity):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoftIn.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoftIn()
        return self._top_entity

class ClearBgpAfiSafiExternalSoftOut(Entity):
    """
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoftOut.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoftOut()
        return self._top_entity

class ClearBgpAfiSafiExternalSoft(Entity):
    """
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiExternalSoft.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiExternalSoft()
        return self._top_entity

class ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask(Entity):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

class ClearBgpAfiSafiFlapStatisticsIpAddr(Entity):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

class ClearBgpAfiSafiFlapStatisticsIpPrefix(Entity):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatisticsIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatisticsIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpPrefix()
        return self._top_entity

class ClearBgpAfiSafiFlapStatisticsRegexp(Entity):
    """
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('regexp_pattern', YLeaf(YType.str, 'regexp-pattern')),
            ])
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsRegexp.Input, ['afi_safi_name', 'regexp_pattern'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsRegexp()
        return self._top_entity

class ClearBgpAfiSafiFlapStatisticsRoutePolicy(Entity):
    """
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
            ])
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsRoutePolicy.Input, ['afi_safi_name', 'route_policy_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

class ClearBgpAfiSafiFlapStatistics(Entity):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatistics.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatistics()
        return self._top_entity

class ClearBgpAfiSafiNexthopPerformanceStatistics(Entity):
    """
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiNexthopPerformanceStatistics.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpAfiSafiNexthopRegistrationIpAddr(Entity):
    """
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiNexthopRegistrationIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpAfiSafiSelfOriginated(Entity):
    """
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiSelfOriginated.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiSelfOriginated()
        return self._top_entity

class ClearBgpAfiSafiShutdown(Entity):
    """
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiShutdown.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiShutdown()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqAddressFamily(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqAddressFamily.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqNeighborIpAddr(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqNeighborIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpAfiSafiUpdateOutqUpdateGroup(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiUpdateOutqUpdateGroup.Input, ['afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

class ClearBgpAsGraceful(Entity):
    """
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAsGraceful.Input, ['as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAsGraceful()
        return self._top_entity

class ClearBgpAs(Entity):
    """
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as"


    class Input(Entity):
        """
        
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAs.Input, ['as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAs()
        return self._top_entity

class ClearBgpBestpathIpAddrIpNetmask(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathIpAddrIpNetmask.Input, ['ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathIpAddrIpNetmask()
        return self._top_entity

class ClearBgpBestpathIpAddr(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathIpAddr.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathIpAddr()
        return self._top_entity

class ClearBgpBestpathIpPrefix(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathIpPrefix.Input, ['ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathIpPrefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpAddrIpNetmask(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpAddrIpNetmask.Input, ['afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpAddrIpNetmask()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpAddr(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpAddr()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpPrefix(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpPrefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

class ClearBgpBestpathAfiSafiBridgeDomainIpAddr(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpAddr.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpAddr()
        return self._top_entity

class ClearBgpBestpathAfiSafiBridgeDomainIpPrefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpAddrIpNetmask(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input, ['afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpAddr(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpAddr.Input, ['afi_safi_name', 'rd', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpAddr()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpPrefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpPrefix.Input, ['afi_safi_name', 'rd', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpPrefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpv4Addr(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4Addr.Input, ['afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpv4Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpv4Addr(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv4Addr.Input, ['afi_safi_name', 'rd', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv4Addr()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrfIpv4Addr(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv4Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv4Addr()
        return self._top_entity

class ClearBgpBestpathAfiSafiNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiNetwork.Input, ['afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiNetwork()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdNetwork.Input, ['afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrfNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfNetwork.Input, ['afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpBestpathAfiSafiRtConstraintNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rt_constraint_network', YLeaf(YType.str, 'rt-constraint-network')),
            ])
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRtConstraintNetwork.Input, ['afi_safi_name', 'rt_constraint_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRtConstraintNetwork()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpv4TunnelNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_tunnel_network', YLeaf(YType.str, 'ipv4-tunnel-network')),
            ])
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv4TunnelNetwork.Input, ['afi_safi_name', 'ipv4_tunnel_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv4TunnelNetwork()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpv6Addr(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv6Addr.Input, ['afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpBestpathAfiSafiIpv6Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiRd(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRd.Input, ['afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRd()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrf(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrf.Input, ['afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrf()
        return self._top_entity

class ClearBgpBestpathAfiSafi(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafi.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafi()
        return self._top_entity

class ClearBgpBestpathAfiSafiSrPolicyPrefix(Entity):
    """
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('sr_policy_prefix', YLeaf(YType.str, 'sr-policy-prefix')),
            ])
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiSrPolicyPrefix.Input, ['afi_safi_name', 'sr_policy_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiSrPolicyPrefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpv4Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv4Prefix.Input, ['afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv4Prefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiMp2MpIpv4Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiMp2MpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiMp2MpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiMp2MpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiMp2MpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('mp2mp', YLeaf(YType.str, 'mp2mp')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiMp2MpIpv4Prefix.Input, ['afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiMp2MpIpv4Prefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrfIpv4Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv4Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv4Prefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpv6Addr(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv6Addr.Input, ['afi_safi_name', 'rd', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv6Addr()
        return self._top_entity

class ClearBgpBestpathAfiSafiRdIpv6Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiRdIpv6Prefix.Input, ['afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiRdIpv6Prefix()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrfIpv6Addr(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv6Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv6Addr()
        return self._top_entity

class ClearBgpBestpathAfiSafiVrfIpv6Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathAfiSafiVrfIpv6Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathAfiSafiVrfIpv6Prefix()
        return self._top_entity

class ClearBgpBestpathVrfIpAddrIpNetmask(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfIpAddrIpNetmask.Input, ['vrf_all', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfIpAddrIpNetmask()
        return self._top_entity

class ClearBgpBestpathVrfIpAddr(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfIpAddr()
        return self._top_entity

class ClearBgpBestpathVrfIpPrefix(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfIpPrefix.Input, ['vrf_all', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfIpPrefix()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiIpv4Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiIpv4Addr(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv4Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiNetwork.Input, ['vrf_all', 'afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiNetwork()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiRdNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiRdNetwork.Input, ['vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiVrfNetwork(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiVrfNetwork.Input, ['vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiIpv6Addr(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv6Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiIpv6Prefix(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiRd(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiRd.Input, ['vrf_all', 'afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiRd()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafiVrf(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafiVrf.Input, ['vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafiVrf()
        return self._top_entity

class ClearBgpBestpathVrfAfiSafi(Entity):
    """
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpBestpathVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpBestpathVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-bestpath-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpBestpathVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpBestpathVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-bestpath-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpBestpathVrfAfiSafi.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpBestpathVrfAfiSafi()
        return self._top_entity

class ClearBgpExternalGraceful(Entity):
    """
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external-graceful"

    def clone_ptr(self):
        self._top_entity = ClearBgpExternalGraceful()
        return self._top_entity

class ClearBgpExternal(Entity):
    """
    Clear all external peers.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external"

    def clone_ptr(self):
        self._top_entity = ClearBgpExternal()
        return self._top_entity

class ClearBgpInstanceAllGraceful(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAllGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAllGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAllGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-all-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAllGraceful.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAllGraceful()
        return self._top_entity

class ClearBgpInstanceAll(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAll.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAll()
        return self._top_entity

class ClearBgpInstanceIpAddrGraceful(Entity):
    """
    Choose a particular BGP instance.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceIpAddrGraceful.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceIpAddrGraceful()
        return self._top_entity

class ClearBgpInstanceIpAddrLongLivedStale(Entity):
    """
    Choose a particular BGP instance.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceIpAddrLongLivedStale.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpInstanceIpAddr(Entity):
    """
    Choose a particular BGP instance.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceIpAddr()
        return self._top_entity

class ClearBgpInstanceAfiSafiAllSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceAfiSafiAllSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoftIn.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoftIn()
        return self._top_entity

class ClearBgpInstanceAfiSafiAllSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoftOut.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoftOut()
        return self._top_entity

class ClearBgpInstanceAfiSafiAllSoft(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAllSoft.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAllSoft()
        return self._top_entity

class ClearBgpInstanceAfiSafiIpAddrLongLivedStale(Entity):
    """
    Choose a particular BGP instance.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrLongLivedStale.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceAfiSafiIpAddrSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoftIn.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoftIn()
        return self._top_entity

class ClearBgpInstanceAfiSafiIpAddrSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoftOut.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoftOut()
        return self._top_entity

class ClearBgpInstanceAfiSafiIpAddrSoft(Entity):
    """
    Choose a particular BGP instance.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiIpAddrSoft.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiIpAddrSoft()
        return self._top_entity

class ClearBgpInstanceAfiSafiAsSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceAfiSafiAsSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoftIn.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoftIn()
        return self._top_entity

class ClearBgpInstanceAfiSafiAsSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoftOut.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoftOut()
        return self._top_entity

class ClearBgpInstanceAfiSafiAsSoft(Entity):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiAsSoft.Input, ['instance_name', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiAsSoft()
        return self._top_entity

class ClearBgpInstanceAfiSafiDampeningIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiDampeningIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampeningIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear dampening information
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiDampeningIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampeningIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampeningIpPrefix()
        return self._top_entity

class ClearBgpInstanceAfiSafiDampening(Entity):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampening.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampening()
        return self._top_entity

class ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceAfiSafiExternalSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoftIn.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoftIn()
        return self._top_entity

class ClearBgpInstanceAfiSafiExternalSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoftOut.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoftOut()
        return self._top_entity

class ClearBgpInstanceAfiSafiExternalSoft(Entity):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiExternalSoft.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiExternalSoft()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatisticsIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and mask or masklength to clear flap statistics
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatisticsRegexp(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('regexp_pattern', YLeaf(YType.str, 'regexp-pattern')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsRegexp.Input, ['instance_name', 'afi_safi_name', 'regexp_pattern'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsRegexp()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input, ['instance_name', 'afi_safi_name', 'route_policy_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatistics(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatistics.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatistics()
        return self._top_entity

class ClearBgpInstanceAfiSafiNexthopPerformanceStatistics(Entity):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpInstanceAfiSafiSelfOriginated(Entity):
    """
    Choose a particular BGP instance.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiSelfOriginated.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiSelfOriginated()
        return self._top_entity

class ClearBgpInstanceAfiSafiShutdown(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiShutdown.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiShutdown()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqAddressFamily(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input, ['instance_name', 'afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

class ClearBgpInstanceAsGraceful(Entity):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAsGraceful.Input, ['instance_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAsGraceful()
        return self._top_entity

class ClearBgpInstanceAs(Entity):
    """
    Choose a particular BGP instance.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAs.Input, ['instance_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAs()
        return self._top_entity

class ClearBgpInstanceBestpathIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathIpAddrIpNetmask.Input, ['instance_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceBestpathIpAddr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathIpAddr()
        return self._top_entity

class ClearBgpInstanceBestpathIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathIpPrefix.Input, ['instance_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathIpPrefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpAddr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpAddr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpPrefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpAddr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpAddr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpAddr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpPrefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpPrefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv4Addr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiNetwork.Input, ['instance_name', 'afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdNetwork.Input, ['instance_name', 'afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrfNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfNetwork.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rt_constraint_network', YLeaf(YType.str, 'rt-constraint-network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input, ['instance_name', 'afi_safi_name', 'rt_constraint_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_tunnel_network', YLeaf(YType.str, 'ipv4-tunnel-network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input, ['instance_name', 'afi_safi_name', 'ipv4_tunnel_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRd(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRd.Input, ['instance_name', 'afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRd()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrf(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrf.Input, ['instance_name', 'afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrf()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafi(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafi.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafi()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('sr_policy_prefix', YLeaf(YType.str, 'sr-policy-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input, ['instance_name', 'afi_safi_name', 'sr_policy_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('mp2mp', YLeaf(YType.str, 'mp2mp')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv6Addr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr()
        return self._top_entity

class ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathVrfIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfIpAddrIpNetmask.Input, ['instance_name', 'vrf_all', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceBestpathVrfIpAddr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfIpAddr()
        return self._top_entity

class ClearBgpInstanceBestpathVrfIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfIpPrefix.Input, ['instance_name', 'vrf_all', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfIpPrefix()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiRdNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiRd(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiRd.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiRd()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafiVrf(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafiVrf.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafiVrf()
        return self._top_entity

class ClearBgpInstanceBestpathVrfAfiSafi(Entity):
    """
    Choose a particular BGP instance.
    re\-run BGP bestpath selection.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceBestpathVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceBestpathVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-bestpath-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceBestpathVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceBestpathVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-bestpath-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceBestpathVrfAfiSafi.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceBestpathVrfAfiSafi()
        return self._top_entity

class ClearBgpInstanceExternalGraceful(Entity):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceExternalGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceExternalGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceExternalGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-external-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceExternalGraceful.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceExternalGraceful()
        return self._top_entity

class ClearBgpInstanceExternal(Entity):
    """
    Choose a particular BGP instance.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceExternal.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceExternal.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceExternal.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-external"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceExternal.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceExternal()
        return self._top_entity

class ClearBgpInstanceAfiSafiDampeningIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampeningIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampeningIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceAfiSafiDampeningIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiDampeningIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiDampeningIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceNexthopPerformanceStatistics(Entity):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceNexthopPerformanceStatistics.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpInstanceNexthopRegistrationIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceNexthopRegistrationIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpInstancePeerDropsAll(Entity):
    """
    Choose a particular BGP instance.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePeerDropsAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstancePeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstancePeerDropsAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstancePeerDropsAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-peer-drops-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstancePeerDropsAll.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstancePeerDropsAll()
        return self._top_entity

class ClearBgpInstancePeerDropsIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstancePeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstancePeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstancePeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstancePeerDropsIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstancePeerDropsIpAddr()
        return self._top_entity

class ClearBgpInstancePerformanceStatistics(Entity):
    """
    Choose a particular BGP instance.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstancePerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstancePerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstancePerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstancePerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstancePerformanceStatistics.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstancePerformanceStatistics()
        return self._top_entity

class ClearBgpInstanceRpkiServerAllSerialQuery(Entity):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    send serial\-queries to all cache\-servers (with latest serial numbers).
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerAllSerialQuery.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceRpkiServerAllSerialQuery, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-server-all-serial-query"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiServerAllSerialQuery.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceRpkiServerAllSerialQuery.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-server-all-serial-query"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiServerAllSerialQuery.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiServerAllSerialQuery()
        return self._top_entity

class ClearBgpInstanceRpkiServerAll(Entity):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceRpkiServerAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-server-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiServerAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceRpkiServerAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-server-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiServerAll.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiServerAll()
        return self._top_entity

class ClearBgpInstanceRpkiServerRpkiServer(Entity):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI cache\-server.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiServerRpkiServer.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceRpkiServerRpkiServer, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-server-rpki-server"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiServerRpkiServer.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: rpki_server
        
        	clear a specific RPKI cache\-server (hostname or IP address)
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceRpkiServerRpkiServer.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-server-rpki-server"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('rpki_server', YLeaf(YType.str, 'rpki-server')),
            ])
            self.instance_name = None
            self.rpki_server = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiServerRpkiServer.Input, ['instance_name', 'rpki_server'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiServerRpkiServer()
        return self._top_entity

class ClearBgpInstanceRpkiValidationIpv4(Entity):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidationIpv4.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceRpkiValidationIpv4, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-validation-ipv4"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiValidationIpv4.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceRpkiValidationIpv4.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-validation-ipv4"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiValidationIpv4.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiValidationIpv4()
        return self._top_entity

class ClearBgpInstanceRpkiValidationIpv6(Entity):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidationIpv6.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceRpkiValidationIpv6, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-validation-ipv6"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiValidationIpv6.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceRpkiValidationIpv6.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-validation-ipv6"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiValidationIpv6.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiValidationIpv6()
        return self._top_entity

class ClearBgpInstanceRpkiValidation(Entity):
    """
    Choose a particular BGP instance.
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceRpkiValidation.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceRpkiValidation, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-rpki-validation"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceRpkiValidation.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceRpkiValidation.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-rpki-validation"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceRpkiValidation.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceRpkiValidation()
        return self._top_entity

class ClearBgpInstanceShutdown(Entity):
    """
    Choose a particular BGP instance.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceShutdown.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceShutdown()
        return self._top_entity

class ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpInstanceUpdateOutqAddressFamily(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqAddressFamily.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpInstanceUpdateOutqNeighborIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqNeighborIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpInstanceUpdateOutqProcess(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Process.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqProcess.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqProcess, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-process"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqProcess.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqProcess.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-process"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
            ])
            self.instance_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqProcess.Input, ['instance_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqProcess()
        return self._top_entity

class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceUpdateOutqUpdateGroup(Entity):
    """
    Choose a particular BGP instance.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceUpdateOutqUpdateGroup.Input, ['instance_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceUpdateOutqUpdateGroup()
        return self._top_entity

class ClearBgpInstanceVersionIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionIpAddrIpNetmask.Input, ['instance_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceVersionIpAddr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionIpAddr.Input, ['instance_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionIpAddr()
        return self._top_entity

class ClearBgpInstanceVersionIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionIpPrefix.Input, ['instance_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionIpPrefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpAddr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpAddr.Input, ['instance_name', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpAddr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpPrefix.Input, ['instance_name', 'afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpPrefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpAddr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpAddr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpAddr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpPrefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpPrefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv4Addr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrfIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv4Addr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiNetwork.Input, ['instance_name', 'afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiNetwork()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdNetwork.Input, ['instance_name', 'afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrfNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfNetwork.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRtConstraintNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rt_constraint_network', YLeaf(YType.str, 'rt-constraint-network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input, ['instance_name', 'afi_safi_name', 'rt_constraint_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRtConstraintNetwork()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_tunnel_network', YLeaf(YType.str, 'ipv4-tunnel-network')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input, ['instance_name', 'afi_safi_name', 'ipv4_tunnel_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRd(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRd.Input, ['instance_name', 'afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRd()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrf(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrf.Input, ['instance_name', 'afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrf()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafi(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafi.Input, ['instance_name', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafi()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiSrPolicyPrefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('sr_policy_prefix', YLeaf(YType.str, 'sr-policy-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input, ['instance_name', 'afi_safi_name', 'sr_policy_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiSrPolicyPrefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('mp2mp', YLeaf(YType.str, 'mp2mp')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv6Addr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiRdIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiRdIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrfIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv6Addr()
        return self._top_entity

class ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input, ['instance_name', 'afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceVersionVrfIpAddrIpNetmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfIpAddrIpNetmask.Input, ['instance_name', 'vrf_all', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfIpAddrIpNetmask()
        return self._top_entity

class ClearBgpInstanceVersionVrfIpAddr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfIpAddr()
        return self._top_entity

class ClearBgpInstanceVersionVrfIpPrefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfIpPrefix.Input, ['instance_name', 'vrf_all', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfIpPrefix()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiIpv4Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiNetwork()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiRdNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiRdNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiVrfNetwork(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiIpv6Addr(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiRd(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiRd.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiRd()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafiVrf(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafiVrf.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafiVrf()
        return self._top_entity

class ClearBgpInstanceVersionVrfAfiSafi(Entity):
    """
    Choose a particular BGP instance.
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVersionVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVersionVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-version-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVersionVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVersionVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-version-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVersionVrfAfiSafi.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVersionVrfAfiSafi()
        return self._top_entity

class ClearBgpInstanceVrfAllGraceful(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAllGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAllGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAllGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-all-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAllGraceful.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAllGraceful()
        return self._top_entity

class ClearBgpInstanceVrfAll(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAll.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAll()
        return self._top_entity

class ClearBgpInstanceVrfIpAddrGraceful(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfIpAddrGraceful.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfIpAddrGraceful()
        return self._top_entity

class ClearBgpInstanceVrfIpAddrLongLivedStale(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfIpAddrLongLivedStale.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpInstanceVrfIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfIpAddr()
        return self._top_entity

class ClearBgpInstanceVrfAsGraceful(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAsGraceful.Input, ['instance_name', 'vrf_all', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAsGraceful()
        return self._top_entity

class ClearBgpInstanceVrfAs(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAs.Input, ['instance_name', 'vrf_all', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAs()
        return self._top_entity

class ClearBgpInstanceVrfExternalGraceful(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfExternalGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfExternalGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfExternalGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-external-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfExternalGraceful.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfExternalGraceful()
        return self._top_entity

class ClearBgpInstanceVrfExternal(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfExternal.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfExternal.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfExternal.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-external"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfExternal.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfExternal()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAllSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoftIn()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAllSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoftOut()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAllSoft(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAllSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAllSoft()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiIpAddrSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoftIn()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiIpAddrSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoftOut()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiIpAddrSoft(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiIpAddrSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiIpAddrSoft()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAsSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoftIn()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAsSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoftOut()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiAsSoft(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiAsSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiAsSoft()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiDampening(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiDampening.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiDampening()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiExternalSoftIn(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoftIn.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoftIn()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiExternalSoftOut(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoftOut.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoftOut()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiExternalSoft(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiExternalSoft.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiExternalSoft()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('regexp_pattern', YLeaf(YType.str, 'regexp-pattern')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'regexp_pattern'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'route_policy_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiFlapStatistics(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatistics.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatistics()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiSelfOriginated(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiSelfOriginated.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiSelfOriginated()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiShutdown(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiShutdown.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiShutdown()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input, ['instance_name', 'vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input, ['instance_name', 'vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

class ClearBgpInstanceVrfNexthopPerformanceStatistics(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfNexthopPerformanceStatistics.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpInstanceVrfNexthopRegistrationIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfNexthopRegistrationIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpInstanceVrfPeerDropsAll(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPeerDropsAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfPeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfPeerDropsAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfPeerDropsAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-peer-drops-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfPeerDropsAll.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfPeerDropsAll()
        return self._top_entity

class ClearBgpInstanceVrfPeerDropsIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfPeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfPeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfPeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfPeerDropsIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfPeerDropsIpAddr()
        return self._top_entity

class ClearBgpInstanceVrfPerformanceStatistics(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfPerformanceStatistics.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfPerformanceStatistics()
        return self._top_entity

class ClearBgpInstanceVrfShutdown(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfShutdown.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfShutdown()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqAddressFamily(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqAddressFamily.Input, ['instance_name', 'vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqNeighborIpAddr(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input, ['instance_name', 'vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input, ['instance_name', 'vrf_all', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['instance_name', 'vrf_all', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input, ['instance_name', 'vrf_all', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpInstanceVrfUpdateOutqUpdateGroup(Entity):
    """
    Choose a particular BGP instance.
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpInstanceVrfUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-instance-vrf-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: instance_name
        
        	instance name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.InstanceName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-instance-vrf-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('instance_name', YLeaf(YType.str, 'instance-name')),
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.instance_name = None
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpInstanceVrfUpdateOutqUpdateGroup.Input, ['instance_name', 'vrf_all', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpInstanceVrfUpdateOutqUpdateGroup()
        return self._top_entity

class ClearBgpAfiSafiDampeningIpv4Prefix(Entity):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampeningIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampeningIpv4Prefix()
        return self._top_entity

class ClearBgpAfiSafiFlapStatisticsIpv4Prefix(Entity):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

class ClearBgpAfiSafiDampeningIpv6Prefix(Entity):
    """
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiDampeningIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiDampeningIpv6Prefix()
        return self._top_entity

class ClearBgpAfiSafiFlapStatisticsIpv6Prefix(Entity):
    """
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpAfiSafiFlapStatisticsIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

class ClearBgpNexthopPerformanceStatistics(Entity):
    """
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-performance-statistics"

    def clone_ptr(self):
        self._top_entity = ClearBgpNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpNexthopRegistrationIpAddr(Entity):
    """
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpNexthopRegistrationIpAddr.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpPeerDropsAll(Entity):
    """
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpPeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-all"

    def clone_ptr(self):
        self._top_entity = ClearBgpPeerDropsAll()
        return self._top_entity

class ClearBgpPeerDropsIpAddr(Entity):
    """
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpPeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpPeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpPeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpPeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpPeerDropsIpAddr.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpPeerDropsIpAddr()
        return self._top_entity

class ClearBgpPerformanceStatistics(Entity):
    """
    Clear performance statistics.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-performance-statistics"

    def clone_ptr(self):
        self._top_entity = ClearBgpPerformanceStatistics()
        return self._top_entity

class ClearBgpRpkiServerAllSerialQuery(Entity):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    send serial\-queries to all cache\-servers (with latest serial numbers).
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpRpkiServerAllSerialQuery, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-server-all-serial-query"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all-serial-query"

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiServerAllSerialQuery()
        return self._top_entity

class ClearBgpRpkiServerAll(Entity):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    clear all RPKI cache\-servers.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpRpkiServerAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-server-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all"

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiServerAll()
        return self._top_entity

class ClearBgpRpkiServerRpkiServer(Entity):
    """
    RPKI clear command.
    clear RPKI cache\-server.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpRpkiServerRpkiServer.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpRpkiServerRpkiServer, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-server-rpki-server"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpRpkiServerRpkiServer.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server"


    class Input(Entity):
        """
        
        
        .. attribute:: rpki_server
        
        	clear a specific RPKI cache\-server (hostname or IP address)
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpRpkiServerRpkiServer.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-rpki-server-rpki-server"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('rpki_server', YLeaf(YType.str, 'rpki-server')),
            ])
            self.rpki_server = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpRpkiServerRpkiServer.Input, ['rpki_server'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiServerRpkiServer()
        return self._top_entity

class ClearBgpRpkiValidationIpv4(Entity):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv4 table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpRpkiValidationIpv4, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-validation-ipv4"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv4"

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiValidationIpv4()
        return self._top_entity

class ClearBgpRpkiValidationIpv6(Entity):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    trigger origin validation walk for the IPv6 table.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpRpkiValidationIpv6, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-validation-ipv6"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv6"

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiValidationIpv6()
        return self._top_entity

class ClearBgpRpkiValidation(Entity):
    """
    RPKI clear command.
    clear RPKI origin\-validation (trigger origin validation).
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpRpkiValidation, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-rpki-validation"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation"

    def clone_ptr(self):
        self._top_entity = ClearBgpRpkiValidation()
        return self._top_entity

class ClearBgpShutdown(Entity):
    """
    Clear all peers which were shut down due to low memory.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-shutdown"

    def clone_ptr(self):
        self._top_entity = ClearBgpShutdown()
        return self._top_entity

class ClearBgpUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family-update-parent"

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpUpdateOutqAddressFamily(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family"

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddrRefresh.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddrUpdateParent.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpUpdateOutqNeighborIpAddr(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqNeighborIpAddr.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpUpdateOutqProcess(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Process.
    
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqProcess, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-process"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-process"

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqProcess()
        return self._top_entity

class ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroup.Input, ['update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroupUpdateParent.Input, ['update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpUpdateOutqUpdateGroup(Entity):
    """
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpUpdateOutqUpdateGroup.Input, ['update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpUpdateOutqUpdateGroup()
        return self._top_entity

class ClearBgpVersionIpAddrIpNetmask(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionIpAddrIpNetmask.Input, ['ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionIpAddrIpNetmask()
        return self._top_entity

class ClearBgpVersionIpAddr(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionIpAddr.Input, ['ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionIpAddr()
        return self._top_entity

class ClearBgpVersionIpPrefix(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionIpPrefix.Input, ['ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionIpPrefix()
        return self._top_entity

class ClearBgpVersionAfiSafiIpAddrIpNetmask(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpAddrIpNetmask.Input, ['afi_safi_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpAddrIpNetmask()
        return self._top_entity

class ClearBgpVersionAfiSafiIpAddr(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpAddr.Input, ['afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpAddr()
        return self._top_entity

class ClearBgpVersionAfiSafiIpPrefix(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpPrefix.Input, ['afi_safi_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpPrefix()
        return self._top_entity

class ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask()
        return self._top_entity

class ClearBgpVersionAfiSafiBridgeDomainIpAddr(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiBridgeDomainIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpAddr.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpAddr()
        return self._top_entity

class ClearBgpVersionAfiSafiBridgeDomainIpPrefix(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiBridgeDomainIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpPrefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpPrefix()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpAddrIpNetmask(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpAddrIpNetmask.Input, ['afi_safi_name', 'rd', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpAddrIpNetmask()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpAddr(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpAddr.Input, ['afi_safi_name', 'rd', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpAddr()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpPrefix(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpPrefix.Input, ['afi_safi_name', 'rd', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpPrefix()
        return self._top_entity

class ClearBgpVersionAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpVersionAfiSafiIpv4Addr(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4Addr.Input, ['afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpVersionAfiSafiIpv4Prefix(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 network and masklength
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4Prefix.Input, ['afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpv4Addr(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv4Addr.Input, ['afi_safi_name', 'rd', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv4Addr()
        return self._top_entity

class ClearBgpVersionAfiSafiVrfIpv4Addr(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrfIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 MDT network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrfIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv4Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv4Addr()
        return self._top_entity

class ClearBgpVersionAfiSafiNetwork(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiNetwork.Input, ['afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiNetwork()
        return self._top_entity

class ClearBgpVersionAfiSafiRdNetwork(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdNetwork.Input, ['afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpVersionAfiSafiVrfNetwork(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfNetwork.Input, ['afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpVersionAfiSafiRtConstraintNetwork(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRtConstraintNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRtConstraintNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rt-constraint-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRtConstraintNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rt_constraint_network
        
        	RT\-Constraint network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRtConstraintNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rt-constraint-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rt_constraint_network', YLeaf(YType.str, 'rt-constraint-network')),
            ])
            self.afi_safi_name = None
            self.rt_constraint_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRtConstraintNetwork.Input, ['afi_safi_name', 'rt_constraint_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRtConstraintNetwork()
        return self._top_entity

class ClearBgpVersionAfiSafiIpv4TunnelNetwork(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpv4TunnelNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv4-tunnel-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_tunnel_network
        
        	IPv4 Tunnel network <Tunnel\-ID>\:<IPv4 Address>
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv4-tunnel-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_tunnel_network', YLeaf(YType.str, 'ipv4-tunnel-network')),
            ])
            self.afi_safi_name = None
            self.ipv4_tunnel_network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv4TunnelNetwork.Input, ['afi_safi_name', 'ipv4_tunnel_network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv4TunnelNetwork()
        return self._top_entity

class ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpVersionAfiSafiIpv6Addr(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv6Addr.Input, ['afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpVersionAfiSafiIpv6Prefix(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiIpv6Prefix.Input, ['afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpVersionAfiSafiRd(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRd.Input, ['afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRd()
        return self._top_entity

class ClearBgpVersionAfiSafiVrf(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrf.Input, ['afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrf()
        return self._top_entity

class ClearBgpVersionAfiSafi(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafi.Input, ['afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafi()
        return self._top_entity

class ClearBgpVersionAfiSafiSrPolicyPrefix(Entity):
    """
    clear BGP prefix version.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiSrPolicyPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiSrPolicyPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-sr-policy-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiSrPolicyPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: sr_policy_prefix
        
        	SR Policy prefix
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiSrPolicyPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-sr-policy-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('sr_policy_prefix', YLeaf(YType.str, 'sr-policy-prefix')),
            ])
            self.afi_safi_name = None
            self.sr_policy_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiSrPolicyPrefix.Input, ['afi_safi_name', 'sr_policy_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiSrPolicyPrefix()
        return self._top_entity

class ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified Bridge Domain.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: bridge_domain_name
        
        	Bridge Domain
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('bridge_domain_name', YLeaf(YType.str, 'bridge-domain-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.bridge_domain_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input, ['afi_safi_name', 'bridge_domain_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpv4Prefix(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN EVPN Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv4Prefix.Input, ['afi_safi_name', 'rd', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv4Prefix()
        return self._top_entity

class ClearBgpVersionAfiSafiMp2MpIpv4Prefix(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified Xconnect group\:MP2MP.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiMp2MpIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiMp2MpIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiMp2MpIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: mp2mp
        
        	Xconnect Group\:mp2mp
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	L2VPN VPWS Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiMp2MpIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('mp2mp', YLeaf(YType.str, 'mp2mp')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.mp2mp = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiMp2MpIpv4Prefix.Input, ['afi_safi_name', 'mp2mp', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiMp2MpIpv4Prefix()
        return self._top_entity

class ClearBgpVersionAfiSafiVrfIpv4Prefix(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrfIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	VPN Fspec Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrfIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv4Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv4Prefix()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'rd', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input, ['afi_safi_name', 'vrf_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'rd', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpv6Addr(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv6Addr.Input, ['afi_safi_name', 'rd', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv6Addr()
        return self._top_entity

class ClearBgpVersionAfiSafiRdIpv6Prefix(Entity):
    """
    clear BGP prefix version.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiRdIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiRdIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-rd-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiRdIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiRdIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-rd-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.rd = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiRdIpv6Prefix.Input, ['afi_safi_name', 'rd', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiRdIpv6Prefix()
        return self._top_entity

class ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpVersionAfiSafiVrfIpv6Addr(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrfIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrfIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv6Addr.Input, ['afi_safi_name', 'vrf_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv6Addr()
        return self._top_entity

class ClearBgpVersionAfiSafiVrfIpv6Prefix(Entity):
    """
    clear BGP prefix version.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionAfiSafiVrfIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionAfiSafiVrfIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-afi-safi-vrf-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionAfiSafiVrfIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionAfiSafiVrfIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-afi-safi-vrf-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.afi_safi_name = None
            self.vrf_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionAfiSafiVrfIpv6Prefix.Input, ['afi_safi_name', 'vrf_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionAfiSafiVrfIpv6Prefix()
        return self._top_entity

class ClearBgpVersionVrfIpAddrIpNetmask(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpAddrIpNetmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfIpAddrIpNetmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-ip-addr-ip-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfIpAddrIpNetmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ip_netmask
        
        	Mask
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfIpAddrIpNetmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-ip-addr-ip-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ip_netmask', YLeaf(YType.str, 'ip-netmask')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self.ip_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfIpAddrIpNetmask.Input, ['vrf_all', 'ip_addr', 'ip_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfIpAddrIpNetmask()
        return self._top_entity

class ClearBgpVersionVrfIpAddr(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Network
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfIpAddr()
        return self._top_entity

class ClearBgpVersionVrfIpPrefix(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfIpPrefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfIpPrefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-ip-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfIpPrefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_prefix
        
        	Network and masklength
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfIpPrefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-ip-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_prefix', YLeaf(YType.str, 'ip-prefix')),
            ])
            self.vrf_all = None
            self.ip_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfIpPrefix.Input, ['vrf_all', 'ip_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfIpPrefix()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiIpv4Prefix(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	Fspec IPv4 Prefix
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv4Prefix()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 mask
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiIpv4Addr(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv4Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiIpv4Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv4Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_addr
        
        	IPv4 network
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiIpv4Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv4-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_addr', YLeaf(YType.str, 'ipv4-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv4Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv4_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv4Addr()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiNetwork(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiNetwork.Input, ['vrf_all', 'afi_safi_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiNetwork()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiRdNetwork(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiRdNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiRdNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-rd-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiRdNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiRdNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-rd-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiRdNetwork.Input, ['vrf_all', 'afi_safi_name', 'rd', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiRdNetwork()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiVrfNetwork(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiVrfNetwork.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiVrfNetwork, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-vrf-network"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiVrfNetwork.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: network
        
        	Address family modifier specific network
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiVrfNetwork.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-vrf-network"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ('network', YLeaf(YType.str, 'network')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self.network = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiVrfNetwork.Input, ['vrf_all', 'afi_safi_name', 'vrf_name', 'network'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiVrfNetwork()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_netmask
        
        	IPv6 mask
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
                ('ipv6_netmask', YLeaf(YType.str, 'ipv6-netmask')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self.ipv6_netmask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr', 'ipv6_netmask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiIpv6Addr(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6Addr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiIpv6Addr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv6Addr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_addr
        
        	IPv6 network
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiIpv6Addr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv6-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_addr', YLeaf(YType.str, 'ipv6-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv6Addr.Input, ['vrf_all', 'afi_safi_name', 'ipv6_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv6Addr()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiIpv6Prefix(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 network and masklength
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiIpv6Prefix()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiRd(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes with a specific route distinguisher.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiRd.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiRd, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-rd"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiRd.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: rd
        
        	Route distinguisher
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (\\d+\:\\d+)
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiRd.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-rd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('rd', YLeaf(YType.str, 'rd')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.rd = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiRd.Input, ['vrf_all', 'afi_safi_name', 'rd'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiRd()
        return self._top_entity

class ClearBgpVersionVrfAfiSafiVrf(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    Display routes for a specified VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafiVrf.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafiVrf, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi-vrf"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafiVrf.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: vrf_name
        
        	VRF name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafiVrf.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi-vrf"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.vrf_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafiVrf.Input, ['vrf_all', 'afi_safi_name', 'vrf_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafiVrf()
        return self._top_entity

class ClearBgpVersionVrfAfiSafi(Entity):
    """
    clear BGP prefix version.
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVersionVrfAfiSafi.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVersionVrfAfiSafi, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-version-vrf-afi-safi"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVersionVrfAfiSafi.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVersionVrfAfiSafi.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-version-vrf-afi-safi"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVersionVrfAfiSafi.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVersionVrfAfiSafi()
        return self._top_entity

class ClearBgpVrfAllGraceful(Entity):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAllGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAllGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-all-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAllGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAllGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-all-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAllGraceful.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAllGraceful()
        return self._top_entity

class ClearBgpVrfAll(Entity):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAll.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAll()
        return self._top_entity

class ClearBgpVrfIpAddrGraceful(Entity):
    """
    Specify a VRF.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddrGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfIpAddrGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-ip-addr-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfIpAddrGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfIpAddrGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-ip-addr-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfIpAddrGraceful.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfIpAddrGraceful()
        return self._top_entity

class ClearBgpVrfIpAddrLongLivedStale(Entity):
    """
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfIpAddrLongLivedStale.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpVrfIpAddr(Entity):
    """
    Specify a VRF.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfIpAddr()
        return self._top_entity

class ClearBgpVrfAsGraceful(Entity):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAsGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAsGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-as-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAsGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAsGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-as-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAsGraceful.Input, ['vrf_all', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAsGraceful()
        return self._top_entity

class ClearBgpVrfAs(Entity):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAs.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAs, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-as"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAs.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAs.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-as"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.vrf_all = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAs.Input, ['vrf_all', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAs()
        return self._top_entity

class ClearBgpVrfExternalGraceful(Entity):
    """
    Specify a VRF.
    Clear all external peers.
    Clear with a hard reset and a graceful restart.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfExternalGraceful.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfExternalGraceful, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-external-graceful"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfExternalGraceful.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfExternalGraceful.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-external-graceful"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfExternalGraceful.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfExternalGraceful()
        return self._top_entity

class ClearBgpVrfExternal(Entity):
    """
    Specify a VRF.
    Clear all external peers.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfExternal.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfExternal, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-external"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfExternal.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfExternal.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-external"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfExternal.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfExternal()
        return self._top_entity

class ClearBgpVrfAfiSafiAllSoftInPrefixFilter(Entity):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAllSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoftInPrefixFilter()
        return self._top_entity

class ClearBgpVrfAfiSafiAllSoftIn(Entity):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAllSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAllSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoftIn.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoftIn()
        return self._top_entity

class ClearBgpVrfAfiSafiAllSoftOut(Entity):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAllSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAllSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoftOut.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoftOut()
        return self._top_entity

class ClearBgpVrfAfiSafiAllSoft(Entity):
    """
    Specify a VRF.
    Clear all peers and all routes from the BGP table.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAllSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAllSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-all-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAllSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAllSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-all-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAllSoft.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAllSoft()
        return self._top_entity

class ClearBgpVrfAfiSafiIpAddrLongLivedStale(Entity):
    """
    Specify a VRF.
    Clear long\-lived\-stale routes.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiIpAddrLongLivedStale, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrLongLivedStale.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrLongLivedStale()
        return self._top_entity

class ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter(Entity):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter()
        return self._top_entity

class ClearBgpVrfAfiSafiIpAddrSoftIn(Entity):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiIpAddrSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiIpAddrSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoftIn.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoftIn()
        return self._top_entity

class ClearBgpVrfAfiSafiIpAddrSoftOut(Entity):
    """
    Specify a VRF.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiIpAddrSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiIpAddrSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoftOut.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoftOut()
        return self._top_entity

class ClearBgpVrfAfiSafiIpAddrSoft(Entity):
    """
    Specify a VRF.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiIpAddrSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiIpAddrSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-ip-addr-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiIpAddrSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiIpAddrSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-ip-addr-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiIpAddrSoft.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiIpAddrSoft()
        return self._top_entity

class ClearBgpVrfAfiSafiAsSoftInPrefixFilter(Entity):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAsSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoftInPrefixFilter()
        return self._top_entity

class ClearBgpVrfAfiSafiAsSoftIn(Entity):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAsSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAsSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoftIn.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoftIn()
        return self._top_entity

class ClearBgpVrfAfiSafiAsSoftOut(Entity):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAsSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAsSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoftOut.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoftOut()
        return self._top_entity

class ClearBgpVrfAfiSafiAsSoft(Entity):
    """
    Specify a VRF.
    Clear peers in a specific AS.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiAsSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiAsSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-as-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiAsSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: as_number
        
        	AS number
        	**type**\: union of the below types:
        
        		**type**\: int
        
        			**range:** 1..65535
        
        		**type**\: str
        
        			**pattern:** (\\d+\\.\\d+)
        
        		**type**\: int
        
        			**range:** 65536..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiAsSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-as-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('as_number', YLeaf(YType.str, 'as-number')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.as_number = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiAsSoft.Input, ['vrf_all', 'afi_safi_name', 'as_number'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiAsSoft()
        return self._top_entity

class ClearBgpVrfAfiSafiDampeningIpv4Prefix(Entity):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiDampeningIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiDampeningIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiDampeningIpv4Prefix()
        return self._top_entity

class ClearBgpVrfAfiSafiDampening(Entity):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampening.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiDampening, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-dampening"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiDampening.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiDampening.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-dampening"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiDampening.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiDampening()
        return self._top_entity

class ClearBgpVrfAfiSafiExternalSoftInPrefixFilter(Entity):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    Push out prefix ORF and do inbound soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoftInPrefixFilter()
        return self._top_entity

class ClearBgpVrfAfiSafiExternalSoftIn(Entity):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig inbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftIn.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiExternalSoftIn, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft-in"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoftIn.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiExternalSoftIn.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft-in"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoftIn.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoftIn()
        return self._top_entity

class ClearBgpVrfAfiSafiExternalSoftOut(Entity):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    Soft reconfig outbound update.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoftOut.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiExternalSoftOut, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft-out"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoftOut.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiExternalSoftOut.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft-out"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoftOut.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoftOut()
        return self._top_entity

class ClearBgpVrfAfiSafiExternalSoft(Entity):
    """
    Specify a VRF.
    Clear all external peers.
    Soft reconfig.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiExternalSoft.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiExternalSoft, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-external-soft"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiExternalSoft.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiExternalSoft.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-external-soft"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiExternalSoft.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiExternalSoft()
        return self._top_entity

class ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask(Entity):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_mask
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
                ('ipv4_mask', YLeaf(YType.str, 'ipv4-mask')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self.ipv4_mask = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input, ['vrf_all', 'afi_safi_name', 'ip_addr', 'ipv4_mask'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask()
        return self._top_entity

class ClearBgpVrfAfiSafiFlapStatisticsIpAddr(Entity):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiFlapStatisticsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor address to clear
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpAddr.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpAddr()
        return self._top_entity

class ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix(Entity):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv4_prefix
        
        	IPv4 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv4_prefix', YLeaf(YType.str, 'ipv4-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv4_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv4_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix()
        return self._top_entity

class ClearBgpVrfAfiSafiFlapStatisticsRegexp(Entity):
    """
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the regular expression.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiFlapStatisticsRegexp, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-regexp"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: regexp_pattern
        
        	A regular expression to match the BGP AS paths.  Use 'ctrl\-v ?' to enter '?'
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-regexp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('regexp_pattern', YLeaf(YType.str, 'regexp-pattern')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.regexp_pattern = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsRegexp.Input, ['vrf_all', 'afi_safi_name', 'regexp_pattern'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsRegexp()
        return self._top_entity

class ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy(Entity):
    """
    Specify a VRF.
    Clear flap statistics.
    Clear flap statistics for routes matching the route policy.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: route_policy_name
        
        	Route Policy name
        	**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('route_policy_name', YLeaf(YType.str, 'route-policy-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.route_policy_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input, ['vrf_all', 'afi_safi_name', 'route_policy_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy()
        return self._top_entity

class ClearBgpVrfAfiSafiFlapStatistics(Entity):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiFlapStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiFlapStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatistics.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatistics()
        return self._top_entity

class ClearBgpVrfAfiSafiNexthopPerformanceStatistics(Entity):
    """
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiNexthopPerformanceStatistics.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpVrfAfiSafiNexthopRegistrationIpAddr(Entity):
    """
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpVrfAfiSafiSelfOriginated(Entity):
    """
    Specify a VRF.
    Clear redistributed, network and aggregate routes originated here.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiSelfOriginated.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiSelfOriginated, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-self-originated"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiSelfOriginated.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiSelfOriginated.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-self-originated"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiSelfOriginated.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiSelfOriginated()
        return self._top_entity

class ClearBgpVrfAfiSafiShutdown(Entity):
    """
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiShutdown.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiShutdown()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqAddressFamily(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqAddressFamily.Input, ['vrf_all', 'afi_safi_name'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input, ['vrf_all', 'afi_safi_name', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['vrf_all', 'afi_safi_name', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input, ['vrf_all', 'afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpVrfAfiSafiUpdateOutqUpdateGroup(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input, ['vrf_all', 'afi_safi_name', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiUpdateOutqUpdateGroup()
        return self._top_entity

class ClearBgpVrfAfiSafiDampeningIpv6Prefix(Entity):
    """
    Specify a VRF.
    Clear route flap dampening information.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiDampeningIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear dampening information
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiDampeningIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiDampeningIpv6Prefix()
        return self._top_entity

class ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix(Entity):
    """
    Specify a VRF.
    Clear flap statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: afi_safi_name
        
        	AFI and SAFI
        	**type**\:  :py:class:`AfiSafiType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.AfiSafiType>`
        
        	**mandatory**\: True
        
        .. attribute:: ipv6_prefix
        
        	IPv6 Network and mask or masklength to clear flap statistics
        	**type**\: str
        
        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('afi_safi_name', YLeaf(YType.enumeration, 'afi-safi-name')),
                ('ipv6_prefix', YLeaf(YType.str, 'ipv6-prefix')),
            ])
            self.vrf_all = None
            self.afi_safi_name = None
            self.ipv6_prefix = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input, ['vrf_all', 'afi_safi_name', 'ipv6_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix()
        return self._top_entity

class ClearBgpVrfNexthopPerformanceStatistics(Entity):
    """
    Specify a VRF.
    Clear nexthop.
    Performance statistics information related to processing.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfNexthopPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfNexthopPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-nexthop-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfNexthopPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfNexthopPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-nexthop-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfNexthopPerformanceStatistics.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfNexthopPerformanceStatistics()
        return self._top_entity

class ClearBgpVrfNexthopRegistrationIpAddr(Entity):
    """
    Specify a VRF.
    Clear nexthop.
    Registration with RIB and reregister.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfNexthopRegistrationIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfNexthopRegistrationIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-nexthop-registration-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfNexthopRegistrationIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Nexthop address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfNexthopRegistrationIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-nexthop-registration-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfNexthopRegistrationIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfNexthopRegistrationIpAddr()
        return self._top_entity

class ClearBgpVrfPeerDropsAll(Entity):
    """
    Specify a VRF.
    Clear established/dropped counters for a peer.
    All Neighbors.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPeerDropsAll.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfPeerDropsAll, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-peer-drops-all"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfPeerDropsAll.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfPeerDropsAll.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-peer-drops-all"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfPeerDropsAll.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfPeerDropsAll()
        return self._top_entity

class ClearBgpVrfPeerDropsIpAddr(Entity):
    """
    Specify a VRF.
    Clear established/dropped counters for a peer.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPeerDropsIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfPeerDropsIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-peer-drops-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfPeerDropsIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	BGP neighbor IP address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfPeerDropsIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-peer-drops-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfPeerDropsIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfPeerDropsIpAddr()
        return self._top_entity

class ClearBgpVrfPerformanceStatistics(Entity):
    """
    Specify a VRF.
    Clear performance statistics.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfPerformanceStatistics.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfPerformanceStatistics, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-performance-statistics"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfPerformanceStatistics.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfPerformanceStatistics.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-performance-statistics"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfPerformanceStatistics.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfPerformanceStatistics()
        return self._top_entity

class ClearBgpVrfShutdown(Entity):
    """
    Specify a VRF.
    Clear all peers which were shut down due to low memory.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfShutdown.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfShutdown, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-shutdown"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfShutdown.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfShutdown.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-shutdown"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfShutdown.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfShutdown()
        return self._top_entity

class ClearBgpVrfUpdateOutqAddressFamilyUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-address-family-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-address-family-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqAddressFamilyUpdateParent()
        return self._top_entity

class ClearBgpVrfUpdateOutqAddressFamily(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Address\-family.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqAddressFamily.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqAddressFamily, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-address-family"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqAddressFamily.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqAddressFamily.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-address-family"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
            ])
            self.vrf_all = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqAddressFamily.Input, ['vrf_all'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqAddressFamily()
        return self._top_entity

class ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent()
        return self._top_entity

class ClearBgpVrfUpdateOutqNeighborIpAddrRefresh(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Refresh OutQ.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddrRefresh()
        return self._top_entity

class ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent()
        return self._top_entity

class ClearBgpVrfUpdateOutqNeighborIpAddr(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Neighbor.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqNeighborIpAddr.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqNeighborIpAddr, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqNeighborIpAddr.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: ip_addr
        
        	Neighbor address
        	**type**\: union of the below types:
        
        		**type**\: str
        
        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
        
        		**type**\: str
        
        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqNeighborIpAddr.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-neighbor-ip-addr"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('ip_addr', YLeaf(YType.str, 'ip-addr')),
            ])
            self.vrf_all = None
            self.ip_addr = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqNeighborIpAddr.Input, ['vrf_all', 'ip_addr'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqNeighborIpAddr()
        return self._top_entity

class ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input, ['vrf_all', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent()
        return self._top_entity

class ClearBgpVrfUpdateOutqUpdateGroupSubGroup(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqUpdateGroupSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: sub_group
        
        	Sub\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('sub_group', YLeaf(YType.str, 'sub-group')),
            ])
            self.vrf_all = None
            self.update_group = None
            self.sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroup.Input, ['vrf_all', 'update_group', 'sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroup()
        return self._top_entity

class ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input, ['vrf_all', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent()
        return self._top_entity

class ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Sub\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        .. attribute:: refresh_sub_group
        
        	Refresh Sub\-group process ID <x.y\:z>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)(\:\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
                ('refresh_sub_group', YLeaf(YType.str, 'refresh-sub-group')),
            ])
            self.vrf_all = None
            self.update_group = None
            self.refresh_sub_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input, ['vrf_all', 'update_group', 'refresh_sub_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup()
        return self._top_entity

class ClearBgpVrfUpdateOutqUpdateGroupUpdateParent(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    Update parents' OutQ counters too.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group-update-parent"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group-update-parent"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input, ['vrf_all', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroupUpdateParent()
        return self._top_entity

class ClearBgpVrfUpdateOutqUpdateGroup(Entity):
    """
    Specify a VRF.
    Clear Update information (Do NOT execute without cisco support)(cisco\-support).
    Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco\-support).
    Update\-group.
    
    
    .. attribute:: input
    
    	
    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.ClearBgpVrfUpdateOutqUpdateGroup.Input>`
    
    

    """

    _prefix = 'bgp-act'
    _revision = '2016-10-12'

    def __init__(self):
        super(ClearBgpVrfUpdateOutqUpdateGroup, self).__init__()
        self._top_entity = None

        self.yang_name = "clear-bgp-vrf-update-outq-update-group"
        self.yang_parent_name = "Cisco-IOS-XR-ipv4-bgp-act"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.input = ClearBgpVrfUpdateOutqUpdateGroup.Input()
        self.input.parent = self
        self._children_name_map["input"] = "input"
        self._children_yang_names.add("input")
        self._segment_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group"


    class Input(Entity):
        """
        
        
        .. attribute:: vrf_all
        
        	VRF name or all
        	**type**\: union of the below types:
        
        		**type**\:  :py:class:`VrfName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_act.VrfName>`
        
        		**type**\: str
        
        	**mandatory**\: True
        
        .. attribute:: update_group
        
        	Update\-group process ID <x.y>
        	**type**\: str
        
        	**pattern:** (([0\-9]\|1[0\-5])\\.\\d+)
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'bgp-act'
        _revision = '2016-10-12'

        def __init__(self):
            super(ClearBgpVrfUpdateOutqUpdateGroup.Input, self).__init__()

            self.yang_name = "input"
            self.yang_parent_name = "clear-bgp-vrf-update-outq-update-group"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('vrf_all', YLeaf(YType.str, 'vrf-all')),
                ('update_group', YLeaf(YType.str, 'update-group')),
            ])
            self.vrf_all = None
            self.update_group = None
            self._segment_path = lambda: "input"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(ClearBgpVrfUpdateOutqUpdateGroup.Input, ['vrf_all', 'update_group'], name, value)

    def clone_ptr(self):
        self._top_entity = ClearBgpVrfUpdateOutqUpdateGroup()
        return self._top_entity

