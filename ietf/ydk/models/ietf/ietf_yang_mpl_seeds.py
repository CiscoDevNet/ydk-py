""" ietf_yang_mpl_seeds 

This module contains information about the operation
of the MPL protocol.

Copyright (c) 2016 IETF Trust and the persons identified as
authors of the code.  All rights reserved.

Redistribution and use in source and binary forms, with or

without modification, is permitted pursuant to, and subject
to the license terms contained in, the Simplified BSD License
set forth in Section 4.c of the IETF Trust's Legal Provisions
Relating to IETF Documents
(http\://trustee.ietf.org/license\-info).

This version of this YANG module is part of RFC XXXX; see
the RFC itself for full legal notices.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError




class MplSeeds(object):
    """
    List describes all seeds that are active in the server.
    Seed information contains the message buffer contents and the
    operational values of I, c, sequence number and the life\-times
    per message.
    
    .. attribute:: domainid  <key>
    
    	together with seedID uniquely identifies buffer set
    	**type**\:  int
    
    	**range:** 0..65535
    
    .. attribute:: seedid  <key>
    
    	value uniquely identifies the MPL Seed within a MPL domain
    	**type**\:  int
    
    	**range:** 0..18446744073709551615
    
    .. attribute:: buffered_messages
    
    	 status of trickle intervals of the buffered message identified by seqno. and seed/domain
    	**type**\: list of    :py:class:`BufferedMessages <ydk.models.ietf.ietf_yang_mpl_seeds.MplSeeds.BufferedMessages>`
    
    .. attribute:: control_number
    
    	Number of currently buffered control messages
    	**type**\:  int
    
    	**range:** 0..255
    
    .. attribute:: data_number
    
    	Number of currently buffered data messages
    	**type**\:  int
    
    	**range:** 0..255
    
    .. attribute:: generate_seqno
    
    	Sequence number of next message to be generated by this local seed
    	**type**\:  int
    
    	**range:** 0..255
    
    .. attribute:: life_time
    
    	 Minimum remaining lifetime of the seed entry in SE\_LIFETIME units
    	**type**\:  int
    
    	**range:** 0..18446744073709551615
    
    .. attribute:: local
    
    	When local == TRUE, seed is located in this forwarder. WHEN local == false, seed is located in different forwarder
    	**type**\:  bool
    
    .. attribute:: min_seqno
    
    	Lower bound sequence number in the buffer of the seed
    	**type**\:  int
    
    	**range:** 0..255
    
    

    """

    _prefix = 'mpl'
    _revision = '2016-10-25'

    def __init__(self):
        self.domainid = None
        self.seedid = None
        self.buffered_messages = YList()
        self.buffered_messages.parent = self
        self.buffered_messages.name = 'buffered_messages'
        self.control_number = None
        self.data_number = None
        self.generate_seqno = None
        self.life_time = None
        self.local = None
        self.min_seqno = None


    class BufferedMessages(object):
        """
         status of trickle intervals of the buffered message
        identified by seqno. and seed/domain
        
        .. attribute:: seqno  <key>
        
        	Sequence number of message
        	**type**\:  int
        
        	**range:** 0..255
        
        .. attribute:: c
        
        	number of times that copy of this message has been received in this interval
        	**type**\:  int
        
        	**range:** 0..255
        
        .. attribute:: e
        
        	number of Trickle time expirations since last Trickle timer reset
        	**type**\:  int
        
        	**range:** 0..255
        
        .. attribute:: i
        
        	Current Trickle timer interval size in SE\-LIFETIME units
        	**type**\:  int
        
        	**range:** 0..255
        
        .. attribute:: t
        
        	 Time expressed in SE\-LIFETIME units that message will be (is) forwarded
        	**type**\:  int
        
        	**range:** 0..255
        
        

        """

        _prefix = 'mpl'
        _revision = '2016-10-25'

        def __init__(self):
            self.parent = None
            self.seqno = None
            self.c = None
            self.e = None
            self.i = None
            self.t = None

        @property
        def _common_path(self):
            if self.parent is None:
                raise YPYModelError('parent is not set . Cannot derive path.')
            if self.seqno is None:
                raise YPYModelError('Key property seqno is None')

            return self.parent._common_path +'/ietf-yang-mpl-seeds:buffered-messages[ietf-yang-mpl-seeds:seqno = ' + str(self.seqno) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.seqno is not None:
                return True

            if self.c is not None:
                return True

            if self.e is not None:
                return True

            if self.i is not None:
                return True

            if self.t is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_yang_mpl_seeds as meta
            return meta._meta_table['MplSeeds.BufferedMessages']['meta_info']

    @property
    def _common_path(self):
        if self.domainid is None:
            raise YPYModelError('Key property domainid is None')
        if self.seedid is None:
            raise YPYModelError('Key property seedid is None')

        return '/ietf-yang-mpl-seeds:mpl-seeds[ietf-yang-mpl-seeds:domainID = ' + str(self.domainid) + '][ietf-yang-mpl-seeds:seedID = ' + str(self.seedid) + ']'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.domainid is not None:
            return True

        if self.seedid is not None:
            return True

        if self.buffered_messages is not None:
            for child_ref in self.buffered_messages:
                if child_ref._has_data():
                    return True

        if self.control_number is not None:
            return True

        if self.data_number is not None:
            return True

        if self.generate_seqno is not None:
            return True

        if self.life_time is not None:
            return True

        if self.local is not None:
            return True

        if self.min_seqno is not None:
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_yang_mpl_seeds as meta
        return meta._meta_table['MplSeeds']['meta_info']


